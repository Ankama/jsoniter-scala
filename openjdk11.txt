[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt,release.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed 12 лип. 2018 8:59:55
[info] Updating jsoniter-scala-core...
[info] Done updating.
[info] Updating jsoniter-scala-macros...
[info] Done updating.
[info] Updating jsoniter-scala-benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/target/scala-2.12/classes ...
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:991:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1077:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:8:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]     private static final sun.misc.Unsafe UNSAFE;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:13:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]         sun.misc.Unsafe u = null;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:16:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             Field f = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:18:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             u = (sun.misc.Unsafe) f.get(null);
[info] Done compiling.
[info] Compiling 1 Scala source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-macros/target/scala-2.12/classes ...
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-core/target/scala-2.12/jsoniter-scala-core_2.12-0.29.3-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-macros/target/scala-2.12/jsoniter-scala-macros_2.12-0.29.3-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(1))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0.&(1))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = c0;
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d6(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: scala.collection.immutable.IndexedSeq[(Double, Double)]): scala.collection.immutable.IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d6(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[(Double, Double)] = c1;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[(Double, Double)] = c1;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0.&(1))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]): scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[scala.collection.immutable.IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d5(in, c1))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]] = c2;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]]): scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d10(in, c2))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]] = c3;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d12(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]] = c2;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d10(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = c4;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d15(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d7(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d8(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d11(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = c0;
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(2))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = c5;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e6(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: scala.collection.immutable.IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e6(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e10(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e12(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e10(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e15(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e7(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e8(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e11(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e14(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]       private[this] val c1: scala.collection.immutable.IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]       private[this] val c2: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]] = IndexedSeq.empty[scala.collection.immutable.IndexedSeq[(Double, Double)]];
[info]       private[this] val c3: scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[scala.collection.immutable.IndexedSeq[scala.collection.immutable.IndexedSeq[(Double, Double)]]];
[info]       private[this] val c4: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]       private[this] val c5: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = new scala.collection.mutable.ListBuffer[Boolean]();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.toList
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: List[Boolean] = List.empty[Boolean]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = c0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.BitSet = BitSet.empty
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = c0;
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IndexedSeq[String]): scala.collection.immutable.IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0.&(7))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = c2;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: scala.collection.immutable.IndexedSeq[String] = c0;
[info]           var _origin_addresses: scala.collection.immutable.IndexedSeq[String] = c0;
[info]           var _rows: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = c1;
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(8))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       };
[info]       private[this] val c0: scala.collection.immutable.IndexedSeq[String] = IndexedSeq.empty[String];
[info]       private[this] val c1: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]       private[this] val c2: scala.collection.immutable.IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = c0;
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(255))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Set[Int] = Set.empty[Int]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:78: Generated JSON codec for type 'scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = c0;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.Seq[String]): scala.collection.immutable.Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: scala.collection.immutable.Seq[Int]): scala.collection.immutable.Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: scala.collection.immutable.Seq[Int] = c4;
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0.&(15))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: scala.collection.immutable.Seq[Int] = c4;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0.&(7))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: scala.collection.immutable.Seq[String] = c1;
[info]           var _symbols: scala.collection.immutable.Seq[String] = c1;
[info]           var _user_mentions: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = c2;
[info]           var _urls: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = c3;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = c3;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0.&(3))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0.&(-1))))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1.&(1023)).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0.&(16650367))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0.&(33427583))))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: scala.collection.immutable.Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: scala.collection.immutable.Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       };
[info]       private[this] val c0: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       private[this] val c1: scala.collection.immutable.Seq[String] = Seq.empty[String];
[info]       private[this] val c2: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]       private[this] val c3: scala.collection.immutable.Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]       private[this] val c4: scala.collection.immutable.Seq[Int] = Seq.empty[Int]
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:40:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:47:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 63 warnings found
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/jsoniter-scala-benchmark_2.12-0.29.3-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/src_managed/jmh and resources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 693 Java sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/jsoniter-scala-benchmark_2.12-0.29.3-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/jsoniter-scala-benchmark/target/scala-2.12/jsoniter-scala-benchmark_2.12-0.29.3-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/openjdk-11/bin/java -prof gc -rf json -rff openjdk11.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0,00% complete, ETA 01:22:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256065,289 ops/s
[info] # Warmup Iteration   2: 824638,421 ops/s
[info] # Warmup Iteration   3: 830415,286 ops/s
[info] # Warmup Iteration   4: 830758,751 ops/s
[info] # Warmup Iteration   5: 826444,536 ops/s
[info] Iteration   1: 828903,933 ops/s
[info]                  ·gc.alloc.rate:                   2131,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3827,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,119 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 831516,434 ops/s
[info]                  ·gc.alloc.rate:                   2138,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3821,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 831233,094 ops/s
[info]                  ·gc.alloc.rate:                   2137,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3828,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 824627,658 ops/s
[info]                  ·gc.alloc.rate:                   2121,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3866,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 805790,152 ops/s
[info]                  ·gc.alloc.rate:                   2073,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              4048,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5284,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   824414,254 ±(99.9%) 41472,592 ops/s [Average]
[info]   (min, avg, max) = (805790,152, 824414,254, 831516,434), stdev = 10770,300
[info]   CI (99.9%): [782941,662, 865886,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2120,481 ±(99.9%) 105,706 MB/sec [Average]
[info]   (min, avg, max) = (2073,008, 2120,481, 2138,600), stdev = 27,452
[info]   CI (99.9%): [2014,775, 2226,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4048,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4048,000, 4048,001, 4048,001), stdev = 0,001
[info]   CI (99.9%): [4048,000, 4048,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2157,865 ±(99.9%) 1180,682 MB/sec [Average]
[info]   (min, avg, max) = (2015,812, 2157,865, 2706,320), stdev = 306,619
[info]   CI (99.9%): [977,183, 3338,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4125,896 ±(99.9%) 2495,318 B/op [Average]
[info]   (min, avg, max) = (3821,573, 4125,896, 5284,681), stdev = 648,026
[info]   CI (99.9%): [1630,578, 6621,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,071 ±(99.9%) 0,166 B/op [Average]
[info]   (min, avg, max) = (0,039, 0,071, 0,119), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0,20% complete, ETA 02:11:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 647893,870 ops/s
[info] # Warmup Iteration   2: 1799207,375 ops/s
[info] # Warmup Iteration   3: 1806506,479 ops/s
[info] # Warmup Iteration   4: 1791087,667 ops/s
[info] # Warmup Iteration   5: 1780561,455 ops/s
[info] Iteration   1: 1789963,103 ops/s
[info]                  ·gc.alloc.rate:               1191,815 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 593,891 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1790803,191 ops/s
[info]                  ·gc.alloc.rate:                   1192,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1187,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1776688,619 ops/s
[info]                  ·gc.alloc.rate:                   1183,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1198,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1786370,740 ops/s
[info]                  ·gc.alloc.rate:                   1189,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1193,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1793738,931 ops/s
[info]                  ·gc.alloc.rate:               1194,289 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 594,378 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1787512,917 ±(99.9%) 25401,306 ops/s [Average]
[info]   (min, avg, max) = (1776688,619, 1787512,917, 1793738,931), stdev = 6596,639
[info]   CI (99.9%): [1762111,610, 1812914,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1190,238 ±(99.9%) 16,851 MB/sec [Average]
[info]   (min, avg, max) = (1183,026, 1190,238, 1194,289), stdev = 4,376
[info]   CI (99.9%): [1173,387, 1207,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,295 ±(99.9%) 1426,899 MB/sec [Average]
[info]   (min, avg, max) = (675,389, 1082,295, 1354,167), stdev = 370,561
[info]   CI (99.9%): [≈ 0, 2509,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   953,532 ±(99.9%) 1263,414 B/op [Average]
[info]   (min, avg, max) = (593,891, 953,532, 1198,433), stdev = 328,105
[info]   CI (99.9%): [≈ 0, 2216,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,029 ±(99.9%) 0,107 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,055), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0,40% complete, ETA 02:11:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2900889,694 ops/s
[info] # Warmup Iteration   2: 4129017,107 ops/s
[info] # Warmup Iteration   3: 4095564,570 ops/s
[info] # Warmup Iteration   4: 3887936,796 ops/s
[info] # Warmup Iteration   5: 4108803,924 ops/s
[info] Iteration   1: 4098018,845 ops/s
[info]                  ·gc.alloc.rate:               270,750 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 196,464 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 4129086,781 ops/s
[info]                  ·gc.alloc.rate:      272,869 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4114224,668 ops/s
[info]                  ·gc.alloc.rate:                   271,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4115784,485 ops/s
[info]                  ·gc.alloc.rate:      271,988 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4106743,148 ops/s
[info]                  ·gc.alloc.rate:               271,305 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 196,047 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4112771,585 ±(99.9%) 44381,074 ops/s [Average]
[info]   (min, avg, max) = (4098018,845, 4112771,585, 4129086,781), stdev = 11525,624
[info]   CI (99.9%): [4068390,511, 4157152,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   271,753 ±(99.9%) 3,054 MB/sec [Average]
[info]   (min, avg, max) = (270,750, 271,753, 272,869), stdev = 0,793
[info]   CI (99.9%): [268,699, 274,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,000, 104,000, 104,000), stdev = 0,001
[info]   CI (99.9%): [104,000, 104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,884 ±(99.9%) 1078,742 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,884, 511,529), stdev = 280,146
[info]   CI (99.9%): [≈ 0, 1385,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   117,640 ±(99.9%) 413,523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 117,640, 196,464), stdev = 107,391
[info]   CI (99.9%): [≈ 0, 531,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,016), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,006), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0,60% complete, ETA 02:10:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65675,850 ops/s
[info] # Warmup Iteration   2: 193503,118 ops/s
[info] # Warmup Iteration   3: 195214,192 ops/s
[info] # Warmup Iteration   4: 194355,201 ops/s
[info] # Warmup Iteration   5: 195146,890 ops/s
[info] Iteration   1: 195075,025 ops/s
[info]                  ·gc.alloc.rate:                   1629,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16369,138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 193949,503 ops/s
[info]                  ·gc.alloc.rate:                   1619,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10986,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,338 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 195008,629 ops/s
[info]                  ·gc.alloc.rate:                   1628,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16405,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,504 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 187797,118 ops/s
[info]                  ·gc.alloc.rate:                   1568,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11366,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,174 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 192131,977 ops/s
[info]                  ·gc.alloc.rate:               1604,576 MB/sec
[info]                  ·gc.alloc.rate.norm:          13144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11120,698 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   192792,450 ±(99.9%) 11687,503 ops/s [Average]
[info]   (min, avg, max) = (187797,118, 192792,450, 195075,025), stdev = 3035,207
[info]   CI (99.9%): [181104,948, 204479,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1610,091 ±(99.9%) 97,240 MB/sec [Average]
[info]   (min, avg, max) = (1568,527, 1610,091, 1629,078), stdev = 25,253
[info]   CI (99.9%): [1512,851, 1707,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13144,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13144,002, 13144,002, 13144,002), stdev = 0,001
[info]   CI (99.9%): [13144,002, 13144,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1625,842 ±(99.9%) 1423,107 MB/sec [Average]
[info]   (min, avg, max) = (1353,877, 1625,842, 2032,572), stdev = 369,576
[info]   CI (99.9%): [202,735, 3048,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13249,566 ±(99.9%) 11042,235 B/op [Average]
[info]   (min, avg, max) = (10986,235, 13249,566, 16405,505), stdev = 2867,633
[info]   CI (99.9%): [2207,331, 24291,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,237 ±(99.9%) 0,736 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,237, 0,504), stdev = 0,191
[info]   CI (99.9%): [≈ 0, 0,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0,80% complete, ETA 02:10:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343041,120 ops/s
[info] # Warmup Iteration   2: 639242,783 ops/s
[info] # Warmup Iteration   3: 627267,443 ops/s
[info] # Warmup Iteration   4: 644281,120 ops/s
[info] # Warmup Iteration   5: 642502,820 ops/s
[info] Iteration   1: 641022,833 ops/s
[info]                  ·gc.alloc.rate:                   1889,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4947,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 646153,271 ops/s
[info]                  ·gc.alloc.rate:                   1905,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3275,999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 650621,405 ops/s
[info]                  ·gc.alloc.rate:                   1917,957 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4885,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 647913,944 ops/s
[info]                  ·gc.alloc.rate:                   1910,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4916,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,152 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 642160,137 ops/s
[info]                  ·gc.alloc.rate:                   1893,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4966,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   645574,318 ±(99.9%) 15360,977 ops/s [Average]
[info]   (min, avg, max) = (641022,833, 645574,318, 650621,405), stdev = 3989,197
[info]   CI (99.9%): [630213,341, 660935,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1903,206 ±(99.9%) 45,422 MB/sec [Average]
[info]   (min, avg, max) = (1889,707, 1903,206, 1917,957), stdev = 11,796
[info]   CI (99.9%): [1857,784, 1948,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4640,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4640,001, 4640,001, 4640,001), stdev = 0,001
[info]   CI (99.9%): [4640,001, 4640,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1885,978 ±(99.9%) 1164,464 MB/sec [Average]
[info]   (min, avg, max) = (1345,073, 1885,978, 2026,393), stdev = 302,408
[info]   CI (99.9%): [721,514, 3050,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4598,474 ±(99.9%) 2849,208 B/op [Average]
[info]   (min, avg, max) = (3275,999, 4598,474, 4966,912), stdev = 739,930
[info]   CI (99.9%): [1749,266, 7447,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,102 ±(99.9%) 0,138 B/op [Average]
[info]   (min, avg, max) = (0,050, 0,102, 0,152), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1,01% complete, ETA 02:10:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_435ee987/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1012952,683 ops/s
[info] # Warmup Iteration   2: 2217329,594 ops/s
[info] # Warmup Iteration   3: 2218329,595 ops/s
[info] # Warmup Iteration   4: 2214650,456 ops/s
[info] # Warmup Iteration   5: 2208728,200 ops/s
[info] Iteration   1: 2190452,243 ops/s
[info]                  ·gc.alloc.rate:                   779,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     484,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2187662,338 ops/s
[info]                  ·gc.alloc.rate:               778,421 MB/sec
[info]                  ·gc.alloc.rate.norm:          560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 485,482 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 2163408,724 ops/s
[info]                  ·gc.alloc.rate:               769,746 MB/sec
[info]                  ·gc.alloc.rate.norm:          560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 490,878 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2181878,982 ops/s
[info]                  ·gc.alloc.rate:                   776,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     973,913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2184316,121 ops/s
[info]                  ·gc.alloc.rate:               777,114 MB/sec
[info]                  ·gc.alloc.rate.norm:          560,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 486,897 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2181543,682 ±(99.9%) 40999,683 ops/s [Average]
[info]   (min, avg, max) = (2163408,724, 2181543,682, 2190452,243), stdev = 10647,488
[info]   CI (99.9%): [2140543,998, 2222543,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   776,200 ±(99.9%) 14,582 MB/sec [Average]
[info]   (min, avg, max) = (769,746, 776,200, 779,349), stdev = 3,787
[info]   CI (99.9%): [761,617, 790,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   560,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (560,000, 560,000, 560,000), stdev = 0,001
[info]   CI (99.9%): [560,000, 560,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   809,898 ±(99.9%) 1163,054 MB/sec [Average]
[info]   (min, avg, max) = (674,045, 809,898, 1350,205), stdev = 302,042
[info]   CI (99.9%): [≈ 0, 1972,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   584,301 ±(99.9%) 838,723 B/op [Average]
[info]   (min, avg, max) = (484,334, 584,301, 973,913), stdev = 217,814
[info]   CI (99.9%): [≈ 0, 1423,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,045), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1,21% complete, ETA 02:10:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11404834,060 ops/s
[info] # Warmup Iteration   2: 15758186,307 ops/s
[info] # Warmup Iteration   3: 15768915,185 ops/s
[info] # Warmup Iteration   4: 15738779,701 ops/s
[info] # Warmup Iteration   5: 16075452,415 ops/s
[info] Iteration   1: 16243913,737 ops/s
[info]                  ·gc.alloc.rate:                   825,564 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65,380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 16268142,842 ops/s
[info]                  ·gc.alloc.rate:               826,942 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 65,091 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 15505386,465 ops/s
[info]                  ·gc.alloc.rate:               788,190 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68,295 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 15115688,766 ops/s
[info]                  ·gc.alloc.rate:                   768,354 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139,959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15435535,827 ops/s
[info]                  ·gc.alloc.rate:               784,466 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68,531 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   15713733,527 ±(99.9%) 1988700,778 ops/s [Average]
[info]   (min, avg, max) = (15115688,766, 15713733,527, 16268142,842), stdev = 516459,277
[info]   CI (99.9%): [13725032,749, 17702434,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   798,703 ±(99.9%) 101,024 MB/sec [Average]
[info]   (min, avg, max) = (768,354, 798,703, 826,942), stdev = 26,236
[info]   CI (99.9%): [697,679, 899,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,323 ±(99.9%) 1155,726 MB/sec [Average]
[info]   (min, avg, max) = (671,998, 807,323, 1344,224), stdev = 300,138
[info]   CI (99.9%): [≈ 0, 1963,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81,451 ±(99.9%) 126,092 B/op [Average]
[info]   (min, avg, max) = (65,091, 81,451, 139,959), stdev = 32,746
[info]   CI (99.9%): [≈ 0, 207,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,008), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1,41% complete, ETA 02:09:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13458285,498 ops/s
[info] # Warmup Iteration   2: 8553051,801 ops/s
[info] # Warmup Iteration   3: 9476183,994 ops/s
[info] # Warmup Iteration   4: 9295385,691 ops/s
[info] # Warmup Iteration   5: 9457276,482 ops/s
[info] Iteration   1: 9450509,098 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9449147,904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8792668,034 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9462818,870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9437789,490 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   9318586,679 ±(99.9%) 1132594,132 ops/s [Average]
[info]   (min, avg, max) = (8792668,034, 9318586,679, 9462818,870), stdev = 294131,099
[info]   CI (99.9%): [8185992,548, 10451180,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1,61% complete, ETA 02:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129182,356 ops/s
[info] # Warmup Iteration   2: 352939,491 ops/s
[info] # Warmup Iteration   3: 354165,196 ops/s
[info] # Warmup Iteration   4: 355240,948 ops/s
[info] # Warmup Iteration   5: 354997,248 ops/s
[info] Iteration   1: 353137,766 ops/s
[info]                  ·gc.alloc.rate:                   1152,303 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6018,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 352923,544 ops/s
[info]                  ·gc.alloc.rate:                   1151,819 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6027,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 354916,436 ops/s
[info]                  ·gc.alloc.rate:               1158,073 MB/sec
[info]                  ·gc.alloc.rate.norm:          5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2998,100 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 352426,127 ops/s
[info]                  ·gc.alloc.rate:                   1150,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6044,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 347216,613 ops/s
[info]                  ·gc.alloc.rate:                   1132,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6138,415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   352124,097 ±(99.9%) 11166,605 ops/s [Average]
[info]   (min, avg, max) = (347216,613, 352124,097, 354916,436), stdev = 2899,932
[info]   CI (99.9%): [340957,492, 363290,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1149,010 ±(99.9%) 36,901 MB/sec [Average]
[info]   (min, avg, max) = (1132,724, 1149,010, 1158,073), stdev = 9,583
[info]   CI (99.9%): [1112,108, 1185,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5136,001, 5136,001, 5136,001), stdev = 0,001
[info]   CI (99.9%): [5136,001, 5136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1217,070 ±(99.9%) 1164,672 MB/sec [Average]
[info]   (min, avg, max) = (676,016, 1217,070, 1353,803), stdev = 302,462
[info]   CI (99.9%): [52,398, 2381,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5445,321 ±(99.9%) 5271,053 B/op [Average]
[info]   (min, avg, max) = (2998,100, 5445,321, 6138,415), stdev = 1368,876
[info]   CI (99.9%): [174,269, 10716,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,130 ±(99.9%) 0,319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,130, 0,186), stdev = 0,083
[info]   CI (99.9%): [≈ 0, 0,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1,81% complete, ETA 02:09:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1130840,534 ops/s
[info] # Warmup Iteration   2: 1917037,933 ops/s
[info] # Warmup Iteration   3: 1930280,695 ops/s
[info] # Warmup Iteration   4: 1935705,976 ops/s
[info] # Warmup Iteration   5: 1929065,987 ops/s
[info] Iteration   1: 1931952,159 ops/s
[info]                  ·gc.alloc.rate:                   2995,049 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2199,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1933584,063 ops/s
[info]                  ·gc.alloc.rate:                   2997,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2202,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1936290,123 ops/s
[info]                  ·gc.alloc.rate:                   3001,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,243 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2754,975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1938053,744 ops/s
[info]                  ·gc.alloc.rate:                   3004,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2205,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1906106,894 ops/s
[info]                  ·gc.alloc.rate:                   2954,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2806,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1929197,397 ±(99.9%) 50528,039 ops/s [Average]
[info]   (min, avg, max) = (1906106,894, 1929197,397, 1938053,744), stdev = 13121,971
[info]   CI (99.9%): [1878669,358, 1979725,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2990,720 ±(99.9%) 78,759 MB/sec [Average]
[info]   (min, avg, max) = (2954,738, 2990,720, 3004,610), stdev = 20,453
[info]   CI (99.9%): [2911,961, 3069,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2440,000, 2440,000, 2440,000), stdev = 0,001
[info]   CI (99.9%): [2440,000, 2440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2981,574 ±(99.9%) 1448,620 MB/sec [Average]
[info]   (min, avg, max) = (2699,644, 2981,574, 3398,002), stdev = 376,202
[info]   CI (99.9%): [1532,954, 4430,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2433,581 ±(99.9%) 1221,508 B/op [Average]
[info]   (min, avg, max) = (2199,341, 2433,581, 2806,044), stdev = 317,222
[info]   CI (99.9%): [1212,074, 3655,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,034 ±(99.9%) 0,046 B/op [Average]
[info]   (min, avg, max) = (0,017, 0,034, 0,051), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2,01% complete, ETA 02:08:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1027443,365 ops/s
[info] # Warmup Iteration   2: 10800679,070 ops/s
[info] # Warmup Iteration   3: 10814298,587 ops/s
[info] # Warmup Iteration   4: 10919220,143 ops/s
[info] # Warmup Iteration   5: 11052702,684 ops/s
[info] Iteration   1: 11075609,300 ops/s
[info]                  ·gc.alloc.rate:                   1351,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,196 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11021776,066 ops/s
[info]                  ·gc.alloc.rate:                   1344,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     191,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 10961635,396 ops/s
[info]                  ·gc.alloc.rate:               1337,141 MB/sec
[info]                  ·gc.alloc.rate.norm:          192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 193,099 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 11032113,151 ops/s
[info]                  ·gc.alloc.rate:                   1345,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     192,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11011634,802 ops/s
[info]                  ·gc.alloc.rate:               1343,181 MB/sec
[info]                  ·gc.alloc.rate.norm:          192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 192,598 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   11020553,743 ±(99.9%) 157795,933 ops/s [Average]
[info]   (min, avg, max) = (10961635,396, 11020553,743, 11075609,300), stdev = 40979,103
[info]   CI (99.9%): [10862757,810, 11178349,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1344,383 ±(99.9%) 19,444 MB/sec [Average]
[info]   (min, avg, max) = (1337,141, 1344,383, 1351,149), stdev = 5,050
[info]   CI (99.9%): [1324,939, 1363,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,000, 192,000, 192,000), stdev = 0,001
[info]   CI (99.9%): [192,000, 192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1345,371 ±(99.9%) 5,355 MB/sec [Average]
[info]   (min, avg, max) = (1344,196, 1345,371, 1347,366), stdev = 1,391
[info]   CI (99.9%): [1340,016, 1350,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   192,143 ±(99.9%) 3,010 B/op [Average]
[info]   (min, avg, max) = (191,012, 192,143, 193,099), stdev = 0,782
[info]   CI (99.9%): [189,133, 195,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,009), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2,21% complete, ETA 02:08:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1254335,948 ops/s
[info] # Warmup Iteration   2: 2865993,544 ops/s
[info] # Warmup Iteration   3: 2901457,843 ops/s
[info] # Warmup Iteration   4: 2869404,513 ops/s
[info] # Warmup Iteration   5: 2794716,241 ops/s
[info] Iteration   1: 2878776,158 ops/s
[info]                  ·gc.alloc.rate:                   1887,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1110,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2897703,621 ops/s
[info]                  ·gc.alloc.rate:                   1900,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,275 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1104,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2885212,401 ops/s
[info]                  ·gc.alloc.rate:                   1891,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1110,065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2884674,422 ops/s
[info]                  ·gc.alloc.rate:                   1891,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     740,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2894097,822 ops/s
[info]                  ·gc.alloc.rate:                   1897,423 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1108,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2888092,885 ±(99.9%) 29527,811 ops/s [Average]
[info]   (min, avg, max) = (2878776,158, 2888092,885, 2897703,621), stdev = 7668,279
[info]   CI (99.9%): [2858565,074, 2917620,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1893,730 ±(99.9%) 19,410 MB/sec [Average]
[info]   (min, avg, max) = (1887,657, 1893,730, 1900,252), stdev = 5,041
[info]   CI (99.9%): [1874,320, 1913,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1032,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1032,000, 1032,000, 1032,000), stdev = 0,001
[info]   CI (99.9%): [1032,000, 1032,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1898,902 ±(99.9%) 1164,520 MB/sec [Average]
[info]   (min, avg, max) = (1357,931, 1898,902, 2037,622), stdev = 302,422
[info]   CI (99.9%): [734,383, 3063,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1034,743 ±(99.9%) 632,752 B/op [Average]
[info]   (min, avg, max) = (740,824, 1034,743, 1110,329), stdev = 164,324
[info]   CI (99.9%): [401,991, 1667,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,039 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,027, 0,034), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2,41% complete, ETA 02:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9425990,921 ops/s
[info] # Warmup Iteration   2: 11135094,804 ops/s
[info] # Warmup Iteration   3: 11429436,906 ops/s
[info] # Warmup Iteration   4: 11490708,489 ops/s
[info] # Warmup Iteration   5: 11459528,608 ops/s
[info] Iteration   1: 11410489,704 ops/s
[info]                  ·gc.alloc.rate:                   1449,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11485464,169 ops/s
[info]                  ·gc.alloc.rate:                   1459,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11474862,764 ops/s
[info]                  ·gc.alloc.rate:                   1458,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11415080,980 ops/s
[info]                  ·gc.alloc.rate:                   1451,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 11156784,383 ops/s
[info]                  ·gc.alloc.rate:                   1417,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     190,201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11388536,400 ±(99.9%) 515694,509 ops/s [Average]
[info]   (min, avg, max) = (11156784,383, 11388536,400, 11485464,169), stdev = 133924,226
[info]   CI (99.9%): [10872841,892, 11904230,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1447,288 ±(99.9%) 65,742 MB/sec [Average]
[info]   (min, avg, max) = (1417,710, 1447,288, 1459,657), stdev = 17,073
[info]   CI (99.9%): [1381,546, 1513,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (200,000, 200,000, 200,000), stdev = 0,001
[info]   CI (99.9%): [200,000, 200,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1480,315 ±(99.9%) 1153,488 MB/sec [Average]
[info]   (min, avg, max) = (1344,389, 1480,315, 2016,173), stdev = 299,557
[info]   CI (99.9%): [326,827, 2633,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   204,553 ±(99.9%) 158,590 B/op [Average]
[info]   (min, avg, max) = (184,206, 204,553, 278,103), stdev = 41,185
[info]   CI (99.9%): [45,962, 363,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,042), stdev = 0,009
[info]   CI (99.9%): [0,002, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,005, 0,006), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2,62% complete, ETA 02:08:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277472,486 ops/s
[info] # Warmup Iteration   2: 732430,577 ops/s
[info] # Warmup Iteration   3: 727927,943 ops/s
[info] # Warmup Iteration   4: 724873,534 ops/s
[info] # Warmup Iteration   5: 727224,828 ops/s
[info] Iteration   1: 725734,702 ops/s
[info]                  ·gc.alloc.rate:                   1855,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4404,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 728071,965 ops/s
[info]                  ·gc.alloc.rate:                   1861,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2929,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,135 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 728299,164 ops/s
[info]                  ·gc.alloc.rate:                   1862,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4395,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 721101,947 ops/s
[info]                  ·gc.alloc.rate:                   1843,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4445,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 727617,055 ops/s
[info]                  ·gc.alloc.rate:                   1860,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              4024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4408,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   726164,967 ±(99.9%) 11571,056 ops/s [Average]
[info]   (min, avg, max) = (721101,947, 726164,967, 728299,164), stdev = 3004,966
[info]   CI (99.9%): [714593,911, 737736,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1856,522 ±(99.9%) 29,416 MB/sec [Average]
[info]   (min, avg, max) = (1843,728, 1856,522, 1862,188), stdev = 7,639
[info]   CI (99.9%): [1827,106, 1885,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4024,001, 4024,001, 4024,001), stdev = 0,001
[info]   CI (99.9%): [4024,000, 4024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1898,876 ±(99.9%) 1170,326 MB/sec [Average]
[info]   (min, avg, max) = (1355,211, 1898,876, 2037,633), stdev = 303,930
[info]   CI (99.9%): [728,550, 3069,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4116,637 ±(99.9%) 2555,972 B/op [Average]
[info]   (min, avg, max) = (2929,715, 4116,637, 4445,127), stdev = 663,778
[info]   CI (99.9%): [1560,665, 6672,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,081 ±(99.9%) 0,145 B/op [Average]
[info]   (min, avg, max) = (0,045, 0,081, 0,135), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2,82% complete, ETA 02:07:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1300159,211 ops/s
[info] # Warmup Iteration   2: 2402533,065 ops/s
[info] # Warmup Iteration   3: 2423735,035 ops/s
[info] # Warmup Iteration   4: 2422483,816 ops/s
[info] # Warmup Iteration   5: 2413972,204 ops/s
[info] Iteration   1: 2395891,509 ops/s
[info]                  ·gc.alloc.rate:                   2045,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1324,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2419318,054 ops/s
[info]                  ·gc.alloc.rate:                   2066,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1313,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2433310,539 ops/s
[info]                  ·gc.alloc.rate:                   2077,873 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1307,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2417353,986 ops/s
[info]                  ·gc.alloc.rate:                   2064,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1319,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2413037,130 ops/s
[info]                  ·gc.alloc.rate:                   2059,902 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1323,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2415782,244 ±(99.9%) 51854,838 ops/s [Average]
[info]   (min, avg, max) = (2395891,509, 2415782,244, 2433310,539), stdev = 13466,537
[info]   CI (99.9%): [2363927,405, 2467637,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2062,822 ±(99.9%) 44,615 MB/sec [Average]
[info]   (min, avg, max) = (2045,824, 2062,822, 2077,873), stdev = 11,586
[info]   CI (99.9%): [2018,206, 2107,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1344,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1344,000, 1344,000, 1344,000), stdev = 0,001
[info]   CI (99.9%): [1344,000, 1344,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2022,154 ±(99.9%) 19,551 MB/sec [Average]
[info]   (min, avg, max) = (2015,546, 2022,154, 2027,950), stdev = 5,077
[info]   CI (99.9%): [2002,603, 2041,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1317,531 ±(99.9%) 26,218 B/op [Average]
[info]   (min, avg, max) = (1307,979, 1317,531, 1324,109), stdev = 6,809
[info]   CI (99.9%): [1291,314, 1343,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,030 ±(99.9%) 0,068 B/op [Average]
[info]   (min, avg, max) = (0,014, 0,030, 0,054), stdev = 0,018
[info]   CI (99.9%): [≈ 0, 0,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3,02% complete, ETA 02:07:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2131876,333 ops/s
[info] # Warmup Iteration   2: 18784136,085 ops/s
[info] # Warmup Iteration   3: 20098261,656 ops/s
[info] # Warmup Iteration   4: 20109082,209 ops/s
[info] # Warmup Iteration   5: 20091841,103 ops/s
[info] Iteration   1: 20171755,500 ops/s
[info]                  ·gc.alloc.rate:      615,222 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20133727,996 ops/s
[info]                  ·gc.alloc.rate:                   614,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,207 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 20210867,554 ops/s
[info]                  ·gc.alloc.rate:               616,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52,469 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 20190525,093 ops/s
[info]                  ·gc.alloc.rate:                   615,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 20194783,436 ops/s
[info]                  ·gc.alloc.rate:                   615,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   20180331,916 ±(99.9%) 113751,385 ops/s [Average]
[info]   (min, avg, max) = (20133727,996, 20180331,916, 20210867,554), stdev = 29540,873
[info]   CI (99.9%): [20066580,531, 20294083,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   615,432 ±(99.9%) 3,406 MB/sec [Average]
[info]   (min, avg, max) = (614,011, 615,432, 616,317), stdev = 0,884
[info]   CI (99.9%): [612,027, 618,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,311 ±(99.9%) 1158,759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,311, 673,731), stdev = 300,926
[info]   CI (99.9%): [≈ 0, 1697,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   41,982 ±(99.9%) 90,370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41,982, 52,669), stdev = 23,469
[info]   CI (99.9%): [≈ 0, 132,351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,546 ±(99.9%) 4,520 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,546, 2,645), stdev = 1,174
[info]   CI (99.9%): [≈ 0, 5,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,043 ±(99.9%) 0,353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,043, 0,207), stdev = 0,092
[info]   CI (99.9%): [≈ 0, 0,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3,22% complete, ETA 02:07:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_435ee987/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3179495,474 ops/s
[info] # Warmup Iteration   2: 6699205,562 ops/s
[info] # Warmup Iteration   3: 6763638,998 ops/s
[info] # Warmup Iteration   4: 6741837,928 ops/s
[info] # Warmup Iteration   5: 6747953,478 ops/s
[info] Iteration   1: 6739909,387 ops/s
[info]                  ·gc.alloc.rate:                   1849,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     473,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6713701,536 ops/s
[info]                  ·gc.alloc.rate:                   1842,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     476,258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6737510,042 ops/s
[info]                  ·gc.alloc.rate:                   1849,153 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316,655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6149909,824 ops/s
[info]                  ·gc.alloc.rate:                   1688,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     520,952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6712716,347 ops/s
[info]                  ·gc.alloc.rate:               1842,343 MB/sec
[info]                  ·gc.alloc.rate.norm:          432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 318,358 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6610749,427 ±(99.9%) 993212,523 ops/s [Average]
[info]   (min, avg, max) = (6149909,824, 6610749,427, 6739909,387), stdev = 257934,138
[info]   CI (99.9%): [5617536,905, 7603961,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1814,481 ±(99.9%) 272,278 MB/sec [Average]
[info]   (min, avg, max) = (1688,145, 1814,481, 1849,886), stdev = 70,710
[info]   CI (99.9%): [1542,204, 2086,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (432,000, 432,000, 432,000), stdev = 0,001
[info]   CI (99.9%): [432,000, 432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1762,014 ±(99.9%) 1425,255 MB/sec [Average]
[info]   (min, avg, max) = (1355,425, 1762,014, 2035,744), stdev = 370,134
[info]   CI (99.9%): [336,759, 3187,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   421,235 ±(99.9%) 371,694 B/op [Average]
[info]   (min, avg, max) = (316,655, 421,235, 520,952), stdev = 96,528
[info]   CI (99.9%): [49,540, 792,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3,42% complete, ETA 02:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16106618,006 ops/s
[info] # Warmup Iteration   2: 26761250,648 ops/s
[info] # Warmup Iteration   3: 27384832,581 ops/s
[info] # Warmup Iteration   4: 26795227,478 ops/s
[info] # Warmup Iteration   5: 27083504,273 ops/s
[info] Iteration   1: 27373534,909 ops/s
[info]                  ·gc.alloc.rate:                   834,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38,795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 27454597,054 ops/s
[info]                  ·gc.alloc.rate:                   837,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 27450447,708 ops/s
[info]                  ·gc.alloc.rate:               837,237 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38,576 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 27358787,749 ops/s
[info]                  ·gc.alloc.rate:                   834,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 27365213,876 ops/s
[info]                  ·gc.alloc.rate:               834,490 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38,654 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   27400516,259 ±(99.9%) 184000,776 ops/s [Average]
[info]   (min, avg, max) = (27358787,749, 27400516,259, 27454597,054), stdev = 47784,417
[info]   CI (99.9%): [27216515,483, 27584517,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   835,650 ±(99.9%) 5,802 MB/sec [Average]
[info]   (min, avg, max) = (834,387, 835,650, 837,347), stdev = 1,507
[info]   CI (99.9%): [829,847, 841,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,325 ±(99.9%) 1155,720 MB/sec [Average]
[info]   (min, avg, max) = (672,004, 807,325, 1344,223), stdev = 300,137
[info]   CI (99.9%): [≈ 0, 1963,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   46,385 ±(99.9%) 66,612 B/op [Average]
[info]   (min, avg, max) = (38,570, 46,385, 77,329), stdev = 17,299
[info]   CI (99.9%): [≈ 0, 112,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,005), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3,62% complete, ETA 02:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16557370,879 ops/s
[info] # Warmup Iteration   2: 25131462,720 ops/s
[info] # Warmup Iteration   3: 25780086,706 ops/s
[info] # Warmup Iteration   4: 25725156,585 ops/s
[info] # Warmup Iteration   5: 25769251,162 ops/s
[info] Iteration   1: 25822557,720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25888886,681 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25857520,253 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25771538,180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25813173,221 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   25830735,211 ±(99.9%) 171975,717 ops/s [Average]
[info]   (min, avg, max) = (25771538,180, 25830735,211, 25888886,681), stdev = 44661,548
[info]   CI (99.9%): [25658759,494, 26002710,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3,82% complete, ETA 02:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 558476,102 ops/s
[info] # Warmup Iteration   2: 1307058,466 ops/s
[info] # Warmup Iteration   3: 1308019,231 ops/s
[info] # Warmup Iteration   4: 1306059,443 ops/s
[info] # Warmup Iteration   5: 1312429,986 ops/s
[info] Iteration   1: 1313883,545 ops/s
[info]                  ·gc.alloc.rate:                   1983,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2433,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1313457,809 ops/s
[info]                  ·gc.alloc.rate:                   1983,065 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2436,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1312025,474 ops/s
[info]                  ·gc.alloc.rate:                   1980,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2441,830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1306988,743 ops/s
[info]                  ·gc.alloc.rate:                   1973,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1635,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1308407,879 ops/s
[info]                  ·gc.alloc.rate:               1974,940 MB/sec
[info]                  ·gc.alloc.rate.norm:          2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2038,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2452,155 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1310952,690 ±(99.9%) 11900,505 ops/s [Average]
[info]   (min, avg, max) = (1306988,743, 1310952,690, 1313883,545), stdev = 3090,523
[info]   CI (99.9%): [1299052,185, 1322853,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1979,009 ±(99.9%) 17,937 MB/sec [Average]
[info]   (min, avg, max) = (1973,201, 1979,009, 1983,166), stdev = 4,658
[info]   CI (99.9%): [1961,072, 1996,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2376,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2376,000, 2376,000, 2376,000), stdev = 0,001
[info]   CI (99.9%): [2376,000, 2376,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1899,331 ±(99.9%) 1164,830 MB/sec [Average]
[info]   (min, avg, max) = (1358,220, 1899,331, 2038,240), stdev = 302,503
[info]   CI (99.9%): [734,501, 3064,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2279,876 ±(99.9%) 1387,386 B/op [Average]
[info]   (min, avg, max) = (1635,480, 2279,876, 2452,155), stdev = 360,300
[info]   CI (99.9%): [892,490, 3667,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,050 ±(99.9%) 0,152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,100), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4,02% complete, ETA 02:06:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 356601,377 ops/s
[info] # Warmup Iteration   2: 407455,130 ops/s
[info] # Warmup Iteration   3: 409304,128 ops/s
[info] # Warmup Iteration   4: 409041,529 ops/s
[info] # Warmup Iteration   5: 409636,039 ops/s
[info] Iteration   1: 409099,935 ops/s
[info]                  ·gc.alloc.rate:                   2252,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10362,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,240 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 408681,264 ops/s
[info]                  ·gc.alloc.rate:                   2249,461 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7792,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 408377,391 ops/s
[info]                  ·gc.alloc.rate:                   2248,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7812,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 394677,356 ops/s
[info]                  ·gc.alloc.rate:                   2172,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10795,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 407355,377 ops/s
[info]                  ·gc.alloc.rate:                   2242,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7857,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,161 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   405638,265 ±(99.9%) 23724,139 ops/s [Average]
[info]   (min, avg, max) = (394677,356, 405638,265, 409099,935), stdev = 6161,084
[info]   CI (99.9%): [381914,125, 429362,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2233,273 ±(99.9%) 130,524 MB/sec [Average]
[info]   (min, avg, max) = (2172,928, 2233,273, 2252,071), stdev = 33,897
[info]   CI (99.9%): [2102,749, 2363,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8664,001, 8664,001, 8664,001), stdev = 0,001
[info]   CI (99.9%): [8664,001, 8664,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2297,310 ±(99.9%) 1417,865 MB/sec [Average]
[info]   (min, avg, max) = (2023,300, 2297,310, 2707,546), stdev = 368,215
[info]   CI (99.9%): [879,445, 3715,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8924,249 ±(99.9%) 5848,122 B/op [Average]
[info]   (min, avg, max) = (7792,919, 8924,249, 10795,657), stdev = 1518,739
[info]   CI (99.9%): [3076,127, 14772,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,046, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,010, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,178 ±(99.9%) 0,135 B/op [Average]
[info]   (min, avg, max) = (0,160, 0,178, 0,240), stdev = 0,035
[info]   CI (99.9%): [0,042, 0,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,23% complete, ETA 02:06:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273979,000 ops/s
[info] # Warmup Iteration   2: 544882,585 ops/s
[info] # Warmup Iteration   3: 547385,960 ops/s
[info] # Warmup Iteration   4: 546914,647 ops/s
[info] # Warmup Iteration   5: 549283,292 ops/s
[info] Iteration   1: 546852,739 ops/s
[info]                  ·gc.alloc.rate:                   731,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1941,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 547977,637 ops/s
[info]                  ·gc.alloc.rate:               732,555 MB/sec
[info]                  ·gc.alloc.rate.norm:          2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1938,024 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 548158,484 ops/s
[info]                  ·gc.alloc.rate:                   732,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1937,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 548071,453 ops/s
[info]                  ·gc.alloc.rate:               732,702 MB/sec
[info]                  ·gc.alloc.rate.norm:          2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1939,632 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 547987,765 ops/s
[info]                  ·gc.alloc.rate:               732,481 MB/sec
[info]                  ·gc.alloc.rate.norm:          2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1939,834 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   547809,615 ±(99.9%) 2078,857 ops/s [Average]
[info]   (min, avg, max) = (546852,739, 547809,615, 548158,484), stdev = 539,872
[info]   CI (99.9%): [545730,759, 549888,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   732,314 ±(99.9%) 2,797 MB/sec [Average]
[info]   (min, avg, max) = (731,034, 732,314, 732,798), stdev = 0,726
[info]   CI (99.9%): [729,517, 735,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2104,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2104,001, 2104,001, 2104,001), stdev = 0,001
[info]   CI (99.9%): [2104,001, 2104,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,956 ±(99.9%) 1,653 MB/sec [Average]
[info]   (min, avg, max) = (674,426, 674,956, 675,462), stdev = 0,429
[info]   CI (99.9%): [673,302, 676,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1939,206 ±(99.9%) 5,614 B/op [Average]
[info]   (min, avg, max) = (1937,465, 1939,206, 1941,076), stdev = 1,458
[info]   CI (99.9%): [1933,592, 1944,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,048 ±(99.9%) 0,301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,048, 0,180), stdev = 0,078
[info]   CI (99.9%): [≈ 0, 0,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,43% complete, ETA 02:05:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1228679,129 ops/s
[info] # Warmup Iteration   2: 1340495,145 ops/s
[info] # Warmup Iteration   3: 1339841,437 ops/s
[info] # Warmup Iteration   4: 1339929,507 ops/s
[info] # Warmup Iteration   5: 1330318,964 ops/s
[info] Iteration   1: 1337841,676 ops/s
[info]                  ·gc.alloc.rate:               890,823 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 791,448 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1342532,793 ops/s
[info]                  ·gc.alloc.rate:                   894,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     788,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1133781,196 ops/s
[info]                  ·gc.alloc.rate:               754,827 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932,965 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1337775,219 ops/s
[info]                  ·gc.alloc.rate:                   890,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1581,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1341423,896 ops/s
[info]                  ·gc.alloc.rate:               893,189 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 788,566 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1298670,956 ±(99.9%) 355031,647 ops/s [Average]
[info]   (min, avg, max) = (1133781,196, 1298670,956, 1342532,793), stdev = 92200,591
[info]   CI (99.9%): [943639,309, 1653702,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   864,735 ±(99.9%) 236,650 MB/sec [Average]
[info]   (min, avg, max) = (754,827, 864,735, 894,023), stdev = 61,457
[info]   CI (99.9%): [628,086, 1101,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806,775 ±(99.9%) 1156,863 MB/sec [Average]
[info]   (min, avg, max) = (671,972, 806,775, 1344,207), stdev = 300,434
[info]   CI (99.9%): [≈ 0, 1963,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   976,627 ±(99.9%) 1323,584 B/op [Average]
[info]   (min, avg, max) = (788,566, 976,627, 1581,395), stdev = 343,731
[info]   CI (99.9%): [≈ 0, 2300,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,049), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4,63% complete, ETA 02:05:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88796,787 ops/s
[info] # Warmup Iteration   2: 125982,550 ops/s
[info] # Warmup Iteration   3: 126385,792 ops/s
[info] # Warmup Iteration   4: 125532,434 ops/s
[info] # Warmup Iteration   5: 125478,305 ops/s
[info] Iteration   1: 125729,610 ops/s
[info]                  ·gc.alloc.rate:                   4346,410 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4759,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59579,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,782 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 125517,999 ops/s
[info]                  ·gc.alloc.rate:                   4339,346 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51211,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,783 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 126434,167 ops/s
[info]                  ·gc.alloc.rate:                   4370,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50862,864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,777 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 126000,129 ops/s
[info]                  ·gc.alloc.rate:                   4356,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4770,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59578,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,040 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 126079,439 ops/s
[info]                  ·gc.alloc.rate:                   4358,088 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51035,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,780 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   125952,269 ±(99.9%) 1346,151 ops/s [Average]
[info]   (min, avg, max) = (125517,999, 125952,269, 126434,167), stdev = 349,591
[info]   CI (99.9%): [124606,118, 127298,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4354,220 ±(99.9%) 46,189 MB/sec [Average]
[info]   (min, avg, max) = (4339,346, 4354,220, 4370,746), stdev = 11,995
[info]   CI (99.9%): [4308,031, 4400,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54408,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54408,003, 54408,003, 54408,003), stdev = 0,001
[info]   CI (99.9%): [54408,003, 54408,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4357,675 ±(99.9%) 1431,982 MB/sec [Average]
[info]   (min, avg, max) = (4084,404, 4357,675, 4770,514), stdev = 371,881
[info]   CI (99.9%): [2925,692, 5789,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54453,595 ±(99.9%) 18022,724 B/op [Average]
[info]   (min, avg, max) = (50862,864, 54453,595, 59579,508), stdev = 4680,444
[info]   CI (99.9%): [36430,872, 72476,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,067, 0,083), stdev = 0,009
[info]   CI (99.9%): [0,031, 0,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,832 ±(99.9%) 0,447 B/op [Average]
[info]   (min, avg, max) = (0,777, 0,832, 1,040), stdev = 0,116
[info]   CI (99.9%): [0,385, 1,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4,83% complete, ETA 02:05:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 587126,188 ops/s
[info] # Warmup Iteration   2: 687847,796 ops/s
[info] # Warmup Iteration   3: 685210,560 ops/s
[info] # Warmup Iteration   4: 666293,076 ops/s
[info] # Warmup Iteration   5: 689342,326 ops/s
[info] Iteration   1: 693019,321 ops/s
[info]                  ·gc.alloc.rate:                   2120,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4585,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 693195,848 ops/s
[info]                  ·gc.alloc.rate:                   2121,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4589,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 682843,265 ops/s
[info]                  ·gc.alloc.rate:                   2089,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2700,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6223,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   4: 689351,774 ops/s
[info]                  ·gc.alloc.rate:                   2109,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4632,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 691283,411 ops/s
[info]                  ·gc.alloc.rate:                   2114,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4625,457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   689938,724 ±(99.9%) 16404,509 ops/s [Average]
[info]   (min, avg, max) = (682843,265, 689938,724, 693195,848), stdev = 4260,199
[info]   CI (99.9%): [673534,215, 706343,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2111,057 ±(99.9%) 50,382 MB/sec [Average]
[info]   (min, avg, max) = (2089,249, 2111,057, 2121,138), stdev = 13,084
[info]   CI (99.9%): [2060,675, 2161,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4816,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,001, 4816,001, 4816,001), stdev = 0,001
[info]   CI (99.9%): [4816,001, 4816,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2160,133 ±(99.9%) 1162,352 MB/sec [Average]
[info]   (min, avg, max) = (2018,833, 2160,133, 2700,038), stdev = 301,859
[info]   CI (99.9%): [997,781, 3322,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4931,333 ±(99.9%) 2783,620 B/op [Average]
[info]   (min, avg, max) = (4585,032, 4931,333, 6223,951), stdev = 722,897
[info]   CI (99.9%): [2147,713, 7714,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,085 ±(99.9%) 0,152 B/op [Average]
[info]   (min, avg, max) = (0,047, 0,085, 0,142), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 4,000), stdev = 1,342
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5,03% complete, ETA 02:05:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343056,017 ops/s
[info] # Warmup Iteration   2: 425189,372 ops/s
[info] # Warmup Iteration   3: 417747,987 ops/s
[info] # Warmup Iteration   4: 419037,620 ops/s
[info] # Warmup Iteration   5: 420591,203 ops/s
[info] Iteration   1: 421107,793 ops/s
[info]                  ·gc.alloc.rate:                   652,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2521,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,641 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 422742,977 ops/s
[info]                  ·gc.alloc.rate:                   655,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2512,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,310 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 420794,096 ops/s
[info]                  ·gc.alloc.rate:               652,303 MB/sec
[info]                  ·gc.alloc.rate.norm:          2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2513,758 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 420005,325 ops/s
[info]                  ·gc.alloc.rate:               651,166 MB/sec
[info]                  ·gc.alloc.rate.norm:          2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2518,605 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 420069,852 ops/s
[info]                  ·gc.alloc.rate:                   651,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2515,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   420944,009 ±(99.9%) 4275,282 ops/s [Average]
[info]   (min, avg, max) = (420005,325, 420944,009, 422742,977), stdev = 1110,277
[info]   CI (99.9%): [416668,727, 425219,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   652,592 ±(99.9%) 6,740 MB/sec [Average]
[info]   (min, avg, max) = (651,166, 652,592, 655,452), stdev = 1,750
[info]   CI (99.9%): [645,852, 659,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2440,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2440,001, 2440,001, 2440,001), stdev = 0,001
[info]   CI (99.9%): [2440,001, 2440,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,030 ±(99.9%) 6,312 MB/sec [Average]
[info]   (min, avg, max) = (671,391, 673,030, 674,867), stdev = 1,639
[info]   CI (99.9%): [666,718, 679,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2516,421 ±(99.9%) 14,826 B/op [Average]
[info]   (min, avg, max) = (2512,275, 2516,421, 2521,860), stdev = 3,850
[info]   CI (99.9%): [2501,595, 2531,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,706 ±(99.9%) 5,763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,706, 3,382), stdev = 1,497
[info]   CI (99.9%): [≈ 0, 6,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,637 ±(99.9%) 21,541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,637, 12,641), stdev = 5,594
[info]   CI (99.9%): [≈ 0, 24,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 3,000), stdev = 1,304
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,23% complete, ETA 02:04:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461233,703 ops/s
[info] # Warmup Iteration   2: 698278,612 ops/s
[info] # Warmup Iteration   3: 695194,461 ops/s
[info] # Warmup Iteration   4: 612260,441 ops/s
[info] # Warmup Iteration   5: 693652,357 ops/s
[info] Iteration   1: 697793,377 ops/s
[info]                  ·gc.alloc.rate:               514,283 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1153,805 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 698237,961 ops/s
[info]                  ·gc.alloc.rate:                   514,615 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1520,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,798 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 692445,061 ops/s
[info]                  ·gc.alloc.rate:                   510,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1532,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 695046,729 ops/s
[info]                  ·gc.alloc.rate:      512,298 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 696188,719 ops/s
[info]                  ·gc.alloc.rate:               513,022 MB/sec
[info]                  ·gc.alloc.rate.norm:          1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1525,400 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   695942,370 ±(99.9%) 8987,357 ops/s [Average]
[info]   (min, avg, max) = (692445,061, 695942,370, 698237,961), stdev = 2333,988
[info]   CI (99.9%): [686955,013, 704929,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   512,914 ±(99.9%) 6,592 MB/sec [Average]
[info]   (min, avg, max) = (510,352, 512,914, 514,615), stdev = 1,712
[info]   CI (99.9%): [506,322, 519,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,001, 1160,001, 1160,001), stdev = 0,001
[info]   CI (99.9%): [1160,001, 1160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   506,992 ±(99.9%) 1124,647 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,992, 674,623), stdev = 292,067
[info]   CI (99.9%): [≈ 0, 1631,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1146,452 ±(99.9%) 2544,779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1146,452, 1532,889), stdev = 660,871
[info]   CI (99.9%): [≈ 0, 3691,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,595 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,354), stdev = 0,155
[info]   CI (99.9%): [≈ 0, 0,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,178 ±(99.9%) 1,342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,178, 0,798), stdev = 0,349
[info]   CI (99.9%): [≈ 0, 1,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,43% complete, ETA 02:04:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2903751,384 ops/s
[info] # Warmup Iteration   2: 3137260,022 ops/s
[info] # Warmup Iteration   3: 3100419,293 ops/s
[info] # Warmup Iteration   4: 3103726,767 ops/s
[info] # Warmup Iteration   5: 3086647,756 ops/s
[info] Iteration   1: 3099424,145 ops/s
[info]                  ·gc.alloc.rate:                   1433,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     682,560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 3101305,173 ops/s
[info]                  ·gc.alloc.rate:                   1434,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     682,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 3123195,518 ops/s
[info]                  ·gc.alloc.rate:                   1444,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     678,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3121778,257 ops/s
[info]                  ·gc.alloc.rate:                   1444,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679,015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3124069,674 ops/s
[info]                  ·gc.alloc.rate:                   1445,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   3113954,554 ±(99.9%) 47942,489 ops/s [Average]
[info]   (min, avg, max) = (3099424,145, 3113954,554, 3124069,674), stdev = 12450,512
[info]   CI (99.9%): [3066012,065, 3161897,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1440,353 ±(99.9%) 22,207 MB/sec [Average]
[info]   (min, avg, max) = (1433,610, 1440,353, 1445,128), stdev = 5,767
[info]   CI (99.9%): [1418,145, 1462,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345,773 ±(99.9%) 6,786 MB/sec [Average]
[info]   (min, avg, max) = (1344,128, 1345,773, 1348,230), stdev = 1,762
[info]   CI (99.9%): [1338,987, 1352,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   680,203 ±(99.9%) 7,850 B/op [Average]
[info]   (min, avg, max) = (678,052, 680,203, 682,560), stdev = 2,039
[info]   CI (99.9%): [672,354, 688,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,022 B/op [Average]
[info]   (min, avg, max) = (0,021, 0,025, 0,032), stdev = 0,006
[info]   CI (99.9%): [0,003, 0,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5,63% complete, ETA 02:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3112245,362 ops/s
[info] # Warmup Iteration   2: 3327949,582 ops/s
[info] # Warmup Iteration   3: 3348462,645 ops/s
[info] # Warmup Iteration   4: 3357717,037 ops/s
[info] # Warmup Iteration   5: 3348383,702 ops/s
[info] Iteration   1: 3354537,674 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3327891,216 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3302779,956 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3347441,187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3354800,601 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3337490,127 ±(99.9%) 85806,094 ops/s [Average]
[info]   (min, avg, max) = (3302779,956, 3337490,127, 3354800,601), stdev = 22283,570
[info]   CI (99.9%): [3251684,033, 3423296,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5,84% complete, ETA 02:04:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381666,583 ops/s
[info] # Warmup Iteration   2: 444031,899 ops/s
[info] # Warmup Iteration   3: 450592,634 ops/s
[info] # Warmup Iteration   4: 448896,270 ops/s
[info] # Warmup Iteration   5: 450127,333 ops/s
[info] Iteration   1: 449289,112 ops/s
[info]                  ·gc.alloc.rate:                   646,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2358,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,371 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 451462,838 ops/s
[info]                  ·gc.alloc.rate:                   649,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2347,823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,145 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 450262,931 ops/s
[info]                  ·gc.alloc.rate:               647,631 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2344,568 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 449800,494 ops/s
[info]                  ·gc.alloc.rate:               647,043 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2346,996 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 450005,601 ops/s
[info]                  ·gc.alloc.rate:                   647,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2343,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   450164,195 ±(99.9%) 3116,062 ops/s [Average]
[info]   (min, avg, max) = (449289,112, 450164,195, 451462,838), stdev = 809,232
[info]   CI (99.9%): [447048,133, 453280,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   647,538 ±(99.9%) 4,584 MB/sec [Average]
[info]   (min, avg, max) = (646,268, 647,538, 649,471), stdev = 1,191
[info]   CI (99.9%): [642,954, 652,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   671,675 ±(99.9%) 6,333 MB/sec [Average]
[info]   (min, avg, max) = (670,036, 671,675, 673,517), stdev = 1,645
[info]   CI (99.9%): [665,342, 678,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2348,395 ±(99.9%) 23,749 B/op [Average]
[info]   (min, avg, max) = (2343,598, 2348,395, 2358,988), stdev = 6,168
[info]   CI (99.9%): [2324,646, 2372,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,780 ±(99.9%) 6,537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,780, 3,817), stdev = 1,698
[info]   CI (99.9%): [≈ 0, 7,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,732 ±(99.9%) 22,902 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,732, 13,371), stdev = 5,948
[info]   CI (99.9%): [≈ 0, 25,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 3,000), stdev = 1,304
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6,04% complete, ETA 02:04:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186725,993 ops/s
[info] # Warmup Iteration   2: 196105,276 ops/s
[info] # Warmup Iteration   3: 194897,714 ops/s
[info] # Warmup Iteration   4: 196544,523 ops/s
[info] # Warmup Iteration   5: 196427,533 ops/s
[info] Iteration   1: 190652,663 ops/s
[info]                  ·gc.alloc.rate:                   486,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4222,963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,285 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   2: 196453,064 ops/s
[info]                  ·gc.alloc.rate:                   501,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4098,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,216 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 195535,906 ops/s
[info]                  ·gc.alloc.rate:                   498,968 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5431,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,869 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 196395,435 ops/s
[info]                  ·gc.alloc.rate:                   501,137 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5407,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,667 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 196534,128 ops/s
[info]                  ·gc.alloc.rate:      501,391 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   195114,239 ±(99.9%) 9728,778 ops/s [Average]
[info]   (min, avg, max) = (190652,663, 195114,239, 196534,128), stdev = 2526,533
[info]   CI (99.9%): [185385,462, 204843,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   497,836 ±(99.9%) 24,864 MB/sec [Average]
[info]   (min, avg, max) = (486,424, 497,836, 501,391), stdev = 6,457
[info]   CI (99.9%): [472,972, 522,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,530 ±(99.9%) 1068,733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,530, 674,844), stdev = 277,547
[info]   CI (99.9%): [≈ 0, 1543,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3832,078 ±(99.9%) 8599,144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3832,078, 5431,564), stdev = 2233,171
[info]   CI (99.9%): [≈ 0, 12431,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,647 ±(99.9%) 5,260 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,647, 3,090), stdev = 1,366
[info]   CI (99.9%): [≈ 0, 5,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,208 ±(99.9%) 42,334 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,208, 24,869), stdev = 10,994
[info]   CI (99.9%): [≈ 0, 47,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,200, 6,000), stdev = 2,280
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6,24% complete, ETA 02:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23231,536 ops/s
[info] # Warmup Iteration   2: 27512,419 ops/s
[info] # Warmup Iteration   3: 27620,286 ops/s
[info] # Warmup Iteration   4: 27676,656 ops/s
[info] # Warmup Iteration   5: 27721,702 ops/s
[info] Iteration   1: 27717,715 ops/s
[info]                  ·gc.alloc.rate:                   1698,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              96432,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114482,941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,182 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26754,258 ops/s
[info]                  ·gc.alloc.rate:                   1639,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              96432,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79119,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,898 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 27790,472 ops/s
[info]                  ·gc.alloc.rate:                   1702,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              96432,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114406,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,716 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 27767,299 ops/s
[info]                  ·gc.alloc.rate:                   1701,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              96432,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76413,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,180 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 26705,318 ops/s
[info]                  ·gc.alloc.rate:                   1636,028 MB/sec
[info]                  ·gc.alloc.rate.norm:              96432,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,996 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119358,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,227 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   27347,012 ±(99.9%) 2173,012 ops/s [Average]
[info]   (min, avg, max) = (26705,318, 27347,012, 27790,472), stdev = 564,324
[info]   CI (99.9%): [25174,001, 29520,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1675,681 ±(99.9%) 132,949 MB/sec [Average]
[info]   (min, avg, max) = (1636,028, 1675,681, 1702,865), stdev = 34,526
[info]   CI (99.9%): [1542,732, 1808,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   96432,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (96432,015, 96432,016, 96432,016), stdev = 0,001
[info]   CI (99.9%): [96432,013, 96432,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1751,016 ±(99.9%) 1420,871 MB/sec [Average]
[info]   (min, avg, max) = (1345,431, 1751,016, 2024,996), stdev = 368,996
[info]   CI (99.9%): [330,145, 3171,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   100756,244 ±(99.9%) 81263,912 B/op [Average]
[info]   (min, avg, max) = (76413,834, 100756,244, 119358,891), stdev = 21103,980
[info]   CI (99.9%): [19492,332, 182020,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,641 ±(99.9%) 7,620 B/op [Average]
[info]   (min, avg, max) = (1,180, 2,641, 4,898), stdev = 1,979
[info]   CI (99.9%): [≈ 0, 10,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,44% complete, ETA 02:03:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27289,887 ops/s
[info] # Warmup Iteration   2: 38784,634 ops/s
[info] # Warmup Iteration   3: 38422,494 ops/s
[info] # Warmup Iteration   4: 38326,856 ops/s
[info] # Warmup Iteration   5: 37547,879 ops/s
[info] Iteration   1: 38671,333 ops/s
[info]                  ·gc.alloc.rate:               968,025 MB/sec
[info]                  ·gc.alloc.rate.norm:          39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27473,548 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 37963,274 ops/s
[info]                  ·gc.alloc.rate:                   950,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28017,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,863 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 38829,732 ops/s
[info]                  ·gc.alloc.rate:                   971,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54808,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,844 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 38775,080 ops/s
[info]                  ·gc.alloc.rate:               970,366 MB/sec
[info]                  ·gc.alloc.rate.norm:          39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27455,366 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 38630,310 ops/s
[info]                  ·gc.alloc.rate:                   966,793 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55169,643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,848 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   38573,946 ±(99.9%) 1349,735 ops/s [Average]
[info]   (min, avg, max) = (37963,274, 38573,946, 38829,732), stdev = 350,522
[info]   CI (99.9%): [37224,211, 39923,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   965,386 ±(99.9%) 33,630 MB/sec [Average]
[info]   (min, avg, max) = (950,134, 965,386, 971,611), stdev = 8,734
[info]   CI (99.9%): [931,756, 999,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39384,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (39384,011, 39384,011, 39384,012), stdev = 0,001
[info]   CI (99.9%): [39384,009, 39384,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,817 ±(99.9%) 1428,567 MB/sec [Average]
[info]   (min, avg, max) = (675,276, 946,817, 1354,297), stdev = 370,994
[info]   CI (99.9%): [≈ 0, 2375,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38584,886 ±(99.9%) 57672,187 B/op [Average]
[info]   (min, avg, max) = (27455,366, 38584,886, 55169,643), stdev = 14977,284
[info]   CI (99.9%): [≈ 0, 96257,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,511 ±(99.9%) 1,796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,511, 0,863), stdev = 0,466
[info]   CI (99.9%): [≈ 0, 2,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,64% complete, ETA 02:03:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41220,983 ops/s
[info] # Warmup Iteration   2: 49558,051 ops/s
[info] # Warmup Iteration   3: 49754,660 ops/s
[info] # Warmup Iteration   4: 50204,616 ops/s
[info] # Warmup Iteration   5: 50169,538 ops/s
[info] Iteration   1: 50121,476 ops/s
[info]                  ·gc.alloc.rate:                   746,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42375,580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102,895 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 50323,756 ops/s
[info]                  ·gc.alloc.rate:               749,824 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21041,520 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 50257,947 ops/s
[info]                  ·gc.alloc.rate:               748,777 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21067,471 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 50079,974 ops/s
[info]                  ·gc.alloc.rate:                   746,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21121,822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,963 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 50046,318 ops/s
[info]                  ·gc.alloc.rate:               745,536 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21135,324 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   50165,894 ±(99.9%) 459,857 ops/s [Average]
[info]   (min, avg, max) = (50046,318, 50165,894, 50323,756), stdev = 119,423
[info]   CI (99.9%): [49706,038, 50625,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   747,387 ±(99.9%) 7,050 MB/sec [Average]
[info]   (min, avg, max) = (745,536, 747,387, 749,824), stdev = 1,831
[info]   CI (99.9%): [740,337, 754,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23448,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23448,008, 23448,009, 23448,009), stdev = 0,001
[info]   CI (99.9%): [23448,007, 23448,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,828 ±(99.9%) 1165,807 MB/sec [Average]
[info]   (min, avg, max) = (672,003, 807,828, 1349,415), stdev = 302,756
[info]   CI (99.9%): [≈ 0, 1973,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25348,343 ±(99.9%) 36652,711 B/op [Average]
[info]   (min, avg, max) = (21041,520, 25348,343, 42375,580), stdev = 9518,593
[info]   CI (99.9%): [≈ 0, 62001,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,668 ±(99.9%) 5,617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,668, 3,277), stdev = 1,459
[info]   CI (99.9%): [≈ 0, 6,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20,971 ±(99.9%) 176,377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20,971, 102,895), stdev = 45,804
[info]   CI (99.9%): [≈ 0, 197,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6,84% complete, ETA 02:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20664,527 ops/s
[info] # Warmup Iteration   2: 31016,690 ops/s
[info] # Warmup Iteration   3: 31001,891 ops/s
[info] # Warmup Iteration   4: 31003,503 ops/s
[info] # Warmup Iteration   5: 30718,461 ops/s
[info] Iteration   1: 31130,886 ops/s
[info]                  ·gc.alloc.rate:                   1648,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102254,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,105 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31163,969 ops/s
[info]                  ·gc.alloc.rate:               1650,738 MB/sec
[info]                  ·gc.alloc.rate.norm:          83360,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68227,417 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 31053,702 ops/s
[info]                  ·gc.alloc.rate:                   1644,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102828,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,275 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31080,964 ops/s
[info]                  ·gc.alloc.rate:                   1646,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68571,636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 31100,392 ops/s
[info]                  ·gc.alloc.rate:               1647,078 MB/sec
[info]                  ·gc.alloc.rate.norm:          83360,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68594,965 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   31105,983 ±(99.9%) 165,320 ops/s [Average]
[info]   (min, avg, max) = (31053,702, 31105,983, 31163,969), stdev = 42,933
[info]   CI (99.9%): [30940,662, 31271,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1647,481 ±(99.9%) 8,842 MB/sec [Average]
[info]   (min, avg, max) = (1644,714, 1647,481, 1650,738), stdev = 2,296
[info]   CI (99.9%): [1638,639, 1656,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83360,014 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (83360,013, 83360,014, 83360,015), stdev = 0,001
[info]   CI (99.9%): [83360,011, 83360,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1622,349 ±(99.9%) 1417,351 MB/sec [Average]
[info]   (min, avg, max) = (1351,074, 1622,349, 2028,836), stdev = 368,082
[info]   CI (99.9%): [204,997, 3039,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82095,448 ±(99.9%) 71877,579 B/op [Average]
[info]   (min, avg, max) = (68227,417, 82095,448, 102828,708), stdev = 18666,379
[info]   CI (99.9%): [10217,869, 153973,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,687 ±(99.9%) 8,423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,687, 5,275), stdev = 2,187
[info]   CI (99.9%): [≈ 0, 10,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7,04% complete, ETA 02:02:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20993,415 ops/s
[info] # Warmup Iteration   2: 34049,034 ops/s
[info] # Warmup Iteration   3: 34308,387 ops/s
[info] # Warmup Iteration   4: 34311,018 ops/s
[info] # Warmup Iteration   5: 34186,645 ops/s
[info] Iteration   1: 34464,732 ops/s
[info]                  ·gc.alloc.rate:                   1924,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92012,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,852 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 34292,686 ops/s
[info]                  ·gc.alloc.rate:                   1914,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92598,738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,866 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34489,877 ops/s
[info]                  ·gc.alloc.rate:                   1925,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92231,771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,900 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 34457,342 ops/s
[info]                  ·gc.alloc.rate:                   1923,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92474,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,951 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 34464,611 ops/s
[info]                  ·gc.alloc.rate:                   1924,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61716,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,802 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   34433,850 ±(99.9%) 307,558 ops/s [Average]
[info]   (min, avg, max) = (34292,686, 34433,850, 34489,877), stdev = 79,872
[info]   CI (99.9%): [34126,292, 34741,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1922,559 ±(99.9%) 17,011 MB/sec [Average]
[info]   (min, avg, max) = (1914,732, 1922,559, 1925,539), stdev = 4,418
[info]   CI (99.9%): [1905,548, 1939,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87872,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (87872,012, 87872,012, 87872,013), stdev = 0,001
[info]   CI (99.9%): [87872,010, 87872,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1886,000 ±(99.9%) 1150,552 MB/sec [Average]
[info]   (min, avg, max) = (1351,539, 1886,000, 2024,718), stdev = 298,795
[info]   CI (99.9%): [735,447, 3036,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   86206,897 ±(99.9%) 52724,102 B/op [Average]
[info]   (min, avg, max) = (61716,726, 86206,897, 92598,738), stdev = 13692,282
[info]   CI (99.9%): [33482,795, 138930,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,474 ±(99.9%) 4,179 B/op [Average]
[info]   (min, avg, max) = (0,951, 2,474, 3,802), stdev = 1,085
[info]   CI (99.9%): [≈ 0, 6,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,24% complete, ETA 02:02:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15592,294 ops/s
[info] # Warmup Iteration   2: 32853,800 ops/s
[info] # Warmup Iteration   3: 32932,249 ops/s
[info] # Warmup Iteration   4: 32962,724 ops/s
[info] # Warmup Iteration   5: 33024,864 ops/s
[info] Iteration   1: 32492,776 ops/s
[info]                  ·gc.alloc.rate:                   1748,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65562,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,008 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   2: 32338,848 ops/s
[info]                  ·gc.alloc.rate:                   1739,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98918,900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,065 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 33202,827 ops/s
[info]                  ·gc.alloc.rate:                   1786,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64265,219 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,973 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33159,419 ops/s
[info]                  ·gc.alloc.rate:                   1784,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96612,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,964 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33191,158 ops/s
[info]                  ·gc.alloc.rate:                   1785,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96614,277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,948 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   32877,006 ±(99.9%) 1635,793 ops/s [Average]
[info]   (min, avg, max) = (32338,848, 32877,006, 33202,827), stdev = 424,810
[info]   CI (99.9%): [31241,212, 34512,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1768,716 ±(99.9%) 87,717 MB/sec [Average]
[info]   (min, avg, max) = (1739,742, 1768,716, 1786,043), stdev = 22,780
[info]   CI (99.9%): [1680,999, 1856,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84672,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84672,012, 84672,013, 84672,014), stdev = 0,001
[info]   CI (99.9%): [84672,011, 84672,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1762,942 ±(99.9%) 1435,275 MB/sec [Average]
[info]   (min, avg, max) = (1353,680, 1762,942, 2037,357), stdev = 372,736
[info]   CI (99.9%): [327,667, 3198,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   84394,651 ±(99.9%) 68596,797 B/op [Average]
[info]   (min, avg, max) = (64265,219, 84394,651, 98918,900), stdev = 17814,370
[info]   CI (99.9%): [15797,855, 152991,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,104), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,992 ±(99.9%) 6,145 B/op [Average]
[info]   (min, avg, max) = (1,008, 2,992, 5,065), stdev = 1,596
[info]   CI (99.9%): [≈ 0, 9,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,800, 9,000), stdev = 3,493
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,44% complete, ETA 02:02:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26217,898 ops/s
[info] # Warmup Iteration   2: 36766,810 ops/s
[info] # Warmup Iteration   3: 36927,843 ops/s
[info] # Warmup Iteration   4: 37116,121 ops/s
[info] # Warmup Iteration   5: 36947,731 ops/s
[info] Iteration   1: 37114,375 ops/s
[info]                  ·gc.alloc.rate:                   1879,179 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85533,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,883 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 36868,821 ops/s
[info]                  ·gc.alloc.rate:                   1866,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86217,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,666 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 36963,225 ops/s
[info]                  ·gc.alloc.rate:                   1871,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86135,763 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,886 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 36886,302 ops/s
[info]                  ·gc.alloc.rate:               1867,737 MB/sec
[info]                  ·gc.alloc.rate.norm:          79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57608,444 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 37020,280 ops/s
[info]                  ·gc.alloc.rate:                   1874,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86199,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,885 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   36970,601 ±(99.9%) 388,222 ops/s [Average]
[info]   (min, avg, max) = (36868,821, 36970,601, 37114,375), stdev = 100,820
[info]   CI (99.9%): [36582,378, 37358,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1871,876 ±(99.9%) 19,369 MB/sec [Average]
[info]   (min, avg, max) = (1866,859, 1871,876, 1879,179), stdev = 5,030
[info]   CI (99.9%): [1852,506, 1891,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79688,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (79688,011, 79688,011, 79688,011), stdev = 0,001
[info]   CI (99.9%): [79688,011, 79688,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1887,450 ±(99.9%) 1156,493 MB/sec [Average]
[info]   (min, avg, max) = (1350,233, 1887,450, 2027,326), stdev = 300,338
[info]   CI (99.9%): [730,957, 3043,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   80338,916 ±(99.9%) 48941,224 B/op [Average]
[info]   (min, avg, max) = (57608,444, 80338,916, 86217,829), stdev = 12709,880
[info]   CI (99.9%): [31397,692, 129280,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,064 ±(99.9%) 3,750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,064, 2,666), stdev = 0,974
[info]   CI (99.9%): [≈ 0, 4,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7,65% complete, ETA 02:02:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26322,071 ops/s
[info] # Warmup Iteration   2: 37502,514 ops/s
[info] # Warmup Iteration   3: 36950,095 ops/s
[info] # Warmup Iteration   4: 37874,152 ops/s
[info] # Warmup Iteration   5: 37906,190 ops/s
[info] Iteration   1: 37911,803 ops/s
[info]                  ·gc.alloc.rate:                   1845,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              76632,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83729,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,864 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37839,876 ops/s
[info]                  ·gc.alloc.rate:                   1842,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              76632,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55994,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,866 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37917,677 ops/s
[info]                  ·gc.alloc.rate:                   1846,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              76632,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83913,729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,728 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37647,830 ops/s
[info]                  ·gc.alloc.rate:               1833,295 MB/sec
[info]                  ·gc.alloc.rate.norm:          76632,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 84654,655 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 37915,398 ops/s
[info]                  ·gc.alloc.rate:                   1845,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              76632,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84167,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,728 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   37846,517 ±(99.9%) 445,709 ops/s [Average]
[info]   (min, avg, max) = (37647,830, 37846,517, 37917,677), stdev = 115,749
[info]   CI (99.9%): [37400,808, 38292,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1842,747 ±(99.9%) 21,093 MB/sec [Average]
[info]   (min, avg, max) = (1833,295, 1842,747, 1846,238), stdev = 5,478
[info]   CI (99.9%): [1821,654, 1863,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   76632,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (76632,011, 76632,011, 76632,011), stdev = 0,001
[info]   CI (99.9%): [76632,011, 76632,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1887,460 ±(99.9%) 1164,778 MB/sec [Average]
[info]   (min, avg, max) = (1346,399, 1887,460, 2027,360), stdev = 302,489
[info]   CI (99.9%): [722,681, 3052,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   78491,804 ±(99.9%) 48445,400 B/op [Average]
[info]   (min, avg, max) = (55994,612, 78491,804, 84654,655), stdev = 12581,116
[info]   CI (99.9%): [30046,404, 126937,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,037 ±(99.9%) 2,783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,037, 1,728), stdev = 0,723
[info]   CI (99.9%): [≈ 0, 3,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7,85% complete, ETA 02:01:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6118,929 ops/s
[info] # Warmup Iteration   2: 9871,251 ops/s
[info] # Warmup Iteration   3: 9988,593 ops/s
[info] # Warmup Iteration   4: 9907,195 ops/s
[info] # Warmup Iteration   5: 10004,827 ops/s
[info] Iteration   1: 9988,580 ops/s
[info]                  ·gc.alloc.rate:                   1286,562 MB/sec
[info]                  ·gc.alloc.rate.norm:              202712,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211142,405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,559 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9987,550 ops/s
[info]                  ·gc.alloc.rate:                   1286,406 MB/sec
[info]                  ·gc.alloc.rate.norm:              202712,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211205,818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,561 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10020,066 ops/s
[info]                  ·gc.alloc.rate:               1290,545 MB/sec
[info]                  ·gc.alloc.rate.norm:          202712,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 210489,366 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 10024,167 ops/s
[info]                  ·gc.alloc.rate:                   1291,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              202712,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     210614,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,268 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10015,922 ops/s
[info]                  ·gc.alloc.rate:                   1289,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              202712,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     211117,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,542 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   10007,257 ±(99.9%) 68,404 ops/s [Average]
[info]   (min, avg, max) = (9987,550, 10007,257, 10024,167), stdev = 17,764
[info]   CI (99.9%): [9938,852, 10075,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1288,937 ±(99.9%) 8,791 MB/sec [Average]
[info]   (min, avg, max) = (1286,406, 1288,937, 1291,211), stdev = 2,283
[info]   CI (99.9%): [1280,146, 1297,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   202712,044 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (202712,041, 202712,044, 202712,047), stdev = 0,002
[info]   CI (99.9%): [202712,035, 202712,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341,086 ±(99.9%) 5,615 MB/sec [Average]
[info]   (min, avg, max) = (1340,058, 1341,086, 1343,451), stdev = 1,458
[info]   CI (99.9%): [1335,471, 1346,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   210913,981 ±(99.9%) 1289,871 B/op [Average]
[info]   (min, avg, max) = (210489,366, 210913,981, 211205,818), stdev = 334,975
[info]   CI (99.9%): [209624,110, 212203,851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,586 ±(99.9%) 11,290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,586, 6,561), stdev = 2,932
[info]   CI (99.9%): [≈ 0, 15,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8,05% complete, ETA 02:01:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18332,137 ops/s
[info] # Warmup Iteration   2: 25434,762 ops/s
[info] # Warmup Iteration   3: 25554,746 ops/s
[info] # Warmup Iteration   4: 25591,750 ops/s
[info] # Warmup Iteration   5: 23998,510 ops/s
[info] Iteration   1: 25466,789 ops/s
[info]                  ·gc.alloc.rate:                   1945,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124655,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,859 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 25531,221 ops/s
[info]                  ·gc.alloc.rate:               1950,544 MB/sec
[info]                  ·gc.alloc.rate.norm:          120240,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 82981,130 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 25704,314 ops/s
[info]                  ·gc.alloc.rate:                   1963,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123817,694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,549 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 25701,232 ops/s
[info]                  ·gc.alloc.rate:                   1963,565 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124040,908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,275 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 25688,549 ops/s
[info]                  ·gc.alloc.rate:                   1961,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124307,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,551 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   25618,421 ±(99.9%) 429,435 ops/s [Average]
[info]   (min, avg, max) = (25466,789, 25618,421, 25704,314), stdev = 111,523
[info]   CI (99.9%): [25188,986, 26047,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1957,096 ±(99.9%) 32,277 MB/sec [Average]
[info]   (min, avg, max) = (1945,731, 1957,096, 1963,712), stdev = 8,382
[info]   CI (99.9%): [1924,819, 1989,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120240,016 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (120240,016, 120240,016, 120240,018), stdev = 0,001
[info]   CI (99.9%): [120240,012, 120240,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887,876 ±(99.9%) 1166,265 MB/sec [Average]
[info]   (min, avg, max) = (1346,127, 1887,876, 2028,299), stdev = 302,875
[info]   CI (99.9%): [721,611, 3054,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   115960,495 ±(99.9%) 71000,751 B/op [Average]
[info]   (min, avg, max) = (82981,130, 115960,495, 124655,024), stdev = 18438,670
[info]   CI (99.9%): [44959,744, 186961,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,047 ±(99.9%) 5,639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,047, 3,859), stdev = 1,464
[info]   CI (99.9%): [≈ 0, 7,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,25% complete, ETA 02:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35895,394 ops/s
[info] # Warmup Iteration   2: 49125,137 ops/s
[info] # Warmup Iteration   3: 48895,411 ops/s
[info] # Warmup Iteration   4: 49651,181 ops/s
[info] # Warmup Iteration   5: 49606,266 ops/s
[info] Iteration   1: 49435,442 ops/s
[info]                  ·gc.alloc.rate:               1217,167 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43025,353 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 49625,751 ops/s
[info]                  ·gc.alloc.rate:                   1221,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42907,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 49614,288 ops/s
[info]                  ·gc.alloc.rate:               1221,644 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42955,549 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 49532,046 ops/s
[info]                  ·gc.alloc.rate:                   1219,701 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43048,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,323 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 49747,353 ops/s
[info]                  ·gc.alloc.rate:               1224,801 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      678,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21452,408 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   49590,976 ±(99.9%) 446,866 ops/s [Average]
[info]   (min, avg, max) = (49435,442, 49590,976, 49747,353), stdev = 116,050
[info]   CI (99.9%): [49144,110, 50037,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1221,030 ±(99.9%) 10,880 MB/sec [Average]
[info]   (min, avg, max) = (1217,167, 1221,030, 1224,801), stdev = 2,826
[info]   CI (99.9%): [1210,150, 1231,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38752,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38752,008, 38752,009, 38752,009), stdev = 0,001
[info]   CI (99.9%): [38752,007, 38752,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,272 ±(99.9%) 1162,929 MB/sec [Average]
[info]   (min, avg, max) = (678,028, 1218,272, 1354,937), stdev = 302,009
[info]   CI (99.9%): [55,343, 2381,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38677,845 ±(99.9%) 37079,681 B/op [Average]
[info]   (min, avg, max) = (21452,408, 38677,845, 43048,676), stdev = 9629,475
[info]   CI (99.9%): [1598,164, 75757,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,529 ±(99.9%) 2,787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,529, 1,323), stdev = 0,724
[info]   CI (99.9%): [≈ 0, 3,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,45% complete, ETA 02:01:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65850,330 ops/s
[info] # Warmup Iteration   2: 72030,976 ops/s
[info] # Warmup Iteration   3: 72367,660 ops/s
[info] # Warmup Iteration   4: 72251,295 ops/s
[info] # Warmup Iteration   5: 72369,866 ops/s
[info] Iteration   1: 72412,019 ops/s
[info]                  ·gc.alloc.rate:               935,590 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14622,068 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 72554,900 ops/s
[info]                  ·gc.alloc.rate:                   937,473 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29173,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,903 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 72655,220 ops/s
[info]                  ·gc.alloc.rate:               938,733 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14558,546 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 72397,720 ops/s
[info]                  ·gc.alloc.rate:               935,454 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14610,011 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 72344,232 ops/s
[info]                  ·gc.alloc.rate:                   934,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29242,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,453 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   72472,818 ±(99.9%) 494,168 ops/s [Average]
[info]   (min, avg, max) = (72344,232, 72472,818, 72655,220), stdev = 128,334
[info]   CI (99.9%): [71978,650, 72966,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   936,381 ±(99.9%) 6,441 MB/sec [Average]
[info]   (min, avg, max) = (934,655, 936,381, 938,733), stdev = 1,673
[info]   CI (99.9%): [929,940, 942,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (20336,006, 20336,006, 20336,007), stdev = 0,001
[info]   CI (99.9%): [20336,004, 20336,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,136 ±(99.9%) 1417,657 MB/sec [Average]
[info]   (min, avg, max) = (672,039, 941,136, 1344,883), stdev = 368,161
[info]   CI (99.9%): [≈ 0, 2358,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20441,305 ±(99.9%) 30816,273 B/op [Average]
[info]   (min, avg, max) = (14558,546, 20441,305, 29242,232), stdev = 8002,888
[info]   CI (99.9%): [≈ 0, 51257,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,271 ±(99.9%) 1,556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,271, 0,903), stdev = 0,404
[info]   CI (99.9%): [≈ 0, 1,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8,65% complete, ETA 02:00:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21981,658 ops/s
[info] # Warmup Iteration   2: 38561,923 ops/s
[info] # Warmup Iteration   3: 38623,917 ops/s
[info] # Warmup Iteration   4: 38661,290 ops/s
[info] # Warmup Iteration   5: 38817,679 ops/s
[info] Iteration   1: 38473,097 ops/s
[info]                  ·gc.alloc.rate:                   2569,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110969,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,406 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 38647,718 ops/s
[info]                  ·gc.alloc.rate:                   2580,924 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110616,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,543 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 38646,461 ops/s
[info]                  ·gc.alloc.rate:                   2580,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110700,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,543 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 38704,497 ops/s
[info]                  ·gc.alloc.rate:                   2584,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2040,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82961,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,539 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 38521,596 ops/s
[info]                  ·gc.alloc.rate:                   2572,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111195,701 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,701 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   38598,674 ±(99.9%) 373,323 ops/s [Average]
[info]   (min, avg, max) = (38473,097, 38598,674, 38704,497), stdev = 96,951
[info]   CI (99.9%): [38225,350, 38971,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2577,626 ±(99.9%) 25,085 MB/sec [Average]
[info]   (min, avg, max) = (2569,309, 2577,626, 2584,847), stdev = 6,515
[info]   CI (99.9%): [2552,541, 2602,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105104,011 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (105104,011, 105104,011, 105104,012), stdev = 0,001
[info]   CI (99.9%): [105104,009, 105104,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2581,766 ±(99.9%) 1165,606 MB/sec [Average]
[info]   (min, avg, max) = (2040,302, 2581,766, 2721,424), stdev = 302,704
[info]   CI (99.9%): [1416,160, 3747,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105288,767 ±(99.9%) 48068,255 B/op [Average]
[info]   (min, avg, max) = (82961,933, 105288,767, 111195,701), stdev = 12483,173
[info]   CI (99.9%): [57220,512, 153357,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,546 ±(99.9%) 2,322 B/op [Average]
[info]   (min, avg, max) = (1,701, 2,546, 3,406), stdev = 0,603
[info]   CI (99.9%): [0,225, 4,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,85% complete, ETA 02:00:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21756,392 ops/s
[info] # Warmup Iteration   2: 36772,901 ops/s
[info] # Warmup Iteration   3: 36940,290 ops/s
[info] # Warmup Iteration   4: 36628,143 ops/s
[info] # Warmup Iteration   5: 36845,170 ops/s
[info] Iteration   1: 36810,358 ops/s
[info]                  ·gc.alloc.rate:                   2013,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57923,565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,890 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 36703,862 ops/s
[info]                  ·gc.alloc.rate:                   2007,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87248,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,678 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 36751,560 ops/s
[info]                  ·gc.alloc.rate:                   2009,963 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87193,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,783 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 36950,189 ops/s
[info]                  ·gc.alloc.rate:                   2020,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86790,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,887 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 36978,959 ops/s
[info]                  ·gc.alloc.rate:                   2021,536 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86778,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,772 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   36838,986 ±(99.9%) 466,389 ops/s [Average]
[info]   (min, avg, max) = (36703,862, 36838,986, 36978,959), stdev = 121,120
[info]   CI (99.9%): [36372,596, 37305,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2014,452 ±(99.9%) 24,673 MB/sec [Average]
[info]   (min, avg, max) = (2007,109, 2014,452, 2021,536), stdev = 6,408
[info]   CI (99.9%): [1989,779, 2039,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86072,012 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (86072,011, 86072,012, 86072,013), stdev = 0,001
[info]   CI (99.9%): [86072,009, 86072,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1900,201 ±(99.9%) 1174,229 MB/sec [Average]
[info]   (min, avg, max) = (1354,707, 1900,201, 2038,139), stdev = 304,944
[info]   CI (99.9%): [725,973, 3074,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   81186,855 ±(99.9%) 50083,086 B/op [Average]
[info]   (min, avg, max) = (57923,565, 81186,855, 87248,036), stdev = 13006,418
[info]   CI (99.9%): [31103,769, 131269,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,602 ±(99.9%) 2,880 B/op [Average]
[info]   (min, avg, max) = (0,887, 1,602, 2,678), stdev = 0,748
[info]   CI (99.9%): [≈ 0, 4,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,05% complete, ETA 02:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44443,205 ops/s
[info] # Warmup Iteration   2: 52349,317 ops/s
[info] # Warmup Iteration   3: 52547,108 ops/s
[info] # Warmup Iteration   4: 51927,975 ops/s
[info] # Warmup Iteration   5: 52251,745 ops/s
[info] Iteration   1: 52406,045 ops/s
[info]                  ·gc.alloc.rate:                   2013,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60632,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,501 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 52560,898 ops/s
[info]                  ·gc.alloc.rate:                   2019,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60538,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,870 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 52536,754 ops/s
[info]                  ·gc.alloc.rate:                   2018,881 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60666,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,871 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 52076,303 ops/s
[info]                  ·gc.alloc.rate:                   2001,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61278,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,258 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 51054,711 ops/s
[info]                  ·gc.alloc.rate:                   1961,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41724,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,642 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   52126,942 ±(99.9%) 2424,992 ops/s [Average]
[info]   (min, avg, max) = (51054,711, 52126,942, 52560,898), stdev = 629,763
[info]   CI (99.9%): [49701,950, 54551,935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2002,983 ±(99.9%) 94,237 MB/sec [Average]
[info]   (min, avg, max) = (1961,257, 2002,983, 2019,752), stdev = 24,473
[info]   CI (99.9%): [1908,746, 2097,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (60480,008, 60480,008, 60480,009), stdev = 0,001
[info]   CI (99.9%): [60480,006, 60480,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1889,274 ±(99.9%) 1154,330 MB/sec [Average]
[info]   (min, avg, max) = (1353,052, 1889,274, 2027,613), stdev = 299,776
[info]   CI (99.9%): [734,945, 3043,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   56968,038 ±(99.9%) 32832,013 B/op [Average]
[info]   (min, avg, max) = (41724,561, 56968,038, 61278,324), stdev = 8526,370
[info]   CI (99.9%): [24136,025, 89800,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,628 ±(99.9%) 2,715 B/op [Average]
[info]   (min, avg, max) = (0,642, 1,628, 2,501), stdev = 0,705
[info]   CI (99.9%): [≈ 0, 4,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9,26% complete, ETA 01:59:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41138,325 ops/s
[info] # Warmup Iteration   2: 53218,638 ops/s
[info] # Warmup Iteration   3: 52513,920 ops/s
[info] # Warmup Iteration   4: 53131,085 ops/s
[info] # Warmup Iteration   5: 53032,730 ops/s
[info] Iteration   1: 52930,360 ops/s
[info]                  ·gc.alloc.rate:                   1941,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59998,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,238 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 52891,585 ops/s
[info]                  ·gc.alloc.rate:                   1940,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60134,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,858 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 53055,905 ops/s
[info]                  ·gc.alloc.rate:                   1946,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60027,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,235 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 52978,161 ops/s
[info]                  ·gc.alloc.rate:                   1943,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40129,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,237 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 52590,909 ops/s
[info]                  ·gc.alloc.rate:                   1928,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60719,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,623 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   52889,384 ±(99.9%) 684,456 ops/s [Average]
[info]   (min, avg, max) = (52590,909, 52889,384, 53055,905), stdev = 177,751
[info]   CI (99.9%): [52204,928, 53573,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1940,201 ±(99.9%) 25,558 MB/sec [Average]
[info]   (min, avg, max) = (1928,997, 1940,201, 1946,254), stdev = 6,637
[info]   CI (99.9%): [1914,642, 1965,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (57736,008, 57736,008, 57736,008), stdev = 0,001
[info]   CI (99.9%): [57736,007, 57736,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1888,388 ±(99.9%) 1157,110 MB/sec [Average]
[info]   (min, avg, max) = (1350,888, 1888,388, 2028,674), stdev = 300,498
[info]   CI (99.9%): [731,278, 3045,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   56201,899 ±(99.9%) 34615,023 B/op [Average]
[info]   (min, avg, max) = (40129,685, 56201,899, 60719,412), stdev = 8989,411
[info]   CI (99.9%): [21586,876, 90816,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,238 ±(99.9%) 1,682 B/op [Average]
[info]   (min, avg, max) = (0,623, 1,238, 1,858), stdev = 0,437
[info]   CI (99.9%): [≈ 0, 2,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9,46% complete, ETA 01:59:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 370338,858 ops/s
[info] # Warmup Iteration   2: 416768,612 ops/s
[info] # Warmup Iteration   3: 418873,066 ops/s
[info] # Warmup Iteration   4: 420105,682 ops/s
[info] # Warmup Iteration   5: 419990,249 ops/s
[info] Iteration   1: 413790,825 ops/s
[info]                  ·gc.alloc.rate:                   2092,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10237,932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,317 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 400836,603 ops/s
[info]                  ·gc.alloc.rate:                   2027,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7943,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,163 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 420128,118 ops/s
[info]                  ·gc.alloc.rate:                   2124,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7588,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,156 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 415253,348 ops/s
[info]                  ·gc.alloc.rate:                   2100,304 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7689,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 415224,898 ops/s
[info]                  ·gc.alloc.rate:               2099,688 MB/sec
[info]                  ·gc.alloc.rate.norm:          7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2031,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7700,427 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   413046,759 ±(99.9%) 27860,713 ops/s [Average]
[info]   (min, avg, max) = (400836,603, 413046,759, 420128,118), stdev = 7235,339
[info]   CI (99.9%): [385186,045, 440907,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2088,916 ±(99.9%) 140,797 MB/sec [Average]
[info]   (min, avg, max) = (2027,198, 2088,916, 2124,672), stdev = 36,564
[info]   CI (99.9%): [1948,120, 2229,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7960,001, 7960,001, 7960,001), stdev = 0,001
[info]   CI (99.9%): [7960,001, 7960,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2160,048 ±(99.9%) 1144,267 MB/sec [Average]
[info]   (min, avg, max) = (2022,995, 2160,048, 2691,598), stdev = 297,163
[info]   CI (99.9%): [1015,781, 3304,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8231,962 ±(99.9%) 4347,172 B/op [Average]
[info]   (min, avg, max) = (7588,161, 8231,962, 10237,932), stdev = 1128,947
[info]   CI (99.9%): [3884,790, 12579,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,143 ±(99.9%) 0,453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,143, 0,317), stdev = 0,118
[info]   CI (99.9%): [≈ 0, 0,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9,66% complete, ETA 01:59:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456792,098 ops/s
[info] # Warmup Iteration   2: 1705683,962 ops/s
[info] # Warmup Iteration   3: 1721712,469 ops/s
[info] # Warmup Iteration   4: 1677050,216 ops/s
[info] # Warmup Iteration   5: 1716871,955 ops/s
[info] Iteration   1: 1718051,502 ops/s
[info]                  ·gc.alloc.rate:               541,455 MB/sec
[info]                  ·gc.alloc.rate.norm:          496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 468,627 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 1714152,918 ops/s
[info]                  ·gc.alloc.rate:                   540,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     618,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,471 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1721634,834 ops/s
[info]                  ·gc.alloc.rate:               542,540 MB/sec
[info]                  ·gc.alloc.rate.norm:          496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 616,231 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1718993,746 ops/s
[info]                  ·gc.alloc.rate:      541,781 MB/sec
[info]                  ·gc.alloc.rate.norm: 496,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1718909,865 ops/s
[info]                  ·gc.alloc.rate:                   541,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     616,003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1718348,573 ±(99.9%) 10407,888 ops/s [Average]
[info]   (min, avg, max) = (1714152,918, 1718348,573, 1721634,834), stdev = 2702,895
[info]   CI (99.9%): [1707940,685, 1728756,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   541,524 ±(99.9%) 3,280 MB/sec [Average]
[info]   (min, avg, max) = (540,189, 541,524, 542,540), stdev = 0,852
[info]   CI (99.9%): [538,245, 544,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (496,000, 496,000, 496,000), stdev = 0,001
[info]   CI (99.9%): [496,000, 496,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,479 ±(99.9%) 1123,213 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,479, 674,063), stdev = 291,695
[info]   CI (99.9%): [≈ 0, 1629,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   463,957 ±(99.9%) 1028,918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 463,957, 618,923), stdev = 267,207
[info]   CI (99.9%): [≈ 0, 1492,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,547 ±(99.9%) 4,617 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,547, 2,691), stdev = 1,199
[info]   CI (99.9%): [≈ 0, 5,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,502 ±(99.9%) 4,239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,502, 2,471), stdev = 1,101
[info]   CI (99.9%): [≈ 0, 4,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,86% complete, ETA 01:59:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 507806,227 ops/s
[info] # Warmup Iteration   2: 717707,591 ops/s
[info] # Warmup Iteration   3: 719394,279 ops/s
[info] # Warmup Iteration   4: 717945,187 ops/s
[info] # Warmup Iteration   5: 716400,995 ops/s
[info] Iteration   1: 719568,280 ops/s
[info]                  ·gc.alloc.rate:                   577,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1475,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,273 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 719671,762 ops/s
[info]                  ·gc.alloc.rate:                   577,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1475,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 721015,801 ops/s
[info]                  ·gc.alloc.rate:      579,028 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 719316,986 ops/s
[info]                  ·gc.alloc.rate:               577,671 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1477,130 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 719932,966 ops/s
[info]                  ·gc.alloc.rate:               577,996 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1475,889 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   719901,159 ±(99.9%) 2545,599 ops/s [Average]
[info]   (min, avg, max) = (719316,986, 719901,159, 721015,801), stdev = 661,084
[info]   CI (99.9%): [717355,560, 722446,758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   578,095 ±(99.9%) 2,068 MB/sec [Average]
[info]   (min, avg, max) = (577,671, 578,095, 579,028), stdev = 0,537
[info]   CI (99.9%): [576,027, 580,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,753 ±(99.9%) 1161,859 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,753, 675,076), stdev = 301,731
[info]   CI (99.9%): [≈ 0, 1701,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1180,642 ±(99.9%) 2541,423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1180,642, 1477,130), stdev = 660,000
[info]   CI (99.9%): [≈ 0, 3722,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,073 ±(99.9%) 0,457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,073, 0,273), stdev = 0,119
[info]   CI (99.9%): [≈ 0, 0,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   1,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10,06% complete, ETA 01:58:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1766284,334 ops/s
[info] # Warmup Iteration   2: 1899258,739 ops/s
[info] # Warmup Iteration   3: 1875953,747 ops/s
[info] # Warmup Iteration   4: 1909068,603 ops/s
[info] # Warmup Iteration   5: 1644419,563 ops/s
[info] Iteration   1: 1897580,249 ops/s
[info]                  ·gc.alloc.rate:                   366,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     424,305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1903940,415 ops/s
[info]                  ·gc.alloc.rate:                   367,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     422,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1905421,190 ops/s
[info]                  ·gc.alloc.rate:      368,049 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1898554,527 ops/s
[info]                  ·gc.alloc.rate:               366,709 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 424,071 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1903813,781 ops/s
[info]                  ·gc.alloc.rate:      367,685 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1901862,032 ±(99.9%) 13623,590 ops/s [Average]
[info]   (min, avg, max) = (1897580,249, 1901862,032, 1905421,190), stdev = 3538,003
[info]   CI (99.9%): [1888238,443, 1915485,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   367,335 ±(99.9%) 2,727 MB/sec [Average]
[info]   (min, avg, max) = (366,451, 367,335, 368,049), stdev = 0,708
[info]   CI (99.9%): [364,609, 370,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,934 ±(99.9%) 1078,915 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,934, 511,650), stdev = 280,191
[info]   CI (99.9%): [≈ 0, 1385,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   254,259 ±(99.9%) 893,758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 254,259, 424,305), stdev = 232,106
[info]   CI (99.9%): [≈ 0, 1148,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,031), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,025), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10,26% complete, ETA 01:58:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77437,782 ops/s
[info] # Warmup Iteration   2: 114262,654 ops/s
[info] # Warmup Iteration   3: 112783,004 ops/s
[info] # Warmup Iteration   4: 115357,174 ops/s
[info] # Warmup Iteration   5: 115484,423 ops/s
[info] Iteration   1: 115311,552 ops/s
[info]                  ·gc.alloc.rate:                   4186,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55668,636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,284 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 115801,000 ops/s
[info]                  ·gc.alloc.rate:                   4204,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55497,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,132 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 115793,519 ops/s
[info]                  ·gc.alloc.rate:                   4203,354 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55521,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,566 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 115403,888 ops/s
[info]                  ·gc.alloc.rate:                   4189,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55755,507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,568 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 115137,908 ops/s
[info]                  ·gc.alloc.rate:                   4178,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55888,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,285 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   115489,574 ±(99.9%) 1142,401 ops/s [Average]
[info]   (min, avg, max) = (115137,908, 115489,574, 115801,000), stdev = 296,678
[info]   CI (99.9%): [114347,172, 116631,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4192,491 ±(99.9%) 43,029 MB/sec [Average]
[info]   (min, avg, max) = (4178,707, 4192,491, 4204,487), stdev = 11,175
[info]   CI (99.9%): [4149,462, 4235,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57136,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (57136,004, 57136,004, 57136,004), stdev = 0,001
[info]   CI (99.9%): [57136,003, 57136,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4084,616 ±(99.9%) 14,824 MB/sec [Average]
[info]   (min, avg, max) = (4078,656, 4084,616, 4088,511), stdev = 3,850
[info]   CI (99.9%): [4069,793, 4099,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55666,202 ±(99.9%) 629,437 B/op [Average]
[info]   (min, avg, max) = (55497,456, 55666,202, 55888,361), stdev = 163,463
[info]   CI (99.9%): [55036,764, 56295,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,567 ±(99.9%) 1,332 B/op [Average]
[info]   (min, avg, max) = (0,284, 0,567, 1,132), stdev = 0,346
[info]   CI (99.9%): [≈ 0, 1,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10,46% complete, ETA 01:58:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 627317,802 ops/s
[info] # Warmup Iteration   2: 695038,576 ops/s
[info] # Warmup Iteration   3: 685565,410 ops/s
[info] # Warmup Iteration   4: 696379,923 ops/s
[info] # Warmup Iteration   5: 695805,367 ops/s
[info] Iteration   1: 693159,446 ops/s
[info]                  ·gc.alloc.rate:                   1810,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4579,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 693590,624 ops/s
[info]                  ·gc.alloc.rate:                   1812,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4582,611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,189 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 697208,051 ops/s
[info]                  ·gc.alloc.rate:                   1821,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3043,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 695807,719 ops/s
[info]                  ·gc.alloc.rate:                   1818,012 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4580,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 695449,728 ops/s
[info]                  ·gc.alloc.rate:                   1816,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4588,611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   695043,114 ±(99.9%) 6413,040 ops/s [Average]
[info]   (min, avg, max) = (693159,446, 695043,114, 697208,051), stdev = 1665,446
[info]   CI (99.9%): [688630,073, 701456,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1815,888 ±(99.9%) 16,649 MB/sec [Average]
[info]   (min, avg, max) = (1810,956, 1815,888, 1821,467), stdev = 4,324
[info]   CI (99.9%): [1799,238, 1832,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1887,391 ±(99.9%) 1161,014 MB/sec [Average]
[info]   (min, avg, max) = (1348,083, 1887,391, 2027,428), stdev = 301,512
[info]   CI (99.9%): [726,377, 3048,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4274,861 ±(99.9%) 2651,009 B/op [Average]
[info]   (min, avg, max) = (3043,326, 4274,861, 4588,611), stdev = 688,459
[info]   CI (99.9%): [1623,852, 6925,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,094 ±(99.9%) 0,223 B/op [Average]
[info]   (min, avg, max) = (0,047, 0,094, 0,189), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10,66% complete, ETA 01:58:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 344249,081 ops/s
[info] # Warmup Iteration   2: 422269,546 ops/s
[info] # Warmup Iteration   3: 422735,459 ops/s
[info] # Warmup Iteration   4: 421552,199 ops/s
[info] # Warmup Iteration   5: 419572,858 ops/s
[info] Iteration   1: 421596,003 ops/s
[info]                  ·gc.alloc.rate:                   657,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2518,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,466 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 423642,783 ops/s
[info]                  ·gc.alloc.rate:                   661,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2506,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,309 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 424102,754 ops/s
[info]                  ·gc.alloc.rate:               661,674 MB/sec
[info]                  ·gc.alloc.rate.norm:          2456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2494,126 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 424032,371 ops/s
[info]                  ·gc.alloc.rate:               661,723 MB/sec
[info]                  ·gc.alloc.rate.norm:          2456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2494,655 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 424069,211 ops/s
[info]                  ·gc.alloc.rate:                   661,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2492,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   423488,624 ±(99.9%) 4136,387 ops/s [Average]
[info]   (min, avg, max) = (421596,003, 423488,624, 424102,754), stdev = 1074,207
[info]   CI (99.9%): [419352,238, 427625,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   660,825 ±(99.9%) 6,397 MB/sec [Average]
[info]   (min, avg, max) = (657,880, 660,825, 661,723), stdev = 1,661
[info]   CI (99.9%): [654,428, 667,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2456,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2456,001, 2456,001, 2456,001), stdev = 0,001
[info]   CI (99.9%): [2456,001, 2456,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,018 ±(99.9%) 6,406 MB/sec [Average]
[info]   (min, avg, max) = (671,380, 673,018, 674,886), stdev = 1,664
[info]   CI (99.9%): [666,611, 679,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2501,339 ±(99.9%) 44,106 B/op [Average]
[info]   (min, avg, max) = (2492,030, 2501,339, 2518,948), stdev = 11,454
[info]   CI (99.9%): [2457,234, 2545,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,693 ±(99.9%) 5,698 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,693, 3,339), stdev = 1,480
[info]   CI (99.9%): [≈ 0, 6,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,586 ±(99.9%) 21,274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,586, 12,466), stdev = 5,525
[info]   CI (99.9%): [≈ 0, 23,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10,87% complete, ETA 01:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 326727,699 ops/s
[info] # Warmup Iteration   2: 1154512,104 ops/s
[info] # Warmup Iteration   3: 1155927,074 ops/s
[info] # Warmup Iteration   4: 1158571,172 ops/s
[info] # Warmup Iteration   5: 1156853,604 ops/s
[info] Iteration   1: 1151995,009 ops/s
[info]                  ·gc.alloc.rate:               532,868 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 698,905 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1156189,182 ops/s
[info]                  ·gc.alloc.rate:                   534,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     917,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,635 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1153803,227 ops/s
[info]                  ·gc.alloc.rate:               533,677 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 919,509 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1152504,171 ops/s
[info]                  ·gc.alloc.rate:      533,152 MB/sec
[info]                  ·gc.alloc.rate.norm: 728,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1152320,060 ops/s
[info]                  ·gc.alloc.rate:                   532,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     918,876 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1153362,330 ±(99.9%) 6635,470 ops/s [Average]
[info]   (min, avg, max) = (1151995,009, 1153362,330, 1156189,182), stdev = 1723,210
[info]   CI (99.9%): [1146726,860, 1159997,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   533,495 ±(99.9%) 3,050 MB/sec [Average]
[info]   (min, avg, max) = (532,868, 533,495, 534,799), stdev = 0,792
[info]   CI (99.9%): [530,446, 536,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,500 ±(99.9%) 1123,271 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,500, 674,135), stdev = 291,710
[info]   CI (99.9%): [≈ 0, 1629,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   690,993 ±(99.9%) 1531,893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 690,993, 919,509), stdev = 397,828
[info]   CI (99.9%): [≈ 0, 2222,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,538 ±(99.9%) 4,590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,538, 2,670), stdev = 1,192
[info]   CI (99.9%): [≈ 0, 5,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,733 ±(99.9%) 6,248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,733, 3,635), stdev = 1,623
[info]   CI (99.9%): [≈ 0, 6,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,07% complete, ETA 01:57:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 830632,524 ops/s
[info] # Warmup Iteration   2: 1141741,293 ops/s
[info] # Warmup Iteration   3: 1128697,087 ops/s
[info] # Warmup Iteration   4: 1143910,377 ops/s
[info] # Warmup Iteration   5: 1146243,823 ops/s
[info] Iteration   1: 1140936,723 ops/s
[info]                  ·gc.alloc.rate:                   806,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1861,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1146474,070 ops/s
[info]                  ·gc.alloc.rate:               809,990 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 926,818 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1144832,862 ops/s
[info]                  ·gc.alloc.rate:               808,799 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 929,545 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1144228,482 ops/s
[info]                  ·gc.alloc.rate:                   808,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     929,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1147321,150 ops/s
[info]                  ·gc.alloc.rate:               810,385 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 927,922 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1144758,657 ±(99.9%) 9510,931 ops/s [Average]
[info]   (min, avg, max) = (1140936,723, 1144758,657, 1147321,150), stdev = 2469,959
[info]   CI (99.9%): [1135247,726, 1154269,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   808,747 ±(99.9%) 6,463 MB/sec [Average]
[info]   (min, avg, max) = (806,111, 808,747, 810,385), stdev = 1,678
[info]   CI (99.9%): [802,284, 815,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1112,000, 1112,000, 1112,000), stdev = 0,001
[info]   CI (99.9%): [1112,000, 1112,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   810,607 ±(99.9%) 1159,999 MB/sec [Average]
[info]   (min, avg, max) = (675,101, 810,607, 1349,495), stdev = 301,248
[info]   CI (99.9%): [≈ 0, 1970,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1115,166 ±(99.9%) 1606,716 B/op [Average]
[info]   (min, avg, max) = (926,818, 1115,166, 1861,579), stdev = 417,259
[info]   CI (99.9%): [≈ 0, 2721,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,034 ±(99.9%) 0,181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,034, 0,086), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,27% complete, ETA 01:57:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1549134,794 ops/s
[info] # Warmup Iteration   2: 1699849,004 ops/s
[info] # Warmup Iteration   3: 1736629,170 ops/s
[info] # Warmup Iteration   4: 1744574,118 ops/s
[info] # Warmup Iteration   5: 1740876,881 ops/s
[info] Iteration   1: 1751402,684 ops/s
[info]                  ·gc.alloc.rate:                   810,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     606,380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1756639,231 ops/s
[info]                  ·gc.alloc.rate:               812,546 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 602,753 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1750547,507 ops/s
[info]                  ·gc.alloc.rate:                   809,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1209,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1743941,064 ops/s
[info]                  ·gc.alloc.rate:               806,720 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 606,538 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1745634,360 ops/s
[info]                  ·gc.alloc.rate:               807,473 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 605,946 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   1749632,969 ±(99.9%) 19391,598 ops/s [Average]
[info]   (min, avg, max) = (1743941,064, 1749632,969, 1756639,231), stdev = 5035,936
[info]   CI (99.9%): [1730241,371, 1769024,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   809,303 ±(99.9%) 8,883 MB/sec [Average]
[info]   (min, avg, max) = (806,720, 809,303, 812,546), stdev = 2,307
[info]   CI (99.9%): [800,419, 818,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,311 ±(99.9%) 1157,091 MB/sec [Average]
[info]   (min, avg, max) = (672,094, 807,311, 1344,846), stdev = 300,493
[info]   CI (99.9%): [≈ 0, 1964,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   726,152 ±(99.9%) 1039,692 B/op [Average]
[info]   (min, avg, max) = (602,753, 726,152, 1209,143), stdev = 270,005
[info]   CI (99.9%): [≈ 0, 1765,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,026, 0,075), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11,47% complete, ETA 01:57:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2399697,327 ops/s
[info] # Warmup Iteration   2: 2599586,904 ops/s
[info] # Warmup Iteration   3: 2651664,663 ops/s
[info] # Warmup Iteration   4: 2659747,391 ops/s
[info] # Warmup Iteration   5: 2648229,962 ops/s
[info] Iteration   1: 2623675,175 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2661479,290 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2662059,897 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2657422,978 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2657651,087 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2652457,685 ±(99.9%) 62495,911 ops/s [Average]
[info]   (min, avg, max) = (2623675,175, 2652457,685, 2662059,897), stdev = 16229,990
[info]   CI (99.9%): [2589961,775, 2714953,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11,67% complete, ETA 01:56:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456170,388 ops/s
[info] # Warmup Iteration   2: 590380,386 ops/s
[info] # Warmup Iteration   3: 592427,034 ops/s
[info] # Warmup Iteration   4: 590301,433 ops/s
[info] # Warmup Iteration   5: 584192,768 ops/s
[info] Iteration   1: 586350,510 ops/s
[info]                  ·gc.alloc.rate:                   691,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1807,748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,191 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 593539,003 ops/s
[info]                  ·gc.alloc.rate:                   699,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1785,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 531523,529 ops/s
[info]                  ·gc.alloc.rate:                   626,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1988,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 588931,508 ops/s
[info]                  ·gc.alloc.rate:               694,535 MB/sec
[info]                  ·gc.alloc.rate.norm:          1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1794,272 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 589367,395 ops/s
[info]                  ·gc.alloc.rate:                   694,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1789,424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   577942,389 ±(99.9%) 100411,640 ops/s [Average]
[info]   (min, avg, max) = (531523,529, 577942,389, 593539,003), stdev = 26076,584
[info]   CI (99.9%): [477530,749, 678354,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   681,535 ±(99.9%) 118,458 MB/sec [Average]
[info]   (min, avg, max) = (626,769, 681,535, 699,919), stdev = 30,763
[info]   CI (99.9%): [563,077, 799,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1856,001, 1856,001, 1856,001), stdev = 0,001
[info]   CI (99.9%): [1856,001, 1856,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   671,961 ±(99.9%) 5,817 MB/sec [Average]
[info]   (min, avg, max) = (670,007, 671,961, 673,539), stdev = 1,511
[info]   CI (99.9%): [666,144, 677,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1833,068 ±(99.9%) 335,249 B/op [Average]
[info]   (min, avg, max) = (1785,798, 1833,068, 1988,098), stdev = 87,063
[info]   CI (99.9%): [1497,819, 2168,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,776 ±(99.9%) 6,503 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,776, 3,797), stdev = 1,689
[info]   CI (99.9%): [≈ 0, 7,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,085 ±(99.9%) 17,449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,085, 10,191), stdev = 4,531
[info]   CI (99.9%): [≈ 0, 19,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11,87% complete, ETA 01:56:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 205828,322 ops/s
[info] # Warmup Iteration   2: 219847,658 ops/s
[info] # Warmup Iteration   3: 219881,878 ops/s
[info] # Warmup Iteration   4: 220640,532 ops/s
[info] # Warmup Iteration   5: 220141,278 ops/s
[info] Iteration   1: 220191,876 ops/s
[info]                  ·gc.alloc.rate:                   561,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3656,478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,333 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 220746,190 ops/s
[info]                  ·gc.alloc.rate:                   563,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4811,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,212 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 220632,222 ops/s
[info]                  ·gc.alloc.rate:                   562,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4813,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,297 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 220800,138 ops/s
[info]                  ·gc.alloc.rate:               563,367 MB/sec
[info]                  ·gc.alloc.rate.norm:          4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4795,520 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 220912,215 ops/s
[info]                  ·gc.alloc.rate:      563,606 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   220656,528 ±(99.9%) 1072,892 ops/s [Average]
[info]   (min, avg, max) = (220191,876, 220656,528, 220912,215), stdev = 278,627
[info]   CI (99.9%): [219583,636, 221729,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   563,004 ±(99.9%) 2,718 MB/sec [Average]
[info]   (min, avg, max) = (561,815, 563,004, 563,606), stdev = 0,706
[info]   CI (99.9%): [560,286, 565,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,754 ±(99.9%) 1124,003 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,754, 674,833), stdev = 291,900
[info]   CI (99.9%): [≈ 0, 1630,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3615,303 ±(99.9%) 8015,084 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3615,303, 4813,251), stdev = 2081,492
[info]   CI (99.9%): [≈ 0, 11630,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,641 ±(99.9%) 5,328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,641, 3,115), stdev = 1,384
[info]   CI (99.9%): [≈ 0, 5,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,568 ±(99.9%) 37,984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,568, 22,212), stdev = 9,864
[info]   CI (99.9%): [≈ 0, 42,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12,07% complete, ETA 01:56:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 135194,267 ops/s
[info] # Warmup Iteration   2: 155182,477 ops/s
[info] # Warmup Iteration   3: 158075,476 ops/s
[info] # Warmup Iteration   4: 158314,466 ops/s
[info] # Warmup Iteration   5: 157867,648 ops/s
[info] Iteration   1: 158019,270 ops/s
[info]                  ·gc.alloc.rate:                   1897,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20095,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,622 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 159056,968 ops/s
[info]                  ·gc.alloc.rate:                   1909,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13328,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,618 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 158628,217 ops/s
[info]                  ·gc.alloc.rate:                   1904,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20070,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,413 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 158017,345 ops/s
[info]                  ·gc.alloc.rate:                   1897,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20175,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,415 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 158538,357 ops/s
[info]                  ·gc.alloc.rate:                   1903,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              18896,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20141,525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,620 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   158452,031 ±(99.9%) 1701,136 ops/s [Average]
[info]   (min, avg, max) = (158017,345, 158452,031, 159056,968), stdev = 441,780
[info]   CI (99.9%): [156750,896, 160153,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1902,342 ±(99.9%) 20,442 MB/sec [Average]
[info]   (min, avg, max) = (1897,194, 1902,342, 1909,801), stdev = 5,309
[info]   CI (99.9%): [1881,900, 1922,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18896,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18896,003, 18896,003, 18896,003), stdev = 0,001
[info]   CI (99.9%): [18896,002, 18896,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888,324 ±(99.9%) 1165,185 MB/sec [Average]
[info]   (min, avg, max) = (1347,075, 1888,324, 2028,567), stdev = 302,595
[info]   CI (99.9%): [723,139, 3053,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18762,110 ±(99.9%) 11697,794 B/op [Average]
[info]   (min, avg, max) = (13328,267, 18762,110, 20175,002), stdev = 3037,880
[info]   CI (99.9%): [7064,316, 30459,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,538 ±(99.9%) 0,435 B/op [Average]
[info]   (min, avg, max) = (0,413, 0,538, 0,622), stdev = 0,113
[info]   CI (99.9%): [0,103, 0,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,27% complete, ETA 01:56:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358262,744 ops/s
[info] # Warmup Iteration   2: 493365,478 ops/s
[info] # Warmup Iteration   3: 493433,242 ops/s
[info] # Warmup Iteration   4: 494327,629 ops/s
[info] # Warmup Iteration   5: 493317,227 ops/s
[info] Iteration   1: 492695,375 ops/s
[info]                  ·gc.alloc.rate:               395,660 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1634,108 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 492026,538 ops/s
[info]                  ·gc.alloc.rate:               395,164 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1636,353 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 494359,029 ops/s
[info]                  ·gc.alloc.rate:      397,005 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 492222,031 ops/s
[info]                  ·gc.alloc.rate:                   395,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,471 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2156,442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,532 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 411329,377 ops/s
[info]                  ·gc.alloc.rate:      330,314 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   476526,470 ±(99.9%) 140386,173 ops/s [Average]
[info]   (min, avg, max) = (411329,377, 476526,470, 494359,029), stdev = 36457,843
[info]   CI (99.9%): [336140,297, 616912,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   382,697 ±(99.9%) 112,792 MB/sec [Average]
[info]   (min, avg, max) = (330,314, 382,697, 397,005), stdev = 29,292
[info]   CI (99.9%): [269,905, 495,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   339,511 ±(99.9%) 1220,604 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,511, 674,471), stdev = 316,987
[info]   CI (99.9%): [≈ 0, 1560,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1085,380 ±(99.9%) 3902,256 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1085,380, 2156,442), stdev = 1013,403
[info]   CI (99.9%): [≈ 0, 4987,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,287 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,167), stdev = 0,074
[info]   CI (99.9%): [≈ 0, 0,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,106 ±(99.9%) 0,917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,106, 0,532), stdev = 0,238
[info]   CI (99.9%): [≈ 0, 1,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,47% complete, ETA 01:55:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 850370,699 ops/s
[info] # Warmup Iteration   2: 910815,250 ops/s
[info] # Warmup Iteration   3: 891931,778 ops/s
[info] # Warmup Iteration   4: 903754,405 ops/s
[info] # Warmup Iteration   5: 903240,706 ops/s
[info] Iteration   1: 898387,538 ops/s
[info]                  ·gc.alloc.rate:               173,523 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 896,194 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 903068,768 ops/s
[info]                  ·gc.alloc.rate:      174,430 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 904197,767 ops/s
[info]                  ·gc.alloc.rate:      174,645 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 900576,095 ops/s
[info]                  ·gc.alloc.rate:                   173,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     894,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 903754,928 ops/s
[info]                  ·gc.alloc.rate:      174,523 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   901997,019 ±(99.9%) 9457,537 ops/s [Average]
[info]   (min, avg, max) = (898387,538, 901997,019, 904197,767), stdev = 2456,092
[info]   CI (99.9%): [892539,482, 911454,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   174,211 ±(99.9%) 1,810 MB/sec [Average]
[info]   (min, avg, max) = (173,523, 174,211, 174,645), stdev = 0,470
[info]   CI (99.9%): [172,401, 176,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,614 ±(99.9%) 1078,870 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,614, 511,546), stdev = 280,179
[info]   CI (99.9%): [≈ 0, 1283,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   358,047 ±(99.9%) 1887,879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 358,047, 896,194), stdev = 490,276
[info]   CI (99.9%): [≈ 0, 2245,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,015 ±(99.9%) 0,125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,073), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,127), stdev = 0,057
[info]   CI (99.9%): [≈ 0, 0,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12,68% complete, ETA 01:55:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67808,996 ops/s
[info] # Warmup Iteration   2: 100298,668 ops/s
[info] # Warmup Iteration   3: 100072,470 ops/s
[info] # Warmup Iteration   4: 99953,466 ops/s
[info] # Warmup Iteration   5: 100635,922 ops/s
[info] Iteration   1: 100419,532 ops/s
[info]                  ·gc.alloc.rate:                   4273,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4758,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74582,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,305 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 100758,487 ops/s
[info]                  ·gc.alloc.rate:                   4287,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63778,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,626 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 99896,074 ops/s
[info]                  ·gc.alloc.rate:                   4250,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64348,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,312 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 99782,128 ops/s
[info]                  ·gc.alloc.rate:                   4246,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64486,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,313 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 100229,712 ops/s
[info]                  ·gc.alloc.rate:                   4264,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74898,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,981 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   100217,187 ±(99.9%) 1523,921 ops/s [Average]
[info]   (min, avg, max) = (99782,128, 100217,187, 100758,487), stdev = 395,758
[info]   CI (99.9%): [98693,265, 101741,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4264,712 ±(99.9%) 64,518 MB/sec [Average]
[info]   (min, avg, max) = (4246,653, 4264,712, 4287,809), stdev = 16,755
[info]   CI (99.9%): [4200,194, 4329,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66976,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66976,004, 66976,004, 66976,005), stdev = 0,001
[info]   CI (99.9%): [66976,003, 66976,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4356,814 ±(99.9%) 1431,266 MB/sec [Average]
[info]   (min, avg, max) = (4083,134, 4356,814, 4769,199), stdev = 371,695
[info]   CI (99.9%): [2925,548, 5788,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68419,004 ±(99.9%) 22248,777 B/op [Average]
[info]   (min, avg, max) = (63778,957, 68419,004, 74898,286), stdev = 5777,937
[info]   CI (99.9%): [46170,227, 90667,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,083, 0,104), stdev = 0,015
[info]   CI (99.9%): [0,027, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,307 ±(99.9%) 0,878 B/op [Average]
[info]   (min, avg, max) = (0,981, 1,307, 1,626), stdev = 0,228
[info]   CI (99.9%): [0,429, 2,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12,88% complete, ETA 01:55:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249015,631 ops/s
[info] # Warmup Iteration   2: 267159,331 ops/s
[info] # Warmup Iteration   3: 273088,265 ops/s
[info] # Warmup Iteration   4: 273562,927 ops/s
[info] # Warmup Iteration   5: 273227,841 ops/s
[info] Iteration   1: 273023,121 ops/s
[info]                  ·gc.alloc.rate:                   1246,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7748,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 272302,855 ops/s
[info]                  ·gc.alloc.rate:                   1243,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7769,825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 248022,617 ops/s
[info]                  ·gc.alloc.rate:                   1132,135 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8530,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,396 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 273282,146 ops/s
[info]                  ·gc.alloc.rate:               1247,468 MB/sec
[info]                  ·gc.alloc.rate.norm:          7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3874,408 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 271876,091 ops/s
[info]                  ·gc.alloc.rate:                   1240,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7793,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,241 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   267701,366 ±(99.9%) 42414,864 ops/s [Average]
[info]   (min, avg, max) = (248022,617, 267701,366, 273282,146), stdev = 11015,006
[info]   CI (99.9%): [225286,502, 310116,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1221,936 ±(99.9%) 193,562 MB/sec [Average]
[info]   (min, avg, max) = (1132,135, 1221,936, 1247,468), stdev = 50,267
[info]   CI (99.9%): [1028,374, 1415,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7184,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7184,001, 7184,002, 7184,002), stdev = 0,001
[info]   CI (99.9%): [7184,001, 7184,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,327 ±(99.9%) 1157,131 MB/sec [Average]
[info]   (min, avg, max) = (672,773, 1210,327, 1345,987), stdev = 300,503
[info]   CI (99.9%): [53,196, 2367,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7143,223 ±(99.9%) 7149,747 B/op [Average]
[info]   (min, avg, max) = (3874,408, 7143,223, 8530,232), stdev = 1856,767
[info]   CI (99.9%): [≈ 0, 14292,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,224 ±(99.9%) 0,638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,224, 0,396), stdev = 0,166
[info]   CI (99.9%): [≈ 0, 0,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13,08% complete, ETA 01:55:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275368,191 ops/s
[info] # Warmup Iteration   2: 350769,355 ops/s
[info] # Warmup Iteration   3: 352137,959 ops/s
[info] # Warmup Iteration   4: 354345,550 ops/s
[info] # Warmup Iteration   5: 353905,630 ops/s
[info] Iteration   1: 353574,597 ops/s
[info]                  ·gc.alloc.rate:                   1565,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8966,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,278 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 354067,387 ops/s
[info]                  ·gc.alloc.rate:                   1567,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5972,607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 354005,073 ops/s
[info]                  ·gc.alloc.rate:                   1567,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5978,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,278 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 352963,368 ops/s
[info]                  ·gc.alloc.rate:                   1562,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9005,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,186 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 345415,960 ops/s
[info]                  ·gc.alloc.rate:                   1529,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6145,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,095 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   352005,277 ±(99.9%) 14285,226 ops/s [Average]
[info]   (min, avg, max) = (345415,960, 352005,277, 354067,387), stdev = 3709,828
[info]   CI (99.9%): [337720,051, 366290,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1558,553 ±(99.9%) 62,467 MB/sec [Average]
[info]   (min, avg, max) = (1529,737, 1558,553, 1567,690), stdev = 16,223
[info]   CI (99.9%): [1496,086, 1621,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6968,001, 6968,001, 6968,001), stdev = 0,001
[info]   CI (99.9%): [6968,001, 6968,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,341 ±(99.9%) 1415,511 MB/sec [Average]
[info]   (min, avg, max) = (1343,742, 1614,341, 2019,696), stdev = 367,604
[info]   CI (99.9%): [198,830, 3029,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7213,775 ±(99.9%) 6234,895 B/op [Average]
[info]   (min, avg, max) = (5972,607, 7213,775, 9005,343), stdev = 1619,182
[info]   CI (99.9%): [978,881, 13448,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,186 ±(99.9%) 0,354 B/op [Average]
[info]   (min, avg, max) = (0,093, 0,186, 0,278), stdev = 0,092
[info]   CI (99.9%): [≈ 0, 0,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,28% complete, ETA 01:54:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1178610,993 ops/s
[info] # Warmup Iteration   2: 2156062,401 ops/s
[info] # Warmup Iteration   3: 2156694,281 ops/s
[info] # Warmup Iteration   4: 2164824,021 ops/s
[info] # Warmup Iteration   5: 2161636,021 ops/s
[info] Iteration   1: 2145446,397 ops/s
[info]                  ·gc.alloc.rate:                   1101,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     991,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2167990,460 ops/s
[info]                  ·gc.alloc.rate:                   1113,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     981,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2165570,087 ops/s
[info]                  ·gc.alloc.rate:               1111,727 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 491,591 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2163422,891 ops/s
[info]                  ·gc.alloc.rate:                   1110,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     985,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2143042,362 ops/s
[info]                  ·gc.alloc.rate:                   1100,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     995,487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   2157094,439 ±(99.9%) 45713,603 ops/s [Average]
[info]   (min, avg, max) = (2143042,362, 2157094,439, 2167990,460), stdev = 11871,678
[info]   CI (99.9%): [2111380,836, 2202808,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1107,431 ±(99.9%) 23,691 MB/sec [Average]
[info]   (min, avg, max) = (1100,104, 1107,431, 1113,125), stdev = 6,153
[info]   CI (99.9%): [1083,740, 1131,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (808,000, 808,000, 808,000), stdev = 0,001
[info]   CI (99.9%): [808,000, 808,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,048 ±(99.9%) 1165,995 MB/sec [Average]
[info]   (min, avg, max) = (676,380, 1218,048, 1355,370), stdev = 302,805
[info]   CI (99.9%): [52,053, 2384,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   889,115 ±(99.9%) 855,942 B/op [Average]
[info]   (min, avg, max) = (491,591, 889,115, 995,487), stdev = 222,285
[info]   CI (99.9%): [33,173, 1745,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,027, 0,046), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,48% complete, ETA 01:54:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1976362,245 ops/s
[info] # Warmup Iteration   2: 2129250,714 ops/s
[info] # Warmup Iteration   3: 2137203,301 ops/s
[info] # Warmup Iteration   4: 2139070,928 ops/s
[info] # Warmup Iteration   5: 2134991,337 ops/s
[info] Iteration   1: 2141194,431 ops/s
[info]                  ·gc.alloc.rate:               576,772 MB/sec
[info]                  ·gc.alloc.rate.norm:          424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 376,045 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 2141780,915 ops/s
[info]                  ·gc.alloc.rate:                   576,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495,855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,306 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2143650,050 ops/s
[info]                  ·gc.alloc.rate:                   577,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     495,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2142737,308 ops/s
[info]                  ·gc.alloc.rate:                   577,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     494,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2136387,781 ops/s
[info]                  ·gc.alloc.rate:               575,724 MB/sec
[info]                  ·gc.alloc.rate.norm:          424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 495,611 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2141150,097 ±(99.9%) 10865,463 ops/s [Average]
[info]   (min, avg, max) = (2136387,781, 2141150,097, 2143650,050), stdev = 2821,726
[info]   CI (99.9%): [2130284,634, 2152015,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   576,835 ±(99.9%) 2,590 MB/sec [Average]
[info]   (min, avg, max) = (575,724, 576,835, 577,431), stdev = 0,673
[info]   CI (99.9%): [574,244, 579,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,000, 424,000, 424,000), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,352 ±(99.9%) 279,459 MB/sec [Average]
[info]   (min, avg, max) = (511,538, 641,352, 674,742), stdev = 72,575
[info]   CI (99.9%): [361,894, 920,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   471,421 ±(99.9%) 205,321 B/op [Average]
[info]   (min, avg, max) = (376,045, 471,421, 495,855), stdev = 53,321
[info]   CI (99.9%): [266,101, 676,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,644 ±(99.9%) 5,368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,644, 3,137), stdev = 1,394
[info]   CI (99.9%): [≈ 0, 6,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,473 ±(99.9%) 3,945 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,473, 2,306), stdev = 1,024
[info]   CI (99.9%): [≈ 0, 4,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13,68% complete, ETA 01:54:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1973443,908 ops/s
[info] # Warmup Iteration   2: 2045280,872 ops/s
[info] # Warmup Iteration   3: 2167801,865 ops/s
[info] # Warmup Iteration   4: 2171980,227 ops/s
[info] # Warmup Iteration   5: 2168072,957 ops/s
[info] Iteration   1: 2171911,173 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2177269,244 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2154433,655 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2170280,001 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2174107,867 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2169600,388 ±(99.9%) 34168,911 ops/s [Average]
[info]   (min, avg, max) = (2154433,655, 2169600,388, 2177269,244), stdev = 8873,558
[info]   CI (99.9%): [2135431,477, 2203769,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13,88% complete, ETA 01:54:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37201,954 ops/s
[info] # Warmup Iteration   2: 50783,343 ops/s
[info] # Warmup Iteration   3: 50952,533 ops/s
[info] # Warmup Iteration   4: 51617,725 ops/s
[info] # Warmup Iteration   5: 51638,014 ops/s
[info] Iteration   1: 51685,736 ops/s
[info]                  ·gc.alloc.rate:                   2178,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2685,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81759,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,902 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 50717,458 ops/s
[info]                  ·gc.alloc.rate:                   2137,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62634,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,292 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 51534,430 ops/s
[info]                  ·gc.alloc.rate:                   2171,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61758,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,636 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 51676,926 ops/s
[info]                  ·gc.alloc.rate:                   2178,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61701,824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,268 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 51140,816 ops/s
[info]                  ·gc.alloc.rate:                   2154,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62431,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,922 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   51351,073 ±(99.9%) 1607,932 ops/s [Average]
[info]   (min, avg, max) = (50717,458, 51351,073, 51685,736), stdev = 417,575
[info]   CI (99.9%): [49743,141, 52959,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2164,258 ±(99.9%) 68,004 MB/sec [Average]
[info]   (min, avg, max) = (2137,727, 2164,258, 2178,490), stdev = 17,660
[info]   CI (99.9%): [2096,254, 2232,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66336,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66336,008, 66336,008, 66336,009), stdev = 0,001
[info]   CI (99.9%): [66336,007, 66336,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2155,928 ±(99.9%) 1138,967 MB/sec [Average]
[info]   (min, avg, max) = (2018,435, 2155,928, 2685,005), stdev = 295,786
[info]   CI (99.9%): [1016,961, 3294,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66057,206 ±(99.9%) 33837,195 B/op [Average]
[info]   (min, avg, max) = (61701,824, 66057,206, 81759,640), stdev = 8787,412
[info]   CI (99.9%): [32220,011, 99894,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,404 ±(99.9%) 2,053 B/op [Average]
[info]   (min, avg, max) = (0,636, 1,404, 1,922), stdev = 0,533
[info]   CI (99.9%): [≈ 0, 3,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14,08% complete, ETA 01:53:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158030,965 ops/s
[info] # Warmup Iteration   2: 166972,731 ops/s
[info] # Warmup Iteration   3: 165328,652 ops/s
[info] # Warmup Iteration   4: 167650,879 ops/s
[info] # Warmup Iteration   5: 167090,511 ops/s
[info] Iteration   1: 167305,625 ops/s
[info]                  ·gc.alloc.rate:               891,193 MB/sec
[info]                  ·gc.alloc.rate.norm:          8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6328,689 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 167166,391 ops/s
[info]                  ·gc.alloc.rate:                   890,477 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6333,950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,196 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 167569,542 ops/s
[info]                  ·gc.alloc.rate:                   892,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12625,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,391 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 167357,019 ops/s
[info]                  ·gc.alloc.rate:               891,545 MB/sec
[info]                  ·gc.alloc.rate.norm:          8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6320,421 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 164443,551 ops/s
[info]                  ·gc.alloc.rate:                   875,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6432,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,199 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   166768,426 ±(99.9%) 5035,455 ops/s [Average]
[info]   (min, avg, max) = (164443,551, 166768,426, 167569,542), stdev = 1307,692
[info]   CI (99.9%): [161732,970, 171803,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   888,336 ±(99.9%) 27,062 MB/sec [Average]
[info]   (min, avg, max) = (875,841, 888,336, 892,624), stdev = 7,028
[info]   CI (99.9%): [861,274, 915,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8384,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8384,002, 8384,002, 8384,002), stdev = 0,001
[info]   CI (99.9%): [8384,002, 8384,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   806,736 ±(99.9%) 1156,830 MB/sec [Average]
[info]   (min, avg, max) = (671,965, 806,736, 1344,153), stdev = 300,425
[info]   CI (99.9%): [≈ 0, 1963,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7608,092 ±(99.9%) 10800,709 B/op [Average]
[info]   (min, avg, max) = (6320,421, 7608,092, 12625,004), stdev = 2804,910
[info]   CI (99.9%): [≈ 0, 18408,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,157 ±(99.9%) 0,631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,157, 0,391), stdev = 0,164
[info]   CI (99.9%): [≈ 0, 0,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14,29% complete, ETA 01:53:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221108,645 ops/s
[info] # Warmup Iteration   2: 249468,658 ops/s
[info] # Warmup Iteration   3: 253214,990 ops/s
[info] # Warmup Iteration   4: 253283,868 ops/s
[info] # Warmup Iteration   5: 252876,026 ops/s
[info] Iteration   1: 253606,912 ops/s
[info]                  ·gc.alloc.rate:                   2610,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16741,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,388 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 253801,183 ops/s
[info]                  ·gc.alloc.rate:                   2612,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16762,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 248443,646 ops/s
[info]                  ·gc.alloc.rate:                   2557,218 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12865,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,396 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 246642,506 ops/s
[info]                  ·gc.alloc.rate:                   2538,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17306,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,266 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 250963,623 ops/s
[info]                  ·gc.alloc.rate:                   2582,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17029,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,783 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   250691,574 ±(99.9%) 12129,682 ops/s [Average]
[info]   (min, avg, max) = (246642,506, 250691,574, 253801,183), stdev = 3150,040
[info]   CI (99.9%): [238561,892, 262821,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2580,358 ±(99.9%) 124,464 MB/sec [Average]
[info]   (min, avg, max) = (2538,966, 2580,358, 2612,375), stdev = 32,323
[info]   CI (99.9%): [2455,894, 2704,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16200,002, 16200,002, 16200,002), stdev = 0,001
[info]   CI (99.9%): [16200,001, 16200,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2571,835 ±(99.9%) 1164,684 MB/sec [Average]
[info]   (min, avg, max) = (2030,918, 2571,835, 2715,147), stdev = 302,465
[info]   CI (99.9%): [1407,152, 3736,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16141,245 ±(99.9%) 7105,945 B/op [Average]
[info]   (min, avg, max) = (12865,886, 16141,245, 17306,875), stdev = 1845,391
[info]   CI (99.9%): [9035,300, 23247,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,444 ±(99.9%) 0,760 B/op [Average]
[info]   (min, avg, max) = (0,266, 0,444, 0,783), stdev = 0,197
[info]   CI (99.9%): [≈ 0, 1,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,49% complete, ETA 01:53:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273691,459 ops/s
[info] # Warmup Iteration   2: 368431,410 ops/s
[info] # Warmup Iteration   3: 377633,646 ops/s
[info] # Warmup Iteration   4: 379037,678 ops/s
[info] # Warmup Iteration   5: 379409,450 ops/s
[info] Iteration   1: 360522,502 ops/s
[info]                  ·gc.alloc.rate:                   1728,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8869,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,273 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 379432,177 ops/s
[info]                  ·gc.alloc.rate:                   1818,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8435,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,345 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 368019,237 ops/s
[info]                  ·gc.alloc.rate:               1763,958 MB/sec
[info]                  ·gc.alloc.rate.norm:          7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5802,996 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 378998,309 ops/s
[info]                  ·gc.alloc.rate:                   1816,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8459,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,173 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 376794,137 ops/s
[info]                  ·gc.alloc.rate:                   1806,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8514,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   372753,272 ±(99.9%) 31749,701 ops/s [Average]
[info]   (min, avg, max) = (360522,502, 372753,272, 379432,177), stdev = 8245,297
[info]   CI (99.9%): [341003,571, 404502,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1786,781 ±(99.9%) 152,387 MB/sec [Average]
[info]   (min, avg, max) = (1728,155, 1786,781, 1818,841), stdev = 39,574
[info]   CI (99.9%): [1634,395, 1939,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7544,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7544,001, 7544,001, 7544,001), stdev = 0,001
[info]   CI (99.9%): [7544,001, 7544,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,628 ±(99.9%) 1168,369 MB/sec [Average]
[info]   (min, avg, max) = (1356,872, 1899,628, 2038,320), stdev = 303,422
[info]   CI (99.9%): [731,260, 3067,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8016,325 ±(99.9%) 4811,995 B/op [Average]
[info]   (min, avg, max) = (5802,996, 8016,325, 8869,430), stdev = 1249,660
[info]   CI (99.9%): [3204,330, 12828,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,176 ±(99.9%) 0,534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,176, 0,345), stdev = 0,139
[info]   CI (99.9%): [≈ 0, 0,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,69% complete, ETA 01:52:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1322446,978 ops/s
[info] # Warmup Iteration   2: 1274096,746 ops/s
[info] # Warmup Iteration   3: 1399327,895 ops/s
[info] # Warmup Iteration   4: 1404340,197 ops/s
[info] # Warmup Iteration   5: 1268570,705 ops/s
[info] Iteration   1: 1318840,163 ops/s
[info]                  ·gc.alloc.rate:               455,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 610,481 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1405145,783 ops/s
[info]                  ·gc.alloc.rate:                   485,728 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     573,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1404887,110 ops/s
[info]                  ·gc.alloc.rate:                   485,583 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,518 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1407192,588 ops/s
[info]                  ·gc.alloc.rate:      486,418 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1401867,285 ops/s
[info]                  ·gc.alloc.rate:                   484,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     757,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,070 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1387586,586 ±(99.9%) 148162,725 ops/s [Average]
[info]   (min, avg, max) = (1318840,163, 1387586,586, 1407192,588), stdev = 38477,389
[info]   CI (99.9%): [1239423,860, 1535749,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   479,605 ±(99.9%) 51,293 MB/sec [Average]
[info]   (min, avg, max) = (455,808, 479,605, 486,418), stdev = 13,321
[info]   CI (99.9%): [428,312, 530,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,000), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,517 ±(99.9%) 1068,630 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,517, 674,740), stdev = 277,520
[info]   CI (99.9%): [≈ 0, 1543,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   539,397 ±(99.9%) 1204,839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 539,397, 757,559), stdev = 312,893
[info]   CI (99.9%): [≈ 0, 1744,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,141), stdev = 1,397
[info]   CI (99.9%): [≈ 0, 6,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,719 ±(99.9%) 6,028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,719, 3,518), stdev = 1,565
[info]   CI (99.9%): [≈ 0, 6,746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14,89% complete, ETA 01:52:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51829,304 ops/s
[info] # Warmup Iteration   2: 90455,495 ops/s
[info] # Warmup Iteration   3: 90277,136 ops/s
[info] # Warmup Iteration   4: 91763,149 ops/s
[info] # Warmup Iteration   5: 91814,696 ops/s
[info] Iteration   1: 91989,114 ops/s
[info]                  ·gc.alloc.rate:                   3863,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58168,747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,712 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 91740,823 ops/s
[info]                  ·gc.alloc.rate:                   3853,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70049,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,071 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 91425,251 ops/s
[info]                  ·gc.alloc.rate:                   3839,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70318,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,717 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 91905,735 ops/s
[info]                  ·gc.alloc.rate:                   3860,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58337,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,069 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 91140,177 ops/s
[info]                  ·gc.alloc.rate:                   3827,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70599,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,438 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   91640,220 ±(99.9%) 1359,502 ops/s [Average]
[info]   (min, avg, max) = (91140,177, 91640,220, 91989,114), stdev = 353,058
[info]   CI (99.9%): [90280,718, 92999,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3848,973 ±(99.9%) 57,496 MB/sec [Average]
[info]   (min, avg, max) = (3827,778, 3848,973, 3863,534), stdev = 14,932
[info]   CI (99.9%): [3791,476, 3906,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66104,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66104,004, 66104,005, 66104,005), stdev = 0,001
[info]   CI (99.9%): [66104,004, 66104,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3812,529 ±(99.9%) 1438,629 MB/sec [Average]
[info]   (min, avg, max) = (3399,748, 3812,529, 4088,109), stdev = 373,607
[info]   CI (99.9%): [2373,900, 5251,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65494,740 ±(99.9%) 25466,738 B/op [Average]
[info]   (min, avg, max) = (58168,747, 65494,740, 70599,793), stdev = 6613,631
[info]   CI (99.9%): [40028,003, 90961,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,001 ±(99.9%) 1,163 B/op [Average]
[info]   (min, avg, max) = (0,712, 1,001, 1,438), stdev = 0,302
[info]   CI (99.9%): [≈ 0, 2,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15,09% complete, ETA 01:52:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 239734,437 ops/s
[info] # Warmup Iteration   2: 261032,924 ops/s
[info] # Warmup Iteration   3: 263242,558 ops/s
[info] # Warmup Iteration   4: 262499,329 ops/s
[info] # Warmup Iteration   5: 263218,460 ops/s
[info] Iteration   1: 263081,559 ops/s
[info]                  ·gc.alloc.rate:                   2786,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3374,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20187,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 262576,730 ops/s
[info]                  ·gc.alloc.rate:                   2781,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16217,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,250 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 263335,386 ops/s
[info]                  ·gc.alloc.rate:                   2789,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16202,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,249 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 259282,380 ops/s
[info]                  ·gc.alloc.rate:                   2746,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16476,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 253631,012 ops/s
[info]                  ·gc.alloc.rate:                   2685,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16863,650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   260381,413 ±(99.9%) 15831,246 ops/s [Average]
[info]   (min, avg, max) = (253631,012, 260381,413, 263335,386), stdev = 4111,324
[info]   CI (99.9%): [244550,167, 276212,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2757,980 ±(99.9%) 169,444 MB/sec [Average]
[info]   (min, avg, max) = (2685,520, 2757,980, 2789,434), stdev = 44,004
[info]   CI (99.9%): [2588,535, 2927,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   16672,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16672,002, 16672,002, 16672,002), stdev = 0,001
[info]   CI (99.9%): [16672,001, 16672,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2844,353 ±(99.9%) 1141,059 MB/sec [Average]
[info]   (min, avg, max) = (2705,582, 2844,353, 3374,392), stdev = 296,329
[info]   CI (99.9%): [1703,294, 3985,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17189,466 ±(99.9%) 6534,497 B/op [Average]
[info]   (min, avg, max) = (16202,862, 17189,466, 20187,146), stdev = 1696,988
[info]   CI (99.9%): [10654,969, 23723,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,253 ±(99.9%) 0,358 B/op [Average]
[info]   (min, avg, max) = (0,125, 0,253, 0,387), stdev = 0,093
[info]   CI (99.9%): [≈ 0, 0,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15,29% complete, ETA 01:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204484,430 ops/s
[info] # Warmup Iteration   2: 248841,808 ops/s
[info] # Warmup Iteration   3: 250911,665 ops/s
[info] # Warmup Iteration   4: 250660,310 ops/s
[info] # Warmup Iteration   5: 249463,184 ops/s
[info] Iteration   1: 249010,990 ops/s
[info]                  ·gc.alloc.rate:                   2109,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12747,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,263 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 249939,390 ops/s
[info]                  ·gc.alloc.rate:                   2117,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693,896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16964,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,393 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 248466,309 ops/s
[info]                  ·gc.alloc.rate:                   2105,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12824,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,264 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 250572,901 ops/s
[info]                  ·gc.alloc.rate:                   2123,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12737,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,131 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 250301,331 ops/s
[info]                  ·gc.alloc.rate:                   2120,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12767,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,131 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   249658,184 ±(99.9%) 3427,315 ops/s [Average]
[info]   (min, avg, max) = (248466,309, 249658,184, 250572,901), stdev = 890,063
[info]   CI (99.9%): [246230,869, 253085,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2115,332 ±(99.9%) 29,294 MB/sec [Average]
[info]   (min, avg, max) = (2105,127, 2115,332, 2123,356), stdev = 7,608
[info]   CI (99.9%): [2086,038, 2144,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13336,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13336,002, 13336,002, 13336,002), stdev = 0,001
[info]   CI (99.9%): [13336,001, 13336,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2158,690 ±(99.9%) 1152,238 MB/sec [Average]
[info]   (min, avg, max) = (2016,841, 2158,690, 2693,896), stdev = 299,233
[info]   CI (99.9%): [1006,452, 3310,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13608,458 ±(99.9%) 7224,516 B/op [Average]
[info]   (min, avg, max) = (12737,409, 13608,458, 16964,134), stdev = 1876,184
[info]   CI (99.9%): [6383,943, 20832,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,236 ±(99.9%) 0,423 B/op [Average]
[info]   (min, avg, max) = (0,131, 0,236, 0,393), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,49% complete, ETA 01:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 981758,785 ops/s
[info] # Warmup Iteration   2: 1368233,228 ops/s
[info] # Warmup Iteration   3: 1259303,426 ops/s
[info] # Warmup Iteration   4: 1362860,700 ops/s
[info] # Warmup Iteration   5: 1364615,299 ops/s
[info] Iteration   1: 1363480,585 ops/s
[info]                  ·gc.alloc.rate:                   796,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1557,888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1364437,444 ops/s
[info]                  ·gc.alloc.rate:               797,619 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 778,759 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1362881,788 ops/s
[info]                  ·gc.alloc.rate:               796,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 780,747 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1365202,379 ops/s
[info]                  ·gc.alloc.rate:                   798,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,131 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     779,404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1365284,566 ops/s
[info]                  ·gc.alloc.rate:                   797,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     779,754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1364257,352 ±(99.9%) 4073,420 ops/s [Average]
[info]   (min, avg, max) = (1362881,788, 1364257,352, 1365284,566), stdev = 1057,854
[info]   CI (99.9%): [1360183,933, 1368330,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   797,457 ±(99.9%) 2,484 MB/sec [Average]
[info]   (min, avg, max) = (796,607, 797,457, 798,097), stdev = 0,645
[info]   CI (99.9%): [794,972, 799,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   810,646 ±(99.9%) 1160,069 MB/sec [Average]
[info]   (min, avg, max) = (675,166, 810,646, 1349,567), stdev = 301,266
[info]   CI (99.9%): [≈ 0, 1970,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   935,310 ±(99.9%) 1340,147 B/op [Average]
[info]   (min, avg, max) = (778,759, 935,310, 1557,888), stdev = 348,032
[info]   CI (99.9%): [≈ 0, 2275,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,038 ±(99.9%) 0,192 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,038, 0,120), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,69% complete, ETA 01:51:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2517681,989 ops/s
[info] # Warmup Iteration   2: 2723445,593 ops/s
[info] # Warmup Iteration   3: 2731372,975 ops/s
[info] # Warmup Iteration   4: 2739238,232 ops/s
[info] # Warmup Iteration   5: 2731343,574 ops/s
[info] Iteration   1: 2743977,468 ops/s
[info]                  ·gc.alloc.rate:               934,484 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 385,875 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 2743969,453 ops/s
[info]                  ·gc.alloc.rate:                   934,497 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2745304,183 ops/s
[info]                  ·gc.alloc.rate:               934,733 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 385,306 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2744126,135 ops/s
[info]                  ·gc.alloc.rate:                   934,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     385,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2740739,700 ops/s
[info]                  ·gc.alloc.rate:                   933,410 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771,910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2743623,388 ±(99.9%) 6568,316 ops/s [Average]
[info]   (min, avg, max) = (2740739,700, 2743623,388, 2745304,183), stdev = 1705,771
[info]   CI (99.9%): [2737055,071, 2750191,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   934,336 ±(99.9%) 2,029 MB/sec [Average]
[info]   (min, avg, max) = (933,410, 934,336, 934,733), stdev = 0,527
[info]   CI (99.9%): [932,307, 936,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,198 ±(99.9%) 1417,992 MB/sec [Average]
[info]   (min, avg, max) = (671,936, 941,198, 1344,952), stdev = 368,248
[info]   CI (99.9%): [≈ 0, 2359,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   540,000 ±(99.9%) 814,347 B/op [Average]
[info]   (min, avg, max) = (385,306, 540,000, 771,910), stdev = 211,483
[info]   CI (99.9%): [≈ 0, 1354,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,036), stdev = 0,016
[info]   CI (99.9%): [≈ 0, 0,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15,90% complete, ETA 01:51:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2831700,946 ops/s
[info] # Warmup Iteration   2: 3012796,379 ops/s
[info] # Warmup Iteration   3: 3058727,655 ops/s
[info] # Warmup Iteration   4: 3047347,540 ops/s
[info] # Warmup Iteration   5: 3047332,729 ops/s
[info] Iteration   1: 3056169,084 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3047819,025 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3055471,647 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3042247,421 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3046878,189 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3049717,073 ±(99.9%) 22959,099 ops/s [Average]
[info]   (min, avg, max) = (3042247,421, 3049717,073, 3056169,084), stdev = 5962,405
[info]   CI (99.9%): [3026757,974, 3072676,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16,10% complete, ETA 01:51:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237034,896 ops/s
[info] # Warmup Iteration   2: 363290,207 ops/s
[info] # Warmup Iteration   3: 364233,610 ops/s
[info] # Warmup Iteration   4: 361052,503 ops/s
[info] # Warmup Iteration   5: 364047,417 ops/s
[info] Iteration   1: 362889,784 ops/s
[info]                  ·gc.alloc.rate:                   2969,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14724,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,181 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 362709,947 ops/s
[info]                  ·gc.alloc.rate:                   2968,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11798,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,271 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 361262,388 ops/s
[info]                  ·gc.alloc.rate:                   2956,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11854,202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,363 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 362689,242 ops/s
[info]                  ·gc.alloc.rate:                   2968,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14770,142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 363170,197 ops/s
[info]                  ·gc.alloc.rate:                   2971,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11800,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   362544,311 ±(99.9%) 2857,564 ops/s [Average]
[info]   (min, avg, max) = (361262,388, 362544,311, 363170,197), stdev = 742,100
[info]   CI (99.9%): [359686,748, 365401,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2966,862 ±(99.9%) 23,204 MB/sec [Average]
[info]   (min, avg, max) = (2956,397, 2966,862, 2971,759), stdev = 6,026
[info]   CI (99.9%): [2943,658, 2990,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12880,001, 12880,001, 12880,001), stdev = 0,001
[info]   CI (99.9%): [12880,001, 12880,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2992,271 ±(99.9%) 1431,082 MB/sec [Average]
[info]   (min, avg, max) = (2718,949, 2992,271, 3403,775), stdev = 371,647
[info]   CI (99.9%): [1561,190, 4423,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12989,525 ±(99.9%) 6179,867 B/op [Average]
[info]   (min, avg, max) = (11798,120, 12989,525, 14770,142), stdev = 1604,892
[info]   CI (99.9%): [6809,658, 19169,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,217 ±(99.9%) 0,399 B/op [Average]
[info]   (min, avg, max) = (0,090, 0,217, 0,363), stdev = 0,104
[info]   CI (99.9%): [≈ 0, 0,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16,30% complete, ETA 01:50:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95642,006 ops/s
[info] # Warmup Iteration   2: 101406,399 ops/s
[info] # Warmup Iteration   3: 101245,067 ops/s
[info] # Warmup Iteration   4: 101006,237 ops/s
[info] # Warmup Iteration   5: 100849,679 ops/s
[info] Iteration   1: 95365,677 ops/s
[info]                  ·gc.alloc.rate:               707,734 MB/sec
[info]                  ·gc.alloc.rate.norm:          11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11136,001 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 101243,001 ops/s
[info]                  ·gc.alloc.rate:                   751,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10458,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,647 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 101558,390 ops/s
[info]                  ·gc.alloc.rate:               753,669 MB/sec
[info]                  ·gc.alloc.rate.norm:          11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10425,581 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 99226,229 ops/s
[info]                  ·gc.alloc.rate:               736,551 MB/sec
[info]                  ·gc.alloc.rate.norm:          11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10660,620 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 101445,193 ops/s
[info]                  ·gc.alloc.rate:                   752,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10427,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,323 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   99767,698 ±(99.9%) 10163,815 ops/s [Average]
[info]   (min, avg, max) = (95365,677, 99767,698, 101558,390), stdev = 2639,510
[info]   CI (99.9%): [89603,883, 109931,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   740,415 ±(99.9%) 75,332 MB/sec [Average]
[info]   (min, avg, max) = (707,734, 740,415, 753,669), stdev = 19,564
[info]   CI (99.9%): [665,082, 815,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11680,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11680,004, 11680,004, 11680,004), stdev = 0,001
[info]   CI (99.9%): [11680,004, 11680,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   672,923 ±(99.9%) 4,121 MB/sec [Average]
[info]   (min, avg, max) = (672,108, 672,923, 674,771), stdev = 1,070
[info]   CI (99.9%): [668,802, 677,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10621,743 ±(99.9%) 1168,983 B/op [Average]
[info]   (min, avg, max) = (10425,581, 10621,743, 11136,001), stdev = 303,581
[info]   CI (99.9%): [9452,761, 11790,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,194 ±(99.9%) 1,114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,194, 0,647), stdev = 0,289
[info]   CI (99.9%): [≈ 0, 1,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16,50% complete, ETA 01:50:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24838,846 ops/s
[info] # Warmup Iteration   2: 31076,804 ops/s
[info] # Warmup Iteration   3: 31182,661 ops/s
[info] # Warmup Iteration   4: 31210,374 ops/s
[info] # Warmup Iteration   5: 30824,810 ops/s
[info] Iteration   1: 31204,960 ops/s
[info]                  ·gc.alloc.rate:               1827,822 MB/sec
[info]                  ·gc.alloc.rate.norm:          92192,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101712,981 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 31145,211 ops/s
[info]                  ·gc.alloc.rate:                   1824,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102003,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 31304,893 ops/s
[info]                  ·gc.alloc.rate:               1833,679 MB/sec
[info]                  ·gc.alloc.rate.norm:          92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67744,044 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 31196,737 ops/s
[info]                  ·gc.alloc.rate:                   1827,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102122,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 31046,935 ops/s
[info]                  ·gc.alloc.rate:                   1818,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102781,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,055 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   31179,747 ±(99.9%) 362,336 ops/s [Average]
[info]   (min, avg, max) = (31046,935, 31179,747, 31304,893), stdev = 94,098
[info]   CI (99.9%): [30817,411, 31542,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1826,391 ±(99.9%) 21,253 MB/sec [Average]
[info]   (min, avg, max) = (1818,556, 1826,391, 1833,679), stdev = 5,519
[info]   CI (99.9%): [1805,139, 1847,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (92192,013, 92192,014, 92192,014), stdev = 0,001
[info]   CI (99.9%): [92192,011, 92192,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886,867 ±(99.9%) 1161,335 MB/sec [Average]
[info]   (min, avg, max) = (1347,414, 1886,867, 2027,432), stdev = 301,595
[info]   CI (99.9%): [725,533, 3048,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   95272,727 ±(99.9%) 59276,686 B/op [Average]
[info]   (min, avg, max) = (67744,044, 95272,727, 102781,045), stdev = 15393,967
[info]   CI (99.9%): [35996,041, 154549,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,052 ±(99.9%) 4,047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,052, 2,104), stdev = 1,051
[info]   CI (99.9%): [≈ 0, 5,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16,70% complete, ETA 01:50:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20824,790 ops/s
[info] # Warmup Iteration   2: 102174,216 ops/s
[info] # Warmup Iteration   3: 102453,418 ops/s
[info] # Warmup Iteration   4: 103878,837 ops/s
[info] # Warmup Iteration   5: 103517,335 ops/s
[info] Iteration   1: 103860,432 ops/s
[info]                  ·gc.alloc.rate:                   935,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10194,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,315 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 104131,078 ops/s
[info]                  ·gc.alloc.rate:               937,868 MB/sec
[info]                  ·gc.alloc.rate.norm:          14176,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10168,815 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 97192,297 ops/s
[info]                  ·gc.alloc.rate:                   875,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21766,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 103479,202 ops/s
[info]                  ·gc.alloc.rate:               932,088 MB/sec
[info]                  ·gc.alloc.rate.norm:          14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10222,152 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 104103,739 ops/s
[info]                  ·gc.alloc.rate:                   937,558 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20326,627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,315 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   102553,349 ±(99.9%) 11583,894 ops/s [Average]
[info]   (min, avg, max) = (97192,297, 102553,349, 104131,078), stdev = 3008,301
[info]   CI (99.9%): [90969,455, 114137,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   923,685 ±(99.9%) 104,295 MB/sec [Average]
[info]   (min, avg, max) = (875,409, 923,685, 937,868), stdev = 27,085
[info]   CI (99.9%): [819,390, 1027,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14176,004, 14176,004, 14176,005), stdev = 0,001
[info]   CI (99.9%): [14176,003, 14176,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   941,227 ±(99.9%) 1416,677 MB/sec [Average]
[info]   (min, avg, max) = (672,118, 941,227, 1344,341), stdev = 367,906
[info]   CI (99.9%): [≈ 0, 2357,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14535,787 ±(99.9%) 22970,550 B/op [Average]
[info]   (min, avg, max) = (10168,815, 14535,787, 21766,683), stdev = 5965,379
[info]   CI (99.9%): [≈ 0, 37506,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,328 ±(99.9%) 1,590 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,328, 1,011), stdev = 0,413
[info]   CI (99.9%): [≈ 0, 1,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16,90% complete, ETA 01:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47349,186 ops/s
[info] # Warmup Iteration   2: 69635,735 ops/s
[info] # Warmup Iteration   3: 68565,279 ops/s
[info] # Warmup Iteration   4: 69690,155 ops/s
[info] # Warmup Iteration   5: 69611,695 ops/s
[info] Iteration   1: 69491,576 ops/s
[info]                  ·gc.alloc.rate:               1145,159 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15312,194 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 69204,098 ops/s
[info]                  ·gc.alloc.rate:                   1140,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30761,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,947 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 69588,797 ops/s
[info]                  ·gc.alloc.rate:                   1146,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30611,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,471 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 69585,876 ops/s
[info]                  ·gc.alloc.rate:                   1146,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30635,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,942 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 69673,669 ops/s
[info]                  ·gc.alloc.rate:               1148,027 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15301,858 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   69508,803 ±(99.9%) 701,257 ops/s [Average]
[info]   (min, avg, max) = (69204,098, 69508,803, 69673,669), stdev = 182,114
[info]   CI (99.9%): [68807,547, 70210,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1145,423 ±(99.9%) 11,316 MB/sec [Average]
[info]   (min, avg, max) = (1140,490, 1145,423, 1148,027), stdev = 2,939
[info]   CI (99.9%): [1134,107, 1156,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25936,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25936,006, 25936,006, 25936,006), stdev = 0,001
[info]   CI (99.9%): [25936,005, 25936,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,803 ±(99.9%) 1427,511 MB/sec [Average]
[info]   (min, avg, max) = (676,083, 1082,803, 1354,549), stdev = 370,720
[info]   CI (99.9%): [≈ 0, 2510,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24524,473 ±(99.9%) 32401,368 B/op [Average]
[info]   (min, avg, max) = (15301,858, 24524,473, 30761,158), stdev = 8414,532
[info]   CI (99.9%): [≈ 0, 56925,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,472 ±(99.9%) 1,818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,472, 0,947), stdev = 0,472
[info]   CI (99.9%): [≈ 0, 2,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,10% complete, ETA 01:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128709,639 ops/s
[info] # Warmup Iteration   2: 145162,815 ops/s
[info] # Warmup Iteration   3: 144658,547 ops/s
[info] # Warmup Iteration   4: 144401,406 ops/s
[info] # Warmup Iteration   5: 145553,643 ops/s
[info] Iteration   1: 145886,673 ops/s
[info]                  ·gc.alloc.rate:               940,260 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7258,521 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 145793,636 ops/s
[info]                  ·gc.alloc.rate:                   939,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14519,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,449 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 145667,044 ops/s
[info]                  ·gc.alloc.rate:               938,814 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7261,537 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 145420,367 ops/s
[info]                  ·gc.alloc.rate:                   937,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7273,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,451 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 145447,795 ops/s
[info]                  ·gc.alloc.rate:                   937,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14545,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,450 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   145643,103 ±(99.9%) 794,568 ops/s [Average]
[info]   (min, avg, max) = (145420,367, 145643,103, 145886,673), stdev = 206,347
[info]   CI (99.9%): [144848,535, 146437,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   938,687 ±(99.9%) 5,250 MB/sec [Average]
[info]   (min, avg, max) = (937,286, 938,687, 940,260), stdev = 1,363
[info]   CI (99.9%): [933,437, 943,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10144,003, 10144,003, 10144,003), stdev = 0,001
[info]   CI (99.9%): [10144,002, 10144,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,198 ±(99.9%) 1417,753 MB/sec [Average]
[info]   (min, avg, max) = (672,046, 941,198, 1345,061), stdev = 368,186
[info]   CI (99.9%): [≈ 0, 2358,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10171,614 ±(99.9%) 15327,683 B/op [Average]
[info]   (min, avg, max) = (7258,521, 10171,614, 14545,036), stdev = 3980,551
[info]   CI (99.9%): [≈ 0, 25499,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,270 ±(99.9%) 0,949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,270, 0,451), stdev = 0,247
[info]   CI (99.9%): [≈ 0, 1,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17,30% complete, ETA 01:49:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24948,123 ops/s
[info] # Warmup Iteration   2: 40519,428 ops/s
[info] # Warmup Iteration   3: 40219,643 ops/s
[info] # Warmup Iteration   4: 40628,625 ops/s
[info] # Warmup Iteration   5: 40626,592 ops/s
[info] Iteration   1: 40347,453 ops/s
[info]                  ·gc.alloc.rate:                   2107,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              82208,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105434,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,436 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 40060,764 ops/s
[info]                  ·gc.alloc.rate:                   2092,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              82208,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79794,051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,271 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 40393,244 ops/s
[info]                  ·gc.alloc.rate:                   2109,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              82208,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79208,325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,811 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 40439,901 ops/s
[info]                  ·gc.alloc.rate:                   2112,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              82208,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79218,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,620 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 40524,496 ops/s
[info]                  ·gc.alloc.rate:               2116,390 MB/sec
[info]                  ·gc.alloc.rate.norm:          82208,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2037,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79131,466 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   40353,172 ±(99.9%) 678,017 ops/s [Average]
[info]   (min, avg, max) = (40060,764, 40353,172, 40524,496), stdev = 176,079
[info]   CI (99.9%): [39675,155, 41031,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2107,702 ±(99.9%) 35,094 MB/sec [Average]
[info]   (min, avg, max) = (2092,522, 2107,702, 2116,390), stdev = 9,114
[info]   CI (99.9%): [2072,608, 2142,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82208,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (82208,010, 82208,011, 82208,011), stdev = 0,001
[info]   CI (99.9%): [82208,009, 82208,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2167,894 ±(99.9%) 1151,611 MB/sec [Average]
[info]   (min, avg, max) = (2031,077, 2167,894, 2702,870), stdev = 299,070
[info]   CI (99.9%): [1016,283, 3319,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84557,252 ±(99.9%) 44951,251 B/op [Average]
[info]   (min, avg, max) = (79131,466, 84557,252, 105434,397), stdev = 11673,697
[info]   CI (99.9%): [39606,001, 129508,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,628 ±(99.9%) 4,973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,628, 3,271), stdev = 1,291
[info]   CI (99.9%): [≈ 0, 6,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17,51% complete, ETA 01:49:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66774,400 ops/s
[info] # Warmup Iteration   2: 74562,963 ops/s
[info] # Warmup Iteration   3: 74762,899 ops/s
[info] # Warmup Iteration   4: 74861,850 ops/s
[info] # Warmup Iteration   5: 72609,168 ops/s
[info] Iteration   1: 74902,922 ops/s
[info]                  ·gc.alloc.rate:                   1347,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28243,812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,437 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 73955,278 ops/s
[info]                  ·gc.alloc.rate:                   1330,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28605,775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,443 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 72668,120 ops/s
[info]                  ·gc.alloc.rate:               1307,202 MB/sec
[info]                  ·gc.alloc.rate.norm:          28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29125,909 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 74366,497 ops/s
[info]                  ·gc.alloc.rate:                   1337,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28489,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,322 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 75038,803 ops/s
[info]                  ·gc.alloc.rate:                   1349,596 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28262,487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,437 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   74186,324 ±(99.9%) 3668,747 ops/s [Average]
[info]   (min, avg, max) = (72668,120, 74186,324, 75038,803), stdev = 952,762
[info]   CI (99.9%): [70517,577, 77855,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1334,441 ±(99.9%) 65,750 MB/sec [Average]
[info]   (min, avg, max) = (1307,202, 1334,441, 1349,596), stdev = 17,075
[info]   CI (99.9%): [1268,691, 1400,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28312,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28312,005, 28312,006, 28312,006), stdev = 0,001
[info]   CI (99.9%): [28312,005, 28312,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1345,275 ±(99.9%) 5,365 MB/sec [Average]
[info]   (min, avg, max) = (1344,081, 1345,275, 1347,236), stdev = 1,393
[info]   CI (99.9%): [1339,910, 1350,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28545,521 ±(99.9%) 1381,332 B/op [Average]
[info]   (min, avg, max) = (28243,812, 28545,521, 29125,909), stdev = 358,728
[info]   CI (99.9%): [27164,189, 29926,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,528 ±(99.9%) 1,859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,528, 1,322), stdev = 0,483
[info]   CI (99.9%): [≈ 0, 2,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17,71% complete, ETA 01:48:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25000,486 ops/s
[info] # Warmup Iteration   2: 36534,286 ops/s
[info] # Warmup Iteration   3: 37915,765 ops/s
[info] # Warmup Iteration   4: 36007,766 ops/s
[info] # Warmup Iteration   5: 36259,341 ops/s
[info] Iteration   1: 36574,318 ops/s
[info]                  ·gc.alloc.rate:                   480,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22011,928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,197 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 36662,964 ops/s
[info]                  ·gc.alloc.rate:                   481,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21961,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,586 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 36426,214 ops/s
[info]                  ·gc.alloc.rate:      478,628 MB/sec
[info]                  ·gc.alloc.rate.norm: 20680,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 36188,666 ops/s
[info]                  ·gc.alloc.rate:                   475,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,803 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29345,180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146,437 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 34785,217 ops/s
[info]                  ·gc.alloc.rate:                   457,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30528,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,825 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   36127,476 ±(99.9%) 2970,906 ops/s [Average]
[info]   (min, avg, max) = (34785,217, 36127,476, 36662,964), stdev = 771,535
[info]   CI (99.9%): [33156,570, 39098,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   474,740 ±(99.9%) 38,886 MB/sec [Average]
[info]   (min, avg, max) = (457,176, 474,740, 481,803), stdev = 10,099
[info]   CI (99.9%): [435,855, 513,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20680,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (20680,011, 20680,011, 20680,012), stdev = 0,001
[info]   CI (99.9%): [20680,010, 20680,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   474,572 ±(99.9%) 1068,823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,572, 674,897), stdev = 277,570
[info]   CI (99.9%): [≈ 0, 1543,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   20769,416 ±(99.9%) 47282,880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20769,416, 30528,467), stdev = 12279,214
[info]   CI (99.9%): [≈ 0, 68052,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,699 ±(99.9%) 5,745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,699, 3,367), stdev = 1,492
[info]   CI (99.9%): [≈ 0, 6,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30,409 ±(99.9%) 249,789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30,409, 146,437), stdev = 64,869
[info]   CI (99.9%): [≈ 0, 280,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,91% complete, ETA 01:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28222,277 ops/s
[info] # Warmup Iteration   2: 45597,147 ops/s
[info] # Warmup Iteration   3: 45635,130 ops/s
[info] # Warmup Iteration   4: 45724,481 ops/s
[info] # Warmup Iteration   5: 45697,597 ops/s
[info] Iteration   1: 45578,669 ops/s
[info]                  ·gc.alloc.rate:               411,662 MB/sec
[info]                  ·gc.alloc.rate.norm:          14216,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17664,101 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 45622,974 ops/s
[info]                  ·gc.alloc.rate:                   412,097 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17647,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,718 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 45824,231 ops/s
[info]                  ·gc.alloc.rate:      413,898 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45625,243 ops/s
[info]                  ·gc.alloc.rate:                   412,135 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23263,650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,436 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 45720,216 ops/s
[info]                  ·gc.alloc.rate:                   412,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23215,324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,150 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   45674,266 ±(99.9%) 379,117 ops/s [Average]
[info]   (min, avg, max) = (45578,669, 45674,266, 45824,231), stdev = 98,455
[info]   CI (99.9%): [45295,150, 46053,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   412,541 ±(99.9%) 3,398 MB/sec [Average]
[info]   (min, avg, max) = (411,662, 412,541, 413,898), stdev = 0,882
[info]   CI (99.9%): [409,143, 415,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14216,009, 14216,009, 14216,010), stdev = 0,001
[info]   CI (99.9%): [14216,008, 14216,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,361 ±(99.9%) 1068,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,361, 674,435), stdev = 277,393
[info]   CI (99.9%): [≈ 0, 1542,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16358,029 ±(99.9%) 36816,599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16358,029, 23263,650), stdev = 9561,154
[info]   CI (99.9%): [≈ 0, 53174,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,861 ±(99.9%) 3,599 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,861, 2,150), stdev = 0,935
[info]   CI (99.9%): [≈ 0, 4,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,11% complete, ETA 01:48:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40469,720 ops/s
[info] # Warmup Iteration   2: 48356,248 ops/s
[info] # Warmup Iteration   3: 48794,935 ops/s
[info] # Warmup Iteration   4: 48594,142 ops/s
[info] # Warmup Iteration   5: 48622,051 ops/s
[info] Iteration   1: 48581,198 ops/s
[info]                  ·gc.alloc.rate:               426,938 MB/sec
[info]                  ·gc.alloc.rate.norm:          13832,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16572,477 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 48811,902 ops/s
[info]                  ·gc.alloc.rate:      429,050 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 48750,350 ops/s
[info]                  ·gc.alloc.rate:                   428,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16515,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 48620,644 ops/s
[info]                  ·gc.alloc.rate:                   427,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21841,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102,700 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 48817,520 ops/s
[info]                  ·gc.alloc.rate:      428,998 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   48716,323 ±(99.9%) 421,585 ops/s [Average]
[info]   (min, avg, max) = (48581,198, 48716,323, 48817,520), stdev = 109,484
[info]   CI (99.9%): [48294,738, 49137,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   428,148 ±(99.9%) 3,712 MB/sec [Average]
[info]   (min, avg, max) = (426,938, 428,148, 429,050), stdev = 0,964
[info]   CI (99.9%): [424,435, 431,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (13832,008, 13832,009, 13832,010), stdev = 0,001
[info]   CI (99.9%): [13832,007, 13832,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,565 ±(99.9%) 1220,904 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,565, 674,790), stdev = 317,065
[info]   CI (99.9%): [≈ 0, 1560,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10985,761 ±(99.9%) 39504,338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10985,761, 21841,291), stdev = 10259,151
[info]   CI (99.9%): [≈ 0, 50490,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,635 ±(99.9%) 5,464 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,635, 3,173), stdev = 1,419
[info]   CI (99.9%): [≈ 0, 6,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20,540 ±(99.9%) 176,855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20,540, 102,700), stdev = 45,929
[info]   CI (99.9%): [≈ 0, 197,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18,31% complete, ETA 01:48:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39112,938 ops/s
[info] # Warmup Iteration   2: 48789,091 ops/s
[info] # Warmup Iteration   3: 48510,470 ops/s
[info] # Warmup Iteration   4: 49509,861 ops/s
[info] # Warmup Iteration   5: 49236,351 ops/s
[info] Iteration   1: 49147,883 ops/s
[info]                  ·gc.alloc.rate:                   375,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16381,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,192 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 49023,159 ops/s
[info]                  ·gc.alloc.rate:               374,811 MB/sec
[info]                  ·gc.alloc.rate.norm:          12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16424,433 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 49573,422 ops/s
[info]                  ·gc.alloc.rate:      378,987 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49352,008 ops/s
[info]                  ·gc.alloc.rate:                   377,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16313,306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,990 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 49272,328 ops/s
[info]                  ·gc.alloc.rate:                   376,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21552,786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 99,986 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   49273,760 ±(99.9%) 804,425 ops/s [Average]
[info]   (min, avg, max) = (49023,159, 49273,760, 49573,422), stdev = 208,907
[info]   CI (99.9%): [48469,335, 50078,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   376,681 ±(99.9%) 6,137 MB/sec [Average]
[info]   (min, avg, max) = (374,811, 376,681, 378,987), stdev = 1,594
[info]   CI (99.9%): [370,544, 382,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12032,008, 12032,008, 12032,008), stdev = 0,001
[info]   CI (99.9%): [12032,008, 12032,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   441,865 ±(99.9%) 989,263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,865, 674,660), stdev = 256,909
[info]   CI (99.9%): [≈ 0, 1431,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   14134,372 ±(99.9%) 31627,731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14134,372, 21552,786), stdev = 8213,621
[info]   CI (99.9%): [≈ 0, 45762,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,640 ±(99.9%) 5,361 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,640, 3,130), stdev = 1,392
[info]   CI (99.9%): [≈ 0, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   20,434 ±(99.9%) 171,255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20,434, 99,986), stdev = 44,474
[info]   CI (99.9%): [≈ 0, 191,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18,51% complete, ETA 01:47:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31006,083 ops/s
[info] # Warmup Iteration   2: 37724,746 ops/s
[info] # Warmup Iteration   3: 38444,269 ops/s
[info] # Warmup Iteration   4: 38492,119 ops/s
[info] # Warmup Iteration   5: 38364,801 ops/s
[info] Iteration   1: 38219,641 ops/s
[info]                  ·gc.alloc.rate:                   571,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21065,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,142 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 38458,642 ops/s
[info]                  ·gc.alloc.rate:                   574,753 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27615,627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127,445 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38510,789 ops/s
[info]                  ·gc.alloc.rate:                   575,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              23520,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27575,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,552 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 38488,878 ops/s
[info]                  ·gc.alloc.rate:               575,237 MB/sec
[info]                  ·gc.alloc.rate.norm:          23520,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27508,812 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 38562,728 ops/s
[info]                  ·gc.alloc.rate:      576,185 MB/sec
[info]                  ·gc.alloc.rate.norm: 23520,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   38448,136 ±(99.9%) 513,151 ops/s [Average]
[info]   (min, avg, max) = (38219,641, 38448,136, 38562,728), stdev = 133,264
[info]   CI (99.9%): [37934,985, 38961,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   574,547 ±(99.9%) 7,663 MB/sec [Average]
[info]   (min, avg, max) = (571,109, 574,547, 576,185), stdev = 1,990
[info]   CI (99.9%): [566,884, 582,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   23520,011 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (23520,011, 23520,011, 23520,012), stdev = 0,001
[info]   CI (99.9%): [23520,008, 23520,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,762 ±(99.9%) 1124,032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,762, 674,836), stdev = 291,908
[info]   CI (99.9%): [≈ 0, 1630,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   20753,049 ±(99.9%) 45969,151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20753,049, 27615,627), stdev = 11938,043
[info]   CI (99.9%): [≈ 0, 66722,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,646 ±(99.9%) 5,315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,646, 3,114), stdev = 1,380
[info]   CI (99.9%): [≈ 0, 5,961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   26,428 ±(99.9%) 217,494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26,428, 127,445), stdev = 56,483
[info]   CI (99.9%): [≈ 0, 243,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18,71% complete, ETA 01:47:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21015,724 ops/s
[info] # Warmup Iteration   2: 23530,291 ops/s
[info] # Warmup Iteration   3: 23739,635 ops/s
[info] # Warmup Iteration   4: 23849,910 ops/s
[info] # Warmup Iteration   5: 23546,441 ops/s
[info] Iteration   1: 23610,221 ops/s
[info]                  ·gc.alloc.rate:               885,693 MB/sec
[info]                  ·gc.alloc.rate.norm:          59040,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44843,196 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 23563,351 ops/s
[info]                  ·gc.alloc.rate:                   883,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44932,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,171 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 23676,170 ops/s
[info]                  ·gc.alloc.rate:                   888,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89351,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,384 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23612,956 ops/s
[info]                  ·gc.alloc.rate:               885,824 MB/sec
[info]                  ·gc.alloc.rate.norm:          59040,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44795,003 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 23584,166 ops/s
[info]                  ·gc.alloc.rate:                   884,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44850,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,389 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   23609,373 ±(99.9%) 163,696 ops/s [Average]
[info]   (min, avg, max) = (23563,351, 23609,373, 23676,170), stdev = 42,511
[info]   CI (99.9%): [23445,677, 23773,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   885,655 ±(99.9%) 6,020 MB/sec [Average]
[info]   (min, avg, max) = (883,937, 885,655, 888,092), stdev = 1,563
[info]   CI (99.9%): [879,634, 891,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040,018 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (59040,017, 59040,018, 59040,020), stdev = 0,001
[info]   CI (99.9%): [59040,013, 59040,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   806,734 ±(99.9%) 1156,604 MB/sec [Average]
[info]   (min, avg, max) = (672,089, 806,734, 1344,046), stdev = 300,367
[info]   CI (99.9%): [≈ 0, 1963,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53754,512 ±(99.9%) 76625,813 B/op [Average]
[info]   (min, avg, max) = (44795,003, 53754,512, 89351,675), stdev = 19899,480
[info]   CI (99.9%): [≈ 0, 130380,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,389 ±(99.9%) 6,556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,389, 4,171), stdev = 1,703
[info]   CI (99.9%): [≈ 0, 7,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,91% complete, ETA 01:47:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16348,879 ops/s
[info] # Warmup Iteration   2: 22347,254 ops/s
[info] # Warmup Iteration   3: 22591,249 ops/s
[info] # Warmup Iteration   4: 22584,240 ops/s
[info] # Warmup Iteration   5: 22492,122 ops/s
[info] Iteration   1: 22493,501 ops/s
[info]                  ·gc.alloc.rate:                   637,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              44613,152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47188,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,195 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 22547,040 ops/s
[info]                  ·gc.alloc.rate:               639,030 MB/sec
[info]                  ·gc.alloc.rate.norm:          44608,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47077,120 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 22589,207 ops/s
[info]                  ·gc.alloc.rate:                   640,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47036,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,901 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20838,794 ops/s
[info]                  ·gc.alloc.rate:               590,637 MB/sec
[info]                  ·gc.alloc.rate.norm:          44608,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50985,021 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 22489,572 ops/s
[info]                  ·gc.alloc.rate:                   637,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47310,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,913 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   22191,623 ±(99.9%) 2916,367 ops/s [Average]
[info]   (min, avg, max) = (20838,794, 22191,623, 22589,207), stdev = 757,371
[info]   CI (99.9%): [19275,256, 25107,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   628,956 ±(99.9%) 82,603 MB/sec [Average]
[info]   (min, avg, max) = (590,637, 628,956, 640,186), stdev = 21,452
[info]   CI (99.9%): [546,353, 711,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44609,046 ±(99.9%) 8,838 B/op [Average]
[info]   (min, avg, max) = (44608,018, 44609,046, 44613,152), stdev = 2,295
[info]   CI (99.9%): [44600,208, 44617,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,969 ±(99.9%) 2,442 MB/sec [Average]
[info]   (min, avg, max) = (674,400, 674,969, 675,942), stdev = 0,634
[info]   CI (99.9%): [672,528, 677,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   47919,403 ±(99.9%) 6611,764 B/op [Average]
[info]   (min, avg, max) = (47036,017, 47919,403, 50985,021), stdev = 1717,054
[info]   CI (99.9%): [41307,639, 54531,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,230 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,146), stdev = 0,060
[info]   CI (99.9%): [≈ 0, 0,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,202 ±(99.9%) 16,060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,202, 10,195), stdev = 4,171
[info]   CI (99.9%): [≈ 0, 19,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,11% complete, ETA 01:47:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110230,642 ops/s
[info] # Warmup Iteration   2: 117826,745 ops/s
[info] # Warmup Iteration   3: 116982,413 ops/s
[info] # Warmup Iteration   4: 118728,874 ops/s
[info] # Warmup Iteration   5: 118506,063 ops/s
[info] Iteration   1: 117670,139 ops/s
[info]                  ·gc.alloc.rate:      306,197 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 118841,790 ops/s
[info]                  ·gc.alloc.rate:               309,314 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6775,365 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 118824,957 ops/s
[info]                  ·gc.alloc.rate:      309,228 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 118707,990 ops/s
[info]                  ·gc.alloc.rate:                   308,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6782,270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 118710,565 ops/s
[info]                  ·gc.alloc.rate:               308,897 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6782,213 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   118551,088 ±(99.9%) 1911,443 ops/s [Average]
[info]   (min, avg, max) = (117670,139, 118551,088, 118841,790), stdev = 496,396
[info]   CI (99.9%): [116639,645, 120462,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   308,517 ±(99.9%) 5,040 MB/sec [Average]
[info]   (min, avg, max) = (306,197, 308,517, 309,314), stdev = 1,309
[info]   CI (99.9%): [303,477, 313,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,003, 4096,004, 4096,004), stdev = 0,001
[info]   CI (99.9%): [4096,003, 4096,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,938 ±(99.9%) 1078,932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,938, 511,648), stdev = 280,195
[info]   CI (99.9%): [≈ 0, 1385,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4067,970 ±(99.9%) 14299,490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4067,970, 6782,270), stdev = 3713,532
[info]   CI (99.9%): [≈ 0, 18367,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,006), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,076), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19,32% complete, ETA 01:46:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12739,609 ops/s
[info] # Warmup Iteration   2: 19076,496 ops/s
[info] # Warmup Iteration   3: 19173,887 ops/s
[info] # Warmup Iteration   4: 19156,449 ops/s
[info] # Warmup Iteration   5: 19166,452 ops/s
[info] Iteration   1: 19186,230 ops/s
[info]                  ·gc.alloc.rate:                   1243,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              102008,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55218,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,831 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19125,702 ops/s
[info]                  ·gc.alloc.rate:               1239,504 MB/sec
[info]                  ·gc.alloc.rate.norm:          102008,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110892,846 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 19023,511 ops/s
[info]                  ·gc.alloc.rate:               1233,039 MB/sec
[info]                  ·gc.alloc.rate.norm:          102008,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111597,540 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 19169,509 ops/s
[info]                  ·gc.alloc.rate:                   1242,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              102008,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110906,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,709 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19182,059 ops/s
[info]                  ·gc.alloc.rate:                   1243,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              102008,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110940,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,708 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   19137,402 ±(99.9%) 261,995 ops/s [Average]
[info]   (min, avg, max) = (19023,511, 19137,402, 19186,230), stdev = 68,039
[info]   CI (99.9%): [18875,407, 19399,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1240,295 ±(99.9%) 16,706 MB/sec [Average]
[info]   (min, avg, max) = (1233,039, 1240,295, 1243,430), stdev = 4,339
[info]   CI (99.9%): [1223,589, 1257,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102008,023 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (102008,021, 102008,023, 102008,027), stdev = 0,002
[info]   CI (99.9%): [102008,016, 102008,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1214,446 ±(99.9%) 1165,335 MB/sec [Average]
[info]   (min, avg, max) = (673,086, 1214,446, 1351,850), stdev = 302,634
[info]   CI (99.9%): [49,111, 2379,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   99911,001 ±(99.9%) 96210,966 B/op [Average]
[info]   (min, avg, max) = (55218,409, 99911,001, 111597,540), stdev = 24985,682
[info]   CI (99.9%): [3700,034, 196121,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,049 ±(99.9%) 10,805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,049, 6,831), stdev = 2,806
[info]   CI (99.9%): [≈ 0, 12,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19,52% complete, ETA 01:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17264,535 ops/s
[info] # Warmup Iteration   2: 18858,109 ops/s
[info] # Warmup Iteration   3: 18992,210 ops/s
[info] # Warmup Iteration   4: 18896,414 ops/s
[info] # Warmup Iteration   5: 18911,880 ops/s
[info] Iteration   1: 18918,866 ops/s
[info]                  ·gc.alloc.rate:                   652,442 MB/sec
[info]                  ·gc.alloc.rate.norm:              54277,118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56188,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 236,552 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 19105,252 ops/s
[info]                  ·gc.alloc.rate:                   658,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55644,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,145 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 17703,710 ops/s
[info]                  ·gc.alloc.rate:                   610,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59869,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,851 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 18332,719 ops/s
[info]                  ·gc.alloc.rate:               632,067 MB/sec
[info]                  ·gc.alloc.rate.norm:          54256,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57815,791 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 18613,558 ops/s
[info]                  ·gc.alloc.rate:                   641,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56886,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,520 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   18534,821 ±(99.9%) 2118,442 ops/s [Average]
[info]   (min, avg, max) = (17703,710, 18534,821, 19105,252), stdev = 550,153
[info]   CI (99.9%): [16416,379, 20653,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   639,022 ±(99.9%) 73,242 MB/sec [Average]
[info]   (min, avg, max) = (610,289, 639,022, 658,675), stdev = 19,021
[info]   CI (99.9%): [565,780, 712,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   54260,242 ±(99.9%) 36,327 B/op [Average]
[info]   (min, avg, max) = (54256,021, 54260,242, 54277,118), stdev = 9,434
[info]   CI (99.9%): [54223,915, 54296,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   674,134 ±(99.9%) 4,860 MB/sec [Average]
[info]   (min, avg, max) = (672,749, 674,134, 675,532), stdev = 1,262
[info]   CI (99.9%): [669,274, 678,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   57281,054 ±(99.9%) 6389,470 B/op [Average]
[info]   (min, avg, max) = (55644,550, 57281,054, 59869,562), stdev = 1659,325
[info]   CI (99.9%): [50891,584, 63670,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,594 ±(99.9%) 4,844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,594, 2,843), stdev = 1,258
[info]   CI (99.9%): [≈ 0, 5,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   49,413 ±(99.9%) 402,897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49,413, 236,552), stdev = 104,631
[info]   CI (99.9%): [≈ 0, 452,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19,72% complete, ETA 01:46:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50866,677 ops/s
[info] # Warmup Iteration   2: 64220,459 ops/s
[info] # Warmup Iteration   3: 62799,153 ops/s
[info] # Warmup Iteration   4: 64699,371 ops/s
[info] # Warmup Iteration   5: 64877,171 ops/s
[info] Iteration   1: 64957,921 ops/s
[info]                  ·gc.alloc.rate:               984,299 MB/sec
[info]                  ·gc.alloc.rate.norm:          23848,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16285,143 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 64977,990 ops/s
[info]                  ·gc.alloc.rate:                   984,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,652 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32545,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,008 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 65054,566 ops/s
[info]                  ·gc.alloc.rate:               985,789 MB/sec
[info]                  ·gc.alloc.rate.norm:          23848,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16244,500 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 64911,713 ops/s
[info]                  ·gc.alloc.rate:                   983,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32560,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 64895,787 ops/s
[info]                  ·gc.alloc.rate:               983,198 MB/sec
[info]                  ·gc.alloc.rate.norm:          23848,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16283,290 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   64959,595 ±(99.9%) 241,433 ops/s [Average]
[info]   (min, avg, max) = (64895,787, 64959,595, 65054,566), stdev = 62,699
[info]   CI (99.9%): [64718,162, 65201,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   984,303 ±(99.9%) 3,809 MB/sec [Average]
[info]   (min, avg, max) = (983,198, 984,303, 985,789), stdev = 0,989
[info]   CI (99.9%): [980,494, 988,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23848,006, 23848,007, 23848,007), stdev = 0,001
[info]   CI (99.9%): [23848,006, 23848,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   940,324 ±(99.9%) 1416,620 MB/sec [Average]
[info]   (min, avg, max) = (671,322, 940,324, 1343,652), stdev = 367,892
[info]   CI (99.9%): [≈ 0, 2356,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22783,724 ±(99.9%) 34339,896 B/op [Average]
[info]   (min, avg, max) = (16244,500, 22783,724, 32560,058), stdev = 8917,962
[info]   CI (99.9%): [≈ 0, 57123,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,404 ±(99.9%) 2,128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,404, 1,009), stdev = 0,553
[info]   CI (99.9%): [≈ 0, 2,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,92% complete, ETA 01:46:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 72461,531 ops/s
[info] # Warmup Iteration   2: 99620,683 ops/s
[info] # Warmup Iteration   3: 99963,949 ops/s
[info] # Warmup Iteration   4: 99976,670 ops/s
[info] # Warmup Iteration   5: 98431,415 ops/s
[info] Iteration   1: 95414,835 ops/s
[info]                  ·gc.alloc.rate:                   1131,461 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22303,582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,687 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 99788,409 ops/s
[info]                  ·gc.alloc.rate:                   1183,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21336,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,657 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 99398,940 ops/s
[info]                  ·gc.alloc.rate:               1178,706 MB/sec
[info]                  ·gc.alloc.rate.norm:          18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10720,525 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 99742,570 ops/s
[info]                  ·gc.alloc.rate:                   1182,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21372,377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,657 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 99729,278 ops/s
[info]                  ·gc.alloc.rate:                   1182,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21390,929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,328 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   98814,807 ±(99.9%) 7343,009 ops/s [Average]
[info]   (min, avg, max) = (95414,835, 98814,807, 99788,409), stdev = 1906,956
[info]   CI (99.9%): [91471,798, 106157,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1171,761 ±(99.9%) 87,036 MB/sec [Average]
[info]   (min, avg, max) = (1131,461, 1171,761, 1183,318), stdev = 22,603
[info]   CI (99.9%): [1084,725, 1258,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18664,004, 18664,004, 18664,005), stdev = 0,001
[info]   CI (99.9%): [18664,003, 18664,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,330 ±(99.9%) 1165,169 MB/sec [Average]
[info]   (min, avg, max) = (677,044, 1218,330, 1355,258), stdev = 302,591
[info]   CI (99.9%): [53,161, 2383,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19424,821 ±(99.9%) 18801,815 B/op [Average]
[info]   (min, avg, max) = (10720,525, 19424,821, 22303,582), stdev = 4882,772
[info]   CI (99.9%): [623,006, 38226,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,466 ±(99.9%) 1,151 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,466, 0,687), stdev = 0,299
[info]   CI (99.9%): [≈ 0, 1,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20,12% complete, ETA 01:45:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240380,405 ops/s
[info] # Warmup Iteration   2: 258661,764 ops/s
[info] # Warmup Iteration   3: 258759,645 ops/s
[info] # Warmup Iteration   4: 263367,463 ops/s
[info] # Warmup Iteration   5: 262834,519 ops/s
[info] Iteration   1: 262367,663 ops/s
[info]                  ·gc.alloc.rate:      416,057 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 260985,714 ops/s
[info]                  ·gc.alloc.rate:                   413,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3084,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 262929,457 ops/s
[info]                  ·gc.alloc.rate:                   416,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3062,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 261456,702 ops/s
[info]                  ·gc.alloc.rate:                   414,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4067,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,517 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 263523,542 ops/s
[info]                  ·gc.alloc.rate:      417,859 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   262252,616 ±(99.9%) 4004,079 ops/s [Average]
[info]   (min, avg, max) = (260985,714, 262252,616, 263523,542), stdev = 1039,847
[info]   CI (99.9%): [258248,537, 266256,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   415,891 ±(99.9%) 6,250 MB/sec [Average]
[info]   (min, avg, max) = (413,894, 415,891, 417,859), stdev = 1,623
[info]   CI (99.9%): [409,641, 422,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2496,002, 2496,002, 2496,002), stdev = 0,001
[info]   CI (99.9%): [2496,002, 2496,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,778 ±(99.9%) 1221,957 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,778, 675,796), stdev = 317,338
[info]   CI (99.9%): [≈ 0, 1561,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2042,954 ±(99.9%) 7349,453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2042,954, 4067,745), stdev = 1908,630
[info]   CI (99.9%): [≈ 0, 9392,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,554 ±(99.9%) 4,714 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,554, 2,744), stdev = 1,224
[info]   CI (99.9%): [≈ 0, 5,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,336 ±(99.9%) 28,375 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,336, 16,517), stdev = 7,369
[info]   CI (99.9%): [≈ 0, 31,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20,32% complete, ETA 01:45:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246968,962 ops/s
[info] # Warmup Iteration   2: 265175,536 ops/s
[info] # Warmup Iteration   3: 276976,729 ops/s
[info] # Warmup Iteration   4: 276738,796 ops/s
[info] # Warmup Iteration   5: 276717,163 ops/s
[info] Iteration   1: 276677,497 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 247656,873 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 276803,313 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 276088,153 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 276144,416 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   270674,050 ±(99.9%) 49561,135 ops/s [Average]
[info]   (min, avg, max) = (247656,873, 270674,050, 276803,313), stdev = 12870,869
[info]   CI (99.9%): [221112,915, 320235,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,002), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20,52% complete, ETA 01:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62456,810 ops/s
[info] # Warmup Iteration   2: 78531,304 ops/s
[info] # Warmup Iteration   3: 78582,312 ops/s
[info] # Warmup Iteration   4: 78396,132 ops/s
[info] # Warmup Iteration   5: 78775,941 ops/s
[info] Iteration   1: 78617,720 ops/s
[info]                  ·gc.alloc.rate:                   1225,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26828,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,833 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 78904,220 ops/s
[info]                  ·gc.alloc.rate:                   1230,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26733,931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,415 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 79054,423 ops/s
[info]                  ·gc.alloc.rate:               1232,742 MB/sec
[info]                  ·gc.alloc.rate.norm:          24544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13346,718 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 78652,720 ops/s
[info]                  ·gc.alloc.rate:               1226,583 MB/sec
[info]                  ·gc.alloc.rate.norm:          24544,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26836,156 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 78514,120 ops/s
[info]                  ·gc.alloc.rate:                   1224,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26911,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,417 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   78748,641 ±(99.9%) 858,980 ops/s [Average]
[info]   (min, avg, max) = (78514,120, 78748,641, 79054,423), stdev = 223,074
[info]   CI (99.9%): [77889,661, 79607,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1227,986 ±(99.9%) 13,494 MB/sec [Average]
[info]   (min, avg, max) = (1224,172, 1227,986, 1232,742), stdev = 3,504
[info]   CI (99.9%): [1214,492, 1241,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24544,008 ±(99.9%) 0,019 B/op [Average]
[info]   (min, avg, max) = (24544,005, 24544,008, 24544,016), stdev = 0,005
[info]   CI (99.9%): [24543,989, 24544,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,811 ±(99.9%) 1154,779 MB/sec [Average]
[info]   (min, avg, max) = (670,349, 1206,811, 1342,232), stdev = 299,893
[info]   CI (99.9%): [52,032, 2361,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24131,326 ±(99.9%) 23215,944 B/op [Average]
[info]   (min, avg, max) = (13346,718, 24131,326, 26911,043), stdev = 6029,107
[info]   CI (99.9%): [915,382, 47347,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,333 ±(99.9%) 1,342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,333, 0,833), stdev = 0,349
[info]   CI (99.9%): [≈ 0, 1,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20,72% complete, ETA 01:45:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18520,936 ops/s
[info] # Warmup Iteration   2: 20073,761 ops/s
[info] # Warmup Iteration   3: 20175,331 ops/s
[info] # Warmup Iteration   4: 19628,702 ops/s
[info] # Warmup Iteration   5: 19926,671 ops/s
[info] Iteration   1: 20154,629 ops/s
[info]                  ·gc.alloc.rate:               387,918 MB/sec
[info]                  ·gc.alloc.rate.norm:          30296,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39945,752 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 20223,779 ops/s
[info]                  ·gc.alloc.rate:                   389,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39813,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,636 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 20164,187 ops/s
[info]                  ·gc.alloc.rate:               388,122 MB/sec
[info]                  ·gc.alloc.rate.norm:          30296,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39925,948 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 20129,209 ops/s
[info]                  ·gc.alloc.rate:      387,485 MB/sec
[info]                  ·gc.alloc.rate.norm: 30296,020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20121,925 ops/s
[info]                  ·gc.alloc.rate:                   387,297 MB/sec
[info]                  ·gc.alloc.rate.norm:              30296,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52827,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222,400 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   20158,746 ±(99.9%) 155,273 ops/s [Average]
[info]   (min, avg, max) = (20121,925, 20158,746, 20223,779), stdev = 40,324
[info]   CI (99.9%): [20003,472, 20314,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   388,027 ±(99.9%) 3,046 MB/sec [Average]
[info]   (min, avg, max) = (387,297, 388,027, 389,314), stdev = 0,791
[info]   CI (99.9%): [384,980, 391,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   30296,022 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (30296,020, 30296,022, 30296,025), stdev = 0,002
[info]   CI (99.9%): [30296,013, 30296,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,983 ±(99.9%) 989,828 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,983, 675,332), stdev = 257,055
[info]   CI (99.9%): [≈ 0, 1431,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   34502,497 ±(99.9%) 77336,410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34502,497, 52827,350), stdev = 20084,020
[info]   CI (99.9%): [≈ 0, 111838,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,573 ±(99.9%) 4,887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,573, 2,843), stdev = 1,269
[info]   CI (99.9%): [≈ 0, 5,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   44,807 ±(99.9%) 382,291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44,807, 222,400), stdev = 99,280
[info]   CI (99.9%): [≈ 0, 427,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20,93% complete, ETA 01:44:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22535,659 ops/s
[info] # Warmup Iteration   2: 29844,804 ops/s
[info] # Warmup Iteration   3: 30228,910 ops/s
[info] # Warmup Iteration   4: 30160,208 ops/s
[info] # Warmup Iteration   5: 30089,238 ops/s
[info] Iteration   1: 30295,757 ops/s
[info]                  ·gc.alloc.rate:      630,088 MB/sec
[info]                  ·gc.alloc.rate.norm: 32736,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 28720,564 ops/s
[info]                  ·gc.alloc.rate:                   597,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36978,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185,797 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 30259,533 ops/s
[info]                  ·gc.alloc.rate:                   629,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,744 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35096,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,165 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 30121,038 ops/s
[info]                  ·gc.alloc.rate:                   626,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35119,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,088 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30208,226 ops/s
[info]                  ·gc.alloc.rate:                   628,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35018,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,085 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   29921,024 ±(99.9%) 2596,407 ops/s [Average]
[info]   (min, avg, max) = (28720,564, 29921,024, 30295,757), stdev = 674,279
[info]   CI (99.9%): [27324,617, 32517,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   622,334 ±(99.9%) 53,940 MB/sec [Average]
[info]   (min, avg, max) = (597,387, 622,334, 630,088), stdev = 14,008
[info]   CI (99.9%): [568,394, 676,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (32736,013, 32736,014, 32736,015), stdev = 0,001
[info]   CI (99.9%): [32736,012, 32736,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   538,763 ±(99.9%) 1159,740 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,763, 674,807), stdev = 301,181
[info]   CI (99.9%): [≈ 0, 1698,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28442,695 ±(99.9%) 61307,139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28442,695, 36978,503), stdev = 15921,269
[info]   CI (99.9%): [≈ 0, 89749,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,695 ±(99.9%) 5,803 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,695, 3,391), stdev = 1,507
[info]   CI (99.9%): [≈ 0, 6,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   38,027 ±(99.9%) 318,100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38,027, 185,797), stdev = 82,610
[info]   CI (99.9%): [≈ 0, 356,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,13% complete, ETA 01:44:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22757,796 ops/s
[info] # Warmup Iteration   2: 31849,793 ops/s
[info] # Warmup Iteration   3: 31388,577 ops/s
[info] # Warmup Iteration   4: 31437,678 ops/s
[info] # Warmup Iteration   5: 32108,693 ops/s
[info] Iteration   1: 32084,371 ops/s
[info]                  ·gc.alloc.rate:               420,231 MB/sec
[info]                  ·gc.alloc.rate.norm:          20616,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25093,680 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 32170,243 ops/s
[info]                  ·gc.alloc.rate:               421,408 MB/sec
[info]                  ·gc.alloc.rate.norm:          20616,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25028,169 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 32128,239 ops/s
[info]                  ·gc.alloc.rate:                   420,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              20616,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33037,192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,138 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 32087,041 ops/s
[info]                  ·gc.alloc.rate:      420,343 MB/sec
[info]                  ·gc.alloc.rate.norm: 20616,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 32092,760 ops/s
[info]                  ·gc.alloc.rate:                   420,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              20616,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33075,273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   32112,531 ±(99.9%) 141,626 ops/s [Average]
[info]   (min, avg, max) = (32084,371, 32112,531, 32170,243), stdev = 36,780
[info]   CI (99.9%): [31970,905, 32254,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   420,628 ±(99.9%) 1,898 MB/sec [Average]
[info]   (min, avg, max) = (420,231, 420,628, 421,408), stdev = 0,493
[info]   CI (99.9%): [418,730, 422,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20616,013 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (20616,013, 20616,013, 20616,015), stdev = 0,001
[info]   CI (99.9%): [20616,010, 20616,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,367 ±(99.9%) 1068,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,367, 674,373), stdev = 277,394
[info]   CI (99.9%): [≈ 0, 1542,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23246,863 ±(99.9%) 52354,904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23246,863, 33075,273), stdev = 13596,402
[info]   CI (99.9%): [≈ 0, 75601,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,146), stdev = 0,063
[info]   CI (99.9%): [≈ 0, 0,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,836 ±(99.9%) 11,909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,836, 7,138), stdev = 3,093
[info]   CI (99.9%): [≈ 0, 13,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,33% complete, ETA 01:44:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119362,144 ops/s
[info] # Warmup Iteration   2: 132247,312 ops/s
[info] # Warmup Iteration   3: 135258,635 ops/s
[info] # Warmup Iteration   4: 135299,079 ops/s
[info] # Warmup Iteration   5: 135374,171 ops/s
[info] Iteration   1: 135421,656 ops/s
[info]                  ·gc.alloc.rate:                   528,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5945,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,389 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 136156,957 ops/s
[info]                  ·gc.alloc.rate:      531,569 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 133271,879 ops/s
[info]                  ·gc.alloc.rate:                   520,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,750 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7968,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,120 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36,843 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 135190,527 ops/s
[info]                  ·gc.alloc.rate:                   527,769 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7855,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,727 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 135173,686 ops/s
[info]                  ·gc.alloc.rate:                   527,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7832,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,242 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   135042,941 ±(99.9%) 4111,360 ops/s [Average]
[info]   (min, avg, max) = (133271,879, 135042,941, 136156,957), stdev = 1067,707
[info]   CI (99.9%): [130931,581, 139154,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   527,175 ±(99.9%) 16,071 MB/sec [Average]
[info]   (min, avg, max) = (520,269, 527,175, 531,569), stdev = 4,174
[info]   CI (99.9%): [511,104, 543,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6144,003, 6144,003, 6144,003), stdev = 0,001
[info]   CI (99.9%): [6144,003, 6144,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,754 ±(99.9%) 1123,998 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,754, 674,808), stdev = 291,899
[info]   CI (99.9%): [≈ 0, 1630,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5920,458 ±(99.9%) 13149,979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5920,458, 7968,309), stdev = 3415,008
[info]   CI (99.9%): [≈ 0, 19070,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,647 ±(99.9%) 5,323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,647, 3,120), stdev = 1,382
[info]   CI (99.9%): [≈ 0, 5,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7,640 ±(99.9%) 62,869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,640, 36,843), stdev = 16,327
[info]   CI (99.9%): [≈ 0, 70,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21,53% complete, ETA 01:43:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14187,652 ops/s
[info] # Warmup Iteration   2: 24807,143 ops/s
[info] # Warmup Iteration   3: 24714,586 ops/s
[info] # Warmup Iteration   4: 24892,083 ops/s
[info] # Warmup Iteration   5: 24897,165 ops/s
[info] Iteration   1: 25031,441 ops/s
[info]                  ·gc.alloc.rate:                   1381,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84976,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,309 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 25056,046 ops/s
[info]                  ·gc.alloc.rate:                   1383,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84978,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,308 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 25043,568 ops/s
[info]                  ·gc.alloc.rate:                   1382,473 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85085,864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,616 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 25037,532 ops/s
[info]                  ·gc.alloc.rate:                   1382,313 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85162,258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,308 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 24975,679 ops/s
[info]                  ·gc.alloc.rate:               1378,616 MB/sec
[info]                  ·gc.alloc.rate.norm:          86880,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85436,572 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   25028,853 ±(99.9%) 119,704 ops/s [Average]
[info]   (min, avg, max) = (24975,679, 25028,853, 25056,046), stdev = 31,087
[info]   CI (99.9%): [24909,149, 25148,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1381,686 ±(99.9%) 6,891 MB/sec [Average]
[info]   (min, avg, max) = (1378,616, 1381,686, 1383,223), stdev = 1,790
[info]   CI (99.9%): [1374,794, 1388,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86880,017 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (86880,016, 86880,017, 86880,018), stdev = 0,001
[info]   CI (99.9%): [86880,014, 86880,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1353,821 ±(99.9%) 6,366 MB/sec [Average]
[info]   (min, avg, max) = (1351,530, 1353,821, 1355,712), stdev = 1,653
[info]   CI (99.9%): [1347,454, 1360,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85128,064 ±(99.9%) 728,780 B/op [Average]
[info]   (min, avg, max) = (84976,663, 85128,064, 85436,572), stdev = 189,262
[info]   CI (99.9%): [84399,285, 85856,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,308 ±(99.9%) 3,562 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,308, 2,616), stdev = 0,925
[info]   CI (99.9%): [≈ 0, 4,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21,73% complete, ETA 01:43:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24840,487 ops/s
[info] # Warmup Iteration   2: 29502,216 ops/s
[info] # Warmup Iteration   3: 29481,883 ops/s
[info] # Warmup Iteration   4: 29442,817 ops/s
[info] # Warmup Iteration   5: 29621,865 ops/s
[info] Iteration   1: 29576,339 ops/s
[info]                  ·gc.alloc.rate:                   564,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27221,930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29669,197 ops/s
[info]                  ·gc.alloc.rate:                   566,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35795,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171,211 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 29721,267 ops/s
[info]                  ·gc.alloc.rate:                   567,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35728,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,307 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 29705,678 ops/s
[info]                  ·gc.alloc.rate:               567,044 MB/sec
[info]                  ·gc.alloc.rate.norm:          30040,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35641,844 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 29699,887 ops/s
[info]                  ·gc.alloc.rate:      566,839 MB/sec
[info]                  ·gc.alloc.rate.norm: 30040,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   29674,474 ±(99.9%) 223,432 ops/s [Average]
[info]   (min, avg, max) = (29576,339, 29674,474, 29721,267), stdev = 58,025
[info]   CI (99.9%): [29451,041, 29897,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   566,395 ±(99.9%) 4,343 MB/sec [Average]
[info]   (min, avg, max) = (564,471, 566,395, 567,272), stdev = 1,128
[info]   CI (99.9%): [562,052, 570,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30040,015 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (30040,014, 30040,015, 30040,016), stdev = 0,001
[info]   CI (99.9%): [30040,011, 30040,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   506,772 ±(99.9%) 1124,055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,772, 674,867), stdev = 291,913
[info]   CI (99.9%): [≈ 0, 1630,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   26877,629 ±(99.9%) 59567,169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26877,629, 35795,898), stdev = 15469,405
[info]   CI (99.9%): [≈ 0, 86444,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,658 ±(99.9%) 5,532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,658, 3,228), stdev = 1,437
[info]   CI (99.9%): [≈ 0, 6,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   34,915 ±(99.9%) 293,438 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34,915, 171,211), stdev = 76,205
[info]   CI (99.9%): [≈ 0, 328,354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21,93% complete, ETA 01:43:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162101,374 ops/s
[info] # Warmup Iteration   2: 195856,920 ops/s
[info] # Warmup Iteration   3: 193866,689 ops/s
[info] # Warmup Iteration   4: 193040,103 ops/s
[info] # Warmup Iteration   5: 193675,588 ops/s
[info] Iteration   1: 193095,821 ops/s
[info]                  ·gc.alloc.rate:                   671,361 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5499,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,688 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 195327,488 ops/s
[info]                  ·gc.alloc.rate:                   679,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5436,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,503 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 187324,760 ops/s
[info]                  ·gc.alloc.rate:               651,235 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5646,712 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 195145,935 ops/s
[info]                  ·gc.alloc.rate:               678,533 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5420,427 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 193533,854 ops/s
[info]                  ·gc.alloc.rate:                   672,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5460,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,508 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   192885,571 ±(99.9%) 12545,552 ops/s [Average]
[info]   (min, avg, max) = (187324,760, 192885,571, 195327,488), stdev = 3258,040
[info]   CI (99.9%): [180340,019, 205431,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   670,611 ±(99.9%) 43,724 MB/sec [Average]
[info]   (min, avg, max) = (651,235, 670,611, 679,103), stdev = 11,355
[info]   CI (99.9%): [626,887, 714,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,009 ±(99.9%) 6,221 MB/sec [Average]
[info]   (min, avg, max) = (671,380, 673,009, 674,753), stdev = 1,616
[info]   CI (99.9%): [666,788, 679,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5492,790 ±(99.9%) 350,584 B/op [Average]
[info]   (min, avg, max) = (5420,427, 5492,790, 5646,712), stdev = 91,045
[info]   CI (99.9%): [5142,206, 5843,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,704 ±(99.9%) 5,797 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,704, 3,397), stdev = 1,506
[info]   CI (99.9%): [≈ 0, 6,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,740 ±(99.9%) 47,255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,740, 27,688), stdev = 12,272
[info]   CI (99.9%): [≈ 0, 52,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,13% complete, ETA 01:43:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236374,188 ops/s
[info] # Warmup Iteration   2: 313143,285 ops/s
[info] # Warmup Iteration   3: 314738,940 ops/s
[info] # Warmup Iteration   4: 313442,339 ops/s
[info] # Warmup Iteration   5: 313413,512 ops/s
[info] Iteration   1: 313937,388 ops/s
[info]                  ·gc.alloc.rate:      317,530 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 312877,105 ops/s
[info]                  ·gc.alloc.rate:               316,462 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2573,258 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 314192,939 ops/s
[info]                  ·gc.alloc.rate:      317,767 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 312974,678 ops/s
[info]                  ·gc.alloc.rate:                   316,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2572,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,105 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 313809,614 ops/s
[info]                  ·gc.alloc.rate:      317,427 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   313558,345 ±(99.9%) 2289,657 ops/s [Average]
[info]   (min, avg, max) = (312877,105, 313558,345, 314192,939), stdev = 594,617
[info]   CI (99.9%): [311268,688, 315848,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   317,156 ±(99.9%) 2,266 MB/sec [Average]
[info]   (min, avg, max) = (316,462, 317,156, 317,767), stdev = 0,589
[info]   CI (99.9%): [314,889, 319,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,613 ±(99.9%) 1078,865 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,613, 511,546), stdev = 280,178
[info]   CI (99.9%): [≈ 0, 1283,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1029,119 ±(99.9%) 5426,249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1029,119, 2573,258), stdev = 1409,180
[info]   CI (99.9%): [≈ 0, 6455,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,105), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,33% complete, ETA 01:42:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 531154,271 ops/s
[info] # Warmup Iteration   2: 573010,972 ops/s
[info] # Warmup Iteration   3: 558549,235 ops/s
[info] # Warmup Iteration   4: 568069,425 ops/s
[info] # Warmup Iteration   5: 575076,129 ops/s
[info] Iteration   1: 574145,050 ops/s
[info]                  ·gc.alloc.rate:                   440,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1402,296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 570574,072 ops/s
[info]                  ·gc.alloc.rate:               437,938 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1411,061 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 556057,717 ops/s
[info]                  ·gc.alloc.rate:      426,736 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 556470,131 ops/s
[info]                  ·gc.alloc.rate:                   427,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1908,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,953 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 561452,446 ops/s
[info]                  ·gc.alloc.rate:      430,875 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   563739,883 ±(99.9%) 31757,366 ops/s [Average]
[info]   (min, avg, max) = (556057,717, 563739,883, 574145,050), stdev = 8247,287
[info]   CI (99.9%): [531982,517, 595497,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   432,666 ±(99.9%) 24,401 MB/sec [Average]
[info]   (min, avg, max) = (426,736, 432,666, 440,653), stdev = 6,337
[info]   CI (99.9%): [408,265, 457,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,570 ±(99.9%) 1220,906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,570, 674,769), stdev = 317,065
[info]   CI (99.9%): [≈ 0, 1560,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   944,347 ±(99.9%) 3411,939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 944,347, 1908,379), stdev = 886,070
[info]   CI (99.9%): [≈ 0, 4356,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,634 ±(99.9%) 5,449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,634, 3,166), stdev = 1,415
[info]   CI (99.9%): [≈ 0, 6,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,794 ±(99.9%) 15,411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,794, 8,953), stdev = 4,002
[info]   CI (99.9%): [≈ 0, 17,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22,54% complete, ETA 01:42:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 562411,201 ops/s
[info] # Warmup Iteration   2: 602436,334 ops/s
[info] # Warmup Iteration   3: 604447,754 ops/s
[info] # Warmup Iteration   4: 604498,237 ops/s
[info] # Warmup Iteration   5: 604067,732 ops/s
[info] Iteration   1: 605355,491 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 604562,873 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 605987,758 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 604626,682 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 604351,972 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   604976,955 ±(99.9%) 2618,559 ops/s [Average]
[info]   (min, avg, max) = (604351,972, 604976,955, 605987,758), stdev = 680,031
[info]   CI (99.9%): [602358,396, 607595,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22,74% complete, ETA 01:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201581,539 ops/s
[info] # Warmup Iteration   2: 302988,399 ops/s
[info] # Warmup Iteration   3: 303186,913 ops/s
[info] # Warmup Iteration   4: 303750,432 ops/s
[info] # Warmup Iteration   5: 302745,636 ops/s
[info] Iteration   1: 303109,022 ops/s
[info]                  ·gc.alloc.rate:                   835,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3505,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 302662,534 ops/s
[info]                  ·gc.alloc.rate:               833,836 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3510,413 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 303714,340 ops/s
[info]                  ·gc.alloc.rate:               836,660 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3501,708 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 302834,489 ops/s
[info]                  ·gc.alloc.rate:                   834,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7025,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,216 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 302614,768 ops/s
[info]                  ·gc.alloc.rate:               833,747 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3516,200 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   302987,031 ±(99.9%) 1733,866 ops/s [Average]
[info]   (min, avg, max) = (302614,768, 302987,031, 303714,340), stdev = 450,280
[info]   CI (99.9%): [301253,164, 304720,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   834,736 ±(99.9%) 4,612 MB/sec [Average]
[info]   (min, avg, max) = (833,747, 834,736, 836,660), stdev = 1,198
[info]   CI (99.9%): [830,124, 839,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4336,001, 4336,001, 4336,001), stdev = 0,001
[info]   CI (99.9%): [4336,001, 4336,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   810,770 ±(99.9%) 1164,852 MB/sec [Average]
[info]   (min, avg, max) = (675,071, 810,770, 1351,913), stdev = 302,508
[info]   CI (99.9%): [≈ 0, 1975,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4211,826 ±(99.9%) 6056,815 B/op [Average]
[info]   (min, avg, max) = (3501,708, 4211,826, 7025,562), stdev = 1572,936
[info]   CI (99.9%): [≈ 0, 10268,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,108 ±(99.9%) 0,589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,108, 0,324), stdev = 0,153
[info]   CI (99.9%): [≈ 0, 0,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22,94% complete, ETA 01:42:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45496,986 ops/s
[info] # Warmup Iteration   2: 48946,815 ops/s
[info] # Warmup Iteration   3: 48575,487 ops/s
[info] # Warmup Iteration   4: 49180,186 ops/s
[info] # Warmup Iteration   5: 48838,859 ops/s
[info] Iteration   1: 48865,437 ops/s
[info]                  ·gc.alloc.rate:      226,488 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 48944,335 ops/s
[info]                  ·gc.alloc.rate:                   226,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16450,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 48960,402 ops/s
[info]                  ·gc.alloc.rate:      226,946 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48769,171 ops/s
[info]                  ·gc.alloc.rate:                   226,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16508,607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,890 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 49054,310 ops/s
[info]                  ·gc.alloc.rate:      227,373 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   48918,731 ±(99.9%) 412,855 ops/s [Average]
[info]   (min, avg, max) = (48769,171, 48918,731, 49054,310), stdev = 107,217
[info]   CI (99.9%): [48505,876, 49331,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   226,754 ±(99.9%) 1,905 MB/sec [Average]
[info]   (min, avg, max) = (226,070, 226,754, 227,373), stdev = 0,495
[info]   CI (99.9%): [224,849, 228,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (7296,008, 7296,009, 7296,010), stdev = 0,001
[info]   CI (99.9%): [7296,006, 7296,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,624 ±(99.9%) 1078,926 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,624, 511,596), stdev = 280,194
[info]   CI (99.9%): [≈ 0, 1283,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6591,909 ±(99.9%) 34757,323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6591,909, 16508,607), stdev = 9026,367
[info]   CI (99.9%): [≈ 0, 41349,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,028), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,179 ±(99.9%) 1,530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,179, 0,890), stdev = 0,397
[info]   CI (99.9%): [≈ 0, 1,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23,14% complete, ETA 01:41:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38096,927 ops/s
[info] # Warmup Iteration   2: 44680,319 ops/s
[info] # Warmup Iteration   3: 44372,216 ops/s
[info] # Warmup Iteration   4: 45095,773 ops/s
[info] # Warmup Iteration   5: 45157,985 ops/s
[info] Iteration   1: 45350,751 ops/s
[info]                  ·gc.alloc.rate:                   2022,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70029,121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,722 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45301,644 ops/s
[info]                  ·gc.alloc.rate:                   2020,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70198,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,893 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45116,576 ops/s
[info]                  ·gc.alloc.rate:                   2012,250 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70640,909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,726 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 45363,230 ops/s
[info]                  ·gc.alloc.rate:                   2023,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70348,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,167 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 45375,306 ops/s
[info]                  ·gc.alloc.rate:                   2023,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70445,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,166 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   45301,501 ±(99.9%) 412,398 ops/s [Average]
[info]   (min, avg, max) = (45116,576, 45301,501, 45375,306), stdev = 107,099
[info]   CI (99.9%): [44889,103, 45713,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   2020,547 ±(99.9%) 18,418 MB/sec [Average]
[info]   (min, avg, max) = (2012,250, 2020,547, 2023,639), stdev = 4,783
[info]   CI (99.9%): [2002,129, 2038,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70200,009, 70200,009, 70200,010), stdev = 0,001
[info]   CI (99.9%): [70200,008, 70200,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2024,358 ±(99.9%) 19,896 MB/sec [Average]
[info]   (min, avg, max) = (2017,925, 2024,358, 2030,721), stdev = 5,167
[info]   CI (99.9%): [2004,462, 2044,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   70332,699 ±(99.9%) 899,087 B/op [Average]
[info]   (min, avg, max) = (70029,121, 70332,699, 70640,909), stdev = 233,490
[info]   CI (99.9%): [69433,612, 71231,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,735 ±(99.9%) 3,731 B/op [Average]
[info]   (min, avg, max) = (0,722, 1,735, 2,893), stdev = 0,969
[info]   CI (99.9%): [≈ 0, 5,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23,34% complete, ETA 01:41:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88639,783 ops/s
[info] # Warmup Iteration   2: 334249,669 ops/s
[info] # Warmup Iteration   3: 332756,590 ops/s
[info] # Warmup Iteration   4: 333069,450 ops/s
[info] # Warmup Iteration   5: 332751,842 ops/s
[info] Iteration   1: 333497,444 ops/s
[info]                  ·gc.alloc.rate:      345,795 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 333666,322 ops/s
[info]                  ·gc.alloc.rate:                   345,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2413,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,241 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 332504,912 ops/s
[info]                  ·gc.alloc.rate:               344,778 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2421,413 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 333375,681 ops/s
[info]                  ·gc.alloc.rate:      345,723 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 333374,887 ops/s
[info]                  ·gc.alloc.rate:                   345,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3182,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,498 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   333283,849 ±(99.9%) 1738,528 ops/s [Average]
[info]   (min, avg, max) = (332504,912, 333283,849, 333666,322), stdev = 451,490
[info]   CI (99.9%): [331545,322, 335022,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   345,585 ±(99.9%) 1,798 MB/sec [Average]
[info]   (min, avg, max) = (344,778, 345,585, 345,975), stdev = 0,467
[info]   CI (99.9%): [343,787, 347,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,427 ±(99.9%) 1220,162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,427, 674,023), stdev = 316,872
[info]   CI (99.9%): [≈ 0, 1559,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1603,376 ±(99.9%) 5763,020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1603,376, 3182,382), stdev = 1496,638
[info]   CI (99.9%): [≈ 0, 7366,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,540 ±(99.9%) 4,537 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,540, 2,647), stdev = 1,178
[info]   CI (99.9%): [≈ 0, 5,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2,548 ±(99.9%) 21,422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,548, 12,498), stdev = 5,563
[info]   CI (99.9%): [≈ 0, 23,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,54% complete, ETA 01:41:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81641,073 ops/s
[info] # Warmup Iteration   2: 113791,771 ops/s
[info] # Warmup Iteration   3: 114340,255 ops/s
[info] # Warmup Iteration   4: 112975,834 ops/s
[info] # Warmup Iteration   5: 113817,297 ops/s
[info] Iteration   1: 114226,069 ops/s
[info]                  ·gc.alloc.rate:               1256,954 MB/sec
[info]                  ·gc.alloc.rate.norm:          17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9310,906 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 114161,413 ops/s
[info]                  ·gc.alloc.rate:                   1256,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18652,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,861 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 114267,428 ops/s
[info]                  ·gc.alloc.rate:               1257,485 MB/sec
[info]                  ·gc.alloc.rate.norm:          17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18651,830 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 114223,662 ops/s
[info]                  ·gc.alloc.rate:                   1257,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18668,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,860 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 113342,587 ops/s
[info]                  ·gc.alloc.rate:                   1247,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18832,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,578 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   114044,232 ±(99.9%) 1517,360 ops/s [Average]
[info]   (min, avg, max) = (113342,587, 114044,232, 114267,428), stdev = 394,054
[info]   CI (99.9%): [112526,871, 115561,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1255,022 ±(99.9%) 16,867 MB/sec [Average]
[info]   (min, avg, max) = (1247,225, 1255,022, 1257,485), stdev = 4,380
[info]   CI (99.9%): [1238,155, 1271,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17320,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17320,004, 17320,004, 17320,004), stdev = 0,001
[info]   CI (99.9%): [17320,003, 17320,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,808 ±(99.9%) 1169,058 MB/sec [Average]
[info]   (min, avg, max) = (675,715, 1218,808, 1356,160), stdev = 303,601
[info]   CI (99.9%): [49,750, 2387,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16823,319 ±(99.9%) 16173,692 B/op [Average]
[info]   (min, avg, max) = (9310,906, 16823,319, 18832,762), stdev = 4200,256
[info]   CI (99.9%): [649,627, 32997,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,460 ±(99.9%) 1,677 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,460, 0,861), stdev = 0,435
[info]   CI (99.9%): [≈ 0, 2,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,74% complete, ETA 01:41:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 440314,496 ops/s
[info] # Warmup Iteration   2: 467413,788 ops/s
[info] # Warmup Iteration   3: 469888,206 ops/s
[info] # Warmup Iteration   4: 464026,084 ops/s
[info] # Warmup Iteration   5: 381462,017 ops/s
[info] Iteration   1: 429346,681 ops/s
[info]                  ·gc.alloc.rate:               279,334 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1875,361 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 374400,557 ops/s
[info]                  ·gc.alloc.rate:      243,627 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 374785,578 ops/s
[info]                  ·gc.alloc.rate:                   243,839 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2148,389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 435754,289 ops/s
[info]                  ·gc.alloc.rate:               283,542 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1847,783 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 445967,290 ops/s
[info]                  ·gc.alloc.rate:      290,130 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   412050,879 ±(99.9%) 133634,111 ops/s [Average]
[info]   (min, avg, max) = (374400,557, 412050,879, 445967,290), stdev = 34704,354
[info]   CI (99.9%): [278416,768, 545684,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   268,094 ±(99.9%) 86,906 MB/sec [Average]
[info]   (min, avg, max) = (243,627, 268,094, 290,130), stdev = 22,569
[info]   CI (99.9%): [181,189, 355,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,001, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,960 ±(99.9%) 1079,008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,960, 511,644), stdev = 280,215
[info]   CI (99.9%): [≈ 0, 1385,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1174,307 ±(99.9%) 4152,575 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1174,307, 2148,389), stdev = 1078,410
[info]   CI (99.9%): [≈ 0, 5326,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,038), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,032 ±(99.9%) 0,273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,032, 0,158), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23,94% complete, ETA 01:40:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27961,275 ops/s
[info] # Warmup Iteration   2: 46061,259 ops/s
[info] # Warmup Iteration   3: 46388,259 ops/s
[info] # Warmup Iteration   4: 46549,355 ops/s
[info] # Warmup Iteration   5: 46457,581 ops/s
[info] Iteration   1: 46387,723 ops/s
[info]                  ·gc.alloc.rate:               2475,842 MB/sec
[info]                  ·gc.alloc.rate.norm:          84008,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2029,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68859,481 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 46613,017 ops/s
[info]                  ·gc.alloc.rate:                   2488,033 MB/sec
[info]                  ·gc.alloc.rate.norm:              84008,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91534,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,811 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 46375,288 ops/s
[info]                  ·gc.alloc.rate:                   2475,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              84008,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92117,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,826 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 46558,746 ops/s
[info]                  ·gc.alloc.rate:                   2485,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              84008,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68899,346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,704 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 46335,976 ops/s
[info]                  ·gc.alloc.rate:                   2472,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              84008,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92375,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,828 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   46454,150 ±(99.9%) 474,645 ops/s [Average]
[info]   (min, avg, max) = (46335,976, 46454,150, 46613,017), stdev = 123,264
[info]   CI (99.9%): [45979,505, 46928,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2479,347 ±(99.9%) 26,208 MB/sec [Average]
[info]   (min, avg, max) = (2472,623, 2479,347, 2488,033), stdev = 6,806
[info]   CI (99.9%): [2453,139, 2505,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84008,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (84008,009, 84008,009, 84008,009), stdev = 0,001
[info]   CI (99.9%): [84008,008, 84008,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2442,289 ±(99.9%) 1435,960 MB/sec [Average]
[info]   (min, avg, max) = (2029,392, 2442,289, 2718,911), stdev = 372,914
[info]   CI (99.9%): [1006,328, 3878,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82757,236 ±(99.9%) 48796,636 B/op [Average]
[info]   (min, avg, max) = (68859,481, 82757,236, 92375,684), stdev = 12672,331
[info]   CI (99.9%): [33960,600, 131553,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,834 ±(99.9%) 5,297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,834, 2,828), stdev = 1,375
[info]   CI (99.9%): [≈ 0, 7,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24,14% complete, ETA 01:40:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78018,396 ops/s
[info] # Warmup Iteration   2: 87241,838 ops/s
[info] # Warmup Iteration   3: 87925,286 ops/s
[info] # Warmup Iteration   4: 88113,614 ops/s
[info] # Warmup Iteration   5: 88405,053 ops/s
[info] Iteration   1: 87787,553 ops/s
[info]                  ·gc.alloc.rate:                   1605,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24098,332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,746 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 87984,385 ops/s
[info]                  ·gc.alloc.rate:                   1609,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36092,873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,117 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 88071,673 ops/s
[info]                  ·gc.alloc.rate:                   1610,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24068,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 88113,556 ops/s
[info]                  ·gc.alloc.rate:                   1611,558 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24081,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 88033,409 ops/s
[info]                  ·gc.alloc.rate:                   1609,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,655 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36201,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,372 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   87998,115 ±(99.9%) 489,001 ops/s [Average]
[info]   (min, avg, max) = (87787,553, 87998,115, 88113,556), stdev = 126,992
[info]   CI (99.9%): [87509,114, 88487,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1609,366 ±(99.9%) 9,009 MB/sec [Average]
[info]   (min, avg, max) = (1605,508, 1609,366, 1611,558), stdev = 2,340
[info]   CI (99.9%): [1600,357, 1618,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28784,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28784,005, 28784,005, 28784,005), stdev = 0,001
[info]   CI (99.9%): [28784,004, 28784,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,354 ±(99.9%) 1423,189 MB/sec [Average]
[info]   (min, avg, max) = (1344,152, 1616,354, 2024,655), stdev = 369,598
[info]   CI (99.9%): [193,165, 3039,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28908,600 ±(99.9%) 25444,796 B/op [Average]
[info]   (min, avg, max) = (24068,801, 28908,600, 36201,320), stdev = 6607,933
[info]   CI (99.9%): [3463,804, 54353,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,596 ±(99.9%) 1,284 B/op [Average]
[info]   (min, avg, max) = (0,372, 0,596, 1,117), stdev = 0,333
[info]   CI (99.9%): [≈ 0, 1,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24,35% complete, ETA 01:40:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75277,258 ops/s
[info] # Warmup Iteration   2: 90605,427 ops/s
[info] # Warmup Iteration   3: 88586,211 ops/s
[info] # Warmup Iteration   4: 88147,263 ops/s
[info] # Warmup Iteration   5: 88762,134 ops/s
[info] Iteration   1: 88649,892 ops/s
[info]                  ·gc.alloc.rate:               542,015 MB/sec
[info]                  ·gc.alloc.rate.norm:          9624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9082,983 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 88968,101 ops/s
[info]                  ·gc.alloc.rate:                   544,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11937,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59,999 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 89003,371 ops/s
[info]                  ·gc.alloc.rate:      544,183 MB/sec
[info]                  ·gc.alloc.rate.norm: 9624,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 88521,001 ops/s
[info]                  ·gc.alloc.rate:                   541,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              9624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11996,651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,110 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 82426,324 ops/s
[info]                  ·gc.alloc.rate:               504,149 MB/sec
[info]                  ·gc.alloc.rate.norm:          9624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12833,580 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   87513,738 ±(99.9%) 10979,634 ops/s [Average]
[info]   (min, avg, max) = (82426,324, 87513,738, 89003,371), stdev = 2851,376
[info]   CI (99.9%): [76534,104, 98493,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   535,142 ±(99.9%) 66,884 MB/sec [Average]
[info]   (min, avg, max) = (504,149, 535,142, 544,183), stdev = 17,370
[info]   CI (99.9%): [468,258, 602,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9624,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9624,005, 9624,005, 9624,005), stdev = 0,001
[info]   CI (99.9%): [9624,004, 9624,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,686 ±(99.9%) 1123,803 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,686, 674,804), stdev = 291,848
[info]   CI (99.9%): [≈ 0, 1630,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9170,163 ±(99.9%) 20481,648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9170,163, 12833,580), stdev = 5319,019
[info]   CI (99.9%): [≈ 0, 29651,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,691 ±(99.9%) 5,815 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,691, 3,392), stdev = 1,510
[info]   CI (99.9%): [≈ 0, 6,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12,222 ±(99.9%) 102,860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12,222, 59,999), stdev = 26,712
[info]   CI (99.9%): [≈ 0, 115,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24,55% complete, ETA 01:39:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25399,094 ops/s
[info] # Warmup Iteration   2: 124888,499 ops/s
[info] # Warmup Iteration   3: 124930,211 ops/s
[info] # Warmup Iteration   4: 124741,823 ops/s
[info] # Warmup Iteration   5: 124780,221 ops/s
[info] Iteration   1: 125144,654 ops/s
[info]                  ·gc.alloc.rate:               382,944 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6433,547 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 125452,442 ops/s
[info]                  ·gc.alloc.rate:      383,894 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 123887,410 ops/s
[info]                  ·gc.alloc.rate:                   379,074 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6498,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,517 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 124436,446 ops/s
[info]                  ·gc.alloc.rate:      380,813 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 124979,873 ops/s
[info]                  ·gc.alloc.rate:                   382,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8488,660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33,269 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   124780,165 ±(99.9%) 2389,143 ops/s [Average]
[info]   (min, avg, max) = (123887,410, 124780,165, 125452,442), stdev = 620,453
[info]   CI (99.9%): [122391,022, 127169,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   381,824 ±(99.9%) 7,319 MB/sec [Average]
[info]   (min, avg, max) = (379,074, 381,824, 383,894), stdev = 1,901
[info]   CI (99.9%): [374,505, 389,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,004), stdev = 0,001
[info]   CI (99.9%): [4816,003, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,420 ±(99.9%) 1220,137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,420, 674,010), stdev = 316,866
[info]   CI (99.9%): [≈ 0, 1559,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   4284,193 ±(99.9%) 15391,763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4284,193, 8488,660), stdev = 3997,192
[info]   CI (99.9%): [≈ 0, 19675,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,536 ±(99.9%) 4,532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,536, 2,642), stdev = 1,177
[info]   CI (99.9%): [≈ 0, 5,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   6,757 ±(99.9%) 57,076 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,757, 33,269), stdev = 14,822
[info]   CI (99.9%): [≈ 0, 63,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,75% complete, ETA 01:39:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77563,493 ops/s
[info] # Warmup Iteration   2: 110926,993 ops/s
[info] # Warmup Iteration   3: 111099,074 ops/s
[info] # Warmup Iteration   4: 111290,586 ops/s
[info] # Warmup Iteration   5: 111188,517 ops/s
[info] Iteration   1: 111236,410 ops/s
[info]                  ·gc.alloc.rate:               367,495 MB/sec
[info]                  ·gc.alloc.rate.norm:          5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7238,253 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 111432,172 ops/s
[info]                  ·gc.alloc.rate:      368,178 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 111181,342 ops/s
[info]                  ·gc.alloc.rate:                   367,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7241,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 111028,322 ops/s
[info]                  ·gc.alloc.rate:                   366,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9559,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,885 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 111354,566 ops/s
[info]                  ·gc.alloc.rate:      367,858 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   111246,563 ±(99.9%) 603,033 ops/s [Average]
[info]   (min, avg, max) = (111028,322, 111246,563, 111432,172), stdev = 156,606
[info]   CI (99.9%): [110643,530, 111849,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   367,538 ±(99.9%) 1,961 MB/sec [Average]
[info]   (min, avg, max) = (366,853, 367,538, 368,178), stdev = 0,509
[info]   CI (99.9%): [365,576, 369,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5200,004, 5200,004, 5200,004), stdev = 0,001
[info]   CI (99.9%): [5200,003, 5200,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   339,500 ±(99.9%) 1220,554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,500, 674,430), stdev = 316,974
[info]   CI (99.9%): [≈ 0, 1560,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4807,965 ±(99.9%) 17289,641 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4807,965, 9559,804), stdev = 4490,065
[info]   CI (99.9%): [≈ 0, 22097,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,236 ±(99.9%) 1,481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,236, 0,885), stdev = 0,385
[info]   CI (99.9%): [≈ 0, 1,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,95% complete, ETA 01:39:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115405,929 ops/s
[info] # Warmup Iteration   2: 122584,982 ops/s
[info] # Warmup Iteration   3: 123802,094 ops/s
[info] # Warmup Iteration   4: 124343,369 ops/s
[info] # Warmup Iteration   5: 124717,413 ops/s
[info] Iteration   1: 124040,496 ops/s
[info]                  ·gc.alloc.rate:               379,528 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6490,742 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 124563,300 ops/s
[info]                  ·gc.alloc.rate:                   381,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6463,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,392 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 124480,842 ops/s
[info]                  ·gc.alloc.rate:               380,880 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6467,701 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 124408,755 ops/s
[info]                  ·gc.alloc.rate:      380,723 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 124352,962 ops/s
[info]                  ·gc.alloc.rate:                   380,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8539,881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40,365 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   124369,271 ±(99.9%) 770,161 ops/s [Average]
[info]   (min, avg, max) = (124040,496, 124369,271, 124563,300), stdev = 200,008
[info]   CI (99.9%): [123599,110, 125139,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   380,557 ±(99.9%) 2,414 MB/sec [Average]
[info]   (min, avg, max) = (379,528, 380,557, 381,171), stdev = 0,627
[info]   CI (99.9%): [378,142, 382,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,004), stdev = 0,001
[info]   CI (99.9%): [4816,003, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,852 ±(99.9%) 989,262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,852, 674,683), stdev = 256,908
[info]   CI (99.9%): [≈ 0, 1431,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5592,364 ±(99.9%) 12521,191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5592,364, 8539,881), stdev = 3251,713
[info]   CI (99.9%): [≈ 0, 18113,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,644 ±(99.9%) 5,479 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,644, 3,189), stdev = 1,423
[info]   CI (99.9%): [≈ 0, 6,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8,152 ±(99.9%) 69,346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,152, 40,365), stdev = 18,009
[info]   CI (99.9%): [≈ 0, 77,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25,15% complete, ETA 01:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113733,100 ops/s
[info] # Warmup Iteration   2: 122494,176 ops/s
[info] # Warmup Iteration   3: 106781,198 ops/s
[info] # Warmup Iteration   4: 123458,024 ops/s
[info] # Warmup Iteration   5: 123721,911 ops/s
[info] Iteration   1: 123268,182 ops/s
[info]                  ·gc.alloc.rate:               280,070 MB/sec
[info]                  ·gc.alloc.rate.norm:          3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6531,806 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 121125,351 ops/s
[info]                  ·gc.alloc.rate:      275,227 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 110934,290 ops/s
[info]                  ·gc.alloc.rate:               252,043 MB/sec
[info]                  ·gc.alloc.rate.norm:          3576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7258,151 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 113780,788 ops/s
[info]                  ·gc.alloc.rate:      258,551 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 123344,812 ops/s
[info]                  ·gc.alloc.rate:               280,263 MB/sec
[info]                  ·gc.alloc.rate.norm:          3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6527,729 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   118490,685 ±(99.9%) 22171,377 ops/s [Average]
[info]   (min, avg, max) = (110934,290, 118490,685, 123344,812), stdev = 5757,836
[info]   CI (99.9%): [96319,307, 140662,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   269,231 ±(99.9%) 50,378 MB/sec [Average]
[info]   (min, avg, max) = (252,043, 269,231, 280,263), stdev = 13,083
[info]   CI (99.9%): [218,853, 319,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3576,003, 3576,003, 3576,004), stdev = 0,001
[info]   CI (99.9%): [3576,003, 3576,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   306,947 ±(99.9%) 1078,962 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,947, 511,600), stdev = 280,203
[info]   CI (99.9%): [≈ 0, 1385,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   4063,537 ±(99.9%) 14329,728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4063,537, 7258,151), stdev = 3721,385
[info]   CI (99.9%): [≈ 0, 18393,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25,35% complete, ETA 01:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8011,872 ops/s
[info] # Warmup Iteration   2: 11215,160 ops/s
[info] # Warmup Iteration   3: 11302,114 ops/s
[info] # Warmup Iteration   4: 10787,075 ops/s
[info] # Warmup Iteration   5: 11238,323 ops/s
[info] Iteration   1: 11246,603 ops/s
[info]                  ·gc.alloc.rate:                   1849,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     282183,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,825 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11271,822 ops/s
[info]                  ·gc.alloc.rate:               1853,903 MB/sec
[info]                  ·gc.alloc.rate.norm:          258856,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 187876,842 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 11292,805 ops/s
[info]                  ·gc.alloc.rate:                   1857,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281591,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,603 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11307,900 ops/s
[info]                  ·gc.alloc.rate:               1859,912 MB/sec
[info]                  ·gc.alloc.rate.norm:          258856,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024,248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 281727,740 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 11319,278 ops/s
[info]                  ·gc.alloc.rate:                   1862,267 MB/sec
[info]                  ·gc.alloc.rate.norm:              258856,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281892,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,788 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   11287,682 ±(99.9%) 111,806 ops/s [Average]
[info]   (min, avg, max) = (11246,603, 11287,682, 11319,278), stdev = 29,036
[info]   CI (99.9%): [11175,875, 11399,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1856,609 ±(99.9%) 19,050 MB/sec [Average]
[info]   (min, avg, max) = (1849,734, 1856,609, 1862,267), stdev = 4,947
[info]   CI (99.9%): [1837,559, 1875,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258856,046 ±(99.9%) 0,048 B/op [Average]
[info]   (min, avg, max) = (258856,036, 258856,046, 258856,068), stdev = 0,013
[info]   CI (99.9%): [258855,998, 258856,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886,914 ±(99.9%) 1165,432 MB/sec [Average]
[info]   (min, avg, max) = (1345,557, 1886,914, 2027,994), stdev = 302,659
[info]   CI (99.9%): [721,483, 3052,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   263054,306 ±(99.9%) 161827,390 B/op [Average]
[info]   (min, avg, max) = (187876,842, 263054,306, 282183,452), stdev = 42026,059
[info]   CI (99.9%): [101226,916, 424881,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,643 ±(99.9%) 18,694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,643, 11,603), stdev = 4,855
[info]   CI (99.9%): [≈ 0, 23,337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,55% complete, ETA 01:38:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6972,899 ops/s
[info] # Warmup Iteration   2: 12098,754 ops/s
[info] # Warmup Iteration   3: 12153,729 ops/s
[info] # Warmup Iteration   4: 12071,753 ops/s
[info] # Warmup Iteration   5: 12104,071 ops/s
[info] Iteration   1: 12043,955 ops/s
[info]                  ·gc.alloc.rate:                   1863,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              243473,357 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176996,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,440 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12140,888 ops/s
[info]                  ·gc.alloc.rate:                   1878,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263611,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,095 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 12159,511 ops/s
[info]                  ·gc.alloc.rate:                   1880,917 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263458,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,082 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12153,260 ops/s
[info]                  ·gc.alloc.rate:                   1880,239 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263847,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,695 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12168,268 ops/s
[info]                  ·gc.alloc.rate:                   1882,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              243473,175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175738,994 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,692 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   12133,176 ±(99.9%) 195,856 ops/s [Average]
[info]   (min, avg, max) = (12043,955, 12133,176, 12168,268), stdev = 50,863
[info]   CI (99.9%): [11937,321, 12329,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1876,914 ±(99.9%) 30,184 MB/sec [Average]
[info]   (min, avg, max) = (1863,138, 1876,914, 1882,155), stdev = 7,839
[info]   CI (99.9%): [1846,730, 1907,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243472,529 ±(99.9%) 2,604 B/op [Average]
[info]   (min, avg, max) = (243472,034, 243472,529, 243473,357), stdev = 0,676
[info]   CI (99.9%): [243469,925, 243475,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1763,873 ±(99.9%) 1432,036 MB/sec [Average]
[info]   (min, avg, max) = (1354,437, 1763,873, 2037,590), stdev = 371,895
[info]   CI (99.9%): [331,837, 3195,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   228730,754 ±(99.9%) 184071,723 B/op [Average]
[info]   (min, avg, max) = (175738,994, 228730,754, 263847,494), stdev = 47802,842
[info]   CI (99.9%): [44659,031, 412802,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5,401 ±(99.9%) 10,387 B/op [Average]
[info]   (min, avg, max) = (2,692, 5,401, 8,095), stdev = 2,697
[info]   CI (99.9%): [≈ 0, 15,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,75% complete, ETA 01:38:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193371,596 ops/s
[info] # Warmup Iteration   2: 206561,122 ops/s
[info] # Warmup Iteration   3: 208591,627 ops/s
[info] # Warmup Iteration   4: 209373,037 ops/s
[info] # Warmup Iteration   5: 208326,821 ops/s
[info] Iteration   1: 208351,373 ops/s
[info]                  ·gc.alloc.rate:                   542,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3864,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,176 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 209113,608 ops/s
[info]                  ·gc.alloc.rate:                   544,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5083,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,796 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 209392,017 ops/s
[info]                  ·gc.alloc.rate:      544,895 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 208926,029 ops/s
[info]                  ·gc.alloc.rate:                   543,788 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5087,910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,470 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 209040,355 ops/s
[info]                  ·gc.alloc.rate:               544,013 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5070,115 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   208964,676 ±(99.9%) 1476,563 ops/s [Average]
[info]   (min, avg, max) = (208351,373, 208964,676, 209392,017), stdev = 383,459
[info]   CI (99.9%): [207488,113, 210441,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   543,830 ±(99.9%) 3,885 MB/sec [Average]
[info]   (min, avg, max) = (542,184, 543,830, 544,895), stdev = 1,009
[info]   CI (99.9%): [539,946, 547,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,002, 4096,002, 4096,002), stdev = 0,001
[info]   CI (99.9%): [4096,002, 4096,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   507,181 ±(99.9%) 1125,189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,181, 675,534), stdev = 292,208
[info]   CI (99.9%): [≈ 0, 1632,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3821,221 ±(99.9%) 8471,863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3821,221, 5087,910), stdev = 2200,116
[info]   CI (99.9%): [≈ 0, 12293,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,576 ±(99.9%) 4,780 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,576, 2,796), stdev = 1,241
[info]   CI (99.9%): [≈ 0, 5,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,338 ±(99.9%) 35,970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,338, 21,045), stdev = 9,341
[info]   CI (99.9%): [≈ 0, 40,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25,96% complete, ETA 01:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3855,985 ops/s
[info] # Warmup Iteration   2: 6819,832 ops/s
[info] # Warmup Iteration   3: 6900,655 ops/s
[info] # Warmup Iteration   4: 6953,261 ops/s
[info] # Warmup Iteration   5: 6935,062 ops/s
[info] Iteration   1: 6934,823 ops/s
[info]                  ·gc.alloc.rate:                   1841,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              417984,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,379 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     461028,802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,724 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6969,539 ops/s
[info]                  ·gc.alloc.rate:                   1851,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              417984,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459165,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,400 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6965,071 ops/s
[info]                  ·gc.alloc.rate:               1849,750 MB/sec
[info]                  ·gc.alloc.rate.norm:          417984,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 306731,432 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 6955,503 ops/s
[info]                  ·gc.alloc.rate:                   1847,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              417984,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     460842,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,419 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6867,449 ops/s
[info]                  ·gc.alloc.rate:               1823,469 MB/sec
[info]                  ·gc.alloc.rate.norm:          417993,262 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2037,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 467051,319 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6938,477 ±(99.9%) 161,318 ops/s [Average]
[info]   (min, avg, max) = (6867,449, 6938,477, 6969,539), stdev = 41,894
[info]   CI (99.9%): [6777,159, 7099,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1842,678 ±(99.9%) 43,587 MB/sec [Average]
[info]   (min, avg, max) = (1823,469, 1842,678, 1851,068), stdev = 11,319
[info]   CI (99.9%): [1799,091, 1886,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   417985,902 ±(99.9%) 15,843 B/op [Average]
[info]   (min, avg, max) = (417984,059, 417985,902, 417993,262), stdev = 4,114
[info]   CI (99.9%): [417970,059, 418001,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1899,306 ±(99.9%) 1166,508 MB/sec [Average]
[info]   (min, avg, max) = (1357,412, 1899,306, 2037,481), stdev = 302,938
[info]   CI (99.9%): [732,798, 3065,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   430964,024 ±(99.9%) 267668,234 B/op [Average]
[info]   (min, avg, max) = (306731,432, 430964,024, 467051,319), stdev = 69512,590
[info]   CI (99.9%): [163295,791, 698632,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,708 ±(99.9%) 18,116 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,708, 9,419), stdev = 4,705
[info]   CI (99.9%): [≈ 0, 22,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26,16% complete, ETA 01:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8411,423 ops/s
[info] # Warmup Iteration   2: 10933,289 ops/s
[info] # Warmup Iteration   3: 10947,284 ops/s
[info] # Warmup Iteration   4: 11076,496 ops/s
[info] # Warmup Iteration   5: 11056,825 ops/s
[info] Iteration   1: 10988,427 ops/s
[info]                  ·gc.alloc.rate:               1767,533 MB/sec
[info]                  ·gc.alloc.rate.norm:          253156,376 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 192792,221 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 11035,378 ops/s
[info]                  ·gc.alloc.rate:                   1775,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     288246,769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,938 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10345,791 ops/s
[info]                  ·gc.alloc.rate:                   1664,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205215,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,167 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 10353,283 ops/s
[info]                  ·gc.alloc.rate:                   1665,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307910,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,492 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10751,526 ops/s
[info]                  ·gc.alloc.rate:               1729,331 MB/sec
[info]                  ·gc.alloc.rate.norm:          253176,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 197918,111 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   10694,881 ±(99.9%) 1282,717 ops/s [Average]
[info]   (min, avg, max) = (10345,791, 10694,881, 11035,378), stdev = 333,117
[info]   CI (99.9%): [9412,164, 11977,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1720,523 ±(99.9%) 206,516 MB/sec [Average]
[info]   (min, avg, max) = (1664,393, 1720,523, 1775,758), stdev = 53,632
[info]   CI (99.9%): [1514,007, 1927,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   253172,108 ±(99.9%) 33,864 B/op [Average]
[info]   (min, avg, max) = (253156,376, 253172,108, 253176,048), stdev = 8,794
[info]   CI (99.9%): [253138,244, 253205,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1618,898 ±(99.9%) 1423,022 MB/sec [Average]
[info]   (min, avg, max) = (1346,072, 1618,898, 2025,689), stdev = 369,554
[info]   CI (99.9%): [195,876, 3041,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   238416,622 ±(99.9%) 212104,094 B/op [Average]
[info]   (min, avg, max) = (192792,221, 238416,622, 307910,353), stdev = 55082,760
[info]   CI (99.9%): [26312,528, 450520,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,719 ±(99.9%) 15,668 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,719, 9,492), stdev = 4,069
[info]   CI (99.9%): [≈ 0, 19,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26,36% complete, ETA 01:37:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21107,138 ops/s
[info] # Warmup Iteration   2: 29365,837 ops/s
[info] # Warmup Iteration   3: 29303,464 ops/s
[info] # Warmup Iteration   4: 28819,335 ops/s
[info] # Warmup Iteration   5: 27691,233 ops/s
[info] Iteration   1: 29158,235 ops/s
[info]                  ·gc.alloc.rate:               1511,215 MB/sec
[info]                  ·gc.alloc.rate.norm:          81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72484,200 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 29156,234 ops/s
[info]                  ·gc.alloc.rate:                   1511,081 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72489,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,371 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 29241,921 ops/s
[info]                  ·gc.alloc.rate:                   1515,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72345,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 28291,753 ops/s
[info]                  ·gc.alloc.rate:                   1466,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112316,990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,474 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29437,858 ops/s
[info]                  ·gc.alloc.rate:               1526,132 MB/sec
[info]                  ·gc.alloc.rate.norm:          81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,321 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72064,448 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   29057,200 ±(99.9%) 1705,783 ops/s [Average]
[info]   (min, avg, max) = (28291,753, 29057,200, 29437,858), stdev = 442,986
[info]   CI (99.9%): [27351,417, 30762,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1506,055 ±(99.9%) 88,543 MB/sec [Average]
[info]   (min, avg, max) = (1466,407, 1506,055, 1526,132), stdev = 22,994
[info]   CI (99.9%): [1417,512, 1594,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568,015 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (81568,014, 81568,015, 81568,016), stdev = 0,001
[info]   CI (99.9%): [81568,012, 81568,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,485 ±(99.9%) 1161,817 MB/sec [Average]
[info]   (min, avg, max) = (1342,892, 1479,485, 2019,204), stdev = 301,720
[info]   CI (99.9%): [317,668, 2641,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   80340,013 ±(99.9%) 68836,054 B/op [Average]
[info]   (min, avg, max) = (72064,448, 80340,013, 112316,990), stdev = 17876,505
[info]   CI (99.9%): [11503,959, 149176,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,041 ±(99.9%) 7,177 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,041, 3,474), stdev = 1,864
[info]   CI (99.9%): [≈ 0, 9,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,56% complete, ETA 01:37:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21727,633 ops/s
[info] # Warmup Iteration   2: 33269,397 ops/s
[info] # Warmup Iteration   3: 34131,579 ops/s
[info] # Warmup Iteration   4: 34235,729 ops/s
[info] # Warmup Iteration   5: 34219,575 ops/s
[info] Iteration   1: 34028,846 ops/s
[info]                  ·gc.alloc.rate:                   1663,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93912,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,963 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 34127,577 ops/s
[info]                  ·gc.alloc.rate:                   1668,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62479,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,920 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34226,544 ops/s
[info]                  ·gc.alloc.rate:                   1673,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93570,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,914 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 34208,336 ops/s
[info]                  ·gc.alloc.rate:                   1672,474 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62452,449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,958 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 34197,210 ops/s
[info]                  ·gc.alloc.rate:                   1671,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93770,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,916 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   34157,703 ±(99.9%) 312,682 ops/s [Average]
[info]   (min, avg, max) = (34028,846, 34157,703, 34226,544), stdev = 81,202
[info]   CI (99.9%): [33845,021, 34470,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1669,845 ±(99.9%) 15,260 MB/sec [Average]
[info]   (min, avg, max) = (1663,552, 1669,845, 1673,199), stdev = 3,963
[info]   CI (99.9%): [1654,586, 1685,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76944,013 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (76944,013, 76944,013, 76944,013), stdev = 0,001
[info]   CI (99.9%): [76944,013, 76944,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1762,911 ±(99.9%) 1429,926 MB/sec [Average]
[info]   (min, avg, max) = (1354,779, 1762,911, 2037,122), stdev = 371,347
[info]   CI (99.9%): [332,985, 3192,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   81237,053 ±(99.9%) 65984,474 B/op [Average]
[info]   (min, avg, max) = (62452,449, 81237,053, 93912,214), stdev = 17135,958
[info]   CI (99.9%): [15252,579, 147221,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,534 ±(99.9%) 2,017 B/op [Average]
[info]   (min, avg, max) = (0,958, 1,534, 1,920), stdev = 0,524
[info]   CI (99.9%): [≈ 0, 3,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,76% complete, ETA 01:37:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 365038,724 ops/s
[info] # Warmup Iteration   2: 383265,786 ops/s
[info] # Warmup Iteration   3: 380064,967 ops/s
[info] # Warmup Iteration   4: 385185,492 ops/s
[info] # Warmup Iteration   5: 385584,911 ops/s
[info] Iteration   1: 387103,485 ops/s
[info]                  ·gc.alloc.rate:                   855,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,828 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5484,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,339 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 386818,507 ops/s
[info]                  ·gc.alloc.rate:               855,337 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2740,174 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 385796,883 ops/s
[info]                  ·gc.alloc.rate:               852,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2747,190 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 385055,358 ops/s
[info]                  ·gc.alloc.rate:                   851,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2752,597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 384955,007 ops/s
[info]                  ·gc.alloc.rate:                   851,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5501,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   385945,848 ±(99.9%) 3801,516 ops/s [Average]
[info]   (min, avg, max) = (384955,007, 385945,848, 387103,485), stdev = 987,242
[info]   CI (99.9%): [382144,332, 389747,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   853,300 ±(99.9%) 8,605 MB/sec [Average]
[info]   (min, avg, max) = (851,107, 853,300, 855,922), stdev = 2,235
[info]   CI (99.9%): [844,695, 861,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3480,001, 3480,001, 3480,001), stdev = 0,001
[info]   CI (99.9%): [3480,001, 3480,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   942,872 ±(99.9%) 1421,029 MB/sec [Average]
[info]   (min, avg, max) = (673,226, 942,872, 1348,828), stdev = 369,037
[info]   CI (99.9%): [≈ 0, 2363,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3845,042 ±(99.9%) 5791,555 B/op [Average]
[info]   (min, avg, max) = (2740,174, 3845,042, 5501,191), stdev = 1504,048
[info]   CI (99.9%): [≈ 0, 9636,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,136 ±(99.9%) 0,546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,136, 0,339), stdev = 0,142
[info]   CI (99.9%): [≈ 0, 0,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26,96% complete, ETA 01:36:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 414932,655 ops/s
[info] # Warmup Iteration   2: 450574,780 ops/s
[info] # Warmup Iteration   3: 454199,361 ops/s
[info] # Warmup Iteration   4: 454698,070 ops/s
[info] # Warmup Iteration   5: 454399,711 ops/s
[info] Iteration   1: 455588,669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 454651,998 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 455804,923 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 451524,678 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 448163,757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   453146,805 ±(99.9%) 12589,303 ops/s [Average]
[info]   (min, avg, max) = (448163,757, 453146,805, 455804,923), stdev = 3269,402
[info]   CI (99.9%): [440557,503, 465736,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27,16% complete, ETA 01:36:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22505,026 ops/s
[info] # Warmup Iteration   2: 30589,119 ops/s
[info] # Warmup Iteration   3: 30543,264 ops/s
[info] # Warmup Iteration   4: 30788,339 ops/s
[info] # Warmup Iteration   5: 30829,031 ops/s
[info] Iteration   1: 30489,254 ops/s
[info]                  ·gc.alloc.rate:                   1604,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69180,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,149 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30778,356 ops/s
[info]                  ·gc.alloc.rate:               1619,591 MB/sec
[info]                  ·gc.alloc.rate.norm:          82824,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68563,096 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 30785,939 ops/s
[info]                  ·gc.alloc.rate:                   1619,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102974,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,257 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30828,532 ops/s
[info]                  ·gc.alloc.rate:                   1622,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68647,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,188 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30781,086 ops/s
[info]                  ·gc.alloc.rate:                   1619,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103348,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,129 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   30732,633 ±(99.9%) 529,760 ops/s [Average]
[info]   (min, avg, max) = (30489,254, 30732,633, 30828,532), stdev = 137,577
[info]   CI (99.9%): [30202,873, 31262,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1617,220 ±(99.9%) 28,081 MB/sec [Average]
[info]   (min, avg, max) = (1604,351, 1617,220, 1622,489), stdev = 7,292
[info]   CI (99.9%): [1589,139, 1645,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82824,013, 82824,014, 82824,014), stdev = 0,001
[info]   CI (99.9%): [82824,012, 82824,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1612,148 ±(99.9%) 1425,228 MB/sec [Average]
[info]   (min, avg, max) = (1340,072, 1612,148, 2021,066), stdev = 370,127
[info]   CI (99.9%): [186,921, 3037,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82542,838 ±(99.9%) 72485,622 B/op [Average]
[info]   (min, avg, max) = (68563,096, 82542,838, 103348,833), stdev = 18824,286
[info]   CI (99.9%): [10057,216, 155028,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,344 ±(99.9%) 6,073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,344, 4,257), stdev = 1,577
[info]   CI (99.9%): [≈ 0, 8,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27,36% complete, ETA 01:36:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10545,435 ops/s
[info] # Warmup Iteration   2: 11971,171 ops/s
[info] # Warmup Iteration   3: 11911,470 ops/s
[info] # Warmup Iteration   4: 11793,901 ops/s
[info] # Warmup Iteration   5: 11812,818 ops/s
[info] Iteration   1: 11797,612 ops/s
[info]                  ·gc.alloc.rate:                   659,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              88018,860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90106,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 376,568 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11838,702 ops/s
[info]                  ·gc.alloc.rate:                   662,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89794,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 11828,829 ops/s
[info]                  ·gc.alloc.rate:               661,462 MB/sec
[info]                  ·gc.alloc.rate.norm:          88016,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89596,884 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 11874,290 ops/s
[info]                  ·gc.alloc.rate:                   664,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89249,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,276 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 11829,353 ops/s
[info]                  ·gc.alloc.rate:                   661,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89500,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,538 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   11833,757 ±(99.9%) 105,761 ops/s [Average]
[info]   (min, avg, max) = (11797,612, 11833,757, 11874,290), stdev = 27,466
[info]   CI (99.9%): [11727,996, 11939,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   661,771 ±(99.9%) 5,947 MB/sec [Average]
[info]   (min, avg, max) = (659,771, 661,771, 664,051), stdev = 1,544
[info]   CI (99.9%): [655,825, 667,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88016,602 ±(99.9%) 4,859 B/op [Average]
[info]   (min, avg, max) = (88016,034, 88016,602, 88018,860), stdev = 1,262
[info]   CI (99.9%): [88011,743, 88021,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   674,046 ±(99.9%) 5,132 MB/sec [Average]
[info]   (min, avg, max) = (672,596, 674,046, 675,513), stdev = 1,333
[info]   CI (99.9%): [668,914, 679,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   89649,676 ±(99.9%) 1239,403 B/op [Average]
[info]   (min, avg, max) = (89249,902, 89649,676, 90106,446), stdev = 321,869
[info]   CI (99.9%): [88410,273, 90889,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,602 ±(99.9%) 4,782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,602, 2,823), stdev = 1,242
[info]   CI (99.9%): [≈ 0, 5,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   80,290 ±(99.9%) 637,955 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80,290, 376,568), stdev = 165,675
[info]   CI (99.9%): [≈ 0, 718,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27,57% complete, ETA 01:35:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99382,505 ops/s
[info] # Warmup Iteration   2: 111430,603 ops/s
[info] # Warmup Iteration   3: 112751,871 ops/s
[info] # Warmup Iteration   4: 112837,205 ops/s
[info] # Warmup Iteration   5: 112848,001 ops/s
[info] Iteration   1: 112799,286 ops/s
[info]                  ·gc.alloc.rate:                   1837,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28141,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,581 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 112768,941 ops/s
[info]                  ·gc.alloc.rate:                   1837,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28177,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,581 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 113345,941 ops/s
[info]                  ·gc.alloc.rate:               1846,464 MB/sec
[info]                  ·gc.alloc.rate.norm:          25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28078,682 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 113104,450 ops/s
[info]                  ·gc.alloc.rate:                   1842,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18787,632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,579 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 110156,079 ops/s
[info]                  ·gc.alloc.rate:                   1794,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28969,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,297 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   112434,939 ±(99.9%) 4989,401 ops/s [Average]
[info]   (min, avg, max) = (110156,079, 112434,939, 113345,941), stdev = 1295,732
[info]   CI (99.9%): [107445,539, 117424,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1831,649 ±(99.9%) 81,608 MB/sec [Average]
[info]   (min, avg, max) = (1794,370, 1831,649, 1846,464), stdev = 21,193
[info]   CI (99.9%): [1750,041, 1913,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25640,004, 25640,004, 25640,004), stdev = 0,001
[info]   CI (99.9%): [25640,003, 25640,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887,097 ±(99.9%) 1155,724 MB/sec [Average]
[info]   (min, avg, max) = (1350,241, 1887,097, 2027,401), stdev = 300,138
[info]   CI (99.9%): [731,373, 3042,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26430,934 ±(99.9%) 16512,483 B/op [Average]
[info]   (min, avg, max) = (18787,632, 26430,934, 28969,816), stdev = 4288,239
[info]   CI (99.9%): [9918,451, 42943,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,408 ±(99.9%) 0,996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,408, 0,581), stdev = 0,259
[info]   CI (99.9%): [≈ 0, 1,404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27,77% complete, ETA 01:35:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140132,874 ops/s
[info] # Warmup Iteration   2: 554853,467 ops/s
[info] # Warmup Iteration   3: 556181,694 ops/s
[info] # Warmup Iteration   4: 556607,357 ops/s
[info] # Warmup Iteration   5: 553663,436 ops/s
[info] Iteration   1: 556468,670 ops/s
[info]                  ·gc.alloc.rate:               577,009 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1446,834 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 555498,468 ops/s
[info]                  ·gc.alloc.rate:                   575,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1909,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,539 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 555247,392 ops/s
[info]                  ·gc.alloc.rate:                   575,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1910,693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 553764,082 ops/s
[info]                  ·gc.alloc.rate:               574,294 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1912,254 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 556340,256 ops/s
[info]                  ·gc.alloc.rate:                   576,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1903,315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,177 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   555463,774 ±(99.9%) 4180,661 ops/s [Average]
[info]   (min, avg, max) = (553764,082, 555463,774, 556468,670), stdev = 1085,704
[info]   CI (99.9%): [551283,113, 559644,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   575,996 ±(99.9%) 4,127 MB/sec [Average]
[info]   (min, avg, max) = (574,294, 575,996, 577,009), stdev = 1,072
[info]   CI (99.9%): [571,869, 580,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   641,095 ±(99.9%) 278,885 MB/sec [Average]
[info]   (min, avg, max) = (511,542, 641,095, 674,278), stdev = 72,426
[info]   CI (99.9%): [362,209, 919,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1816,616 ±(99.9%) 796,092 B/op [Average]
[info]   (min, avg, max) = (1446,834, 1816,616, 1912,254), stdev = 206,742
[info]   CI (99.9%): [1020,524, 2612,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,549 ±(99.9%) 4,547 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,549, 2,661), stdev = 1,181
[info]   CI (99.9%): [≈ 0, 5,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,555 ±(99.9%) 12,885 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,555, 7,539), stdev = 3,346
[info]   CI (99.9%): [≈ 0, 14,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27,97% complete, ETA 01:35:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 248238,625 ops/s
[info] # Warmup Iteration   2: 344019,468 ops/s
[info] # Warmup Iteration   3: 338667,845 ops/s
[info] # Warmup Iteration   4: 343844,781 ops/s
[info] # Warmup Iteration   5: 343826,810 ops/s
[info] Iteration   1: 343404,150 ops/s
[info]                  ·gc.alloc.rate:               476,530 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2344,510 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 344989,128 ops/s
[info]                  ·gc.alloc.rate:                   478,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3076,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,570 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 344501,090 ops/s
[info]                  ·gc.alloc.rate:      478,010 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 343137,526 ops/s
[info]                  ·gc.alloc.rate:                   476,189 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3093,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,191 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 342862,330 ops/s
[info]                  ·gc.alloc.rate:               475,793 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3098,867 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   343778,845 ±(99.9%) 3538,670 ops/s [Average]
[info]   (min, avg, max) = (342862,330, 343778,845, 344989,128), stdev = 918,981
[info]   CI (99.9%): [340240,174, 347317,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   477,052 ±(99.9%) 4,855 MB/sec [Average]
[info]   (min, avg, max) = (475,793, 477,052, 478,737), stdev = 1,261
[info]   CI (99.9%): [472,197, 481,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2184,001, 2184,001, 2184,001), stdev = 0,001
[info]   CI (99.9%): [2184,001, 2184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   507,104 ±(99.9%) 1124,948 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,104, 675,100), stdev = 292,145
[info]   CI (99.9%): [≈ 0, 1632,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2322,676 ±(99.9%) 5151,879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2322,676, 3098,867), stdev = 1337,927
[info]   CI (99.9%): [≈ 0, 7474,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,152 ±(99.9%) 0,954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,152, 0,570), stdev = 0,248
[info]   CI (99.9%): [≈ 0, 1,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28,17% complete, ETA 01:35:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 617638,994 ops/s
[info] # Warmup Iteration   2: 656664,523 ops/s
[info] # Warmup Iteration   3: 663941,744 ops/s
[info] # Warmup Iteration   4: 666405,393 ops/s
[info] # Warmup Iteration   5: 667789,162 ops/s
[info] Iteration   1: 669627,446 ops/s
[info]                  ·gc.alloc.rate:                   435,649 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1202,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 669831,274 ops/s
[info]                  ·gc.alloc.rate:               435,824 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1202,077 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 668354,702 ops/s
[info]                  ·gc.alloc.rate:      434,790 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 667174,100 ops/s
[info]                  ·gc.alloc.rate:                   434,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,433 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 670124,553 ops/s
[info]                  ·gc.alloc.rate:      435,960 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   669022,415 ±(99.9%) 4754,076 ops/s [Average]
[info]   (min, avg, max) = (667174,100, 669022,415, 670124,553), stdev = 1234,618
[info]   CI (99.9%): [664268,339, 673776,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   435,265 ±(99.9%) 3,054 MB/sec [Average]
[info]   (min, avg, max) = (434,104, 435,265, 435,960), stdev = 0,793
[info]   CI (99.9%): [432,211, 438,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,001, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,591 ±(99.9%) 1220,971 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,591, 674,790), stdev = 317,082
[info]   CI (99.9%): [≈ 0, 1560,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   799,247 ±(99.9%) 2875,418 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 799,247, 1591,749), stdev = 746,737
[info]   CI (99.9%): [≈ 0, 3674,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,631 ±(99.9%) 5,424 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,631, 3,151), stdev = 1,409
[info]   CI (99.9%): [≈ 0, 6,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,489 ±(99.9%) 12,795 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,489, 7,433), stdev = 3,323
[info]   CI (99.9%): [≈ 0, 14,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28,37% complete, ETA 01:34:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55983,824 ops/s
[info] # Warmup Iteration   2: 85394,918 ops/s
[info] # Warmup Iteration   3: 86077,656 ops/s
[info] # Warmup Iteration   4: 86124,945 ops/s
[info] # Warmup Iteration   5: 86209,361 ops/s
[info] Iteration   1: 86187,074 ops/s
[info]                  ·gc.alloc.rate:                   3771,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62008,635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,380 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 86192,368 ops/s
[info]                  ·gc.alloc.rate:                   3772,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74495,186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,520 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 85826,060 ops/s
[info]                  ·gc.alloc.rate:                   3756,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62405,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,763 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 85906,529 ops/s
[info]                  ·gc.alloc.rate:                   3759,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74832,909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,288 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 85867,556 ops/s
[info]                  ·gc.alloc.rate:                   3757,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62445,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,526 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   85995,917 ±(99.9%) 690,040 ops/s [Average]
[info]   (min, avg, max) = (85826,060, 85995,917, 86192,368), stdev = 179,201
[info]   CI (99.9%): [85305,877, 86685,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3763,499 ±(99.9%) 30,418 MB/sec [Average]
[info]   (min, avg, max) = (3756,120, 3763,499, 3772,152), stdev = 7,899
[info]   CI (99.9%): [3733,081, 3793,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68880,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (68880,005, 68880,005, 68880,005), stdev = 0,001
[info]   CI (99.9%): [68880,004, 68880,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3673,917 ±(99.9%) 1435,264 MB/sec [Average]
[info]   (min, avg, max) = (3395,631, 3673,917, 4084,734), stdev = 372,733
[info]   CI (99.9%): [2238,653, 5109,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67237,539 ±(99.9%) 26117,554 B/op [Average]
[info]   (min, avg, max) = (62008,635, 67237,539, 74832,909), stdev = 6782,646
[info]   CI (99.9%): [41119,985, 93355,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,125), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,296 ±(99.9%) 2,862 B/op [Average]
[info]   (min, avg, max) = (0,380, 1,296, 2,288), stdev = 0,743
[info]   CI (99.9%): [≈ 0, 4,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28,57% complete, ETA 01:34:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200194,140 ops/s
[info] # Warmup Iteration   2: 218321,259 ops/s
[info] # Warmup Iteration   3: 217350,538 ops/s
[info] # Warmup Iteration   4: 217747,659 ops/s
[info] # Warmup Iteration   5: 217510,572 ops/s
[info] Iteration   1: 217477,848 ops/s
[info]                  ·gc.alloc.rate:                   1651,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14592,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,301 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 218061,855 ops/s
[info]                  ·gc.alloc.rate:                   1655,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9711,975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,451 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 215416,443 ops/s
[info]                  ·gc.alloc.rate:                   1635,873 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14765,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,304 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 215276,041 ops/s
[info]                  ·gc.alloc.rate:                   1634,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9861,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,152 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 217454,473 ops/s
[info]                  ·gc.alloc.rate:               1651,138 MB/sec
[info]                  ·gc.alloc.rate.norm:          11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9772,111 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   216737,332 ±(99.9%) 4982,507 ops/s [Average]
[info]   (min, avg, max) = (215276,041, 216737,332, 218061,855), stdev = 1293,941
[info]   CI (99.9%): [211754,825, 221719,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1645,852 ±(99.9%) 37,477 MB/sec [Average]
[info]   (min, avg, max) = (1634,926, 1645,852, 1655,898), stdev = 9,733
[info]   CI (99.9%): [1608,375, 1683,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   11952,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11952,002, 11952,002, 11952,002), stdev = 0,001
[info]   CI (99.9%): [11952,002, 11952,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,315 ±(99.9%) 1413,951 MB/sec [Average]
[info]   (min, avg, max) = (1345,552, 1616,315, 2020,894), stdev = 367,199
[info]   CI (99.9%): [202,364, 3030,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11740,485 ±(99.9%) 10332,457 B/op [Average]
[info]   (min, avg, max) = (9711,975, 11740,485, 14765,043), stdev = 2683,306
[info]   CI (99.9%): [1408,028, 22072,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,242 ±(99.9%) 0,660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,242, 0,451), stdev = 0,171
[info]   CI (99.9%): [≈ 0, 0,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28,77% complete, ETA 01:34:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212315,168 ops/s
[info] # Warmup Iteration   2: 268983,405 ops/s
[info] # Warmup Iteration   3: 270782,294 ops/s
[info] # Warmup Iteration   4: 273202,026 ops/s
[info] # Warmup Iteration   5: 272931,547 ops/s
[info] Iteration   1: 272907,341 ops/s
[info]                  ·gc.alloc.rate:                   1625,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7744,125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,240 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 271941,573 ops/s
[info]                  ·gc.alloc.rate:               1619,864 MB/sec
[info]                  ·gc.alloc.rate.norm:          9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7775,568 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 270452,883 ops/s
[info]                  ·gc.alloc.rate:                   1611,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11741,118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,485 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 272672,024 ops/s
[info]                  ·gc.alloc.rate:               1624,436 MB/sec
[info]                  ·gc.alloc.rate.norm:          9376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7774,008 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 272368,137 ops/s
[info]                  ·gc.alloc.rate:                   1622,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11695,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   272068,391 ±(99.9%) 3745,237 ops/s [Average]
[info]   (min, avg, max) = (270452,883, 272068,391, 272907,341), stdev = 972,626
[info]   CI (99.9%): [268323,154, 275813,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1620,705 ±(99.9%) 22,384 MB/sec [Average]
[info]   (min, avg, max) = (1611,093, 1620,705, 1625,733), stdev = 5,813
[info]   CI (99.9%): [1598,321, 1643,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9376,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9376,001, 9376,002, 9376,002), stdev = 0,001
[info]   CI (99.9%): [9376,001, 9376,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,845 ±(99.9%) 1426,328 MB/sec [Average]
[info]   (min, avg, max) = (1342,777, 1614,845, 2023,707), stdev = 370,413
[info]   CI (99.9%): [188,517, 3041,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9346,002 ±(99.9%) 8338,827 B/op [Average]
[info]   (min, avg, max) = (7744,125, 9346,002, 11741,118), stdev = 2165,567
[info]   CI (99.9%): [1007,175, 17684,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,169 ±(99.9%) 0,780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,169, 0,485), stdev = 0,203
[info]   CI (99.9%): [≈ 0, 0,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28,97% complete, ETA 01:34:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 338964,583 ops/s
[info] # Warmup Iteration   2: 1314296,789 ops/s
[info] # Warmup Iteration   3: 1315085,433 ops/s
[info] # Warmup Iteration   4: 1312310,697 ops/s
[info] # Warmup Iteration   5: 1320366,096 ops/s
[info] Iteration   1: 1317280,738 ops/s
[info]                  ·gc.alloc.rate:                   716,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805,454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,144 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1323671,720 ops/s
[info]                  ·gc.alloc.rate:               719,862 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1601,571 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1296050,524 ops/s
[info]                  ·gc.alloc.rate:               704,878 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 816,967 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1315467,021 ops/s
[info]                  ·gc.alloc.rate:                   715,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     804,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1282059,569 ops/s
[info]                  ·gc.alloc.rate:               697,200 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 825,078 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1306905,914 ±(99.9%) 66617,312 ops/s [Average]
[info]   (min, avg, max) = (1282059,569, 1306905,914, 1323671,720), stdev = 17300,304
[info]   CI (99.9%): [1240288,602, 1373523,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   710,788 ±(99.9%) 36,364 MB/sec [Average]
[info]   (min, avg, max) = (697,200, 710,788, 719,862), stdev = 9,444
[info]   CI (99.9%): [674,424, 747,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   807,584 ±(99.9%) 1160,831 MB/sec [Average]
[info]   (min, avg, max) = (672,014, 807,584, 1346,857), stdev = 301,464
[info]   CI (99.9%): [≈ 0, 1968,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   970,635 ±(99.9%) 1358,544 B/op [Average]
[info]   (min, avg, max) = (804,104, 970,635, 1601,571), stdev = 352,810
[info]   CI (99.9%): [≈ 0, 2329,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,547 ±(99.9%) 4,491 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,547, 2,632), stdev = 1,166
[info]   CI (99.9%): [≈ 0, 5,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,654 ±(99.9%) 5,365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,654, 3,144), stdev = 1,393
[info]   CI (99.9%): [≈ 0, 6,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,18% complete, ETA 01:33:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 700622,237 ops/s
[info] # Warmup Iteration   2: 947555,078 ops/s
[info] # Warmup Iteration   3: 944518,884 ops/s
[info] # Warmup Iteration   4: 940982,964 ops/s
[info] # Warmup Iteration   5: 945811,790 ops/s
[info] Iteration   1: 934324,330 ops/s
[info]                  ·gc.alloc.rate:               736,110 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1136,030 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 945391,741 ops/s
[info]                  ·gc.alloc.rate:                   744,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1124,497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 948699,810 ops/s
[info]                  ·gc.alloc.rate:                   747,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1120,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 945687,567 ops/s
[info]                  ·gc.alloc.rate:               745,084 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1125,174 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 940158,816 ops/s
[info]                  ·gc.alloc.rate:                   740,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2264,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,070 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   942852,453 ±(99.9%) 21838,788 ops/s [Average]
[info]   (min, avg, max) = (934324,330, 942852,453, 948699,810), stdev = 5671,464
[info]   CI (99.9%): [921013,665, 964691,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   742,794 ±(99.9%) 17,212 MB/sec [Average]
[info]   (min, avg, max) = (736,110, 742,794, 747,373), stdev = 4,470
[info]   CI (99.9%): [725,581, 760,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1240,000, 1240,000, 1240,000), stdev = 0,001
[info]   CI (99.9%): [1240,000, 1240,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   810,694 ±(99.9%) 1165,641 MB/sec [Average]
[info]   (min, avg, max) = (674,389, 810,694, 1352,203), stdev = 302,713
[info]   CI (99.9%): [≈ 0, 1976,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1354,057 ±(99.9%) 1959,038 B/op [Average]
[info]   (min, avg, max) = (1120,495, 1354,057, 2264,089), stdev = 508,756
[info]   CI (99.9%): [≈ 0, 3313,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,042 ±(99.9%) 0,174 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,38% complete, ETA 01:33:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1159658,867 ops/s
[info] # Warmup Iteration   2: 1258470,090 ops/s
[info] # Warmup Iteration   3: 1264546,038 ops/s
[info] # Warmup Iteration   4: 1265013,245 ops/s
[info] # Warmup Iteration   5: 1258916,355 ops/s
[info] Iteration   1: 1258412,580 ops/s
[info]                  ·gc.alloc.rate:                   684,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843,897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,963 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1250434,467 ops/s
[info]                  ·gc.alloc.rate:                   680,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     849,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1244161,460 ops/s
[info]                  ·gc.alloc.rate:               676,568 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 851,024 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1263139,770 ops/s
[info]                  ·gc.alloc.rate:               687,049 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 838,247 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1262507,309 ops/s
[info]                  ·gc.alloc.rate:                   686,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     837,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1255731,117 ±(99.9%) 31630,798 ops/s [Average]
[info]   (min, avg, max) = (1244161,460, 1255731,117, 1263139,770), stdev = 8214,418
[info]   CI (99.9%): [1224100,319, 1287361,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   682,936 ±(99.9%) 17,384 MB/sec [Average]
[info]   (min, avg, max) = (676,568, 682,936, 687,049), stdev = 4,515
[info]   CI (99.9%): [665,553, 700,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,392 ±(99.9%) 4,862 MB/sec [Average]
[info]   (min, avg, max) = (672,044, 673,392, 674,759), stdev = 1,263
[info]   CI (99.9%): [668,529, 678,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   844,068 ±(99.9%) 23,508 B/op [Average]
[info]   (min, avg, max) = (837,829, 844,068, 851,024), stdev = 6,105
[info]   CI (99.9%): [820,561, 867,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,654 ±(99.9%) 5,412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,654, 3,168), stdev = 1,406
[info]   CI (99.9%): [≈ 0, 6,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,819 ±(99.9%) 6,769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,819, 3,963), stdev = 1,758
[info]   CI (99.9%): [≈ 0, 7,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29,58% complete, ETA 01:33:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1099760,549 ops/s
[info] # Warmup Iteration   2: 1183115,801 ops/s
[info] # Warmup Iteration   3: 1183317,988 ops/s
[info] # Warmup Iteration   4: 1182844,274 ops/s
[info] # Warmup Iteration   5: 1182780,888 ops/s
[info] Iteration   1: 1182820,460 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1183043,869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1183346,033 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1179980,748 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1181838,389 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1182205,900 ±(99.9%) 5260,797 ops/s [Average]
[info]   (min, avg, max) = (1179980,748, 1182205,900, 1183346,033), stdev = 1366,212
[info]   CI (99.9%): [1176945,102, 1187466,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29,78% complete, ETA 01:33:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27543,228 ops/s
[info] # Warmup Iteration   2: 37004,582 ops/s
[info] # Warmup Iteration   3: 37302,862 ops/s
[info] # Warmup Iteration   4: 37579,419 ops/s
[info] # Warmup Iteration   5: 37546,349 ops/s
[info] Iteration   1: 37498,872 ops/s
[info]                  ·gc.alloc.rate:                   1965,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              82488,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84443,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,874 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37082,691 ops/s
[info]                  ·gc.alloc.rate:                   1943,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              82488,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85569,479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,418 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37552,363 ops/s
[info]                  ·gc.alloc.rate:                   1967,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              82488,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84638,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,617 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 37543,262 ops/s
[info]                  ·gc.alloc.rate:                   1967,649 MB/sec
[info]                  ·gc.alloc.rate.norm:              82488,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84847,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,618 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37473,766 ops/s
[info]                  ·gc.alloc.rate:                   1963,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              82488,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85115,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,874 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   37430,191 ±(99.9%) 758,204 ops/s [Average]
[info]   (min, avg, max) = (37082,691, 37430,191, 37552,363), stdev = 196,903
[info]   CI (99.9%): [36671,987, 38188,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1961,613 ±(99.9%) 39,708 MB/sec [Average]
[info]   (min, avg, max) = (1943,428, 1961,613, 1967,976), stdev = 10,312
[info]   CI (99.9%): [1921,905, 2001,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82488,011 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (82488,011, 82488,011, 82488,013), stdev = 0,001
[info]   CI (99.9%): [82488,008, 82488,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2019,475 ±(99.9%) 22,607 MB/sec [Average]
[info]   (min, avg, max) = (2011,799, 2019,475, 2026,347), stdev = 5,871
[info]   CI (99.9%): [1996,868, 2042,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84922,760 ±(99.9%) 1691,260 B/op [Average]
[info]   (min, avg, max) = (84443,539, 84922,760, 85569,479), stdev = 439,215
[info]   CI (99.9%): [83231,500, 86614,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,280 ±(99.9%) 5,696 B/op [Average]
[info]   (min, avg, max) = (0,874, 2,280, 4,418), stdev = 1,479
[info]   CI (99.9%): [≈ 0, 7,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29,98% complete, ETA 01:32:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138797,261 ops/s
[info] # Warmup Iteration   2: 146104,901 ops/s
[info] # Warmup Iteration   3: 145810,354 ops/s
[info] # Warmup Iteration   4: 146948,869 ops/s
[info] # Warmup Iteration   5: 145958,637 ops/s
[info] Iteration   1: 146225,308 ops/s
[info]                  ·gc.alloc.rate:               1273,109 MB/sec
[info]                  ·gc.alloc.rate.norm:          13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14467,567 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 147288,505 ops/s
[info]                  ·gc.alloc.rate:                   1282,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14364,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,445 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 146899,025 ops/s
[info]                  ·gc.alloc.rate:                   1279,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14401,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 147031,266 ops/s
[info]                  ·gc.alloc.rate:                   1280,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14403,125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,446 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 146868,753 ops/s
[info]                  ·gc.alloc.rate:               1278,551 MB/sec
[info]                  ·gc.alloc.rate.norm:          13704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14432,892 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   146862,571 ±(99.9%) 1512,756 ops/s [Average]
[info]   (min, avg, max) = (146225,308, 146862,571, 147288,505), stdev = 392,858
[info]   CI (99.9%): [145349,816, 148375,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1278,677 ±(99.9%) 13,360 MB/sec [Average]
[info]   (min, avg, max) = (1273,109, 1278,677, 1282,511), stdev = 3,470
[info]   CI (99.9%): [1265,317, 1292,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   13704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13704,003, 13704,003, 13704,003), stdev = 0,001
[info]   CI (99.9%): [13704,002, 13704,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1344,902 ±(99.9%) 4,242 MB/sec [Average]
[info]   (min, avg, max) = (1344,044, 1344,902, 1346,554), stdev = 1,102
[info]   CI (99.9%): [1340,661, 1349,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   14413,846 ±(99.9%) 148,509 B/op [Average]
[info]   (min, avg, max) = (14364,640, 14413,846, 14467,567), stdev = 38,567
[info]   CI (99.9%): [14265,337, 14562,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,223 ±(99.9%) 0,857 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,223, 0,446), stdev = 0,223
[info]   CI (99.9%): [≈ 0, 1,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30,18% complete, ETA 01:32:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107189,114 ops/s
[info] # Warmup Iteration   2: 140615,810 ops/s
[info] # Warmup Iteration   3: 140996,976 ops/s
[info] # Warmup Iteration   4: 140868,535 ops/s
[info] # Warmup Iteration   5: 140547,165 ops/s
[info] Iteration   1: 140527,884 ops/s
[info]                  ·gc.alloc.rate:                   1551,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              17376,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15039,123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 139668,498 ops/s
[info]                  ·gc.alloc.rate:                   1541,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              17376,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22706,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,704 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 141214,653 ops/s
[info]                  ·gc.alloc.rate:                   1558,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              17376,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14989,521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,696 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 141259,891 ops/s
[info]                  ·gc.alloc.rate:               1559,667 MB/sec
[info]                  ·gc.alloc.rate.norm:          17376,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14999,272 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 140726,074 ops/s
[info]                  ·gc.alloc.rate:                   1553,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              17376,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22617,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   140679,400 ±(99.9%) 2488,454 ops/s [Average]
[info]   (min, avg, max) = (139668,498, 140679,400, 141259,891), stdev = 646,244
[info]   CI (99.9%): [138190,945, 143167,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1553,133 ±(99.9%) 27,555 MB/sec [Average]
[info]   (min, avg, max) = (1541,959, 1553,133, 1559,667), stdev = 7,156
[info]   CI (99.9%): [1525,578, 1580,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   17376,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17376,003, 17376,003, 17376,003), stdev = 0,001
[info]   CI (99.9%): [17376,003, 17376,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1614,242 ±(99.9%) 1421,429 MB/sec [Average]
[info]   (min, avg, max) = (1342,802, 1614,242, 2022,227), stdev = 369,141
[info]   CI (99.9%): [192,812, 3035,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18070,317 ±(99.9%) 16140,447 B/op [Average]
[info]   (min, avg, max) = (14989,521, 18070,317, 22706,361), stdev = 4191,623
[info]   CI (99.9%): [1929,871, 34210,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,373 ±(99.9%) 1,206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,373, 0,704), stdev = 0,313
[info]   CI (99.9%): [≈ 0, 1,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,38% complete, ETA 01:32:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138440,362 ops/s
[info] # Warmup Iteration   2: 199518,177 ops/s
[info] # Warmup Iteration   3: 200334,045 ops/s
[info] # Warmup Iteration   4: 201134,259 ops/s
[info] # Warmup Iteration   5: 199080,051 ops/s
[info] Iteration   1: 199948,863 ops/s
[info]                  ·gc.alloc.rate:                   1057,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10632,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,492 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 201549,150 ops/s
[info]                  ·gc.alloc.rate:               1066,549 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5277,212 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 201557,328 ops/s
[info]                  ·gc.alloc.rate:                   1066,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10563,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,325 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 201246,642 ops/s
[info]                  ·gc.alloc.rate:               1064,941 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5292,629 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 200341,349 ops/s
[info]                  ·gc.alloc.rate:                   1059,984 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10638,137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   200928,666 ±(99.9%) 2846,796 ops/s [Average]
[info]   (min, avg, max) = (199948,863, 200928,666, 201557,328), stdev = 739,304
[info]   CI (99.9%): [198081,871, 203775,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1063,181 ±(99.9%) 15,310 MB/sec [Average]
[info]   (min, avg, max) = (1057,932, 1063,181, 1066,549), stdev = 3,976
[info]   CI (99.9%): [1047,871, 1078,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8328,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8328,002, 8328,002, 8328,002), stdev = 0,001
[info]   CI (99.9%): [8328,002, 8328,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,031 ±(99.9%) 1426,150 MB/sec [Average]
[info]   (min, avg, max) = (675,841, 1082,031, 1354,017), stdev = 370,367
[info]   CI (99.9%): [≈ 0, 2508,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8480,864 ±(99.9%) 11234,787 B/op [Average]
[info]   (min, avg, max) = (5277,212, 8480,864, 10638,137), stdev = 2917,638
[info]   CI (99.9%): [≈ 0, 19715,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,196 ±(99.9%) 0,821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,196, 0,492), stdev = 0,213
[info]   CI (99.9%): [≈ 0, 1,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,58% complete, ETA 01:32:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281777,377 ops/s
[info] # Warmup Iteration   2: 278500,404 ops/s
[info] # Warmup Iteration   3: 304281,534 ops/s
[info] # Warmup Iteration   4: 303758,114 ops/s
[info] # Warmup Iteration   5: 304693,449 ops/s
[info] Iteration   1: 302625,803 ops/s
[info]                  ·gc.alloc.rate:                   787,633 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3509,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,433 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 306705,342 ops/s
[info]                  ·gc.alloc.rate:               798,270 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3452,524 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 306188,019 ops/s
[info]                  ·gc.alloc.rate:               796,831 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3458,082 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 305761,947 ops/s
[info]                  ·gc.alloc.rate:                   795,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6918,985 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 306230,244 ops/s
[info]                  ·gc.alloc.rate:               796,871 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3454,162 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   305502,271 ±(99.9%) 6324,052 ops/s [Average]
[info]   (min, avg, max) = (302625,803, 305502,271, 306705,342), stdev = 1642,336
[info]   CI (99.9%): [299178,219, 311826,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   795,076 ±(99.9%) 16,382 MB/sec [Average]
[info]   (min, avg, max) = (787,633, 795,076, 798,270), stdev = 4,254
[info]   CI (99.9%): [778,694, 811,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,337 ±(99.9%) 1155,710 MB/sec [Average]
[info]   (min, avg, max) = (672,002, 807,337, 1344,230), stdev = 300,134
[info]   CI (99.9%): [≈ 0, 1963,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4158,656 ±(99.9%) 5942,520 B/op [Average]
[info]   (min, avg, max) = (3452,524, 4158,656, 6918,985), stdev = 1543,253
[info]   CI (99.9%): [≈ 0, 10101,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,108 ±(99.9%) 0,722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,108, 0,433), stdev = 0,188
[info]   CI (99.9%): [≈ 0, 0,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30,78% complete, ETA 01:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45761,834 ops/s
[info] # Warmup Iteration   2: 78804,290 ops/s
[info] # Warmup Iteration   3: 78564,775 ops/s
[info] # Warmup Iteration   4: 78946,930 ops/s
[info] # Warmup Iteration   5: 79235,140 ops/s
[info] Iteration   1: 78742,292 ops/s
[info]                  ·gc.alloc.rate:                   3322,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67895,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,248 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 79118,598 ops/s
[info]                  ·gc.alloc.rate:                   3338,665 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67639,592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,656 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 79127,225 ops/s
[info]                  ·gc.alloc.rate:                   3338,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67688,101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,242 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 79608,563 ops/s
[info]                  ·gc.alloc.rate:                   3359,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67289,849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,058 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 79494,215 ops/s
[info]                  ·gc.alloc.rate:                   3353,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67427,579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,412 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   79218,178 ±(99.9%) 1324,494 ops/s [Average]
[info]   (min, avg, max) = (78742,292, 79218,178, 79608,563), stdev = 343,967
[info]   CI (99.9%): [77893,684, 80542,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3342,523 ±(99.9%) 55,803 MB/sec [Average]
[info]   (min, avg, max) = (3322,470, 3342,523, 3359,093), stdev = 14,492
[info]   CI (99.9%): [3286,719, 3398,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66408,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66408,005, 66408,005, 66408,006), stdev = 0,001
[info]   CI (99.9%): [66408,004, 66408,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3401,877 ±(99.9%) 12,745 MB/sec [Average]
[info]   (min, avg, max) = (3396,870, 3401,877, 3405,482), stdev = 3,310
[info]   CI (99.9%): [3389,131, 3414,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67588,041 ±(99.9%) 906,361 B/op [Average]
[info]   (min, avg, max) = (67289,849, 67588,041, 67895,086), stdev = 235,379
[info]   CI (99.9%): [66681,681, 68494,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,323 ±(99.9%) 2,352 B/op [Average]
[info]   (min, avg, max) = (0,412, 1,323, 2,058), stdev = 0,611
[info]   CI (99.9%): [≈ 0, 3,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30,99% complete, ETA 01:31:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137210,872 ops/s
[info] # Warmup Iteration   2: 159728,898 ops/s
[info] # Warmup Iteration   3: 159907,494 ops/s
[info] # Warmup Iteration   4: 161577,073 ops/s
[info] # Warmup Iteration   5: 160854,998 ops/s
[info] Iteration   1: 159781,314 ops/s
[info]                  ·gc.alloc.rate:                   1802,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19868,516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,615 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 161517,935 ops/s
[info]                  ·gc.alloc.rate:                   1821,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19674,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,406 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 161444,906 ops/s
[info]                  ·gc.alloc.rate:                   1820,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13142,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,406 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 153831,881 ops/s
[info]                  ·gc.alloc.rate:                   1735,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20716,516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,213 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 161204,691 ops/s
[info]                  ·gc.alloc.rate:               1818,094 MB/sec
[info]                  ·gc.alloc.rate.norm:          17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2027,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19795,373 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   159556,145 ±(99.9%) 12618,080 ops/s [Average]
[info]   (min, avg, max) = (153831,881, 159556,145, 161517,935), stdev = 3276,875
[info]   CI (99.9%): [146938,066, 172174,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1799,650 ±(99.9%) 142,025 MB/sec [Average]
[info]   (min, avg, max) = (1735,184, 1799,650, 1821,744), stdev = 36,883
[info]   CI (99.9%): [1657,626, 1941,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17752,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17752,003, 17752,003, 17752,003), stdev = 0,001
[info]   CI (99.9%): [17752,002, 17752,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1887,335 ±(99.9%) 1160,877 MB/sec [Average]
[info]   (min, avg, max) = (1348,090, 1887,335, 2027,369), stdev = 301,476
[info]   CI (99.9%): [726,459, 3048,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18639,493 ±(99.9%) 11937,699 B/op [Average]
[info]   (min, avg, max) = (13142,833, 18639,493, 20716,516), stdev = 3100,183
[info]   CI (99.9%): [6701,794, 30577,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,328 ±(99.9%) 0,894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,328, 0,615), stdev = 0,232
[info]   CI (99.9%): [≈ 0, 1,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31,19% complete, ETA 01:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 160989,417 ops/s
[info] # Warmup Iteration   2: 195165,884 ops/s
[info] # Warmup Iteration   3: 192400,745 ops/s
[info] # Warmup Iteration   4: 191461,495 ops/s
[info] # Warmup Iteration   5: 191207,962 ops/s
[info] Iteration   1: 191103,749 ops/s
[info]                  ·gc.alloc.rate:                   664,413 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5556,990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,987 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 190544,023 ops/s
[info]                  ·gc.alloc.rate:                   662,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5573,815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,516 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 190382,791 ops/s
[info]                  ·gc.alloc.rate:               661,888 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5556,033 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 190093,350 ops/s
[info]                  ·gc.alloc.rate:               660,962 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5564,507 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 190155,246 ops/s
[info]                  ·gc.alloc.rate:                   661,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5557,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,172 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   190455,832 ±(99.9%) 1557,792 ops/s [Average]
[info]   (min, avg, max) = (190093,350, 190455,832, 191103,749), stdev = 404,554
[info]   CI (99.9%): [188898,040, 192013,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   662,177 ±(99.9%) 5,418 MB/sec [Average]
[info]   (min, avg, max) = (660,962, 662,177, 664,413), stdev = 1,407
[info]   CI (99.9%): [656,759, 667,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,036 ±(99.9%) 6,324 MB/sec [Average]
[info]   (min, avg, max) = (671,382, 673,036, 674,878), stdev = 1,642
[info]   CI (99.9%): [666,712, 679,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5561,734 ±(99.9%) 29,076 B/op [Average]
[info]   (min, avg, max) = (5556,033, 5561,734, 5573,815), stdev = 7,551
[info]   CI (99.9%): [5532,658, 5590,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,696 ±(99.9%) 5,817 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,696, 3,398), stdev = 1,511
[info]   CI (99.9%): [≈ 0, 6,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,735 ±(99.9%) 47,906 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,735, 27,987), stdev = 12,441
[info]   CI (99.9%): [≈ 0, 53,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,39% complete, ETA 01:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442806,583 ops/s
[info] # Warmup Iteration   2: 619337,781 ops/s
[info] # Warmup Iteration   3: 620359,646 ops/s
[info] # Warmup Iteration   4: 619959,061 ops/s
[info] # Warmup Iteration   5: 617670,803 ops/s
[info] Iteration   1: 618859,437 ops/s
[info]                  ·gc.alloc.rate:                   625,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1715,142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,476 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 618728,492 ops/s
[info]                  ·gc.alloc.rate:                   625,821 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1715,497 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 620773,186 ops/s
[info]                  ·gc.alloc.rate:               627,869 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1711,544 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 613097,085 ops/s
[info]                  ·gc.alloc.rate:                   620,182 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1732,962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 615031,332 ops/s
[info]                  ·gc.alloc.rate:                   622,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1729,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   617297,906 ±(99.9%) 12076,969 ops/s [Average]
[info]   (min, avg, max) = (613097,085, 617297,906, 620773,186), stdev = 3136,350
[info]   CI (99.9%): [605220,938, 629374,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   624,371 ±(99.9%) 12,190 MB/sec [Average]
[info]   (min, avg, max) = (620,182, 624,371, 627,869), stdev = 3,166
[info]   CI (99.9%): [612,181, 636,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,898 ±(99.9%) 2,007 MB/sec [Average]
[info]   (min, avg, max) = (674,368, 674,898, 675,610), stdev = 0,521
[info]   CI (99.9%): [672,891, 676,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1720,870 ±(99.9%) 36,751 B/op [Average]
[info]   (min, avg, max) = (1711,544, 1720,870, 1732,962), stdev = 9,544
[info]   CI (99.9%): [1684,119, 1757,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,298 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,187), stdev = 0,077
[info]   CI (99.9%): [≈ 0, 0,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,127 ±(99.9%) 0,757 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,127, 0,476), stdev = 0,197
[info]   CI (99.9%): [≈ 0, 0,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,59% complete, ETA 01:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 535743,194 ops/s
[info] # Warmup Iteration   2: 521335,042 ops/s
[info] # Warmup Iteration   3: 591114,023 ops/s
[info] # Warmup Iteration   4: 591961,335 ops/s
[info] # Warmup Iteration   5: 591218,990 ops/s
[info] Iteration   1: 588422,016 ops/s
[info]                  ·gc.alloc.rate:               451,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1368,259 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 591504,066 ops/s
[info]                  ·gc.alloc.rate:               454,009 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1361,136 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 594543,639 ops/s
[info]                  ·gc.alloc.rate:      456,319 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 591449,755 ops/s
[info]                  ·gc.alloc.rate:                   453,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1795,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,151 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,385 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 593814,068 ops/s
[info]                  ·gc.alloc.rate:                   455,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1788,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   591946,709 ±(99.9%) 9253,056 ops/s [Average]
[info]   (min, avg, max) = (588422,016, 591946,709, 594543,639), stdev = 2402,989
[info]   CI (99.9%): [582693,653, 601199,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   454,325 ±(99.9%) 7,066 MB/sec [Average]
[info]   (min, avg, max) = (451,607, 454,325, 456,319), stdev = 1,835
[info]   CI (99.9%): [447,260, 461,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,510 ±(99.9%) 1068,651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,510, 674,799), stdev = 277,525
[info]   CI (99.9%): [≈ 0, 1543,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1262,676 ±(99.9%) 2839,816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1262,676, 1795,537), stdev = 737,491
[info]   CI (99.9%): [≈ 0, 4102,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,643 ±(99.9%) 5,401 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,151), stdev = 1,403
[info]   CI (99.9%): [≈ 0, 6,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,710 ±(99.9%) 14,371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,710, 8,385), stdev = 3,732
[info]   CI (99.9%): [≈ 0, 16,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31,79% complete, ETA 01:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 566615,610 ops/s
[info] # Warmup Iteration   2: 600764,826 ops/s
[info] # Warmup Iteration   3: 566784,673 ops/s
[info] # Warmup Iteration   4: 606150,586 ops/s
[info] # Warmup Iteration   5: 600552,103 ops/s
[info] Iteration   1: 605077,687 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 606083,898 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 599269,888 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 583186,649 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 606171,650 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   599957,955 ±(99.9%) 37733,314 ops/s [Average]
[info]   (min, avg, max) = (583186,649, 599957,955, 606171,650), stdev = 9799,222
[info]   CI (99.9%): [562224,641, 637691,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31,99% complete, ETA 01:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193765,743 ops/s
[info] # Warmup Iteration   2: 289059,921 ops/s
[info] # Warmup Iteration   3: 288570,154 ops/s
[info] # Warmup Iteration   4: 289034,089 ops/s
[info] # Warmup Iteration   5: 287882,659 ops/s
[info] Iteration   1: 287216,674 ops/s
[info]                  ·gc.alloc.rate:                   791,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7394,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,456 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 287508,668 ops/s
[info]                  ·gc.alloc.rate:               792,080 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3695,443 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 288372,899 ops/s
[info]                  ·gc.alloc.rate:               794,395 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3688,060 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 287784,096 ops/s
[info]                  ·gc.alloc.rate:                   792,876 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3695,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,342 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 287760,739 ops/s
[info]                  ·gc.alloc.rate:               792,777 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3697,852 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   287728,615 ±(99.9%) 1644,626 ops/s [Average]
[info]   (min, avg, max) = (287216,674, 287728,615, 288372,899), stdev = 427,104
[info]   CI (99.9%): [286083,989, 289373,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   792,681 ±(99.9%) 4,441 MB/sec [Average]
[info]   (min, avg, max) = (791,275, 792,681, 794,395), stdev = 1,153
[info]   CI (99.9%): [788,239, 797,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4336,001, 4336,001, 4336,002), stdev = 0,001
[info]   CI (99.9%): [4336,001, 4336,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   810,422 ±(99.9%) 1160,372 MB/sec [Average]
[info]   (min, avg, max) = (675,066, 810,422, 1349,483), stdev = 301,345
[info]   CI (99.9%): [≈ 0, 1970,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4434,360 ±(99.9%) 6372,696 B/op [Average]
[info]   (min, avg, max) = (3688,060, 4434,360, 7394,851), stdev = 1654,969
[info]   CI (99.9%): [≈ 0, 10807,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,160 ±(99.9%) 0,856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,160, 0,456), stdev = 0,222
[info]   CI (99.9%): [≈ 0, 1,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32,19% complete, ETA 01:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39040,602 ops/s
[info] # Warmup Iteration   2: 41723,079 ops/s
[info] # Warmup Iteration   3: 41303,668 ops/s
[info] # Warmup Iteration   4: 41842,295 ops/s
[info] # Warmup Iteration   5: 41788,930 ops/s
[info] Iteration   1: 40583,506 ops/s
[info]                  ·gc.alloc.rate:               188,132 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19838,064 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 41709,542 ops/s
[info]                  ·gc.alloc.rate:      193,349 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41543,855 ops/s
[info]                  ·gc.alloc.rate:               192,567 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,500 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19379,756 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 41600,107 ops/s
[info]                  ·gc.alloc.rate:      192,841 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 41614,148 ops/s
[info]                  ·gc.alloc.rate:      192,879 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   41410,232 ±(99.9%) 1794,327 ops/s [Average]
[info]   (min, avg, max) = (40583,506, 41410,232, 41709,542), stdev = 465,981
[info]   CI (99.9%): [39615,905, 43204,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   191,954 ±(99.9%) 8,297 MB/sec [Average]
[info]   (min, avg, max) = (188,132, 191,954, 193,349), stdev = 2,155
[info]   CI (99.9%): [183,657, 200,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7296,010, 7296,010, 7296,011), stdev = 0,001
[info]   CI (99.9%): [7296,009, 7296,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,607 ±(99.9%) 1078,836 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,607, 511,537), stdev = 280,170
[info]   CI (99.9%): [≈ 0, 1283,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   7843,564 ±(99.9%) 41361,555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7843,564, 19838,064), stdev = 10741,464
[info]   CI (99.9%): [≈ 0, 49205,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32,39% complete, ETA 01:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9244,924 ops/s
[info] # Warmup Iteration   2: 12019,070 ops/s
[info] # Warmup Iteration   3: 12011,091 ops/s
[info] # Warmup Iteration   4: 12071,267 ops/s
[info] # Warmup Iteration   5: 12093,069 ops/s
[info] Iteration   1: 12045,989 ops/s
[info]                  ·gc.alloc.rate:                   1540,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175516,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,158 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12012,940 ops/s
[info]                  ·gc.alloc.rate:                   1536,315 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264194,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,635 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 12081,546 ops/s
[info]                  ·gc.alloc.rate:                   1545,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175268,806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,711 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11767,007 ops/s
[info]                  ·gc.alloc.rate:                   1504,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180137,695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,920 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12067,064 ops/s
[info]                  ·gc.alloc.rate:               1543,121 MB/sec
[info]                  ·gc.alloc.rate.norm:          201280,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175819,553 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   11994,909 ±(99.9%) 500,533 ops/s [Average]
[info]   (min, avg, max) = (11767,007, 11994,909, 12081,546), stdev = 129,987
[info]   CI (99.9%): [11494,377, 12495,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1534,019 ±(99.9%) 63,865 MB/sec [Average]
[info]   (min, avg, max) = (1504,948, 1534,019, 1545,193), stdev = 16,586
[info]   CI (99.9%): [1470,154, 1597,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201280,050 ±(99.9%) 0,112 B/op [Average]
[info]   (min, avg, max) = (201280,034, 201280,050, 201280,102), stdev = 0,029
[info]   CI (99.9%): [201279,937, 201280,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1480,033 ±(99.9%) 1154,857 MB/sec [Average]
[info]   (min, avg, max) = (1343,336, 1480,033, 2016,525), stdev = 299,913
[info]   CI (99.9%): [325,176, 2634,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   194187,522 ±(99.9%) 150892,941 B/op [Average]
[info]   (min, avg, max) = (175268,806, 194187,522, 264194,727), stdev = 39186,417
[info]   CI (99.9%): [43294,581, 345080,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7,685 ±(99.9%) 24,224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,685, 13,920), stdev = 6,291
[info]   CI (99.9%): [≈ 0, 31,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,60% complete, ETA 01:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8331,102 ops/s
[info] # Warmup Iteration   2: 13072,212 ops/s
[info] # Warmup Iteration   3: 13104,006 ops/s
[info] # Warmup Iteration   4: 13022,792 ops/s
[info] # Warmup Iteration   5: 12945,346 ops/s
[info] Iteration   1: 13038,971 ops/s
[info]                  ·gc.alloc.rate:                   1460,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              176293,810 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163279,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 13131,053 ops/s
[info]                  ·gc.alloc.rate:                   1470,946 MB/sec
[info]                  ·gc.alloc.rate.norm:              176296,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162295,775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,989 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13092,348 ops/s
[info]                  ·gc.alloc.rate:                   1466,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              176296,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162859,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,502 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13061,249 ops/s
[info]                  ·gc.alloc.rate:                   1463,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              176289,669 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     245149,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,508 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 13144,097 ops/s
[info]                  ·gc.alloc.rate:                   1471,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              176264,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     162494,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,492 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   13093,544 ±(99.9%) 172,045 ops/s [Average]
[info]   (min, avg, max) = (13038,971, 13093,544, 13144,097), stdev = 44,680
[info]   CI (99.9%): [12921,498, 13265,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1466,610 ±(99.9%) 18,899 MB/sec [Average]
[info]   (min, avg, max) = (1460,577, 1466,610, 1471,944), stdev = 4,908
[info]   CI (99.9%): [1447,711, 1485,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   176287,915 ±(99.9%) 52,375 B/op [Average]
[info]   (min, avg, max) = (176264,031, 176287,915, 176296,031), stdev = 13,602
[info]   CI (99.9%): [176235,539, 176340,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,625 ±(99.9%) 1170,793 MB/sec [Average]
[info]   (min, avg, max) = (1352,757, 1490,625, 2034,522), stdev = 304,051
[info]   CI (99.9%): [319,832, 2661,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   179215,633 ±(99.9%) 141934,507 B/op [Average]
[info]   (min, avg, max) = (162295,775, 179215,633, 245149,284), stdev = 36859,941
[info]   CI (99.9%): [37281,127, 321150,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3,503 ±(99.9%) 5,286 B/op [Average]
[info]   (min, avg, max) = (2,492, 3,503, 5,025), stdev = 1,373
[info]   CI (99.9%): [≈ 0, 8,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,80% complete, ETA 01:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203293,443 ops/s
[info] # Warmup Iteration   2: 221030,457 ops/s
[info] # Warmup Iteration   3: 219938,312 ops/s
[info] # Warmup Iteration   4: 220988,177 ops/s
[info] # Warmup Iteration   5: 220453,120 ops/s
[info] Iteration   1: 220566,486 ops/s
[info]                  ·gc.alloc.rate:               1435,030 MB/sec
[info]                  ·gc.alloc.rate.norm:          10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9610,501 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 221307,546 ops/s
[info]                  ·gc.alloc.rate:               1439,936 MB/sec
[info]                  ·gc.alloc.rate.norm:          10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9578,935 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 221457,282 ops/s
[info]                  ·gc.alloc.rate:                   1440,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9577,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 220949,216 ops/s
[info]                  ·gc.alloc.rate:                   1437,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9603,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,297 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 220355,288 ops/s
[info]                  ·gc.alloc.rate:                   1433,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9638,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,297 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   220927,164 ±(99.9%) 1809,530 ops/s [Average]
[info]   (min, avg, max) = (220355,288, 220927,164, 221457,282), stdev = 469,929
[info]   CI (99.9%): [219117,634, 222736,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1437,432 ±(99.9%) 11,642 MB/sec [Average]
[info]   (min, avg, max) = (1433,768, 1437,432, 1440,755), stdev = 3,023
[info]   CI (99.9%): [1425,790, 1449,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10240,002, 10240,002, 10240,002), stdev = 0,001
[info]   CI (99.9%): [10240,002, 10240,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1347,825 ±(99.9%) 4,303 MB/sec [Average]
[info]   (min, avg, max) = (1346,812, 1347,825, 1349,531), stdev = 1,118
[info]   CI (99.9%): [1343,522, 1352,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9601,702 ±(99.9%) 97,141 B/op [Average]
[info]   (min, avg, max) = (9577,182, 9601,702, 9638,382), stdev = 25,227
[info]   CI (99.9%): [9504,561, 9698,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,148 ±(99.9%) 0,572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,148, 0,297), stdev = 0,148
[info]   CI (99.9%): [≈ 0, 0,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33,00% complete, ETA 01:28:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5602,378 ops/s
[info] # Warmup Iteration   2: 8948,216 ops/s
[info] # Warmup Iteration   3: 9102,171 ops/s
[info] # Warmup Iteration   4: 9069,549 ops/s
[info] # Warmup Iteration   5: 9055,542 ops/s
[info] Iteration   1: 9085,302 ops/s
[info]                  ·gc.alloc.rate:                   1691,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              293056,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351736,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,211 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9037,826 ops/s
[info]                  ·gc.alloc.rate:                   1682,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              293056,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236045,593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,625 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9068,174 ops/s
[info]                  ·gc.alloc.rate:                   1688,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              293059,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353147,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,612 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9110,529 ops/s
[info]                  ·gc.alloc.rate:               1696,650 MB/sec
[info]                  ·gc.alloc.rate.norm:          293056,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 234499,933 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 9098,814 ops/s
[info]                  ·gc.alloc.rate:                   1694,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              293056,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352405,404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,200 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9080,129 ±(99.9%) 109,465 ops/s [Average]
[info]   (min, avg, max) = (9037,826, 9080,129, 9110,529), stdev = 28,428
[info]   CI (99.9%): [8970,664, 9189,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1690,755 ±(99.9%) 20,431 MB/sec [Average]
[info]   (min, avg, max) = (1682,945, 1690,755, 1696,650), stdev = 5,306
[info]   CI (99.9%): [1670,325, 1711,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293056,644 ±(99.9%) 5,140 B/op [Average]
[info]   (min, avg, max) = (293056,045, 293056,644, 293059,031), stdev = 1,335
[info]   CI (99.9%): [293051,504, 293061,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1763,076 ±(99.9%) 1428,875 MB/sec [Average]
[info]   (min, avg, max) = (1355,549, 1763,076, 2037,133), stdev = 371,074
[info]   CI (99.9%): [334,201, 3191,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   305567,015 ±(99.9%) 247110,630 B/op [Average]
[info]   (min, avg, max) = (234499,933, 305567,015, 353147,358), stdev = 64173,846
[info]   CI (99.9%): [58456,385, 552677,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,330 ±(99.9%) 11,600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,330, 7,211), stdev = 3,013
[info]   CI (99.9%): [≈ 0, 15,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33,20% complete, ETA 01:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9718,472 ops/s
[info] # Warmup Iteration   2: 12071,084 ops/s
[info] # Warmup Iteration   3: 12055,133 ops/s
[info] # Warmup Iteration   4: 12112,084 ops/s
[info] # Warmup Iteration   5: 12066,312 ops/s
[info] Iteration   1: 12099,341 ops/s
[info]                  ·gc.alloc.rate:               1429,619 MB/sec
[info]                  ·gc.alloc.rate.norm:          185961,278 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175008,140 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 12163,026 ops/s
[info]                  ·gc.alloc.rate:                   1437,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261260,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,694 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 11799,423 ops/s
[info]                  ·gc.alloc.rate:                   1394,264 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     179634,048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,776 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 12000,517 ops/s
[info]                  ·gc.alloc.rate:                   1418,143 MB/sec
[info]                  ·gc.alloc.rate.norm:              185968,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176800,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,730 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11878,024 ops/s
[info]                  ·gc.alloc.rate:                   1403,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              185951,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178807,758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,758 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   11988,066 ±(99.9%) 580,298 ops/s [Average]
[info]   (min, avg, max) = (11799,423, 11988,066, 12163,026), stdev = 150,701
[info]   CI (99.9%): [11407,769, 12568,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1416,478 ±(99.9%) 68,562 MB/sec [Average]
[info]   (min, avg, max) = (1394,264, 1416,478, 1437,091), stdev = 17,805
[info]   CI (99.9%): [1347,916, 1485,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   185963,285 ±(99.9%) 28,679 B/op [Average]
[info]   (min, avg, max) = (185951,034, 185963,285, 185968,043), stdev = 7,448
[info]   CI (99.9%): [185934,606, 185991,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1481,743 ±(99.9%) 1156,332 MB/sec [Average]
[info]   (min, avg, max) = (1345,414, 1481,743, 2018,922), stdev = 300,296
[info]   CI (99.9%): [325,412, 2638,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   194302,264 ±(99.9%) 144299,018 B/op [Average]
[info]   (min, avg, max) = (175008,140, 194302,264, 261260,490), stdev = 37473,997
[info]   CI (99.9%): [50003,246, 338601,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,192 ±(99.9%) 4,719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,192, 2,776), stdev = 1,225
[info]   CI (99.9%): [≈ 0, 6,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33,40% complete, ETA 01:28:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20475,228 ops/s
[info] # Warmup Iteration   2: 26063,808 ops/s
[info] # Warmup Iteration   3: 26133,337 ops/s
[info] # Warmup Iteration   4: 26377,860 ops/s
[info] # Warmup Iteration   5: 26393,116 ops/s
[info] Iteration   1: 26366,396 ops/s
[info]                  ·gc.alloc.rate:                   1107,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80194,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,727 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 26404,482 ops/s
[info]                  ·gc.alloc.rate:               1108,652 MB/sec
[info]                  ·gc.alloc.rate.norm:          66080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40019,863 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 26497,691 ops/s
[info]                  ·gc.alloc.rate:                   1112,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79761,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,709 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 26438,673 ops/s
[info]                  ·gc.alloc.rate:                   1110,170 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79930,775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 26519,508 ops/s
[info]                  ·gc.alloc.rate:               1113,090 MB/sec
[info]                  ·gc.alloc.rate.norm:          66080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39887,396 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26445,350 ±(99.9%) 244,958 ops/s [Average]
[info]   (min, avg, max) = (26366,396, 26445,350, 26519,508), stdev = 63,615
[info]   CI (99.9%): [26200,392, 26690,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1110,270 ±(99.9%) 9,780 MB/sec [Average]
[info]   (min, avg, max) = (1107,015, 1110,270, 1113,090), stdev = 2,540
[info]   CI (99.9%): [1100,489, 1120,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66080,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (66080,015, 66080,016, 66080,017), stdev = 0,001
[info]   CI (99.9%): [66080,013, 66080,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,482 ±(99.9%) 1415,982 MB/sec [Average]
[info]   (min, avg, max) = (671,430, 1074,482, 1343,475), stdev = 367,726
[info]   CI (99.9%): [≈ 0, 2490,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63958,946 ±(99.9%) 84384,354 B/op [Average]
[info]   (min, avg, max) = (39887,396, 63958,946, 80194,813), stdev = 21914,349
[info]   CI (99.9%): [≈ 0, 148343,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,735 ±(99.9%) 7,238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,735, 3,727), stdev = 1,880
[info]   CI (99.9%): [≈ 0, 8,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,60% complete, ETA 01:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21817,700 ops/s
[info] # Warmup Iteration   2: 30910,633 ops/s
[info] # Warmup Iteration   3: 30607,290 ops/s
[info] # Warmup Iteration   4: 30846,525 ops/s
[info] # Warmup Iteration   5: 30855,077 ops/s
[info] Iteration   1: 30852,731 ops/s
[info]                  ·gc.alloc.rate:                   1187,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68944,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,124 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30897,488 ops/s
[info]                  ·gc.alloc.rate:                   1188,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68912,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,060 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 28058,971 ops/s
[info]                  ·gc.alloc.rate:               1079,503 MB/sec
[info]                  ·gc.alloc.rate.norm:          60552,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37980,242 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 30866,483 ops/s
[info]                  ·gc.alloc.rate:                   1187,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69066,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30825,167 ops/s
[info]                  ·gc.alloc.rate:                   1185,835 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69206,764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,126 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   30300,168 ±(99.9%) 4825,388 ops/s [Average]
[info]   (min, avg, max) = (28058,971, 30300,168, 30897,488), stdev = 1253,138
[info]   CI (99.9%): [25474,780, 35125,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1165,739 ±(99.9%) 185,674 MB/sec [Average]
[info]   (min, avg, max) = (1079,503, 1165,739, 1188,784), stdev = 48,219
[info]   CI (99.9%): [980,064, 1351,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (60552,013, 60552,014, 60552,016), stdev = 0,001
[info]   CI (99.9%): [60552,010, 60552,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,283 ±(99.9%) 1164,950 MB/sec [Average]
[info]   (min, avg, max) = (677,100, 1218,283, 1355,328), stdev = 302,534
[info]   CI (99.9%): [53,333, 2383,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62821,956 ±(99.9%) 53475,526 B/op [Average]
[info]   (min, avg, max) = (37980,242, 62821,956, 69206,764), stdev = 13887,424
[info]   CI (99.9%): [9346,430, 116297,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,486 ±(99.9%) 3,658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,486, 2,126), stdev = 0,950
[info]   CI (99.9%): [≈ 0, 5,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,80% complete, ETA 01:27:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 731907,735 ops/s
[info] # Warmup Iteration   2: 788242,986 ops/s
[info] # Warmup Iteration   3: 780544,003 ops/s
[info] # Warmup Iteration   4: 779102,556 ops/s
[info] # Warmup Iteration   5: 777943,382 ops/s
[info] Iteration   1: 765750,266 ops/s
[info]                  ·gc.alloc.rate:                   1381,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2768,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 767482,766 ops/s
[info]                  ·gc.alloc.rate:                   1384,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4143,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 768333,962 ops/s
[info]                  ·gc.alloc.rate:                   1386,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2760,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 767161,158 ops/s
[info]                  ·gc.alloc.rate:                   1384,383 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2765,815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 768003,906 ops/s
[info]                  ·gc.alloc.rate:                   1385,666 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2765,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   767346,412 ±(99.9%) 3854,563 ops/s [Average]
[info]   (min, avg, max) = (765750,266, 767346,412, 768333,962), stdev = 1001,018
[info]   CI (99.9%): [763491,849, 771200,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1384,629 ±(99.9%) 6,927 MB/sec [Average]
[info]   (min, avg, max) = (1381,731, 1384,629, 1386,454), stdev = 1,799
[info]   CI (99.9%): [1377,702, 1391,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2840,001, 2840,001, 2840,001), stdev = 0,001
[info]   CI (99.9%): [2840,000, 2840,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1482,449 ±(99.9%) 1157,989 MB/sec [Average]
[info]   (min, avg, max) = (1346,783, 1482,449, 2020,401), stdev = 300,726
[info]   CI (99.9%): [324,460, 2640,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3040,583 ±(99.9%) 2373,453 B/op [Average]
[info]   (min, avg, max) = (2760,244, 3040,583, 4143,182), stdev = 616,378
[info]   CI (99.9%): [667,130, 5414,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,022, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,120 ±(99.9%) 0,073 B/op [Average]
[info]   (min, avg, max) = (0,085, 0,120, 0,128), stdev = 0,019
[info]   CI (99.9%): [0,046, 0,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34,00% complete, ETA 01:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 754766,535 ops/s
[info] # Warmup Iteration   2: 799844,425 ops/s
[info] # Warmup Iteration   3: 719455,027 ops/s
[info] # Warmup Iteration   4: 798704,612 ops/s
[info] # Warmup Iteration   5: 797915,610 ops/s
[info] Iteration   1: 799379,195 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 798147,745 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 751747,065 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 768070,293 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 800059,927 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   783480,845 ±(99.9%) 85828,326 ops/s [Average]
[info]   (min, avg, max) = (751747,065, 783480,845, 800059,927), stdev = 22289,344
[info]   CI (99.9%): [697652,519, 869309,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34,21% complete, ETA 01:27:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21450,826 ops/s
[info] # Warmup Iteration   2: 27484,657 ops/s
[info] # Warmup Iteration   3: 27129,516 ops/s
[info] # Warmup Iteration   4: 27634,112 ops/s
[info] # Warmup Iteration   5: 27817,861 ops/s
[info] Iteration   1: 27791,114 ops/s
[info]                  ·gc.alloc.rate:                   1172,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75967,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,357 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 27777,498 ops/s
[info]                  ·gc.alloc.rate:                   1172,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75936,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,179 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 27707,184 ops/s
[info]                  ·gc.alloc.rate:                   1169,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76144,158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,182 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 27759,835 ops/s
[info]                  ·gc.alloc.rate:               1171,521 MB/sec
[info]                  ·gc.alloc.rate.norm:          66416,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38008,850 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 27710,362 ops/s
[info]                  ·gc.alloc.rate:                   1169,265 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76189,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,182 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   27749,199 ±(99.9%) 148,443 ops/s [Average]
[info]   (min, avg, max) = (27707,184, 27749,199, 27791,114), stdev = 38,550
[info]   CI (99.9%): [27600,756, 27897,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1170,984 ±(99.9%) 6,431 MB/sec [Average]
[info]   (min, avg, max) = (1169,167, 1170,984, 1172,723), stdev = 1,670
[info]   CI (99.9%): [1164,553, 1177,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66416,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (66416,015, 66416,016, 66416,016), stdev = 0,001
[info]   CI (99.9%): [66416,014, 66416,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,771 ±(99.9%) 1154,488 MB/sec [Average]
[info]   (min, avg, max) = (670,443, 1206,771, 1341,384), stdev = 299,817
[info]   CI (99.9%): [52,283, 2361,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68449,404 ±(99.9%) 65526,938 B/op [Average]
[info]   (min, avg, max) = (38008,850, 68449,404, 76189,915), stdev = 17017,138
[info]   CI (99.9%): [2922,466, 133976,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,180 ±(99.9%) 3,210 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,180, 2,357), stdev = 0,834
[info]   CI (99.9%): [≈ 0, 4,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34,41% complete, ETA 01:26:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14392,429 ops/s
[info] # Warmup Iteration   2: 15717,432 ops/s
[info] # Warmup Iteration   3: 15703,121 ops/s
[info] # Warmup Iteration   4: 15726,392 ops/s
[info] # Warmup Iteration   5: 15659,014 ops/s
[info] Iteration   1: 15700,494 ops/s
[info]                  ·gc.alloc.rate:                   631,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67701,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 285,472 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15756,737 ops/s
[info]                  ·gc.alloc.rate:                   633,902 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67465,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,238 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 15729,714 ops/s
[info]                  ·gc.alloc.rate:                   632,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              63312,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67377,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,083 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 15753,594 ops/s
[info]                  ·gc.alloc.rate:      633,694 MB/sec
[info]                  ·gc.alloc.rate.norm: 63312,028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15783,952 ops/s
[info]                  ·gc.alloc.rate:               634,854 MB/sec
[info]                  ·gc.alloc.rate.norm:          63312,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67146,588 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   15744,898 ±(99.9%) 120,901 ops/s [Average]
[info]   (min, avg, max) = (15700,494, 15744,898, 15783,952), stdev = 31,398
[info]   CI (99.9%): [15623,997, 15865,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   633,341 ±(99.9%) 4,861 MB/sec [Average]
[info]   (min, avg, max) = (631,537, 633,341, 634,854), stdev = 1,262
[info]   CI (99.9%): [628,480, 638,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   63312,028 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (63312,026, 63312,028, 63312,032), stdev = 0,003
[info]   CI (99.9%): [63312,018, 63312,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   539,491 ±(99.9%) 1161,303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,491, 675,488), stdev = 301,587
[info]   CI (99.9%): [≈ 0, 1700,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   53938,174 ±(99.9%) 116108,508 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53938,174, 67701,755), stdev = 30153,011
[info]   CI (99.9%): [≈ 0, 170046,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,586 ±(99.9%) 4,869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,586, 2,848), stdev = 1,264
[info]   CI (99.9%): [≈ 0, 5,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   58,759 ±(99.9%) 488,117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58,759, 285,472), stdev = 126,762
[info]   CI (99.9%): [≈ 0, 546,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34,61% complete, ETA 01:26:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25068,266 ops/s
[info] # Warmup Iteration   2: 31463,654 ops/s
[info] # Warmup Iteration   3: 31550,736 ops/s
[info] # Warmup Iteration   4: 31557,253 ops/s
[info] # Warmup Iteration   5: 31849,882 ops/s
[info] Iteration   1: 31797,753 ops/s
[info]                  ·gc.alloc.rate:                   1726,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99806,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,061 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 31735,775 ops/s
[info]                  ·gc.alloc.rate:                   1722,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66700,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,065 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 30588,327 ops/s
[info]                  ·gc.alloc.rate:                   1660,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103942,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,142 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31694,771 ops/s
[info]                  ·gc.alloc.rate:               1720,683 MB/sec
[info]                  ·gc.alloc.rate.norm:          85440,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,143 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66941,642 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 30455,082 ops/s
[info]                  ·gc.alloc.rate:                   1653,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104664,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,076 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   31254,341 ±(99.9%) 2585,560 ops/s [Average]
[info]   (min, avg, max) = (30455,082, 31254,341, 31797,753), stdev = 671,462
[info]   CI (99.9%): [28668,781, 33839,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1696,673 ±(99.9%) 140,310 MB/sec [Average]
[info]   (min, avg, max) = (1653,167, 1696,673, 1726,108), stdev = 36,438
[info]   CI (99.9%): [1556,363, 1836,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85440,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (85440,013, 85440,013, 85440,014), stdev = 0,001
[info]   CI (99.9%): [85440,012, 85440,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1750,964 ±(99.9%) 1421,749 MB/sec [Average]
[info]   (min, avg, max) = (1344,888, 1750,964, 2025,146), stdev = 369,224
[info]   CI (99.9%): [329,214, 3172,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   88411,144 ±(99.9%) 76227,734 B/op [Average]
[info]   (min, avg, max) = (66700,534, 88411,144, 104664,828), stdev = 19796,101
[info]   CI (99.9%): [12183,409, 164638,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,469 ±(99.9%) 3,587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,469, 2,142), stdev = 0,932
[info]   CI (99.9%): [≈ 0, 5,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,81% complete, ETA 01:26:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22858,720 ops/s
[info] # Warmup Iteration   2: 35017,353 ops/s
[info] # Warmup Iteration   3: 35143,565 ops/s
[info] # Warmup Iteration   4: 35157,439 ops/s
[info] # Warmup Iteration   5: 35130,206 ops/s
[info] Iteration   1: 35133,304 ops/s
[info]                  ·gc.alloc.rate:                   1603,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60631,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,932 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 35130,719 ops/s
[info]                  ·gc.alloc.rate:                   1603,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91026,781 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,730 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 35265,966 ops/s
[info]                  ·gc.alloc.rate:               1609,890 MB/sec
[info]                  ·gc.alloc.rate.norm:          71848,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60521,637 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 35274,544 ops/s
[info]                  ·gc.alloc.rate:               1610,365 MB/sec
[info]                  ·gc.alloc.rate.norm:          71848,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 60535,917 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 35243,351 ops/s
[info]                  ·gc.alloc.rate:                   1608,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90963,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,930 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   35209,577 ±(99.9%) 276,184 ops/s [Average]
[info]   (min, avg, max) = (35130,719, 35209,577, 35274,544), stdev = 71,724
[info]   CI (99.9%): [34933,393, 35485,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1607,280 ±(99.9%) 12,378 MB/sec [Average]
[info]   (min, avg, max) = (1603,842, 1607,280, 1610,365), stdev = 3,215
[info]   CI (99.9%): [1594,902, 1619,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71848,012 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (71848,012, 71848,012, 71848,012), stdev = 0,001
[info]   CI (99.9%): [71848,011, 71848,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1626,948 ±(99.9%) 1431,500 MB/sec [Average]
[info]   (min, avg, max) = (1353,455, 1626,948, 2036,391), stdev = 371,756
[info]   CI (99.9%): [195,447, 3058,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   72735,784 ±(99.9%) 64184,030 B/op [Average]
[info]   (min, avg, max) = (60521,637, 72735,784, 91026,781), stdev = 16668,389
[info]   CI (99.9%): [8551,753, 136919,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,118 ±(99.9%) 5,901 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,118, 3,730), stdev = 1,532
[info]   CI (99.9%): [≈ 0, 7,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,01% complete, ETA 01:26:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366549,813 ops/s
[info] # Warmup Iteration   2: 389002,409 ops/s
[info] # Warmup Iteration   3: 395590,500 ops/s
[info] # Warmup Iteration   4: 397449,163 ops/s
[info] # Warmup Iteration   5: 397952,501 ops/s
[info] Iteration   1: 398789,976 ops/s
[info]                  ·gc.alloc.rate:               1037,823 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2660,360 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 387626,101 ops/s
[info]                  ·gc.alloc.rate:                   1008,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5468,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,254 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 399087,947 ops/s
[info]                  ·gc.alloc.rate:               1038,508 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2655,700 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 398865,751 ops/s
[info]                  ·gc.alloc.rate:                   1038,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5314,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 398208,720 ops/s
[info]                  ·gc.alloc.rate:               1036,351 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2661,534 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   396515,699 ±(99.9%) 19176,324 ops/s [Average]
[info]   (min, avg, max) = (387626,101, 396515,699, 399087,947), stdev = 4980,030
[info]   CI (99.9%): [377339,375, 415692,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1031,916 ±(99.9%) 49,876 MB/sec [Average]
[info]   (min, avg, max) = (1008,791, 1031,916, 1038,508), stdev = 12,953
[info]   CI (99.9%): [982,040, 1081,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   942,899 ±(99.9%) 1419,922 MB/sec [Average]
[info]   (min, avg, max) = (673,331, 942,899, 1346,880), stdev = 368,749
[info]   CI (99.9%): [≈ 0, 2362,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3752,071 ±(99.9%) 5766,231 B/op [Average]
[info]   (min, avg, max) = (2655,700, 3752,071, 5468,447), stdev = 1497,472
[info]   CI (99.9%): [≈ 0, 9518,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,084 ±(99.9%) 0,457 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,084, 0,254), stdev = 0,119
[info]   CI (99.9%): [≈ 0, 0,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35,21% complete, ETA 01:25:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12072,838 ops/s
[info] # Warmup Iteration   2: 19806,267 ops/s
[info] # Warmup Iteration   3: 19856,677 ops/s
[info] # Warmup Iteration   4: 19772,528 ops/s
[info] # Warmup Iteration   5: 19833,273 ops/s
[info] Iteration   1: 19629,543 ops/s
[info]                  ·gc.alloc.rate:                   2020,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163040,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,675 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 19819,952 ops/s
[info]                  ·gc.alloc.rate:                   2039,963 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161636,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,306 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 19653,315 ops/s
[info]                  ·gc.alloc.rate:                   2022,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163116,564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,668 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 19854,232 ops/s
[info]                  ·gc.alloc.rate:                   2043,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161571,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,950 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19328,663 ops/s
[info]                  ·gc.alloc.rate:                   1988,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              161984,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166129,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,390 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   19657,141 ±(99.9%) 803,176 ops/s [Average]
[info]   (min, avg, max) = (19328,663, 19657,141, 19854,232), stdev = 208,582
[info]   CI (99.9%): [18853,965, 20460,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2023,116 ±(99.9%) 83,474 MB/sec [Average]
[info]   (min, avg, max) = (1988,921, 2023,116, 2043,580), stdev = 21,678
[info]   CI (99.9%): [1939,642, 2106,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   161984,022 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (161984,021, 161984,022, 161984,026), stdev = 0,002
[info]   CI (99.9%): [161984,014, 161984,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2036,845 ±(99.9%) 9,409 MB/sec [Average]
[info]   (min, avg, max) = (2033,516, 2036,845, 2039,825), stdev = 2,443
[info]   CI (99.9%): [2027,436, 2046,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   163098,993 ±(99.9%) 7116,433 B/op [Average]
[info]   (min, avg, max) = (161571,205, 163098,993, 166129,845), stdev = 1848,115
[info]   CI (99.9%): [155982,560, 170215,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,998 ±(99.9%) 6,401 B/op [Average]
[info]   (min, avg, max) = (3,306, 4,998, 6,675), stdev = 1,662
[info]   CI (99.9%): [≈ 0, 11,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35,41% complete, ETA 01:25:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27830,378 ops/s
[info] # Warmup Iteration   2: 33274,865 ops/s
[info] # Warmup Iteration   3: 33233,101 ops/s
[info] # Warmup Iteration   4: 33386,751 ops/s
[info] # Warmup Iteration   5: 33424,909 ops/s
[info] Iteration   1: 33510,801 ops/s
[info]                  ·gc.alloc.rate:                   1623,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63191,728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,955 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33445,868 ops/s
[info]                  ·gc.alloc.rate:                   1620,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95034,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,938 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33608,613 ops/s
[info]                  ·gc.alloc.rate:                   1628,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63139,792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,975 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33420,393 ops/s
[info]                  ·gc.alloc.rate:               1619,124 MB/sec
[info]                  ·gc.alloc.rate.norm:          76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63553,863 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 33525,713 ops/s
[info]                  ·gc.alloc.rate:                   1624,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95157,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,954 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   33502,278 ±(99.9%) 284,377 ops/s [Average]
[info]   (min, avg, max) = (33420,393, 33502,278, 33608,613), stdev = 73,852
[info]   CI (99.9%): [33217,901, 33786,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1623,042 ±(99.9%) 13,622 MB/sec [Average]
[info]   (min, avg, max) = (1619,124, 1623,042, 1628,043), stdev = 3,538
[info]   CI (99.9%): [1609,420, 1636,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   76248,013 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (76248,012, 76248,013, 76248,014), stdev = 0,001
[info]   CI (99.9%): [76248,009, 76248,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1617,964 ±(99.9%) 1424,942 MB/sec [Average]
[info]   (min, avg, max) = (1345,454, 1617,964, 2027,193), stdev = 370,053
[info]   CI (99.9%): [193,022, 3042,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   76015,439 ±(99.9%) 67073,553 B/op [Average]
[info]   (min, avg, max) = (63139,792, 76015,439, 95157,365), stdev = 17418,789
[info]   CI (99.9%): [8941,886, 143088,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,565 ±(99.9%) 4,300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,565, 2,938), stdev = 1,117
[info]   CI (99.9%): [≈ 0, 5,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35,61% complete, ETA 01:25:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50030,651 ops/s
[info] # Warmup Iteration   2: 63020,763 ops/s
[info] # Warmup Iteration   3: 60313,288 ops/s
[info] # Warmup Iteration   4: 63681,999 ops/s
[info] # Warmup Iteration   5: 63620,465 ops/s
[info] Iteration   1: 64026,701 ops/s
[info]                  ·gc.alloc.rate:                   1552,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33012,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 63887,515 ops/s
[info]                  ·gc.alloc.rate:                   1549,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49643,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,513 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 64046,446 ops/s
[info]                  ·gc.alloc.rate:                   1553,406 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33049,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,512 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 64034,585 ops/s
[info]                  ·gc.alloc.rate:                   1553,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33088,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 63980,914 ops/s
[info]                  ·gc.alloc.rate:               1552,100 MB/sec
[info]                  ·gc.alloc.rate.norm:          38176,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33155,096 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   63995,232 ±(99.9%) 250,808 ops/s [Average]
[info]   (min, avg, max) = (63887,515, 63995,232, 64046,446), stdev = 65,134
[info]   CI (99.9%): [63744,424, 64246,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1552,317 ±(99.9%) 5,798 MB/sec [Average]
[info]   (min, avg, max) = (1549,796, 1552,317, 1553,406), stdev = 1,506
[info]   CI (99.9%): [1546,519, 1558,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38176,006, 38176,006, 38176,007), stdev = 0,001
[info]   CI (99.9%): [38176,006, 38176,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,462 ±(99.9%) 1153,483 MB/sec [Average]
[info]   (min, avg, max) = (1342,843, 1479,462, 2015,313), stdev = 299,556
[info]   CI (99.9%): [325,979, 2632,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   36389,675 ±(99.9%) 28529,605 B/op [Average]
[info]   (min, avg, max) = (33012,091, 36389,675, 49643,046), stdev = 7409,048
[info]   CI (99.9%): [7860,070, 64919,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,614 ±(99.9%) 1,648 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,614, 1,023), stdev = 0,428
[info]   CI (99.9%): [≈ 0, 2,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,81% complete, ETA 01:25:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104513,747 ops/s
[info] # Warmup Iteration   2: 148395,477 ops/s
[info] # Warmup Iteration   3: 149634,835 ops/s
[info] # Warmup Iteration   4: 149116,374 ops/s
[info] # Warmup Iteration   5: 149722,611 ops/s
[info] Iteration   1: 149537,501 ops/s
[info]                  ·gc.alloc.rate:                   1267,028 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14234,841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,657 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 150341,880 ops/s
[info]                  ·gc.alloc.rate:               1273,856 MB/sec
[info]                  ·gc.alloc.rate.norm:          13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7081,628 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 147419,849 ops/s
[info]                  ·gc.alloc.rate:                   1249,102 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14456,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 149956,923 ops/s
[info]                  ·gc.alloc.rate:                   1270,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14226,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,437 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 149314,904 ops/s
[info]                  ·gc.alloc.rate:               1265,035 MB/sec
[info]                  ·gc.alloc.rate.norm:          13336,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14295,572 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   149314,212 ±(99.9%) 4351,248 ops/s [Average]
[info]   (min, avg, max) = (147419,849, 149314,212, 150341,880), stdev = 1130,005
[info]   CI (99.9%): [144962,964, 153665,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1265,156 ±(99.9%) 36,949 MB/sec [Average]
[info]   (min, avg, max) = (1249,102, 1265,156, 1273,856), stdev = 9,596
[info]   CI (99.9%): [1228,206, 1302,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   13336,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13336,003, 13336,003, 13336,003), stdev = 0,001
[info]   CI (99.9%): [13336,002, 13336,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,932 ±(99.9%) 1167,773 MB/sec [Average]
[info]   (min, avg, max) = (676,437, 1218,932, 1356,058), stdev = 303,267
[info]   CI (99.9%): [51,159, 2386,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12859,169 ±(99.9%) 12441,684 B/op [Average]
[info]   (min, avg, max) = (7081,628, 12859,169, 14456,889), stdev = 3231,066
[info]   CI (99.9%): [417,484, 25300,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,263 ±(99.9%) 1,099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,263, 0,657), stdev = 0,285
[info]   CI (99.9%): [≈ 0, 1,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36,02% complete, ETA 01:24:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1022458,523 ops/s
[info] # Warmup Iteration   2: 1145603,411 ops/s
[info] # Warmup Iteration   3: 1157028,013 ops/s
[info] # Warmup Iteration   4: 1154865,473 ops/s
[info] # Warmup Iteration   5: 1155946,746 ops/s
[info] Iteration   1: 1163286,294 ops/s
[info]                  ·gc.alloc.rate:                   1247,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1822,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1159229,137 ops/s
[info]                  ·gc.alloc.rate:                   1243,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1828,754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1164696,447 ops/s
[info]                  ·gc.alloc.rate:                   1249,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1820,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1164480,087 ops/s
[info]                  ·gc.alloc.rate:               1248,935 MB/sec
[info]                  ·gc.alloc.rate.norm:          1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 910,648 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1159155,094 ops/s
[info]                  ·gc.alloc.rate:                   1243,294 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1830,519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1162169,412 ±(99.9%) 10668,418 ops/s [Average]
[info]   (min, avg, max) = (1159155,094, 1162169,412, 1164696,447), stdev = 2770,554
[info]   CI (99.9%): [1151500,994, 1172837,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1246,454 ±(99.9%) 11,352 MB/sec [Average]
[info]   (min, avg, max) = (1243,285, 1246,454, 1249,147), stdev = 2,948
[info]   CI (99.9%): [1235,102, 1257,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1688,000, 1688,000, 1688,000), stdev = 0,001
[info]   CI (99.9%): [1688,000, 1688,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,581 ±(99.9%) 1159,812 MB/sec [Average]
[info]   (min, avg, max) = (673,780, 1212,581, 1348,266), stdev = 301,200
[info]   CI (99.9%): [52,769, 2372,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1642,499 ±(99.9%) 1575,452 B/op [Average]
[info]   (min, avg, max) = (910,648, 1642,499, 1830,519), stdev = 409,140
[info]   CI (99.9%): [67,048, 3217,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,056 ±(99.9%) 0,154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,056, 0,085), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36,22% complete, ETA 01:24:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 939775,015 ops/s
[info] # Warmup Iteration   2: 1017844,461 ops/s
[info] # Warmup Iteration   3: 1014653,075 ops/s
[info] # Warmup Iteration   4: 1014569,159 ops/s
[info] # Warmup Iteration   5: 1015007,432 ops/s
[info] Iteration   1: 1016455,275 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1014634,258 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1016912,565 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1013936,003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1016779,931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1015743,606 ±(99.9%) 5253,339 ops/s [Average]
[info]   (min, avg, max) = (1013936,003, 1015743,606, 1016912,565), stdev = 1364,275
[info]   CI (99.9%): [1010490,268, 1020996,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36,42% complete, ETA 01:24:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53348,427 ops/s
[info] # Warmup Iteration   2: 69589,399 ops/s
[info] # Warmup Iteration   3: 70196,546 ops/s
[info] # Warmup Iteration   4: 70259,430 ops/s
[info] # Warmup Iteration   5: 69725,909 ops/s
[info] Iteration   1: 69984,453 ops/s
[info]                  ·gc.alloc.rate:                   1629,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,971 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30147,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,936 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 70309,850 ops/s
[info]                  ·gc.alloc.rate:                   1636,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45042,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,398 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 70340,517 ops/s
[info]                  ·gc.alloc.rate:               1636,767 MB/sec
[info]                  ·gc.alloc.rate.norm:          36624,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30062,368 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 70285,566 ops/s
[info]                  ·gc.alloc.rate:                   1635,652 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30115,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,466 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 70217,394 ops/s
[info]                  ·gc.alloc.rate:                   1633,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              36624,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45305,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,400 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   70227,556 ±(99.9%) 551,665 ops/s [Average]
[info]   (min, avg, max) = (69984,453, 70227,556, 70340,517), stdev = 143,266
[info]   CI (99.9%): [69675,891, 70779,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1634,316 ±(99.9%) 12,203 MB/sec [Average]
[info]   (min, avg, max) = (1629,029, 1634,316, 1636,767), stdev = 3,169
[info]   CI (99.9%): [1622,114, 1646,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36624,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (36624,006, 36624,006, 36624,006), stdev = 0,001
[info]   CI (99.9%): [36624,005, 36624,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1612,602 ±(99.9%) 1420,753 MB/sec [Average]
[info]   (min, avg, max) = (1340,971, 1612,602, 2021,064), stdev = 368,965
[info]   CI (99.9%): [191,850, 3033,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36134,727 ±(99.9%) 31776,021 B/op [Average]
[info]   (min, avg, max) = (30062,368, 36134,727, 45305,614), stdev = 8252,132
[info]   CI (99.9%): [4358,705, 67910,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,840 ±(99.9%) 2,342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,840, 1,400), stdev = 0,608
[info]   CI (99.9%): [≈ 0, 3,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36,62% complete, ETA 01:24:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26997,719 ops/s
[info] # Warmup Iteration   2: 29511,555 ops/s
[info] # Warmup Iteration   3: 28903,715 ops/s
[info] # Warmup Iteration   4: 29547,668 ops/s
[info] # Warmup Iteration   5: 29565,097 ops/s
[info] Iteration   1: 29620,169 ops/s
[info]                  ·gc.alloc.rate:                   425,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              22592,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27182,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,230 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29708,346 ops/s
[info]                  ·gc.alloc.rate:      426,478 MB/sec
[info]                  ·gc.alloc.rate.norm: 22592,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 29623,626 ops/s
[info]                  ·gc.alloc.rate:                   425,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              22592,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27176,916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 29695,782 ops/s
[info]                  ·gc.alloc.rate:                   426,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              22592,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35799,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150,234 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 29714,457 ops/s
[info]                  ·gc.alloc.rate:      426,465 MB/sec
[info]                  ·gc.alloc.rate.norm: 22592,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   29672,476 ±(99.9%) 179,732 ops/s [Average]
[info]   (min, avg, max) = (29620,169, 29672,476, 29714,457), stdev = 46,676
[info]   CI (99.9%): [29492,744, 29852,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   425,910 ±(99.9%) 2,645 MB/sec [Average]
[info]   (min, avg, max) = (425,121, 425,910, 426,478), stdev = 0,687
[info]   CI (99.9%): [423,265, 428,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   22592,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (22592,014, 22592,014, 22592,015), stdev = 0,001
[info]   CI (99.9%): [22592,012, 22592,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   339,698 ±(99.9%) 1221,599 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,698, 675,492), stdev = 317,245
[info]   CI (99.9%): [≈ 0, 1561,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18031,841 ±(99.9%) 64816,839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18031,841, 35799,867), stdev = 16832,727
[info]   CI (99.9%): [≈ 0, 82848,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,572 ±(99.9%) 4,871 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,572, 2,835), stdev = 1,265
[info]   CI (99.9%): [≈ 0, 5,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   30,302 ±(99.9%) 258,169 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30,302, 150,234), stdev = 67,046
[info]   CI (99.9%): [≈ 0, 288,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36,82% complete, ETA 01:23:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14011,519 ops/s
[info] # Warmup Iteration   2: 18404,165 ops/s
[info] # Warmup Iteration   3: 18438,364 ops/s
[info] # Warmup Iteration   4: 18534,038 ops/s
[info] # Warmup Iteration   5: 18538,719 ops/s
[info] Iteration   1: 18548,415 ops/s
[info]                  ·gc.alloc.rate:               1655,429 MB/sec
[info]                  ·gc.alloc.rate.norm:          140480,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114065,353 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 18561,492 ops/s
[info]                  ·gc.alloc.rate:                   1656,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171025,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,530 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18576,617 ops/s
[info]                  ·gc.alloc.rate:               1658,185 MB/sec
[info]                  ·gc.alloc.rate.norm:          140480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114044,349 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 18533,601 ops/s
[info]                  ·gc.alloc.rate:                   1654,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171689,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,535 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 18467,054 ops/s
[info]                  ·gc.alloc.rate:                   1648,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115041,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,548 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   18537,436 ±(99.9%) 163,399 ops/s [Average]
[info]   (min, avg, max) = (18467,054, 18537,436, 18576,617), stdev = 42,434
[info]   CI (99.9%): [18374,036, 18700,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1654,647 ±(99.9%) 14,940 MB/sec [Average]
[info]   (min, avg, max) = (1648,204, 1654,647, 1658,185), stdev = 3,880
[info]   CI (99.9%): [1639,707, 1669,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140480,024 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (140480,022, 140480,024, 140480,028), stdev = 0,002
[info]   CI (99.9%): [140480,015, 140480,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,862 ±(99.9%) 1419,338 MB/sec [Average]
[info]   (min, avg, max) = (1344,156, 1615,862, 2021,972), stdev = 368,598
[info]   CI (99.9%): [196,524, 3035,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   137173,330 ±(99.9%) 120175,647 B/op [Average]
[info]   (min, avg, max) = (114044,349, 137173,330, 171689,544), stdev = 31209,234
[info]   CI (99.9%): [16997,682, 257348,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,123 ±(99.9%) 7,461 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,123, 3,548), stdev = 1,938
[info]   CI (99.9%): [≈ 0, 9,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,02% complete, ETA 01:23:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12511,908 ops/s
[info] # Warmup Iteration   2: 18933,532 ops/s
[info] # Warmup Iteration   3: 18999,481 ops/s
[info] # Warmup Iteration   4: 18971,992 ops/s
[info] # Warmup Iteration   5: 19002,842 ops/s
[info] Iteration   1: 18840,842 ops/s
[info]                  ·gc.alloc.rate:                   1522,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              127144,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169578,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,478 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18875,378 ops/s
[info]                  ·gc.alloc.rate:                   1524,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              127145,469 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112950,487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,736 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 19051,462 ops/s
[info]                  ·gc.alloc.rate:                   1538,982 MB/sec
[info]                  ·gc.alloc.rate.norm:              127144,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111989,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,720 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18871,801 ops/s
[info]                  ·gc.alloc.rate:                   1524,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              127144,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113129,107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,472 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 18869,498 ops/s
[info]                  ·gc.alloc.rate:                   1524,217 MB/sec
[info]                  ·gc.alloc.rate.norm:              127144,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169808,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,736 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18901,796 ±(99.9%) 326,490 ops/s [Average]
[info]   (min, avg, max) = (18840,842, 18901,796, 19051,462), stdev = 84,788
[info]   CI (99.9%): [18575,306, 19228,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1526,899 ±(99.9%) 26,336 MB/sec [Average]
[info]   (min, avg, max) = (1522,052, 1526,899, 1538,982), stdev = 6,839
[info]   CI (99.9%): [1500,562, 1553,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127144,313 ±(99.9%) 2,488 B/op [Average]
[info]   (min, avg, max) = (127144,021, 127144,313, 127145,469), stdev = 0,646
[info]   CI (99.9%): [127141,825, 127146,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1626,449 ±(99.9%) 1428,622 MB/sec [Average]
[info]   (min, avg, max) = (1354,556, 1626,449, 2035,688), stdev = 371,009
[info]   CI (99.9%): [197,827, 3055,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   135491,316 ±(99.9%) 120237,949 B/op [Average]
[info]   (min, avg, max) = (111989,722, 135491,316, 169808,866), stdev = 31225,414
[info]   CI (99.9%): [15253,367, 255729,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,428 ±(99.9%) 3,679 B/op [Average]
[info]   (min, avg, max) = (1,720, 2,428, 3,478), stdev = 0,955
[info]   CI (99.9%): [≈ 0, 6,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,22% complete, ETA 01:23:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 428237,330 ops/s
[info] # Warmup Iteration   2: 467281,837 ops/s
[info] # Warmup Iteration   3: 464569,590 ops/s
[info] # Warmup Iteration   4: 465778,955 ops/s
[info] # Warmup Iteration   5: 462942,082 ops/s
[info] Iteration   1: 465607,484 ops/s
[info]                  ·gc.alloc.rate:                   1211,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4552,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,070 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 466046,568 ops/s
[info]                  ·gc.alloc.rate:                   1213,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4548,795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,141 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 465487,201 ops/s
[info]                  ·gc.alloc.rate:               1211,330 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2276,884 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 447226,774 ops/s
[info]                  ·gc.alloc.rate:                   1164,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4740,832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 465917,383 ops/s
[info]                  ·gc.alloc.rate:                   1212,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4553,449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,211 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   462057,082 ±(99.9%) 31935,227 ops/s [Average]
[info]   (min, avg, max) = (447226,774, 462057,082, 466046,568), stdev = 8293,477
[info]   CI (99.9%): [430121,855, 493992,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1202,671 ±(99.9%) 82,725 MB/sec [Average]
[info]   (min, avg, max) = (1164,263, 1202,671, 1213,034), stdev = 21,483
[info]   CI (99.9%): [1119,946, 1285,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,683 ±(99.9%) 1160,950 MB/sec [Average]
[info]   (min, avg, max) = (673,354, 1212,683, 1348,446), stdev = 301,495
[info]   CI (99.9%): [51,733, 2373,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4134,585 ±(99.9%) 4011,259 B/op [Average]
[info]   (min, avg, max) = (2276,884, 4134,585, 4740,832), stdev = 1041,711
[info]   CI (99.9%): [123,326, 8145,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,099 ±(99.9%) 0,308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,099, 0,211), stdev = 0,080
[info]   CI (99.9%): [≈ 0, 0,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37,42% complete, ETA 01:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8974,050 ops/s
[info] # Warmup Iteration   2: 14146,140 ops/s
[info] # Warmup Iteration   3: 14186,474 ops/s
[info] # Warmup Iteration   4: 14294,318 ops/s
[info] # Warmup Iteration   5: 14246,468 ops/s
[info] Iteration   1: 14317,022 ops/s
[info]                  ·gc.alloc.rate:                   1976,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              217280,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     223429,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,864 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 14256,972 ops/s
[info]                  ·gc.alloc.rate:                   1968,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              217280,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224626,582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,595 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 14276,060 ops/s
[info]                  ·gc.alloc.rate:                   1970,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              217280,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224532,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,589 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 14267,086 ops/s
[info]                  ·gc.alloc.rate:                   1969,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              217280,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224836,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,296 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 14304,294 ops/s
[info]                  ·gc.alloc.rate:                   1974,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              217280,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     224401,713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,871 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   14284,286 ±(99.9%) 97,823 ops/s [Average]
[info]   (min, avg, max) = (14256,972, 14284,286, 14317,022), stdev = 25,404
[info]   CI (99.9%): [14186,464, 14382,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1971,926 ±(99.9%) 13,306 MB/sec [Average]
[info]   (min, avg, max) = (1968,210, 1971,926, 1976,498), stdev = 3,456
[info]   CI (99.9%): [1958,619, 1985,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217280,030 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (217280,028, 217280,030, 217280,036), stdev = 0,003
[info]   CI (99.9%): [217280,018, 217280,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2036,222 ±(99.9%) 10,504 MB/sec [Average]
[info]   (min, avg, max) = (2032,435, 2036,222, 2039,235), stdev = 2,728
[info]   CI (99.9%): [2025,718, 2046,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   224365,267 ±(99.9%) 2105,419 B/op [Average]
[info]   (min, avg, max) = (223429,206, 224365,267, 224836,561), stdev = 546,771
[info]   CI (99.9%): [222259,848, 226470,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,043 ±(99.9%) 7,359 B/op [Average]
[info]   (min, avg, max) = (2,296, 5,043, 6,871), stdev = 1,911
[info]   CI (99.9%): [≈ 0, 12,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37,63% complete, ETA 01:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14937,155 ops/s
[info] # Warmup Iteration   2: 18117,975 ops/s
[info] # Warmup Iteration   3: 18307,981 ops/s
[info] # Warmup Iteration   4: 18369,119 ops/s
[info] # Warmup Iteration   5: 18329,644 ops/s
[info] Iteration   1: 18303,713 ops/s
[info]                  ·gc.alloc.rate:                   1588,825 MB/sec
[info]                  ·gc.alloc.rate.norm:              136624,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173569,454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,580 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18169,216 ops/s
[info]                  ·gc.alloc.rate:               1577,098 MB/sec
[info]                  ·gc.alloc.rate.norm:          136604,227 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116639,871 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 18447,529 ops/s
[info]                  ·gc.alloc.rate:                   1600,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              136600,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     172479,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 18351,061 ops/s
[info]                  ·gc.alloc.rate:               1592,866 MB/sec
[info]                  ·gc.alloc.rate.norm:          136600,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115740,396 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 18273,536 ops/s
[info]                  ·gc.alloc.rate:                   1586,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              136600,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116342,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,793 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   18309,011 ±(99.9%) 393,560 ops/s [Average]
[info]   (min, avg, max) = (18169,216, 18309,011, 18447,529), stdev = 102,206
[info]   CI (99.9%): [17915,451, 18702,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1589,203 ±(99.9%) 33,775 MB/sec [Average]
[info]   (min, avg, max) = (1577,098, 1589,203, 1600,987), stdev = 8,771
[info]   CI (99.9%): [1555,428, 1622,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   136605,665 ±(99.9%) 40,145 B/op [Average]
[info]   (min, avg, max) = (136600,022, 136605,665, 136624,028), stdev = 10,426
[info]   CI (99.9%): [136565,520, 136645,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1617,444 ±(99.9%) 1415,024 MB/sec [Average]
[info]   (min, avg, max) = (1346,609, 1617,444, 2021,509), stdev = 367,477
[info]   CI (99.9%): [202,419, 3032,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   138954,484 ±(99.9%) 119777,360 B/op [Average]
[info]   (min, avg, max) = (115740,396, 138954,484, 173569,454), stdev = 31105,800
[info]   CI (99.9%): [19177,124, 258731,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,495 ±(99.9%) 11,449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,495, 7,104), stdev = 2,973
[info]   CI (99.9%): [≈ 0, 13,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37,83% complete, ETA 01:22:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33413,144 ops/s
[info] # Warmup Iteration   2: 44641,062 ops/s
[info] # Warmup Iteration   3: 44531,868 ops/s
[info] # Warmup Iteration   4: 45323,124 ops/s
[info] # Warmup Iteration   5: 45186,901 ops/s
[info] Iteration   1: 45147,704 ops/s
[info]                  ·gc.alloc.rate:                   1403,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46811,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,726 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45316,816 ops/s
[info]                  ·gc.alloc.rate:                   1408,849 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46640,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,723 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45286,913 ops/s
[info]                  ·gc.alloc.rate:               1407,907 MB/sec
[info]                  ·gc.alloc.rate.norm:          48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46689,282 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 45292,097 ops/s
[info]                  ·gc.alloc.rate:                   1408,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46734,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,447 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 45327,142 ops/s
[info]                  ·gc.alloc.rate:                   1409,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46744,725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,723 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   45274,135 ±(99.9%) 279,684 ops/s [Average]
[info]   (min, avg, max) = (45147,704, 45274,135, 45327,142), stdev = 72,633
[info]   CI (99.9%): [44994,451, 45553,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1407,505 ±(99.9%) 8,650 MB/sec [Average]
[info]   (min, avg, max) = (1403,569, 1407,505, 1409,002), stdev = 2,246
[info]   CI (99.9%): [1398,856, 1416,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (48928,009, 48928,009, 48928,010), stdev = 0,001
[info]   CI (99.9%): [48928,008, 48928,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1344,106 ±(99.9%) 5,519 MB/sec [Average]
[info]   (min, avg, max) = (1342,864, 1344,106, 1346,129), stdev = 1,433
[info]   CI (99.9%): [1338,587, 1349,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   46724,158 ±(99.9%) 246,955 B/op [Average]
[info]   (min, avg, max) = (46640,394, 46724,158, 46811,843), stdev = 64,133
[info]   CI (99.9%): [46477,203, 46971,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,724 ±(99.9%) 1,970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,724, 1,447), stdev = 0,511
[info]   CI (99.9%): [≈ 0, 2,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38,03% complete, ETA 01:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39506,710 ops/s
[info] # Warmup Iteration   2: 54517,251 ops/s
[info] # Warmup Iteration   3: 54333,078 ops/s
[info] # Warmup Iteration   4: 54353,856 ops/s
[info] # Warmup Iteration   5: 54285,021 ops/s
[info] Iteration   1: 54566,578 ops/s
[info]                  ·gc.alloc.rate:                   1447,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39020,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,201 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 54801,369 ops/s
[info]                  ·gc.alloc.rate:               1453,898 MB/sec
[info]                  ·gc.alloc.rate.norm:          41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38893,541 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 54772,635 ops/s
[info]                  ·gc.alloc.rate:                   1452,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38929,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,598 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 54701,166 ops/s
[info]                  ·gc.alloc.rate:                   1451,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58545,940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,198 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 54134,605 ops/s
[info]                  ·gc.alloc.rate:                   1435,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39465,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,210 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   54595,271 ±(99.9%) 1051,347 ops/s [Average]
[info]   (min, avg, max) = (54134,605, 54595,271, 54801,369), stdev = 273,031
[info]   CI (99.9%): [53543,924, 55646,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1448,271 ±(99.9%) 28,245 MB/sec [Average]
[info]   (min, avg, max) = (1435,899, 1448,271, 1453,898), stdev = 7,335
[info]   CI (99.9%): [1420,026, 1476,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (41752,007, 41752,008, 41752,008), stdev = 0,001
[info]   CI (99.9%): [41752,007, 41752,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,792 ±(99.9%) 1171,163 MB/sec [Average]
[info]   (min, avg, max) = (1352,787, 1490,792, 2034,859), stdev = 304,147
[info]   CI (99.9%): [319,628, 2661,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   42970,961 ±(99.9%) 33537,924 B/op [Average]
[info]   (min, avg, max) = (38893,541, 42970,961, 58545,940), stdev = 8709,692
[info]   CI (99.9%): [9433,037, 76508,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,841 ±(99.9%) 2,073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,841, 1,210), stdev = 0,538
[info]   CI (99.9%): [≈ 0, 2,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38,23% complete, ETA 01:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1252644,461 ops/s
[info] # Warmup Iteration   2: 1349233,732 ops/s
[info] # Warmup Iteration   3: 1355637,692 ops/s
[info] # Warmup Iteration   4: 1352992,273 ops/s
[info] # Warmup Iteration   5: 1358434,511 ops/s
[info] Iteration   1: 1363314,821 ops/s
[info]                  ·gc.alloc.rate:                   1240,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1554,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1362567,639 ops/s
[info]                  ·gc.alloc.rate:                   1239,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1555,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1366401,818 ops/s
[info]                  ·gc.alloc.rate:                   1243,036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1551,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1366693,565 ops/s
[info]                  ·gc.alloc.rate:               1243,557 MB/sec
[info]                  ·gc.alloc.rate.norm:          1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 775,879 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1363194,171 ops/s
[info]                  ·gc.alloc.rate:                   1240,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1556,503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1364434,403 ±(99.9%) 7518,864 ops/s [Average]
[info]   (min, avg, max) = (1362567,639, 1364434,403, 1366693,565), stdev = 1952,625
[info]   CI (99.9%): [1356915,539, 1371953,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1241,408 ±(99.9%) 6,792 MB/sec [Average]
[info]   (min, avg, max) = (1239,621, 1241,408, 1243,557), stdev = 1,764
[info]   CI (99.9%): [1234,616, 1248,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1432,000, 1432,000, 1432,000), stdev = 0,001
[info]   CI (99.9%): [1432,000, 1432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,427 ±(99.9%) 1159,487 MB/sec [Average]
[info]   (min, avg, max) = (673,777, 1212,427, 1348,234), stdev = 301,115
[info]   CI (99.9%): [52,940, 2371,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1398,841 ±(99.9%) 1340,996 B/op [Average]
[info]   (min, avg, max) = (775,879, 1398,841, 1556,503), stdev = 348,252
[info]   CI (99.9%): [57,845, 2739,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,053 ±(99.9%) 0,121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,053, 0,072), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38,43% complete, ETA 01:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1359900,659 ops/s
[info] # Warmup Iteration   2: 1461755,960 ops/s
[info] # Warmup Iteration   3: 1447535,549 ops/s
[info] # Warmup Iteration   4: 1447771,496 ops/s
[info] # Warmup Iteration   5: 1446924,660 ops/s
[info] Iteration   1: 1447077,255 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1252895,580 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1446673,785 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1444286,158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1446069,702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1407400,496 ±(99.9%) 332608,856 ops/s [Average]
[info]   (min, avg, max) = (1252895,580, 1407400,496, 1447077,255), stdev = 86377,464
[info]   CI (99.9%): [1074791,639, 1740009,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38,63% complete, ETA 01:21:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33373,154 ops/s
[info] # Warmup Iteration   2: 42347,829 ops/s
[info] # Warmup Iteration   3: 42178,204 ops/s
[info] # Warmup Iteration   4: 42542,569 ops/s
[info] # Warmup Iteration   5: 42616,110 ops/s
[info] Iteration   1: 42526,984 ops/s
[info]                  ·gc.alloc.rate:                   1342,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              49680,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49602,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,311 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38950,554 ops/s
[info]                  ·gc.alloc.rate:               1229,453 MB/sec
[info]                  ·gc.alloc.rate.norm:          49680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,053 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27075,653 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 37168,714 ops/s
[info]                  ·gc.alloc.rate:                   1173,183 MB/sec
[info]                  ·gc.alloc.rate.norm:              49680,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56775,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,526 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 42311,682 ops/s
[info]                  ·gc.alloc.rate:                   1335,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              49680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,515 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49897,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,774 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42441,072 ops/s
[info]                  ·gc.alloc.rate:                   1339,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              49680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49820,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,772 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   40679,801 ±(99.9%) 9528,930 ops/s [Average]
[info]   (min, avg, max) = (37168,714, 40679,801, 42526,984), stdev = 2474,633
[info]   CI (99.9%): [31150,872, 50208,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1284,050 ±(99.9%) 300,879 MB/sec [Average]
[info]   (min, avg, max) = (1173,183, 1284,050, 1342,427), stdev = 78,137
[info]   CI (99.9%): [983,171, 1584,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   49680,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (49680,010, 49680,011, 49680,011), stdev = 0,001
[info]   CI (99.9%): [49680,008, 49680,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1207,189 ±(99.9%) 1156,235 MB/sec [Average]
[info]   (min, avg, max) = (670,053, 1207,189, 1343,320), stdev = 300,271
[info]   CI (99.9%): [50,955, 2363,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   46634,291 ±(99.9%) 43692,001 B/op [Average]
[info]   (min, avg, max) = (27075,653, 46634,291, 56775,068), stdev = 11346,674
[info]   CI (99.9%): [2942,290, 90326,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,477 ±(99.9%) 5,468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,477, 3,526), stdev = 1,420
[info]   CI (99.9%): [≈ 0, 6,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38,83% complete, ETA 01:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31450,487 ops/s
[info] # Warmup Iteration   2: 33645,755 ops/s
[info] # Warmup Iteration   3: 34146,259 ops/s
[info] # Warmup Iteration   4: 34001,561 ops/s
[info] # Warmup Iteration   5: 34091,627 ops/s
[info] Iteration   1: 34122,198 ops/s
[info]                  ·gc.alloc.rate:      412,056 MB/sec
[info]                  ·gc.alloc.rate.norm: 19008,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 34196,375 ops/s
[info]                  ·gc.alloc.rate:               412,966 MB/sec
[info]                  ·gc.alloc.rate.norm:          19008,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23545,593 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 34081,751 ops/s
[info]                  ·gc.alloc.rate:               411,567 MB/sec
[info]                  ·gc.alloc.rate.norm:          19008,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23622,950 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 32531,294 ops/s
[info]                  ·gc.alloc.rate:      392,905 MB/sec
[info]                  ·gc.alloc.rate.norm: 19008,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 34005,847 ops/s
[info]                  ·gc.alloc.rate:                   410,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              19008,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31259,366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132,564 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   33787,493 ±(99.9%) 2717,034 ops/s [Average]
[info]   (min, avg, max) = (32531,294, 33787,493, 34196,375), stdev = 705,605
[info]   CI (99.9%): [31070,459, 36504,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   408,029 ±(99.9%) 32,716 MB/sec [Average]
[info]   (min, avg, max) = (392,905, 408,029, 412,966), stdev = 8,496
[info]   CI (99.9%): [375,314, 440,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   19008,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (19008,012, 19008,012, 19008,013), stdev = 0,001
[info]   CI (99.9%): [19008,011, 19008,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   339,675 ±(99.9%) 1221,460 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,675, 675,334), stdev = 317,209
[info]   CI (99.9%): [≈ 0, 1561,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   15685,582 ±(99.9%) 56441,801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15685,582, 31259,366), stdev = 14657,756
[info]   CI (99.9%): [≈ 0, 72127,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,573 ±(99.9%) 4,932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,573, 2,864), stdev = 1,281
[info]   CI (99.9%): [≈ 0, 5,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   26,513 ±(99.9%) 228,284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26,513, 132,564), stdev = 59,285
[info]   CI (99.9%): [≈ 0, 254,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39,03% complete, ETA 01:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77587,950 ops/s
[info] # Warmup Iteration   2: 88007,858 ops/s
[info] # Warmup Iteration   3: 87855,398 ops/s
[info] # Warmup Iteration   4: 86767,623 ops/s
[info] # Warmup Iteration   5: 88345,316 ops/s
[info] Iteration   1: 88154,177 ops/s
[info]                  ·gc.alloc.rate:                   1512,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23998,031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,115 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 87900,781 ops/s
[info]                  ·gc.alloc.rate:                   1507,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36112,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,745 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 88488,611 ops/s
[info]                  ·gc.alloc.rate:               1517,980 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23936,819 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 88569,073 ops/s
[info]                  ·gc.alloc.rate:                   1519,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23939,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,110 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 88498,521 ops/s
[info]                  ·gc.alloc.rate:               1518,085 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23987,149 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   88322,233 ±(99.9%) 1098,537 ops/s [Average]
[info]   (min, avg, max) = (87900,781, 88322,233, 88569,073), stdev = 285,287
[info]   CI (99.9%): [87223,695, 89420,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1515,156 ±(99.9%) 18,916 MB/sec [Average]
[info]   (min, avg, max) = (1507,912, 1515,156, 1519,533), stdev = 4,912
[info]   CI (99.9%): [1496,240, 1534,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27000,005, 27000,005, 27000,005), stdev = 0,001
[info]   CI (99.9%): [27000,004, 27000,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1480,541 ±(99.9%) 1154,479 MB/sec [Average]
[info]   (min, avg, max) = (1344,129, 1480,541, 2016,857), stdev = 299,815
[info]   CI (99.9%): [326,062, 2635,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26394,822 ±(99.9%) 20919,308 B/op [Average]
[info]   (min, avg, max) = (23936,819, 26394,822, 36112,967), stdev = 5432,678
[info]   CI (99.9%): [5475,514, 47314,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,594 ±(99.9%) 2,166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,594, 1,115), stdev = 0,563
[info]   CI (99.9%): [≈ 0, 2,760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39,24% complete, ETA 01:20:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113980,559 ops/s
[info] # Warmup Iteration   2: 390949,948 ops/s
[info] # Warmup Iteration   3: 391974,161 ops/s
[info] # Warmup Iteration   4: 389702,767 ops/s
[info] # Warmup Iteration   5: 391157,011 ops/s
[info] Iteration   1: 389862,466 ops/s
[info]                  ·gc.alloc.rate:                   780,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2721,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 392496,003 ops/s
[info]                  ·gc.alloc.rate:               786,016 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2697,800 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 386859,168 ops/s
[info]                  ·gc.alloc.rate:               774,766 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2736,976 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 391331,399 ops/s
[info]                  ·gc.alloc.rate:                   783,767 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2702,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 392141,112 ops/s
[info]                  ·gc.alloc.rate:                   785,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5395,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,251 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   390538,030 ±(99.9%) 8827,844 ops/s [Average]
[info]   (min, avg, max) = (386859,168, 390538,030, 392496,003), stdev = 2292,563
[info]   CI (99.9%): [381710,186, 399365,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   782,089 ±(99.9%) 17,518 MB/sec [Average]
[info]   (min, avg, max) = (774,766, 782,089, 786,016), stdev = 4,549
[info]   CI (99.9%): [764,570, 799,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3152,001, 3152,001, 3152,001), stdev = 0,001
[info]   CI (99.9%): [3152,001, 3152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   807,113 ±(99.9%) 1155,342 MB/sec [Average]
[info]   (min, avg, max) = (672,113, 807,113, 1343,836), stdev = 300,039
[info]   CI (99.9%): [≈ 0, 1962,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3250,840 ±(99.9%) 4615,968 B/op [Average]
[info]   (min, avg, max) = (2697,800, 3250,840, 5395,054), stdev = 1198,752
[info]   CI (99.9%): [≈ 0, 7866,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,100 ±(99.9%) 0,420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,100, 0,251), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,44% complete, ETA 01:20:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 208430,218 ops/s
[info] # Warmup Iteration   2: 294994,292 ops/s
[info] # Warmup Iteration   3: 296103,947 ops/s
[info] # Warmup Iteration   4: 295286,291 ops/s
[info] # Warmup Iteration   5: 294695,050 ops/s
[info] Iteration   1: 290735,699 ops/s
[info]                  ·gc.alloc.rate:                   631,007 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3650,855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,676 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 295975,018 ops/s
[info]                  ·gc.alloc.rate:                   642,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3586,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,221 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 295492,336 ops/s
[info]                  ·gc.alloc.rate:               641,282 MB/sec
[info]                  ·gc.alloc.rate.norm:          3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3597,380 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 295183,383 ops/s
[info]                  ·gc.alloc.rate:                   640,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3601,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,111 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 295058,997 ops/s
[info]                  ·gc.alloc.rate:               640,421 MB/sec
[info]                  ·gc.alloc.rate.norm:          3416,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3606,174 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   294489,087 ±(99.9%) 8193,204 ops/s [Average]
[info]   (min, avg, max) = (290735,699, 294489,087, 295975,018), stdev = 2127,749
[info]   CI (99.9%): [286295,883, 302682,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   639,151 ±(99.9%) 17,754 MB/sec [Average]
[info]   (min, avg, max) = (631,007, 639,151, 642,331), stdev = 4,611
[info]   CI (99.9%): [621,397, 656,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3416,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3416,001, 3416,001, 3416,001), stdev = 0,001
[info]   CI (99.9%): [3416,001, 3416,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,120 ±(99.9%) 2,832 MB/sec [Average]
[info]   (min, avg, max) = (674,363, 675,120, 676,074), stdev = 0,735
[info]   CI (99.9%): [672,287, 677,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3608,382 ±(99.9%) 95,636 B/op [Average]
[info]   (min, avg, max) = (3586,356, 3608,382, 3650,855), stdev = 24,836
[info]   CI (99.9%): [3512,746, 3704,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,202 ±(99.9%) 1,081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,202, 0,676), stdev = 0,281
[info]   CI (99.9%): [≈ 0, 1,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,64% complete, ETA 01:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 517426,155 ops/s
[info] # Warmup Iteration   2: 568739,066 ops/s
[info] # Warmup Iteration   3: 567509,775 ops/s
[info] # Warmup Iteration   4: 548807,297 ops/s
[info] # Warmup Iteration   5: 571437,728 ops/s
[info] Iteration   1: 570176,818 ops/s
[info]                  ·gc.alloc.rate:                   718,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1862,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,739 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 572016,503 ops/s
[info]                  ·gc.alloc.rate:                   721,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1856,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,115 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 571119,755 ops/s
[info]                  ·gc.alloc.rate:                   719,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1853,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 568640,186 ops/s
[info]                  ·gc.alloc.rate:                   716,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3722,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,115 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 570802,516 ops/s
[info]                  ·gc.alloc.rate:               719,450 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1853,228 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   570551,156 ±(99.9%) 4842,354 ops/s [Average]
[info]   (min, avg, max) = (568640,186, 570551,156, 572016,503), stdev = 1257,544
[info]   CI (99.9%): [565708,802, 575393,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   719,174 ±(99.9%) 6,269 MB/sec [Average]
[info]   (min, avg, max) = (716,734, 719,174, 721,123), stdev = 1,628
[info]   CI (99.9%): [712,905, 725,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1984,001, 1984,001, 1984,001), stdev = 0,001
[info]   CI (99.9%): [1984,001, 1984,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,787 ±(99.9%) 1155,771 MB/sec [Average]
[info]   (min, avg, max) = (672,029, 807,787, 1344,707), stdev = 300,150
[info]   CI (99.9%): [≈ 0, 1963,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2229,727 ±(99.9%) 3212,915 B/op [Average]
[info]   (min, avg, max) = (1853,228, 2229,727, 3722,303), stdev = 834,384
[info]   CI (99.9%): [≈ 0, 5442,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,654 ±(99.9%) 5,407 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,654, 3,166), stdev = 1,404
[info]   CI (99.9%): [≈ 0, 6,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,805 ±(99.9%) 14,927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,805, 8,739), stdev = 3,876
[info]   CI (99.9%): [≈ 0, 16,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39,84% complete, ETA 01:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53028,032 ops/s
[info] # Warmup Iteration   2: 80366,168 ops/s
[info] # Warmup Iteration   3: 79692,029 ops/s
[info] # Warmup Iteration   4: 80585,392 ops/s
[info] # Warmup Iteration   5: 80020,851 ops/s
[info] Iteration   1: 80537,259 ops/s
[info]                  ·gc.alloc.rate:                   3591,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66338,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,034 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 80526,777 ops/s
[info]                  ·gc.alloc.rate:                   3591,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66432,639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,034 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 80973,030 ops/s
[info]                  ·gc.alloc.rate:                   3611,030 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66121,865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,214 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 80341,648 ops/s
[info]                  ·gc.alloc.rate:                   3583,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80012,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,223 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 80044,976 ops/s
[info]                  ·gc.alloc.rate:                   3569,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              70192,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66964,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,274 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   80484,738 ±(99.9%) 1301,295 ops/s [Average]
[info]   (min, avg, max) = (80044,976, 80484,738, 80973,030), stdev = 337,942
[info]   CI (99.9%): [79183,443, 81786,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3589,403 ±(99.9%) 58,282 MB/sec [Average]
[info]   (min, avg, max) = (3569,421, 3589,403, 3611,030), stdev = 15,136
[info]   CI (99.9%): [3531,121, 3647,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70192,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70192,005, 70192,005, 70192,005), stdev = 0,001
[info]   CI (99.9%): [70192,004, 70192,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3537,056 ±(99.9%) 1178,475 MB/sec [Average]
[info]   (min, avg, max) = (3394,716, 3537,056, 4084,485), stdev = 306,046
[info]   CI (99.9%): [2358,581, 4715,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69174,028 ±(99.9%) 23360,678 B/op [Average]
[info]   (min, avg, max) = (66121,865, 69174,028, 80012,295), stdev = 6066,694
[info]   CI (99.9%): [45813,349, 92534,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,100, 0,167), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,956 ±(99.9%) 3,243 B/op [Average]
[info]   (min, avg, max) = (1,214, 1,956, 3,274), stdev = 0,842
[info]   CI (99.9%): [≈ 0, 5,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40,04% complete, ETA 01:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200362,610 ops/s
[info] # Warmup Iteration   2: 243326,113 ops/s
[info] # Warmup Iteration   3: 245151,202 ops/s
[info] # Warmup Iteration   4: 245366,355 ops/s
[info] # Warmup Iteration   5: 244959,748 ops/s
[info] Iteration   1: 244660,809 ops/s
[info]                  ·gc.alloc.rate:                   1729,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8638,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,536 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 244229,470 ops/s
[info]                  ·gc.alloc.rate:                   1726,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12998,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,537 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 243413,835 ops/s
[info]                  ·gc.alloc.rate:               1721,023 MB/sec
[info]                  ·gc.alloc.rate.norm:          11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8704,288 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 244563,351 ops/s
[info]                  ·gc.alloc.rate:                   1729,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13014,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,268 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 239805,401 ops/s
[info]                  ·gc.alloc.rate:               1695,360 MB/sec
[info]                  ·gc.alloc.rate.norm:          11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8861,821 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   243334,573 ±(99.9%) 7828,032 ops/s [Average]
[info]   (min, avg, max) = (239805,401, 243334,573, 244660,809), stdev = 2032,915
[info]   CI (99.9%): [235506,541, 251162,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1720,492 ±(99.9%) 55,760 MB/sec [Average]
[info]   (min, avg, max) = (1695,360, 1720,492, 1729,841), stdev = 14,481
[info]   CI (99.9%): [1664,732, 1776,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11128,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11128,002, 11128,002, 11128,002), stdev = 0,001
[info]   CI (99.9%): [11128,001, 11128,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1615,753 ±(99.9%) 1420,456 MB/sec [Average]
[info]   (min, avg, max) = (1342,813, 1615,753, 2022,603), stdev = 368,888
[info]   CI (99.9%): [195,296, 3036,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10443,460 ±(99.9%) 9014,781 B/op [Average]
[info]   (min, avg, max) = (8638,261, 10443,460, 13014,872), stdev = 2341,110
[info]   CI (99.9%): [1428,679, 19458,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,268 ±(99.9%) 1,032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,268, 0,537), stdev = 0,268
[info]   CI (99.9%): [≈ 0, 1,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40,24% complete, ETA 01:19:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194166,015 ops/s
[info] # Warmup Iteration   2: 794324,351 ops/s
[info] # Warmup Iteration   3: 752259,083 ops/s
[info] # Warmup Iteration   4: 752904,779 ops/s
[info] # Warmup Iteration   5: 750947,899 ops/s
[info] Iteration   1: 752956,248 ops/s
[info]                  ·gc.alloc.rate:      589,431 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 751423,678 ops/s
[info]                  ·gc.alloc.rate:                   588,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1411,889 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,530 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 755776,572 ops/s
[info]                  ·gc.alloc.rate:               591,512 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1403,906 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 757206,118 ops/s
[info]                  ·gc.alloc.rate:               592,766 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1398,397 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 752529,656 ops/s
[info]                  ·gc.alloc.rate:                   589,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1407,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,218 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   753978,454 ±(99.9%) 9297,899 ops/s [Average]
[info]   (min, avg, max) = (751423,678, 753978,454, 757206,118), stdev = 2414,635
[info]   CI (99.9%): [744680,556, 763276,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   590,185 ±(99.9%) 7,321 MB/sec [Average]
[info]   (min, avg, max) = (588,106, 590,185, 592,766), stdev = 1,901
[info]   CI (99.9%): [582,864, 597,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,000, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,732 ±(99.9%) 1159,663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,732, 674,048), stdev = 301,161
[info]   CI (99.9%): [≈ 0, 1698,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1124,245 ±(99.9%) 2420,096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1124,245, 1411,889), stdev = 628,491
[info]   CI (99.9%): [≈ 0, 3544,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,549 ±(99.9%) 4,504 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,549, 2,640), stdev = 1,170
[info]   CI (99.9%): [≈ 0, 5,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,149 ±(99.9%) 9,435 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,149, 5,530), stdev = 2,450
[info]   CI (99.9%): [≈ 0, 10,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,44% complete, ETA 01:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 409484,695 ops/s
[info] # Warmup Iteration   2: 512496,352 ops/s
[info] # Warmup Iteration   3: 537437,362 ops/s
[info] # Warmup Iteration   4: 536089,104 ops/s
[info] # Warmup Iteration   5: 537128,514 ops/s
[info] Iteration   1: 536445,787 ops/s
[info]                  ·gc.alloc.rate:      550,805 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 538342,457 ops/s
[info]                  ·gc.alloc.rate:                   552,933 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1971,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,243 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 521285,126 ops/s
[info]                  ·gc.alloc.rate:                   535,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2036,435 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,126 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 527188,560 ops/s
[info]                  ·gc.alloc.rate:               541,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,456 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2016,446 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 538759,249 ops/s
[info]                  ·gc.alloc.rate:                   553,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1973,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   532404,236 ±(99.9%) 30001,723 ops/s [Average]
[info]   (min, avg, max) = (521285,126, 532404,236, 538759,249), stdev = 7791,352
[info]   CI (99.9%): [502402,513, 562405,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   546,679 ±(99.9%) 30,842 MB/sec [Average]
[info]   (min, avg, max) = (535,249, 546,679, 553,089), stdev = 8,010
[info]   CI (99.9%): [515,837, 577,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1616,001, 1616,001, 1616,001), stdev = 0,001
[info]   CI (99.9%): [1616,001, 1616,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,986 ±(99.9%) 1162,362 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,986, 675,456), stdev = 301,862
[info]   CI (99.9%): [≈ 0, 1702,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1599,549 ±(99.9%) 3444,827 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1599,549, 2036,435), stdev = 894,611
[info]   CI (99.9%): [≈ 0, 5044,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,098 ±(99.9%) 0,393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,098, 0,243), stdev = 0,102
[info]   CI (99.9%): [≈ 0, 0,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,64% complete, ETA 01:18:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 672629,280 ops/s
[info] # Warmup Iteration   2: 719347,639 ops/s
[info] # Warmup Iteration   3: 657529,188 ops/s
[info] # Warmup Iteration   4: 663000,285 ops/s
[info] # Warmup Iteration   5: 664290,097 ops/s
[info] Iteration   1: 665113,911 ops/s
[info]                  ·gc.alloc.rate:                   520,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1210,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 666445,851 ops/s
[info]                  ·gc.alloc.rate:                   521,633 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1593,590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,360 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 664495,529 ops/s
[info]                  ·gc.alloc.rate:      520,161 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 663602,122 ops/s
[info]                  ·gc.alloc.rate:                   519,466 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1600,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 661565,930 ops/s
[info]                  ·gc.alloc.rate:                   517,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,682 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1600,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   664244,669 ±(99.9%) 7008,866 ops/s [Average]
[info]   (min, avg, max) = (661565,930, 664244,669, 666445,851), stdev = 1820,180
[info]   CI (99.9%): [657235,803, 671253,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   519,935 ±(99.9%) 5,522 MB/sec [Average]
[info]   (min, avg, max) = (517,791, 519,935, 521,633), stdev = 1,434
[info]   CI (99.9%): [514,413, 525,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,001, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,745 ±(99.9%) 1123,972 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,745, 674,781), stdev = 291,892
[info]   CI (99.9%): [≈ 0, 1630,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1200,993 ±(99.9%) 2664,839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1200,993, 1600,538), stdev = 692,050
[info]   CI (99.9%): [≈ 0, 3865,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,327 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,116), stdev = 1,383
[info]   CI (99.9%): [≈ 0, 5,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,517 ±(99.9%) 12,581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,517, 7,360), stdev = 3,267
[info]   CI (99.9%): [≈ 0, 14,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40,85% complete, ETA 01:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 720815,004 ops/s
[info] # Warmup Iteration   2: 788484,745 ops/s
[info] # Warmup Iteration   3: 807352,889 ops/s
[info] # Warmup Iteration   4: 751272,662 ops/s
[info] # Warmup Iteration   5: 761755,423 ops/s
[info] Iteration   1: 808101,868 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 806473,419 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 808422,614 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 806041,332 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 806020,744 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   807011,995 ±(99.9%) 4470,935 ops/s [Average]
[info]   (min, avg, max) = (806020,744, 807011,995, 808422,614), stdev = 1161,088
[info]   CI (99.9%): [802541,060, 811482,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41,05% complete, ETA 01:18:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24055,250 ops/s
[info] # Warmup Iteration   2: 31153,071 ops/s
[info] # Warmup Iteration   3: 31338,908 ops/s
[info] # Warmup Iteration   4: 31346,981 ops/s
[info] # Warmup Iteration   5: 31407,358 ops/s
[info] Iteration   1: 31519,493 ops/s
[info]                  ·gc.alloc.rate:               1904,473 MB/sec
[info]                  ·gc.alloc.rate.norm:          95104,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66984,872 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 31574,714 ops/s
[info]                  ·gc.alloc.rate:                   1908,159 MB/sec
[info]                  ·gc.alloc.rate.norm:              95104,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100424,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,150 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31611,451 ops/s
[info]                  ·gc.alloc.rate:                   1910,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              95104,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100483,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,073 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31427,426 ops/s
[info]                  ·gc.alloc.rate:                   1899,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              95104,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101271,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,170 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 31486,621 ops/s
[info]                  ·gc.alloc.rate:                   1902,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              95104,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101265,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,081 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   31523,941 ±(99.9%) 278,764 ops/s [Average]
[info]   (min, avg, max) = (31427,426, 31523,941, 31611,451), stdev = 72,394
[info]   CI (99.9%): [31245,177, 31802,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1904,851 ±(99.9%) 16,982 MB/sec [Average]
[info]   (min, avg, max) = (1899,150, 1904,851, 1910,133), stdev = 4,410
[info]   CI (99.9%): [1887,868, 1921,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   95104,014 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (95104,013, 95104,014, 95104,015), stdev = 0,001
[info]   CI (99.9%): [95104,011, 95104,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1884,474 ±(99.9%) 1169,147 MB/sec [Average]
[info]   (min, avg, max) = (1341,383, 1884,474, 2025,577), stdev = 303,624
[info]   CI (99.9%): [715,327, 3053,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   94086,008 ±(99.9%) 58358,355 B/op [Average]
[info]   (min, avg, max) = (66984,872, 94086,008, 101271,727), stdev = 15155,479
[info]   CI (99.9%): [35727,653, 152444,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,495 ±(99.9%) 6,703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,495, 4,170), stdev = 1,741
[info]   CI (99.9%): [≈ 0, 9,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41,25% complete, ETA 01:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6361,069 ops/s
[info] # Warmup Iteration   2: 8729,621 ops/s
[info] # Warmup Iteration   3: 8807,162 ops/s
[info] # Warmup Iteration   4: 8763,301 ops/s
[info] # Warmup Iteration   5: 8828,146 ops/s
[info] Iteration   1: 8819,422 ops/s
[info]                  ·gc.alloc.rate:                   1357,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              242280,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239885,089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,715 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8151,949 ops/s
[info]                  ·gc.alloc.rate:               1255,035 MB/sec
[info]                  ·gc.alloc.rate.norm:          242280,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 129769,801 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 8793,876 ops/s
[info]                  ·gc.alloc.rate:                   1353,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              242290,671 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240566,890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,725 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8839,733 ops/s
[info]                  ·gc.alloc.rate:                   1360,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359269,508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,412 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 8849,142 ops/s
[info]                  ·gc.alloc.rate:               1362,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239518,829 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8690,825 ±(99.9%) 1162,840 ops/s [Average]
[info]   (min, avg, max) = (8151,949, 8690,825, 8849,142), stdev = 301,986
[info]   CI (99.9%): [7527,984, 9853,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1337,942 ±(99.9%) 178,923 MB/sec [Average]
[info]   (min, avg, max) = (1255,035, 1337,942, 1362,317), stdev = 46,466
[info]   CI (99.9%): [1159,019, 1516,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242288,572 ±(99.9%) 31,131 B/op [Average]
[info]   (min, avg, max) = (242280,046, 242288,572, 242296,046), stdev = 8,085
[info]   CI (99.9%): [242257,441, 242319,703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1345,054 ±(99.9%) 1832,187 MB/sec [Average]
[info]   (min, avg, max) = (672,221, 1345,054, 2018,020), stdev = 475,813
[info]   CI (99.9%): [≈ 0, 3177,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   241802,023 ±(99.9%) 312592,147 B/op [Average]
[info]   (min, avg, max) = (129769,801, 241802,023, 359269,508), stdev = 81179,188
[info]   CI (99.9%): [≈ 0, 554394,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,970 ±(99.9%) 11,946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,970, 7,412), stdev = 3,102
[info]   CI (99.9%): [≈ 0, 14,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,45% complete, ETA 01:17:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5031,907 ops/s
[info] # Warmup Iteration   2: 8648,277 ops/s
[info] # Warmup Iteration   3: 8850,095 ops/s
[info] # Warmup Iteration   4: 8882,936 ops/s
[info] # Warmup Iteration   5: 8862,457 ops/s
[info] Iteration   1: 8853,738 ops/s
[info]                  ·gc.alloc.rate:                   1276,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240357,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,700 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8823,230 ops/s
[info]                  ·gc.alloc.rate:               1271,721 MB/sec
[info]                  ·gc.alloc.rate.norm:          226864,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 241321,004 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 8899,561 ops/s
[info]                  ·gc.alloc.rate:               1282,914 MB/sec
[info]                  ·gc.alloc.rate.norm:          226864,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239496,125 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 8785,697 ops/s
[info]                  ·gc.alloc.rate:                   1266,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242694,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,186 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 8884,368 ops/s
[info]                  ·gc.alloc.rate:                   1280,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     240227,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,374 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   8849,319 ±(99.9%) 177,511 ops/s [Average]
[info]   (min, avg, max) = (8785,697, 8849,319, 8899,561), stdev = 46,099
[info]   CI (99.9%): [8671,807, 9026,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1275,570 ±(99.9%) 25,489 MB/sec [Average]
[info]   (min, avg, max) = (1266,518, 1275,570, 1282,914), stdev = 6,619
[info]   CI (99.9%): [1250,081, 1301,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864,048 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (226864,046, 226864,048, 226864,050), stdev = 0,002
[info]   CI (99.9%): [226864,040, 226864,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,008 ±(99.9%) 5,982 MB/sec [Average]
[info]   (min, avg, max) = (1352,120, 1354,008, 1355,913), stdev = 1,554
[info]   CI (99.9%): [1348,026, 1359,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   240819,474 ±(99.9%) 4748,956 B/op [Average]
[info]   (min, avg, max) = (239496,125, 240819,474, 242694,991), stdev = 1233,289
[info]   CI (99.9%): [236070,518, 245568,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,452 ±(99.9%) 18,676 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,452, 11,186), stdev = 4,850
[info]   CI (99.9%): [≈ 0, 23,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,65% complete, ETA 01:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156456,271 ops/s
[info] # Warmup Iteration   2: 172401,049 ops/s
[info] # Warmup Iteration   3: 171738,271 ops/s
[info] # Warmup Iteration   4: 166069,114 ops/s
[info] # Warmup Iteration   5: 170680,845 ops/s
[info] Iteration   1: 170726,363 ops/s
[info]                  ·gc.alloc.rate:                   1653,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18623,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 170491,524 ops/s
[info]                  ·gc.alloc.rate:                   1651,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12439,200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,384 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 171037,438 ops/s
[info]                  ·gc.alloc.rate:                   1657,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12411,758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,766 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 170109,996 ops/s
[info]                  ·gc.alloc.rate:               1648,074 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18734,255 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 170603,528 ops/s
[info]                  ·gc.alloc.rate:               1652,554 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12467,832 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   170593,770 ±(99.9%) 1304,409 ops/s [Average]
[info]   (min, avg, max) = (170109,996, 170593,770, 171037,438), stdev = 338,751
[info]   CI (99.9%): [169289,360, 171898,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1652,678 ±(99.9%) 12,581 MB/sec [Average]
[info]   (min, avg, max) = (1648,074, 1652,678, 1657,029), stdev = 3,267
[info]   CI (99.9%): [1640,098, 1665,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15248,002, 15248,002, 15248,003), stdev = 0,001
[info]   CI (99.9%): [15248,002, 15248,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1618,517 ±(99.9%) 1420,164 MB/sec [Average]
[info]   (min, avg, max) = (1347,486, 1618,517, 2024,885), stdev = 368,812
[info]   CI (99.9%): [198,353, 3038,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14935,370 ±(99.9%) 13160,571 B/op [Average]
[info]   (min, avg, max) = (12411,758, 14935,370, 18734,255), stdev = 3417,759
[info]   CI (99.9%): [1774,799, 28095,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,268 ±(99.9%) 1,235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,268, 0,766), stdev = 0,321
[info]   CI (99.9%): [≈ 0, 1,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41,85% complete, ETA 01:17:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4971,859 ops/s
[info] # Warmup Iteration   2: 8571,987 ops/s
[info] # Warmup Iteration   3: 8747,369 ops/s
[info] # Warmup Iteration   4: 8761,568 ops/s
[info] # Warmup Iteration   5: 8721,980 ops/s
[info] Iteration   1: 8750,121 ops/s
[info]                  ·gc.alloc.rate:                   1591,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              286240,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243485,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,487 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8753,552 ops/s
[info]                  ·gc.alloc.rate:                   1592,106 MB/sec
[info]                  ·gc.alloc.rate.norm:              286240,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     243609,775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,486 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8696,034 ops/s
[info]                  ·gc.alloc.rate:                   1581,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              286250,851 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368110,694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,767 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8738,148 ops/s
[info]                  ·gc.alloc.rate:                   1589,303 MB/sec
[info]                  ·gc.alloc.rate.norm:              286240,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,435 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244479,795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,749 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8733,637 ops/s
[info]                  ·gc.alloc.rate:               1588,204 MB/sec
[info]                  ·gc.alloc.rate.norm:          286240,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 244619,722 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8734,299 ±(99.9%) 88,239 ops/s [Average]
[info]   (min, avg, max) = (8696,034, 8734,299, 8753,552), stdev = 22,915
[info]   CI (99.9%): [8646,059, 8822,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1588,503 ±(99.9%) 16,118 MB/sec [Average]
[info]   (min, avg, max) = (1581,555, 1588,503, 1592,106), stdev = 4,186
[info]   CI (99.9%): [1572,385, 1604,621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286242,209 ±(99.9%) 18,603 B/op [Average]
[info]   (min, avg, max) = (286240,047, 286242,209, 286250,851), stdev = 4,831
[info]   CI (99.9%): [286223,606, 286260,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1491,438 ±(99.9%) 1167,568 MB/sec [Average]
[info]   (min, avg, max) = (1353,656, 1491,438, 2033,836), stdev = 303,214
[info]   CI (99.9%): [323,871, 2659,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   268861,146 ±(99.9%) 213650,996 B/op [Average]
[info]   (min, avg, max) = (243485,744, 268861,146, 368110,694), stdev = 55484,485
[info]   CI (99.9%): [55210,150, 482512,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,498 ±(99.9%) 12,053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,498, 7,487), stdev = 3,130
[info]   CI (99.9%): [≈ 0, 16,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 42,05% complete, ETA 01:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6881,318 ops/s
[info] # Warmup Iteration   2: 8973,585 ops/s
[info] # Warmup Iteration   3: 8947,047 ops/s
[info] # Warmup Iteration   4: 9005,573 ops/s
[info] # Warmup Iteration   5: 8985,729 ops/s
[info] Iteration   1: 8864,641 ops/s
[info]                  ·gc.alloc.rate:                   1314,817 MB/sec
[info]                  ·gc.alloc.rate.norm:              233432,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238877,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,696 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8775,979 ops/s
[info]                  ·gc.alloc.rate:                   1301,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              233432,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241299,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,466 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8994,289 ops/s
[info]                  ·gc.alloc.rate:               1333,961 MB/sec
[info]                  ·gc.alloc.rate.norm:          233453,389 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 235542,080 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 8981,857 ops/s
[info]                  ·gc.alloc.rate:                   1332,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              233456,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235973,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,294 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 8965,837 ops/s
[info]                  ·gc.alloc.rate:               1329,873 MB/sec
[info]                  ·gc.alloc.rate.norm:          233456,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 236628,144 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   8916,521 ±(99.9%) 361,183 ops/s [Average]
[info]   (min, avg, max) = (8775,979, 8916,521, 8994,289), stdev = 93,798
[info]   CI (99.9%): [8555,337, 9277,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1322,573 ±(99.9%) 53,444 MB/sec [Average]
[info]   (min, avg, max) = (1301,816, 1322,573, 1333,961), stdev = 13,879
[info]   CI (99.9%): [1269,129, 1376,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   233445,916 ±(99.9%) 48,926 B/op [Average]
[info]   (min, avg, max) = (233432,046, 233445,916, 233456,049), stdev = 12,706
[info]   CI (99.9%): [233396,990, 233494,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1346,356 ±(99.9%) 3,897 MB/sec [Average]
[info]   (min, avg, max) = (1345,487, 1346,356, 1347,943), stdev = 1,012
[info]   CI (99.9%): [1342,459, 1350,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   237663,964 ±(99.9%) 9257,465 B/op [Average]
[info]   (min, avg, max) = (235542,080, 237663,964, 241299,102), stdev = 2404,134
[info]   CI (99.9%): [228406,499, 246921,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,691 ±(99.9%) 14,211 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,691, 7,466), stdev = 3,690
[info]   CI (99.9%): [≈ 0, 17,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42,25% complete, ETA 01:16:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16509,738 ops/s
[info] # Warmup Iteration   2: 21379,209 ops/s
[info] # Warmup Iteration   3: 21294,773 ops/s
[info] # Warmup Iteration   4: 21205,791 ops/s
[info] # Warmup Iteration   5: 21477,854 ops/s
[info] Iteration   1: 21469,379 ops/s
[info]                  ·gc.alloc.rate:               974,063 MB/sec
[info]                  ·gc.alloc.rate.norm:          71414,702 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49269,497 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 21204,852 ops/s
[info]                  ·gc.alloc.rate:               962,055 MB/sec
[info]                  ·gc.alloc.rate.norm:          71408,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99725,471 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 21524,177 ops/s
[info]                  ·gc.alloc.rate:               976,433 MB/sec
[info]                  ·gc.alloc.rate.norm:          71408,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49097,204 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 21496,825 ops/s
[info]                  ·gc.alloc.rate:                   975,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98317,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,572 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21392,635 ops/s
[info]                  ·gc.alloc.rate:               970,710 MB/sec
[info]                  ·gc.alloc.rate.norm:          71408,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49393,178 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   21417,574 ±(99.9%) 495,378 ops/s [Average]
[info]   (min, avg, max) = (21204,852, 21417,574, 21524,177), stdev = 128,648
[info]   CI (99.9%): [20922,196, 21912,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   971,726 ±(99.9%) 22,407 MB/sec [Average]
[info]   (min, avg, max) = (962,055, 971,726, 976,433), stdev = 5,819
[info]   CI (99.9%): [949,319, 994,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71409,356 ±(99.9%) 11,507 B/op [Average]
[info]   (min, avg, max) = (71408,019, 71409,356, 71414,702), stdev = 2,988
[info]   CI (99.9%): [71397,849, 71420,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   940,261 ±(99.9%) 1416,553 MB/sec [Average]
[info]   (min, avg, max) = (671,355, 940,261, 1343,566), stdev = 367,874
[info]   CI (99.9%): [≈ 0, 2356,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   69160,613 ±(99.9%) 104983,829 B/op [Average]
[info]   (min, avg, max) = (49097,204, 69160,613, 99725,471), stdev = 27263,967
[info]   CI (99.9%): [≈ 0, 174144,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,914 ±(99.9%) 7,873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,914, 4,572), stdev = 2,045
[info]   CI (99.9%): [≈ 0, 8,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,45% complete, ETA 01:16:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17570,107 ops/s
[info] # Warmup Iteration   2: 24711,677 ops/s
[info] # Warmup Iteration   3: 24895,643 ops/s
[info] # Warmup Iteration   4: 24977,040 ops/s
[info] # Warmup Iteration   5: 25005,472 ops/s
[info] Iteration   1: 25033,887 ops/s
[info]                  ·gc.alloc.rate:                   1060,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84924,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,617 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 24951,851 ops/s
[info]                  ·gc.alloc.rate:               1057,322 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42622,820 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 24972,729 ops/s
[info]                  ·gc.alloc.rate:                   1058,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85257,931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,624 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 24964,224 ops/s
[info]                  ·gc.alloc.rate:               1057,918 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42684,614 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 24635,576 ops/s
[info]                  ·gc.alloc.rate:               1043,817 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86530,286 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   24911,653 ±(99.9%) 606,613 ops/s [Average]
[info]   (min, avg, max) = (24635,576, 24911,653, 25033,887), stdev = 157,535
[info]   CI (99.9%): [24305,041, 25518,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1055,627 ±(99.9%) 25,953 MB/sec [Average]
[info]   (min, avg, max) = (1043,817, 1055,627, 1060,857), stdev = 6,740
[info]   CI (99.9%): [1029,675, 1081,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696,017 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (66696,016, 66696,017, 66696,018), stdev = 0,001
[info]   CI (99.9%): [66696,014, 66696,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,102 ±(99.9%) 1426,200 MB/sec [Average]
[info]   (min, avg, max) = (675,693, 1082,102, 1354,230), stdev = 370,380
[info]   CI (99.9%): [≈ 0, 2508,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   68404,051 ±(99.9%) 90545,492 B/op [Average]
[info]   (min, avg, max) = (42622,820, 68404,051, 86530,286), stdev = 23514,377
[info]   CI (99.9%): [≈ 0, 158949,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,048 ±(99.9%) 5,527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,048, 2,624), stdev = 1,435
[info]   CI (99.9%): [≈ 0, 6,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,66% complete, ETA 01:16:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 421202,677 ops/s
[info] # Warmup Iteration   2: 492350,651 ops/s
[info] # Warmup Iteration   3: 490024,544 ops/s
[info] # Warmup Iteration   4: 494107,557 ops/s
[info] # Warmup Iteration   5: 426481,039 ops/s
[info] Iteration   1: 496363,902 ops/s
[info]                  ·gc.alloc.rate:                   1125,236 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4272,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,264 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 499878,630 ops/s
[info]                  ·gc.alloc.rate:               1133,187 MB/sec
[info]                  ·gc.alloc.rate.norm:          3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2120,407 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 498615,226 ops/s
[info]                  ·gc.alloc.rate:                   1130,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4247,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 497371,702 ops/s
[info]                  ·gc.alloc.rate:                   1127,669 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4261,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,132 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 497528,235 ops/s
[info]                  ·gc.alloc.rate:               1127,966 MB/sec
[info]                  ·gc.alloc.rate.norm:          3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2131,248 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   497951,539 ±(99.9%) 5162,645 ops/s [Average]
[info]   (min, avg, max) = (496363,902, 497951,539, 499878,630), stdev = 1340,722
[info]   CI (99.9%): [492788,894, 503114,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1128,854 ±(99.9%) 11,538 MB/sec [Average]
[info]   (min, avg, max) = (1125,236, 1128,854, 1133,187), stdev = 2,996
[info]   CI (99.9%): [1117,317, 1140,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3568,001, 3568,001, 3568,001), stdev = 0,001
[info]   CI (99.9%): [3568,001, 3568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1077,394 ±(99.9%) 1419,404 MB/sec [Average]
[info]   (min, avg, max) = (673,436, 1077,394, 1347,458), stdev = 368,615
[info]   CI (99.9%): [≈ 0, 2496,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3406,668 ±(99.9%) 4502,493 B/op [Average]
[info]   (min, avg, max) = (2120,407, 3406,668, 4272,644), stdev = 1169,283
[info]   CI (99.9%): [≈ 0, 7909,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,119 ±(99.9%) 0,454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,119, 0,264), stdev = 0,118
[info]   CI (99.9%): [≈ 0, 0,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42,86% complete, ETA 01:15:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 488940,499 ops/s
[info] # Warmup Iteration   2: 538580,673 ops/s
[info] # Warmup Iteration   3: 535159,929 ops/s
[info] # Warmup Iteration   4: 536061,700 ops/s
[info] # Warmup Iteration   5: 535413,946 ops/s
[info] Iteration   1: 533847,228 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 536999,618 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 536905,519 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 535746,077 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 536160,800 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   535931,848 ±(99.9%) 4916,451 ops/s [Average]
[info]   (min, avg, max) = (533847,228, 535931,848, 536999,618), stdev = 1276,787
[info]   CI (99.9%): [531015,397, 540848,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43,06% complete, ETA 01:15:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17211,293 ops/s
[info] # Warmup Iteration   2: 21981,614 ops/s
[info] # Warmup Iteration   3: 22024,649 ops/s
[info] # Warmup Iteration   4: 22018,492 ops/s
[info] # Warmup Iteration   5: 21933,478 ops/s
[info] Iteration   1: 22123,038 ops/s
[info]                  ·gc.alloc.rate:                   1019,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              72563,149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95432,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,962 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 22252,466 ops/s
[info]                  ·gc.alloc.rate:               1025,916 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47394,863 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 22215,706 ops/s
[info]                  ·gc.alloc.rate:                   1024,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94943,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,424 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22227,888 ops/s
[info]                  ·gc.alloc.rate:                   1024,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47446,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,474 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 22133,481 ops/s
[info]                  ·gc.alloc.rate:               1020,284 MB/sec
[info]                  ·gc.alloc.rate.norm:          72560,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95290,646 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   22190,516 ±(99.9%) 225,150 ops/s [Average]
[info]   (min, avg, max) = (22123,038, 22190,516, 22252,466), stdev = 58,471
[info]   CI (99.9%): [21965,366, 22415,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1022,997 ±(99.9%) 10,587 MB/sec [Average]
[info]   (min, avg, max) = (1019,861, 1022,997, 1025,916), stdev = 2,749
[info]   CI (99.9%): [1012,410, 1033,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72560,645 ±(99.9%) 5,391 B/op [Average]
[info]   (min, avg, max) = (72560,018, 72560,645, 72563,149), stdev = 1,400
[info]   CI (99.9%): [72555,253, 72566,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,290 ±(99.9%) 1413,737 MB/sec [Average]
[info]   (min, avg, max) = (670,102, 1072,290, 1341,289), stdev = 367,143
[info]   CI (99.9%): [≈ 0, 2486,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76101,522 ±(99.9%) 100820,388 B/op [Average]
[info]   (min, avg, max) = (47394,863, 76101,522, 95432,783), stdev = 26182,735
[info]   CI (99.9%): [≈ 0, 176921,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,772 ±(99.9%) 7,411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,772, 4,424), stdev = 1,925
[info]   CI (99.9%): [≈ 0, 9,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43,26% complete, ETA 01:15:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10067,775 ops/s
[info] # Warmup Iteration   2: 10864,365 ops/s
[info] # Warmup Iteration   3: 10961,294 ops/s
[info] # Warmup Iteration   4: 11001,017 ops/s
[info] # Warmup Iteration   5: 10948,021 ops/s
[info] Iteration   1: 11007,112 ops/s
[info]                  ·gc.alloc.rate:      617,254 MB/sec
[info]                  ·gc.alloc.rate.norm: 88267,066 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 10754,036 ops/s
[info]                  ·gc.alloc.rate:                   603,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98843,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411,559 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 10999,436 ops/s
[info]                  ·gc.alloc.rate:                   616,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96642,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,935 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 10994,409 ops/s
[info]                  ·gc.alloc.rate:               616,584 MB/sec
[info]                  ·gc.alloc.rate.norm:          88264,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 96391,193 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 10983,604 ops/s
[info]                  ·gc.alloc.rate:                   615,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              88264,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96487,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,965 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   10947,719 ±(99.9%) 418,212 ops/s [Average]
[info]   (min, avg, max) = (10754,036, 10947,719, 11007,112), stdev = 108,608
[info]   CI (99.9%): [10529,507, 11365,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   613,913 ±(99.9%) 23,394 MB/sec [Average]
[info]   (min, avg, max) = (603,082, 613,913, 617,254), stdev = 6,075
[info]   CI (99.9%): [590,518, 637,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88264,645 ±(99.9%) 5,212 B/op [Average]
[info]   (min, avg, max) = (88264,037, 88264,645, 88267,066), stdev = 1,354
[info]   CI (99.9%): [88259,433, 88269,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   539,458 ±(99.9%) 1161,231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,458, 675,366), stdev = 301,568
[info]   CI (99.9%): [≈ 0, 1700,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   77672,828 ±(99.9%) 167242,343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77672,828, 98843,178), stdev = 43432,305
[info]   CI (99.9%): [≈ 0, 244915,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,583 ±(99.9%) 4,799 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,583, 2,812), stdev = 1,246
[info]   CI (99.9%): [≈ 0, 5,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   85,292 ±(99.9%) 702,472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 85,292, 411,559), stdev = 182,430
[info]   CI (99.9%): [≈ 0, 787,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43,46% complete, ETA 01:14:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12175,189 ops/s
[info] # Warmup Iteration   2: 15842,419 ops/s
[info] # Warmup Iteration   3: 15870,476 ops/s
[info] # Warmup Iteration   4: 15927,136 ops/s
[info] # Warmup Iteration   5: 15841,613 ops/s
[info] Iteration   1: 15803,115 ops/s
[info]                  ·gc.alloc.rate:                   1515,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133857,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 15941,929 ops/s
[info]                  ·gc.alloc.rate:               1528,974 MB/sec
[info]                  ·gc.alloc.rate.norm:          150944,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 132691,188 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 15930,111 ops/s
[info]                  ·gc.alloc.rate:                   1527,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199363,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,226 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 15932,062 ops/s
[info]                  ·gc.alloc.rate:                   1528,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     133045,976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,169 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15944,244 ops/s
[info]                  ·gc.alloc.rate:               1529,112 MB/sec
[info]                  ·gc.alloc.rate.norm:          150944,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 133069,022 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   15910,292 ±(99.9%) 231,897 ops/s [Average]
[info]   (min, avg, max) = (15803,115, 15910,292, 15944,244), stdev = 60,223
[info]   CI (99.9%): [15678,395, 16142,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1525,912 ±(99.9%) 22,190 MB/sec [Average]
[info]   (min, avg, max) = (1515,654, 1525,912, 1529,112), stdev = 5,763
[info]   CI (99.9%): [1503,721, 1548,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   150944,028 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (150944,026, 150944,028, 150944,034), stdev = 0,004
[info]   CI (99.9%): [150944,013, 150944,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1480,185 ±(99.9%) 1157,457 MB/sec [Average]
[info]   (min, avg, max) = (1344,084, 1480,185, 2017,884), stdev = 300,588
[info]   CI (99.9%): [322,728, 2637,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   146405,563 ±(99.9%) 114008,191 B/op [Average]
[info]   (min, avg, max) = (132691,188, 146405,563, 199363,687), stdev = 29607,565
[info]   CI (99.9%): [32397,372, 260413,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,537 ±(99.9%) 16,284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,537, 8,291), stdev = 4,229
[info]   CI (99.9%): [≈ 0, 20,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,66% complete, ETA 01:14:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10127,676 ops/s
[info] # Warmup Iteration   2: 15325,187 ops/s
[info] # Warmup Iteration   3: 15476,074 ops/s
[info] # Warmup Iteration   4: 15458,594 ops/s
[info] # Warmup Iteration   5: 15259,359 ops/s
[info] Iteration   1: 15465,881 ops/s
[info]                  ·gc.alloc.rate:                   1415,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              144048,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,650 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137663,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15526,700 ops/s
[info]                  ·gc.alloc.rate:               1421,181 MB/sec
[info]                  ·gc.alloc.rate.norm:          144048,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 137199,384 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 15518,833 ops/s
[info]                  ·gc.alloc.rate:                   1420,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              144032,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137396,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,111 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15483,916 ops/s
[info]                  ·gc.alloc.rate:                   1416,949 MB/sec
[info]                  ·gc.alloc.rate.norm:              144016,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,206 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137842,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,116 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15539,810 ops/s
[info]                  ·gc.alloc.rate:                   1421,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              144016,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137413,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,108 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   15507,028 ±(99.9%) 119,125 ops/s [Average]
[info]   (min, avg, max) = (15465,881, 15507,028, 15539,810), stdev = 30,936
[info]   CI (99.9%): [15387,904, 15626,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1419,094 ±(99.9%) 10,765 MB/sec [Average]
[info]   (min, avg, max) = (1415,381, 1419,094, 1421,818), stdev = 2,796
[info]   CI (99.9%): [1408,330, 1429,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144032,030 ±(99.9%) 61,619 B/op [Average]
[info]   (min, avg, max) = (144016,026, 144032,030, 144048,035), stdev = 16,002
[info]   CI (99.9%): [143970,411, 144093,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,763 ±(99.9%) 6,489 MB/sec [Average]
[info]   (min, avg, max) = (1352,650, 1354,763, 1356,630), stdev = 1,685
[info]   CI (99.9%): [1348,274, 1361,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   137502,963 ±(99.9%) 967,577 B/op [Average]
[info]   (min, avg, max) = (137199,384, 137502,963, 137842,248), stdev = 251,277
[info]   CI (99.9%): [136535,387, 138470,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,691 ±(99.9%) 3,639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,691, 2,118), stdev = 0,945
[info]   CI (99.9%): [≈ 0, 5,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,86% complete, ETA 01:14:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255739,018 ops/s
[info] # Warmup Iteration   2: 275510,466 ops/s
[info] # Warmup Iteration   3: 276443,061 ops/s
[info] # Warmup Iteration   4: 274362,645 ops/s
[info] # Warmup Iteration   5: 276900,917 ops/s
[info] Iteration   1: 277677,327 ops/s
[info]                  ·gc.alloc.rate:                   1606,153 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7618,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 277604,602 ops/s
[info]                  ·gc.alloc.rate:                   1605,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11439,313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,354 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 277771,237 ops/s
[info]                  ·gc.alloc.rate:                   1606,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7631,167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,354 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 277535,979 ops/s
[info]                  ·gc.alloc.rate:                   1605,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7645,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 277491,069 ops/s
[info]                  ·gc.alloc.rate:                   1604,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11484,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   277616,043 ±(99.9%) 430,517 ops/s [Average]
[info]   (min, avg, max) = (277491,069, 277616,043, 277771,237), stdev = 111,804
[info]   CI (99.9%): [277185,526, 278046,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1605,813 ±(99.9%) 2,602 MB/sec [Average]
[info]   (min, avg, max) = (1604,925, 1605,813, 1606,716), stdev = 0,676
[info]   CI (99.9%): [1603,211, 1608,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9104,001, 9104,002, 9104,002), stdev = 0,001
[info]   CI (99.9%): [9104,001, 9104,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1616,291 ±(99.9%) 1423,241 MB/sec [Average]
[info]   (min, avg, max) = (1344,098, 1616,291, 2024,642), stdev = 369,611
[info]   CI (99.9%): [193,050, 3039,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9163,847 ±(99.9%) 8078,970 B/op [Average]
[info]   (min, avg, max) = (7618,621, 9163,847, 11484,868), stdev = 2098,083
[info]   CI (99.9%): [1084,877, 17242,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,260 ±(99.9%) 0,380 B/op [Average]
[info]   (min, avg, max) = (0,118, 0,260, 0,354), stdev = 0,099
[info]   CI (99.9%): [≈ 0, 0,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44,06% complete, ETA 01:14:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7313,572 ops/s
[info] # Warmup Iteration   2: 13692,745 ops/s
[info] # Warmup Iteration   3: 13780,352 ops/s
[info] # Warmup Iteration   4: 13725,223 ops/s
[info] # Warmup Iteration   5: 13739,288 ops/s
[info] Iteration   1: 13770,979 ops/s
[info]                  ·gc.alloc.rate:                   1768,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              202072,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     154679,233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,379 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 13696,939 ops/s
[info]                  ·gc.alloc.rate:                   1758,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              202072,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233480,371 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,784 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13674,650 ops/s
[info]                  ·gc.alloc.rate:                   1755,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              202072,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156033,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,395 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 13662,549 ops/s
[info]                  ·gc.alloc.rate:                   1754,319 MB/sec
[info]                  ·gc.alloc.rate.norm:              202072,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234466,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,590 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13755,861 ops/s
[info]                  ·gc.alloc.rate:                   1765,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              202072,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233033,823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,144 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13712,196 ±(99.9%) 187,354 ops/s [Average]
[info]   (min, avg, max) = (13662,549, 13712,196, 13770,979), stdev = 48,655
[info]   CI (99.9%): [13524,842, 13899,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1760,553 ±(99.9%) 23,795 MB/sec [Average]
[info]   (min, avg, max) = (1754,319, 1760,553, 1768,089), stdev = 6,179
[info]   CI (99.9%): [1736,758, 1784,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   202072,033 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (202072,030, 202072,033, 202072,040), stdev = 0,004
[info]   CI (99.9%): [202072,017, 202072,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1762,661 ±(99.9%) 1434,765 MB/sec [Average]
[info]   (min, avg, max) = (1353,412, 1762,661, 2036,543), stdev = 372,604
[info]   CI (99.9%): [327,896, 3197,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   202338,522 ±(99.9%) 165171,979 B/op [Average]
[info]   (min, avg, max) = (154679,233, 202338,522, 234466,105), stdev = 42894,639
[info]   CI (99.9%): [37166,542, 367510,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,259 ±(99.9%) 12,029 B/op [Average]
[info]   (min, avg, max) = (2,379, 5,259, 9,590), stdev = 3,124
[info]   CI (99.9%): [≈ 0, 17,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44,27% complete, ETA 01:13:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11856,151 ops/s
[info] # Warmup Iteration   2: 15327,655 ops/s
[info] # Warmup Iteration   3: 15441,402 ops/s
[info] # Warmup Iteration   4: 15440,488 ops/s
[info] # Warmup Iteration   5: 15386,862 ops/s
[info] Iteration   1: 15367,595 ops/s
[info]                  ·gc.alloc.rate:                   1450,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              148536,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     206481,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,658 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15454,602 ops/s
[info]                  ·gc.alloc.rate:                   1458,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              148536,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136888,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 15241,636 ops/s
[info]                  ·gc.alloc.rate:                   1438,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              148520,329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138861,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,149 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15458,953 ops/s
[info]                  ·gc.alloc.rate:                   1458,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              148512,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137047,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,119 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15447,564 ops/s
[info]                  ·gc.alloc.rate:                   1457,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              148512,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137281,209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,362 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   15394,070 ±(99.9%) 358,506 ops/s [Average]
[info]   (min, avg, max) = (15241,636, 15394,070, 15458,953), stdev = 93,103
[info]   CI (99.9%): [15035,564, 15752,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1452,778 ±(99.9%) 34,127 MB/sec [Average]
[info]   (min, avg, max) = (1438,222, 1452,778, 1458,888), stdev = 8,863
[info]   CI (99.9%): [1418,651, 1486,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   148523,290 ±(99.9%) 46,650 B/op [Average]
[info]   (min, avg, max) = (148512,028, 148523,290, 148536,035), stdev = 12,115
[info]   CI (99.9%): [148476,640, 148569,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1479,788 ±(99.9%) 1154,703 MB/sec [Average]
[info]   (min, avg, max) = (1344,368, 1479,788, 2016,212), stdev = 299,873
[info]   CI (99.9%): [325,085, 2634,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   151312,157 ±(99.9%) 118795,647 B/op [Average]
[info]   (min, avg, max) = (136888,755, 151312,157, 206481,886), stdev = 30850,852
[info]   CI (99.9%): [32516,510, 270107,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,104), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,682 ±(99.9%) 14,674 B/op [Average]
[info]   (min, avg, max) = (2,119, 4,682, 10,658), stdev = 3,811
[info]   CI (99.9%): [≈ 0, 19,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44,47% complete, ETA 01:13:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22703,183 ops/s
[info] # Warmup Iteration   2: 29139,696 ops/s
[info] # Warmup Iteration   3: 29030,428 ops/s
[info] # Warmup Iteration   4: 28816,034 ops/s
[info] # Warmup Iteration   5: 28540,994 ops/s
[info] Iteration   1: 29205,498 ops/s
[info]                  ·gc.alloc.rate:                   1007,877 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72434,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29290,362 ops/s
[info]                  ·gc.alloc.rate:               1010,868 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36078,803 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 26952,892 ops/s
[info]                  ·gc.alloc.rate:               930,116 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 78409,837 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 29218,133 ops/s
[info]                  ·gc.alloc.rate:                   1008,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36165,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,242 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29105,895 ops/s
[info]                  ·gc.alloc.rate:                   1004,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72608,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,251 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   28754,556 ±(99.9%) 3886,467 ops/s [Average]
[info]   (min, avg, max) = (26952,892, 28754,556, 29290,362), stdev = 1009,303
[info]   CI (99.9%): [24868,089, 32641,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   992,250 ±(99.9%) 134,071 MB/sec [Average]
[info]   (min, avg, max) = (930,116, 992,250, 1010,868), stdev = 34,818
[info]   CI (99.9%): [858,179, 1126,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312,015 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (54312,014, 54312,015, 54312,016), stdev = 0,001
[info]   CI (99.9%): [54312,011, 54312,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,449 ±(99.9%) 1416,586 MB/sec [Average]
[info]   (min, avg, max) = (671,401, 1074,449, 1344,177), stdev = 367,883
[info]   CI (99.9%): [≈ 0, 2491,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   59139,390 ±(99.9%) 81437,543 B/op [Average]
[info]   (min, avg, max) = (36078,803, 59139,390, 78409,837), stdev = 21149,071
[info]   CI (99.9%): [≈ 0, 140576,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,123 ±(99.9%) 4,326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,123, 2,251), stdev = 1,123
[info]   CI (99.9%): [≈ 0, 5,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,67% complete, ETA 01:13:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60870,330 ops/s
[info] # Warmup Iteration   2: 77089,522 ops/s
[info] # Warmup Iteration   3: 76696,094 ops/s
[info] # Warmup Iteration   4: 76287,760 ops/s
[info] # Warmup Iteration   5: 75880,384 ops/s
[info] Iteration   1: 75440,699 ops/s
[info]                  ·gc.alloc.rate:               1200,973 MB/sec
[info]                  ·gc.alloc.rate.norm:          25056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14104,783 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 76615,742 ops/s
[info]                  ·gc.alloc.rate:                   1219,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27789,262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,855 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 76254,341 ops/s
[info]                  ·gc.alloc.rate:               1213,844 MB/sec
[info]                  ·gc.alloc.rate.norm:          25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27948,646 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 77234,372 ops/s
[info]                  ·gc.alloc.rate:                   1229,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27607,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,848 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 76235,125 ops/s
[info]                  ·gc.alloc.rate:               1213,480 MB/sec
[info]                  ·gc.alloc.rate.norm:          25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13998,615 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   76356,056 ±(99.9%) 2511,586 ops/s [Average]
[info]   (min, avg, max) = (75440,699, 76356,056, 77234,372), stdev = 652,251
[info]   CI (99.9%): [73844,470, 78867,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1215,509 ±(99.9%) 40,085 MB/sec [Average]
[info]   (min, avg, max) = (1200,973, 1215,509, 1229,579), stdev = 10,410
[info]   CI (99.9%): [1175,424, 1255,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25056,005, 25056,006, 25056,006), stdev = 0,001
[info]   CI (99.9%): [25056,005, 25056,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1083,101 ±(99.9%) 1427,461 MB/sec [Average]
[info]   (min, avg, max) = (676,064, 1083,101, 1354,780), stdev = 370,707
[info]   CI (99.9%): [≈ 0, 2510,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22289,725 ±(99.9%) 28961,917 B/op [Average]
[info]   (min, avg, max) = (13998,615, 22289,725, 27948,646), stdev = 7521,318
[info]   CI (99.9%): [≈ 0, 51251,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,341 ±(99.9%) 1,796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,341, 0,855), stdev = 0,467
[info]   CI (99.9%): [≈ 0, 2,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,87% complete, ETA 01:13:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 704915,358 ops/s
[info] # Warmup Iteration   2: 761438,306 ops/s
[info] # Warmup Iteration   3: 757664,438 ops/s
[info] # Warmup Iteration   4: 761906,001 ops/s
[info] # Warmup Iteration   5: 758872,893 ops/s
[info] Iteration   1: 766277,483 ops/s
[info]                  ·gc.alloc.rate:                   1051,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1381,761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 766496,417 ops/s
[info]                  ·gc.alloc.rate:                   1052,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2760,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 765743,695 ops/s
[info]                  ·gc.alloc.rate:               1050,904 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1381,359 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 761368,610 ops/s
[info]                  ·gc.alloc.rate:                   1044,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2778,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 763207,047 ops/s
[info]                  ·gc.alloc.rate:               1047,332 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2773,306 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   764618,651 ±(99.9%) 8631,552 ops/s [Average]
[info]   (min, avg, max) = (761368,610, 764618,651, 766496,417), stdev = 2241,587
[info]   CI (99.9%): [755987,098, 773250,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1049,350 ±(99.9%) 11,814 MB/sec [Average]
[info]   (min, avg, max) = (1044,959, 1049,350, 1052,001), stdev = 3,068
[info]   CI (99.9%): [1037,536, 1061,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2160,001, 2160,001, 2160,001), stdev = 0,001
[info]   CI (99.9%): [2160,000, 2160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,604 ±(99.9%) 1417,400 MB/sec [Average]
[info]   (min, avg, max) = (672,072, 1075,604, 1344,709), stdev = 368,094
[info]   CI (99.9%): [≈ 0, 2493,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2215,051 ±(99.9%) 2929,951 B/op [Average]
[info]   (min, avg, max) = (1381,359, 2215,051, 2778,600), stdev = 760,899
[info]   CI (99.9%): [≈ 0, 5145,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,060 ±(99.9%) 0,250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,060, 0,129), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 45,07% complete, ETA 01:12:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 825180,748 ops/s
[info] # Warmup Iteration   2: 887312,345 ops/s
[info] # Warmup Iteration   3: 888783,786 ops/s
[info] # Warmup Iteration   4: 888046,959 ops/s
[info] # Warmup Iteration   5: 889645,662 ops/s
[info] Iteration   1: 888473,019 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 890227,507 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 890601,692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 890011,760 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 891259,664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   890114,728 ±(99.9%) 3976,869 ops/s [Average]
[info]   (min, avg, max) = (888473,019, 890114,728, 891259,664), stdev = 1032,780
[info]   CI (99.9%): [886137,860, 894091,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45,27% complete, ETA 01:12:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49417,779 ops/s
[info] # Warmup Iteration   2: 79338,708 ops/s
[info] # Warmup Iteration   3: 79563,838 ops/s
[info] # Warmup Iteration   4: 78806,954 ops/s
[info] # Warmup Iteration   5: 79334,118 ops/s
[info] Iteration   1: 79521,486 ops/s
[info]                  ·gc.alloc.rate:               1559,797 MB/sec
[info]                  ·gc.alloc.rate.norm:          30872,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26773,668 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 79842,781 ops/s
[info]                  ·gc.alloc.rate:                   1566,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26694,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,821 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 79857,475 ops/s
[info]                  ·gc.alloc.rate:                   1566,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26707,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,820 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 79536,753 ops/s
[info]                  ·gc.alloc.rate:               1560,215 MB/sec
[info]                  ·gc.alloc.rate.norm:          30872,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2033,970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 40246,202 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 79605,372 ops/s
[info]                  ·gc.alloc.rate:               1561,195 MB/sec
[info]                  ·gc.alloc.rate.norm:          30872,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26838,278 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   79672,774 ±(99.9%) 635,502 ops/s [Average]
[info]   (min, avg, max) = (79521,486, 79672,774, 79857,475), stdev = 165,038
[info]   CI (99.9%): [79037,272, 80308,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1562,749 ±(99.9%) 12,534 MB/sec [Average]
[info]   (min, avg, max) = (1559,797, 1562,749, 1566,409), stdev = 3,255
[info]   CI (99.9%): [1550,215, 1575,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30872,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (30872,005, 30872,005, 30872,006), stdev = 0,001
[info]   CI (99.9%): [30872,004, 30872,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,651 ±(99.9%) 1169,551 MB/sec [Average]
[info]   (min, avg, max) = (1352,730, 1490,651, 2033,970), stdev = 303,729
[info]   CI (99.9%): [321,100, 2660,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29452,159 ±(99.9%) 23236,036 B/op [Average]
[info]   (min, avg, max) = (26694,989, 29452,159, 40246,202), stdev = 6034,325
[info]   CI (99.9%): [6216,124, 52688,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,328 ±(99.9%) 1,731 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,328, 0,821), stdev = 0,449
[info]   CI (99.9%): [≈ 0, 2,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45,47% complete, ETA 01:12:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19900,705 ops/s
[info] # Warmup Iteration   2: 21265,102 ops/s
[info] # Warmup Iteration   3: 21369,086 ops/s
[info] # Warmup Iteration   4: 20333,520 ops/s
[info] # Warmup Iteration   5: 21291,630 ops/s
[info] Iteration   1: 21290,261 ops/s
[info]                  ·gc.alloc.rate:               470,688 MB/sec
[info]                  ·gc.alloc.rate.norm:          34800,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 37814,912 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 21363,216 ops/s
[info]                  ·gc.alloc.rate:                   472,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37689,258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,047 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,470 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 21347,513 ops/s
[info]                  ·gc.alloc.rate:                   471,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49745,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233,842 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 21340,035 ops/s
[info]                  ·gc.alloc.rate:      471,875 MB/sec
[info]                  ·gc.alloc.rate.norm: 34800,019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21344,795 ops/s
[info]                  ·gc.alloc.rate:                   471,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49752,107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,604 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   21337,164 ±(99.9%) 106,367 ops/s [Average]
[info]   (min, avg, max) = (21290,261, 21337,164, 21363,216), stdev = 27,623
[info]   CI (99.9%): [21230,797, 21443,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   471,771 ±(99.9%) 2,470 MB/sec [Average]
[info]   (min, avg, max) = (470,688, 471,771, 472,400), stdev = 0,641
[info]   CI (99.9%): [469,301, 474,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34800,020 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (34800,019, 34800,020, 34800,021), stdev = 0,001
[info]   CI (99.9%): [34800,016, 34800,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,487 ±(99.9%) 1068,570 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,487, 674,686), stdev = 277,504
[info]   CI (99.9%): [≈ 0, 1543,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   35000,279 ±(99.9%) 78801,878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35000,279, 49752,107), stdev = 20464,597
[info]   CI (99.9%): [≈ 0, 113802,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,656 ±(99.9%) 5,416 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,656, 3,172), stdev = 1,406
[info]   CI (99.9%): [≈ 0, 6,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   48,383 ±(99.9%) 399,293 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48,383, 233,842), stdev = 103,695
[info]   CI (99.9%): [≈ 0, 447,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45,67% complete, ETA 01:12:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12171,715 ops/s
[info] # Warmup Iteration   2: 21268,522 ops/s
[info] # Warmup Iteration   3: 20898,009 ops/s
[info] # Warmup Iteration   4: 21458,821 ops/s
[info] # Warmup Iteration   5: 21381,993 ops/s
[info] Iteration   1: 21087,132 ops/s
[info]                  ·gc.alloc.rate:                   790,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              58967,250 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50360,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,107 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 21470,887 ops/s
[info]                  ·gc.alloc.rate:               804,484 MB/sec
[info]                  ·gc.alloc.rate.norm:          58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49316,031 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 21516,368 ops/s
[info]                  ·gc.alloc.rate:               806,107 MB/sec
[info]                  ·gc.alloc.rate.norm:          58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49208,334 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 21423,399 ops/s
[info]                  ·gc.alloc.rate:                   802,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49370,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,116 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 21296,256 ops/s
[info]                  ·gc.alloc.rate:               797,755 MB/sec
[info]                  ·gc.alloc.rate.norm:          58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49669,649 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   21358,808 ±(99.9%) 664,946 ops/s [Average]
[info]   (min, avg, max) = (21087,132, 21358,808, 21516,368), stdev = 172,684
[info]   CI (99.9%): [20693,863, 22023,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   800,220 ±(99.9%) 25,000 MB/sec [Average]
[info]   (min, avg, max) = (790,046, 800,220, 806,107), stdev = 6,492
[info]   CI (99.9%): [775,220, 825,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   58967,866 ±(99.9%) 1,326 B/op [Average]
[info]   (min, avg, max) = (58967,250, 58967,866, 58968,022), stdev = 0,344
[info]   CI (99.9%): [58966,540, 58969,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   672,850 ±(99.9%) 4,300 MB/sec [Average]
[info]   (min, avg, max) = (671,961, 672,850, 674,735), stdev = 1,117
[info]   CI (99.9%): [668,550, 677,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49585,070 ±(99.9%) 1794,800 B/op [Average]
[info]   (min, avg, max) = (49208,334, 49585,070, 50360,681), stdev = 466,104
[info]   CI (99.9%): [47790,270, 51379,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,845 ±(99.9%) 10,554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,845, 6,116), stdev = 2,741
[info]   CI (99.9%): [≈ 0, 12,399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,88% complete, ETA 01:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9914,139 ops/s
[info] # Warmup Iteration   2: 21395,885 ops/s
[info] # Warmup Iteration   3: 21129,026 ops/s
[info] # Warmup Iteration   4: 21238,140 ops/s
[info] # Warmup Iteration   5: 21593,061 ops/s
[info] Iteration   1: 21559,989 ops/s
[info]                  ·gc.alloc.rate:                   603,398 MB/sec
[info]                  ·gc.alloc.rate.norm:              44049,292 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49231,774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,558 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 21311,640 ops/s
[info]                  ·gc.alloc.rate:                   596,442 MB/sec
[info]                  ·gc.alloc.rate.norm:              44048,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49809,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 21653,678 ops/s
[info]                  ·gc.alloc.rate:      605,987 MB/sec
[info]                  ·gc.alloc.rate.norm: 44048,019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 21599,789 ops/s
[info]                  ·gc.alloc.rate:               604,561 MB/sec
[info]                  ·gc.alloc.rate.norm:          44048,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49186,882 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 21610,422 ops/s
[info]                  ·gc.alloc.rate:                   604,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              44048,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49164,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,516 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   21547,104 ±(99.9%) 522,866 ops/s [Average]
[info]   (min, avg, max) = (21311,640, 21547,104, 21653,678), stdev = 135,787
[info]   CI (99.9%): [21024,238, 22069,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   603,029 ±(99.9%) 14,614 MB/sec [Average]
[info]   (min, avg, max) = (596,442, 603,029, 605,987), stdev = 3,795
[info]   CI (99.9%): [588,415, 617,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44048,274 ±(99.9%) 2,191 B/op [Average]
[info]   (min, avg, max) = (44048,019, 44048,274, 44049,292), stdev = 0,569
[info]   CI (99.9%): [44046,084, 44050,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,786 ±(99.9%) 1161,931 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,786, 675,092), stdev = 301,750
[info]   CI (99.9%): [≈ 0, 1701,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39478,398 ±(99.9%) 84986,464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39478,398, 49809,205), stdev = 22070,715
[info]   CI (99.9%): [≈ 0, 124464,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,830 ±(99.9%) 7,651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,830, 4,558), stdev = 1,987
[info]   CI (99.9%): [≈ 0, 9,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,08% complete, ETA 01:11:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111845,711 ops/s
[info] # Warmup Iteration   2: 119522,736 ops/s
[info] # Warmup Iteration   3: 118935,773 ops/s
[info] # Warmup Iteration   4: 119239,110 ops/s
[info] # Warmup Iteration   5: 119594,286 ops/s
[info] Iteration   1: 119644,579 ops/s
[info]                  ·gc.alloc.rate:      300,415 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 119627,023 ops/s
[info]                  ·gc.alloc.rate:                   300,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6730,292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 119858,033 ops/s
[info]                  ·gc.alloc.rate:      300,983 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 119261,979 ops/s
[info]                  ·gc.alloc.rate:               299,490 MB/sec
[info]                  ·gc.alloc.rate.norm:          3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6750,716 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 119678,890 ops/s
[info]                  ·gc.alloc.rate:      300,488 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   119614,101 ±(99.9%) 836,543 ops/s [Average]
[info]   (min, avg, max) = (119261,979, 119614,101, 119858,033), stdev = 217,248
[info]   CI (99.9%): [118777,557, 120450,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   300,352 ±(99.9%) 2,077 MB/sec [Average]
[info]   (min, avg, max) = (299,490, 300,352, 300,983), stdev = 0,539
[info]   CI (99.9%): [298,275, 302,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3952,003, 3952,004, 3952,004), stdev = 0,001
[info]   CI (99.9%): [3952,003, 3952,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,628 ±(99.9%) 1078,945 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,628, 511,582), stdev = 280,199
[info]   CI (99.9%): [≈ 0, 1283,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2696,202 ±(99.9%) 14216,320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2696,202, 6750,716), stdev = 3691,933
[info]   CI (99.9%): [≈ 0, 16912,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,058), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46,28% complete, ETA 01:11:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7169,424 ops/s
[info] # Warmup Iteration   2: 15914,334 ops/s
[info] # Warmup Iteration   3: 15919,109 ops/s
[info] # Warmup Iteration   4: 15989,764 ops/s
[info] # Warmup Iteration   5: 15937,529 ops/s
[info] Iteration   1: 15998,217 ops/s
[info]                  ·gc.alloc.rate:               1010,020 MB/sec
[info]                  ·gc.alloc.rate.norm:          99368,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66146,190 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 16044,017 ops/s
[info]                  ·gc.alloc.rate:                   1012,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              99368,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132068,559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,126 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 16041,762 ops/s
[info]                  ·gc.alloc.rate:               1012,624 MB/sec
[info]                  ·gc.alloc.rate.norm:          99368,537 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66107,867 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 14963,856 ops/s
[info]                  ·gc.alloc.rate:               945,038 MB/sec
[info]                  ·gc.alloc.rate.norm:          99368,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70860,143 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 16069,638 ops/s
[info]                  ·gc.alloc.rate:                   1014,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              99368,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132115,879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   15823,498 ±(99.9%) 1853,080 ops/s [Average]
[info]   (min, avg, max) = (14963,856, 15823,498, 16069,638), stdev = 481,239
[info]   CI (99.9%): [13970,418, 17676,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   999,068 ±(99.9%) 116,483 MB/sec [Average]
[info]   (min, avg, max) = (945,038, 999,068, 1014,713), stdev = 30,250
[info]   CI (99.9%): [882,585, 1115,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99368,131 ±(99.9%) 0,874 B/op [Average]
[info]   (min, avg, max) = (99368,027, 99368,131, 99368,537), stdev = 0,227
[info]   CI (99.9%): [99367,257, 99369,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   943,069 ±(99.9%) 1422,365 MB/sec [Average]
[info]   (min, avg, max) = (672,338, 943,069, 1349,123), stdev = 369,384
[info]   CI (99.9%): [≈ 0, 2365,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   93459,728 ±(99.9%) 136002,360 B/op [Average]
[info]   (min, avg, max) = (66107,867, 93459,728, 132115,879), stdev = 35319,381
[info]   CI (99.9%): [≈ 0, 229462,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,633 ±(99.9%) 10,252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,633, 6,126), stdev = 2,662
[info]   CI (99.9%): [≈ 0, 11,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46,48% complete, ETA 01:10:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11358,427 ops/s
[info] # Warmup Iteration   2: 18392,320 ops/s
[info] # Warmup Iteration   3: 18501,213 ops/s
[info] # Warmup Iteration   4: 18499,417 ops/s
[info] # Warmup Iteration   5: 18448,509 ops/s
[info] Iteration   1: 18482,651 ops/s
[info]                  ·gc.alloc.rate:               595,151 MB/sec
[info]                  ·gc.alloc.rate.norm:          50680,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 43563,041 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 18467,530 ops/s
[info]                  ·gc.alloc.rate:                   594,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              50663,650 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57563,535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239,679 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18504,831 ops/s
[info]                  ·gc.alloc.rate:                   595,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57442,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,770 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18516,849 ops/s
[info]                  ·gc.alloc.rate:                   596,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,454 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57235,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,769 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 18483,410 ops/s
[info]                  ·gc.alloc.rate:                   594,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57340,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,545 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   18491,055 ±(99.9%) 75,496 ops/s [Average]
[info]   (min, avg, max) = (18467,530, 18491,055, 18516,849), stdev = 19,606
[info]   CI (99.9%): [18415,559, 18566,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   595,233 ±(99.9%) 2,298 MB/sec [Average]
[info]   (min, avg, max) = (594,541, 595,233, 596,041), stdev = 0,597
[info]   CI (99.9%): [592,935, 597,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   50662,349 ±(99.9%) 40,126 B/op [Average]
[info]   (min, avg, max) = (50656,022, 50662,349, 50680,029), stdev = 10,421
[info]   CI (99.9%): [50622,223, 50702,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   641,851 ±(99.9%) 280,459 MB/sec [Average]
[info]   (min, avg, max) = (511,574, 641,851, 675,511), stdev = 72,834
[info]   CI (99.9%): [361,392, 922,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   54628,896 ±(99.9%) 23824,690 B/op [Average]
[info]   (min, avg, max) = (43563,041, 54628,896, 57563,535), stdev = 6187,196
[info]   CI (99.9%): [30804,206, 78453,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,579 ±(99.9%) 4,808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,579, 2,813), stdev = 1,249
[info]   CI (99.9%): [≈ 0, 5,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   49,353 ±(99.9%) 409,720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49,353, 239,679), stdev = 106,403
[info]   CI (99.9%): [≈ 0, 459,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46,68% complete, ETA 01:10:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50974,273 ops/s
[info] # Warmup Iteration   2: 65434,247 ops/s
[info] # Warmup Iteration   3: 65226,351 ops/s
[info] # Warmup Iteration   4: 67500,300 ops/s
[info] # Warmup Iteration   5: 67495,433 ops/s
[info] Iteration   1: 67493,786 ops/s
[info]                  ·gc.alloc.rate:                   1078,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31331,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,971 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 67579,938 ops/s
[info]                  ·gc.alloc.rate:               1079,676 MB/sec
[info]                  ·gc.alloc.rate.norm:          25144,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15637,653 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 67394,419 ops/s
[info]                  ·gc.alloc.rate:                   1076,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              25144,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31358,817 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,972 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 67472,005 ops/s
[info]                  ·gc.alloc.rate:               1077,989 MB/sec
[info]                  ·gc.alloc.rate.norm:          25144,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15661,519 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 67399,420 ops/s
[info]                  ·gc.alloc.rate:               1076,429 MB/sec
[info]                  ·gc.alloc.rate.norm:          25144,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31373,441 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   67467,914 ±(99.9%) 294,068 ops/s [Average]
[info]   (min, avg, max) = (67394,419, 67467,914, 67579,938), stdev = 76,368
[info]   CI (99.9%): [67173,846, 67761,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1077,820 ±(99.9%) 5,156 MB/sec [Average]
[info]   (min, avg, max) = (1076,429, 1077,820, 1079,676), stdev = 1,339
[info]   CI (99.9%): [1072,664, 1082,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   25144,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25144,006, 25144,007, 25144,007), stdev = 0,001
[info]   CI (99.9%): [25144,005, 25144,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,506 ±(99.9%) 1416,755 MB/sec [Average]
[info]   (min, avg, max) = (671,450, 1074,506, 1343,765), stdev = 367,927
[info]   CI (99.9%): [≈ 0, 2491,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25072,608 ±(99.9%) 33123,318 B/op [Average]
[info]   (min, avg, max) = (15637,653, 25072,608, 31373,441), stdev = 8602,020
[info]   CI (99.9%): [≈ 0, 58195,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,389 ±(99.9%) 2,049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,389, 0,972), stdev = 0,532
[info]   CI (99.9%): [≈ 0, 2,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,88% complete, ETA 01:10:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64306,761 ops/s
[info] # Warmup Iteration   2: 86437,305 ops/s
[info] # Warmup Iteration   3: 86872,458 ops/s
[info] # Warmup Iteration   4: 88063,294 ops/s
[info] # Warmup Iteration   5: 87587,515 ops/s
[info] Iteration   1: 87681,787 ops/s
[info]                  ·gc.alloc.rate:                   1417,287 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24282,611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,374 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 87587,801 ops/s
[info]                  ·gc.alloc.rate:               1415,770 MB/sec
[info]                  ·gc.alloc.rate.norm:          25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,142 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24332,603 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 84181,089 ops/s
[info]                  ·gc.alloc.rate:                   1360,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25329,908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,778 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 81182,138 ops/s
[info]                  ·gc.alloc.rate:                   1312,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26291,233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,404 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 87908,915 ops/s
[info]                  ·gc.alloc.rate:                   1420,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24303,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,745 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   85708,346 ±(99.9%) 11404,733 ops/s [Average]
[info]   (min, avg, max) = (81182,138, 85708,346, 87908,915), stdev = 2961,773
[info]   CI (99.9%): [74303,613, 97113,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1385,327 ±(99.9%) 184,225 MB/sec [Average]
[info]   (min, avg, max) = (1312,238, 1385,327, 1420,738), stdev = 47,843
[info]   CI (99.9%): [1201,102, 1569,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25440,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25440,005, 25440,005, 25440,005), stdev = 0,001
[info]   CI (99.9%): [25440,004, 25440,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1355,014 ±(99.9%) 6,686 MB/sec [Average]
[info]   (min, avg, max) = (1352,807, 1355,014, 1357,263), stdev = 1,736
[info]   CI (99.9%): [1348,328, 1361,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24907,951 ±(99.9%) 3432,842 B/op [Average]
[info]   (min, avg, max) = (24282,611, 24907,951, 26291,233), stdev = 891,498
[info]   CI (99.9%): [21475,109, 28340,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,460 ±(99.9%) 1,225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,460, 0,778), stdev = 0,318
[info]   CI (99.9%): [≈ 0, 1,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47,08% complete, ETA 01:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305075,143 ops/s
[info] # Warmup Iteration   2: 334168,701 ops/s
[info] # Warmup Iteration   3: 334816,962 ops/s
[info] # Warmup Iteration   4: 332962,875 ops/s
[info] # Warmup Iteration   5: 334099,551 ops/s
[info] Iteration   1: 334800,680 ops/s
[info]                  ·gc.alloc.rate:                   641,576 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3175,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,253 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 330023,407 ops/s
[info]                  ·gc.alloc.rate:                   632,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3221,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 335360,861 ops/s
[info]                  ·gc.alloc.rate:               642,600 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3163,672 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 334346,940 ops/s
[info]                  ·gc.alloc.rate:                   640,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3173,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 333256,524 ops/s
[info]                  ·gc.alloc.rate:      638,642 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   333557,682 ±(99.9%) 8168,728 ops/s [Average]
[info]   (min, avg, max) = (330023,407, 333557,682, 335360,861), stdev = 2121,393
[info]   CI (99.9%): [325388,955, 341726,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   639,199 ±(99.9%) 15,616 MB/sec [Average]
[info]   (min, avg, max) = (632,428, 639,199, 642,600), stdev = 4,055
[info]   CI (99.9%): [623,583, 654,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3016,001, 3016,001, 3016,001), stdev = 0,001
[info]   CI (99.9%): [3016,001, 3016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   539,816 ±(99.9%) 1161,998 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,816, 675,484), stdev = 301,767
[info]   CI (99.9%): [≈ 0, 1701,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2546,629 ±(99.9%) 5482,489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2546,629, 3221,334), stdev = 1423,785
[info]   CI (99.9%): [≈ 0, 8029,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,572 ±(99.9%) 4,837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,572, 2,819), stdev = 1,256
[info]   CI (99.9%): [≈ 0, 5,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,690 ±(99.9%) 22,739 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,690, 13,253), stdev = 5,905
[info]   CI (99.9%): [≈ 0, 25,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47,28% complete, ETA 01:09:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 357016,721 ops/s
[info] # Warmup Iteration   2: 388319,099 ops/s
[info] # Warmup Iteration   3: 389566,952 ops/s
[info] # Warmup Iteration   4: 388880,557 ops/s
[info] # Warmup Iteration   5: 388903,968 ops/s
[info] Iteration   1: 389885,536 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 388429,216 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 389497,005 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 388385,719 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 388807,815 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   389001,058 ±(99.9%) 2562,380 ops/s [Average]
[info]   (min, avg, max) = (388385,719, 389001,058, 389885,536), stdev = 665,442
[info]   CI (99.9%): [386438,678, 391563,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47,48% complete, ETA 01:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64291,346 ops/s
[info] # Warmup Iteration   2: 80729,136 ops/s
[info] # Warmup Iteration   3: 80345,241 ops/s
[info] # Warmup Iteration   4: 80463,275 ops/s
[info] # Warmup Iteration   5: 81107,922 ops/s
[info] Iteration   1: 79931,017 ops/s
[info]                  ·gc.alloc.rate:                   1286,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26387,849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,230 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 81294,496 ops/s
[info]                  ·gc.alloc.rate:                   1307,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25947,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,806 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 81224,832 ops/s
[info]                  ·gc.alloc.rate:               1306,585 MB/sec
[info]                  ·gc.alloc.rate.norm:          25320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25980,792 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 81228,945 ops/s
[info]                  ·gc.alloc.rate:                   1306,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25992,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,210 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 81210,063 ops/s
[info]                  ·gc.alloc.rate:                   1306,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              25320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26036,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,403 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   80977,871 ±(99.9%) 2256,898 ops/s [Average]
[info]   (min, avg, max) = (79931,017, 80977,871, 81294,496), stdev = 586,109
[info]   CI (99.9%): [78720,973, 83234,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1302,767 ±(99.9%) 35,617 MB/sec [Average]
[info]   (min, avg, max) = (1286,262, 1302,767, 1307,978), stdev = 9,250
[info]   CI (99.9%): [1267,151, 1338,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25320,005, 25320,005, 25320,005), stdev = 0,001
[info]   CI (99.9%): [25320,004, 25320,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341,253 ±(99.9%) 4,548 MB/sec [Average]
[info]   (min, avg, max) = (1340,390, 1341,253, 1343,233), stdev = 1,181
[info]   CI (99.9%): [1336,705, 1345,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   26069,018 ±(99.9%) 697,287 B/op [Average]
[info]   (min, avg, max) = (25947,446, 26069,018, 26387,849), stdev = 181,083
[info]   CI (99.9%): [25371,731, 26766,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,730 ±(99.9%) 2,042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,730, 1,230), stdev = 0,530
[info]   CI (99.9%): [≈ 0, 2,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47,69% complete, ETA 01:09:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16157,493 ops/s
[info] # Warmup Iteration   2: 17074,968 ops/s
[info] # Warmup Iteration   3: 17393,713 ops/s
[info] # Warmup Iteration   4: 17428,331 ops/s
[info] # Warmup Iteration   5: 17405,769 ops/s
[info] Iteration   1: 17280,732 ops/s
[info]                  ·gc.alloc.rate:               378,958 MB/sec
[info]                  ·gc.alloc.rate.norm:          34520,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46592,592 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 17337,177 ops/s
[info]                  ·gc.alloc.rate:                   380,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46442,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,873 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 17401,134 ops/s
[info]                  ·gc.alloc.rate:               381,703 MB/sec
[info]                  ·gc.alloc.rate.norm:          34520,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46271,338 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 17378,405 ops/s
[info]                  ·gc.alloc.rate:      381,154 MB/sec
[info]                  ·gc.alloc.rate.norm: 34520,025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17354,048 ops/s
[info]                  ·gc.alloc.rate:                   380,573 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61254,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255,992 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   17350,299 ±(99.9%) 176,459 ops/s [Average]
[info]   (min, avg, max) = (17280,732, 17350,299, 17401,134), stdev = 45,826
[info]   CI (99.9%): [17173,840, 17526,758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   380,522 ±(99.9%) 4,008 MB/sec [Average]
[info]   (min, avg, max) = (378,958, 380,522, 381,703), stdev = 1,041
[info]   CI (99.9%): [376,514, 384,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34520,026 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (34520,024, 34520,026, 34520,031), stdev = 0,003
[info]   CI (99.9%): [34520,013, 34520,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,997 ±(99.9%) 989,835 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,997, 675,312), stdev = 257,057
[info]   CI (99.9%): [≈ 0, 1431,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   40112,115 ±(99.9%) 89811,366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40112,115, 61254,526), stdev = 23323,727
[info]   CI (99.9%): [≈ 0, 129923,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,569 ±(99.9%) 4,851 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,569, 2,822), stdev = 1,260
[info]   CI (99.9%): [≈ 0, 5,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   51,573 ±(99.9%) 440,038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 51,573, 255,992), stdev = 114,276
[info]   CI (99.9%): [≈ 0, 491,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47,89% complete, ETA 01:09:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117677,249 ops/s
[info] # Warmup Iteration   2: 137457,956 ops/s
[info] # Warmup Iteration   3: 138578,871 ops/s
[info] # Warmup Iteration   4: 138460,414 ops/s
[info] # Warmup Iteration   5: 138199,029 ops/s
[info] Iteration   1: 138684,961 ops/s
[info]                  ·gc.alloc.rate:                   2009,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22911,639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,709 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 137682,854 ops/s
[info]                  ·gc.alloc.rate:                   1994,664 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15403,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 138918,755 ops/s
[info]                  ·gc.alloc.rate:                   2012,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15288,841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,943 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 136727,003 ops/s
[info]                  ·gc.alloc.rate:                   1980,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23332,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,719 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 138828,522 ops/s
[info]                  ·gc.alloc.rate:                   2011,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23010,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   138168,419 ±(99.9%) 3642,377 ops/s [Average]
[info]   (min, avg, max) = (136727,003, 138168,419, 138918,755), stdev = 945,914
[info]   CI (99.9%): [134526,043, 141810,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2001,612 ±(99.9%) 52,501 MB/sec [Average]
[info]   (min, avg, max) = (1980,802, 2001,612, 2012,305), stdev = 13,634
[info]   CI (99.9%): [1949,111, 2054,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (22800,003, 22800,003, 22800,003), stdev = 0,001
[info]   CI (99.9%): [22800,003, 22800,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1754,532 ±(99.9%) 1427,447 MB/sec [Average]
[info]   (min, avg, max) = (1347,564, 1754,532, 2029,757), stdev = 370,704
[info]   CI (99.9%): [327,084, 3181,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19989,272 ±(99.9%) 16333,195 B/op [Average]
[info]   (min, avg, max) = (15288,841, 19989,272, 23332,359), stdev = 4241,679
[info]   CI (99.9%): [3656,077, 36322,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,616 ±(99.9%) 1,037 B/op [Average]
[info]   (min, avg, max) = (0,238, 0,616, 0,943), stdev = 0,269
[info]   CI (99.9%): [≈ 0, 1,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 48,09% complete, ETA 01:08:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200594,974 ops/s
[info] # Warmup Iteration   2: 753211,073 ops/s
[info] # Warmup Iteration   3: 755835,229 ops/s
[info] # Warmup Iteration   4: 753080,749 ops/s
[info] # Warmup Iteration   5: 752490,519 ops/s
[info] Iteration   1: 753527,873 ops/s
[info]                  ·gc.alloc.rate:               417,494 MB/sec
[info]                  ·gc.alloc.rate.norm:          872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1068,486 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 755079,775 ops/s
[info]                  ·gc.alloc.rate:                   418,396 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1066,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 755716,319 ops/s
[info]                  ·gc.alloc.rate:      418,700 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 752895,234 ops/s
[info]                  ·gc.alloc.rate:                   417,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1409,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,497 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 754973,301 ops/s
[info]                  ·gc.alloc.rate:               418,248 MB/sec
[info]                  ·gc.alloc.rate.norm:          872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1405,257 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   754438,501 ±(99.9%) 4532,070 ops/s [Average]
[info]   (min, avg, max) = (752895,234, 754438,501, 755716,319), stdev = 1176,964
[info]   CI (99.9%): [749906,430, 758970,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   418,002 ±(99.9%) 2,472 MB/sec [Average]
[info]   (min, avg, max) = (417,173, 418,002, 418,700), stdev = 0,642
[info]   CI (99.9%): [415,531, 420,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (872,001, 872,001, 872,001), stdev = 0,001
[info]   CI (99.9%): [872,000, 872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   474,277 ±(99.9%) 1067,763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,277, 674,141), stdev = 277,295
[info]   CI (99.9%): [≈ 0, 1542,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   989,848 ±(99.9%) 2228,887 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 989,848, 1409,129), stdev = 578,835
[info]   CI (99.9%): [≈ 0, 3218,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,531 ±(99.9%) 4,519 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,531, 2,630), stdev = 1,174
[info]   CI (99.9%): [≈ 0, 5,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,109 ±(99.9%) 9,447 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,109, 5,497), stdev = 2,453
[info]   CI (99.9%): [≈ 0, 10,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,29% complete, ETA 01:08:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302246,669 ops/s
[info] # Warmup Iteration   2: 416690,893 ops/s
[info] # Warmup Iteration   3: 416894,652 ops/s
[info] # Warmup Iteration   4: 382781,422 ops/s
[info] # Warmup Iteration   5: 417510,971 ops/s
[info] Iteration   1: 416834,883 ops/s
[info]                  ·gc.alloc.rate:               415,194 MB/sec
[info]                  ·gc.alloc.rate.norm:          1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1931,570 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 416912,089 ops/s
[info]                  ·gc.alloc.rate:               415,403 MB/sec
[info]                  ·gc.alloc.rate.norm:          1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1931,366 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 416578,994 ops/s
[info]                  ·gc.alloc.rate:                   414,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2548,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,629 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 399396,842 ops/s
[info]                  ·gc.alloc.rate:      398,024 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 416693,701 ops/s
[info]                  ·gc.alloc.rate:                   415,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2547,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   413283,302 ±(99.9%) 29895,732 ops/s [Average]
[info]   (min, avg, max) = (399396,842, 413283,302, 416912,089), stdev = 7763,827
[info]   CI (99.9%): [383387,570, 443179,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   411,763 ±(99.9%) 29,580 MB/sec [Average]
[info]   (min, avg, max) = (398,024, 411,763, 415,403), stdev = 7,682
[info]   CI (99.9%): [382,183, 441,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1568,001, 1568,001, 1568,001), stdev = 0,001
[info]   CI (99.9%): [1568,001, 1568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,414 ±(99.9%) 1068,291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,414, 674,579), stdev = 277,432
[info]   CI (99.9%): [≈ 0, 1542,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1791,690 ±(99.9%) 4035,147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1791,690, 2548,013), stdev = 1047,915
[info]   CI (99.9%): [≈ 0, 5826,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,280 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,167), stdev = 0,073
[info]   CI (99.9%): [≈ 0, 0,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,142 ±(99.9%) 1,058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,142, 0,629), stdev = 0,275
[info]   CI (99.9%): [≈ 0, 1,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,49% complete, ETA 01:08:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 782392,462 ops/s
[info] # Warmup Iteration   2: 861923,533 ops/s
[info] # Warmup Iteration   3: 851045,283 ops/s
[info] # Warmup Iteration   4: 857907,764 ops/s
[info] # Warmup Iteration   5: 866713,248 ops/s
[info] Iteration   1: 858204,845 ops/s
[info]                  ·gc.alloc.rate:               296,620 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 938,155 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   2: 864446,503 ops/s
[info]                  ·gc.alloc.rate:               298,795 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 931,448 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 870996,625 ops/s
[info]                  ·gc.alloc.rate:      301,070 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 860456,486 ops/s
[info]                  ·gc.alloc.rate:                   297,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,590 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     935,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,116 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 866392,808 ops/s
[info]                  ·gc.alloc.rate:      299,404 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   864099,453 ±(99.9%) 19346,230 ops/s [Average]
[info]   (min, avg, max) = (858204,845, 864099,453, 870996,625), stdev = 5024,155
[info]   CI (99.9%): [844753,223, 883445,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   298,664 ±(99.9%) 6,683 MB/sec [Average]
[info]   (min, avg, max) = (296,620, 298,664, 301,070), stdev = 1,736
[info]   CI (99.9%): [291,981, 305,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,001), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,945 ±(99.9%) 1078,956 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,945, 511,602), stdev = 280,202
[info]   CI (99.9%): [≈ 0, 1385,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   561,059 ±(99.9%) 1972,223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 561,059, 938,155), stdev = 512,180
[info]   CI (99.9%): [≈ 0, 2533,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,013 ±(99.9%) 0,109 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,063), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,116), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 6,000), stdev = 2,490
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48,69% complete, ETA 01:08:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61769,988 ops/s
[info] # Warmup Iteration   2: 91448,295 ops/s
[info] # Warmup Iteration   3: 91964,410 ops/s
[info] # Warmup Iteration   4: 91282,672 ops/s
[info] # Warmup Iteration   5: 91276,913 ops/s
[info] Iteration   1: 91160,589 ops/s
[info]                  ·gc.alloc.rate:                   3908,094 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4076,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70378,859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,797 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 90968,167 ops/s
[info]                  ·gc.alloc.rate:                   3900,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4081,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70609,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,441 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 91137,091 ops/s
[info]                  ·gc.alloc.rate:                   3906,559 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58782,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,719 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 91435,786 ops/s
[info]                  ·gc.alloc.rate:                   3920,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70327,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,075 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 91512,399 ops/s
[info]                  ·gc.alloc.rate:                   3922,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              67472,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70313,645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,074 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   91242,806 ±(99.9%) 868,069 ops/s [Average]
[info]   (min, avg, max) = (90968,167, 91242,806, 91512,399), stdev = 225,435
[info]   CI (99.9%): [90374,737, 92110,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3911,557 ±(99.9%) 36,960 MB/sec [Average]
[info]   (min, avg, max) = (3900,141, 3911,557, 3922,857), stdev = 9,598
[info]   CI (99.9%): [3874,597, 3948,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67472,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (67472,004, 67472,005, 67472,005), stdev = 0,001
[info]   CI (99.9%): [67472,004, 67472,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3947,111 ±(99.9%) 1170,375 MB/sec [Average]
[info]   (min, avg, max) = (3403,460, 3947,111, 4088,072), stdev = 303,943
[info]   CI (99.9%): [2776,735, 5117,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68082,517 ±(99.9%) 20023,726 B/op [Average]
[info]   (min, avg, max) = (58782,743, 68082,517, 70609,588), stdev = 5200,098
[info]   CI (99.9%): [48058,791, 88106,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,221 ±(99.9%) 1,582 B/op [Average]
[info]   (min, avg, max) = (0,719, 1,221, 1,797), stdev = 0,411
[info]   CI (99.9%): [≈ 0, 2,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48,89% complete, ETA 01:07:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225308,409 ops/s
[info] # Warmup Iteration   2: 245909,589 ops/s
[info] # Warmup Iteration   3: 225290,260 ops/s
[info] # Warmup Iteration   4: 244835,928 ops/s
[info] # Warmup Iteration   5: 244917,361 ops/s
[info] Iteration   1: 244746,398 ops/s
[info]                  ·gc.alloc.rate:                   1546,391 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,351 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12966,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,268 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 245495,757 ops/s
[info]                  ·gc.alloc.rate:               1551,100 MB/sec
[info]                  ·gc.alloc.rate.norm:          9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8622,364 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 245149,106 ops/s
[info]                  ·gc.alloc.rate:                   1548,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,194 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8642,521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,401 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 245538,627 ops/s
[info]                  ·gc.alloc.rate:                   1551,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8637,160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,133 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 231945,945 ops/s
[info]                  ·gc.alloc.rate:                   1465,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13730,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,282 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   242575,167 ±(99.9%) 22913,087 ops/s [Average]
[info]   (min, avg, max) = (231945,945, 242575,167, 245538,627), stdev = 5950,456
[info]   CI (99.9%): [219662,080, 265488,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1532,637 ±(99.9%) 145,134 MB/sec [Average]
[info]   (min, avg, max) = (1465,311, 1532,637, 1551,465), stdev = 37,691
[info]   CI (99.9%): [1387,503, 1677,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9944,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9944,002, 9944,002, 9944,002), stdev = 0,001
[info]   CI (99.9%): [9944,001, 9944,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1615,682 ±(99.9%) 1420,739 MB/sec [Average]
[info]   (min, avg, max) = (1344,946, 1615,682, 2023,346), stdev = 368,961
[info]   CI (99.9%): [194,942, 3036,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10519,817 ±(99.9%) 9997,714 B/op [Average]
[info]   (min, avg, max) = (8622,364, 10519,817, 13730,981), stdev = 2596,375
[info]   CI (99.9%): [522,103, 20517,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,217 ±(99.9%) 0,593 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,217, 0,401), stdev = 0,154
[info]   CI (99.9%): [≈ 0, 0,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49,09% complete, ETA 01:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246239,170 ops/s
[info] # Warmup Iteration   2: 323390,111 ops/s
[info] # Warmup Iteration   3: 325624,566 ops/s
[info] # Warmup Iteration   4: 328284,745 ops/s
[info] # Warmup Iteration   5: 328102,416 ops/s
[info] Iteration   1: 327997,067 ops/s
[info]                  ·gc.alloc.rate:                   1708,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9665,680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,200 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 326862,172 ops/s
[info]                  ·gc.alloc.rate:                   1702,967 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6472,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,401 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 327725,667 ops/s
[info]                  ·gc.alloc.rate:                   1707,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9695,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,200 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 325453,400 ops/s
[info]                  ·gc.alloc.rate:                   1695,740 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6518,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 325810,633 ops/s
[info]                  ·gc.alloc.rate:                   1697,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9780,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,201 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   326769,788 ±(99.9%) 4340,015 ops/s [Average]
[info]   (min, avg, max) = (325453,400, 326769,788, 327997,067), stdev = 1127,088
[info]   CI (99.9%): [322429,773, 331109,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1702,580 ±(99.9%) 22,065 MB/sec [Average]
[info]   (min, avg, max) = (1695,740, 1702,580, 1708,892), stdev = 5,730
[info]   CI (99.9%): [1680,516, 1724,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8200,001, 8200,001, 8200,001), stdev = 0,001
[info]   CI (99.9%): [8200,001, 8200,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1750,053 ±(99.9%) 1420,286 MB/sec [Average]
[info]   (min, avg, max) = (1344,151, 1750,053, 2025,095), stdev = 368,844
[info]   CI (99.9%): [329,767, 3170,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8426,301 ±(99.9%) 6790,540 B/op [Average]
[info]   (min, avg, max) = (6472,256, 8426,301, 9780,004), stdev = 1763,482
[info]   CI (99.9%): [1635,761, 15216,842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,220 ±(99.9%) 0,422 B/op [Average]
[info]   (min, avg, max) = (0,101, 0,220, 0,401), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49,30% complete, ETA 01:07:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468253,589 ops/s
[info] # Warmup Iteration   2: 1632572,461 ops/s
[info] # Warmup Iteration   3: 1625348,282 ops/s
[info] # Warmup Iteration   4: 1640978,600 ops/s
[info] # Warmup Iteration   5: 1637675,398 ops/s
[info] Iteration   1: 1634958,521 ops/s
[info]                  ·gc.alloc.rate:               556,806 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 492,443 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1634409,384 ops/s
[info]                  ·gc.alloc.rate:                   556,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     649,118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,557 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1641306,311 ops/s
[info]                  ·gc.alloc.rate:                   558,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     646,395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1638519,592 ops/s
[info]                  ·gc.alloc.rate:               558,061 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 645,569 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1639726,206 ops/s
[info]                  ·gc.alloc.rate:                   558,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     645,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1637784,003 ±(99.9%) 11566,571 ops/s [Average]
[info]   (min, avg, max) = (1634409,384, 1637784,003, 1641306,311), stdev = 3003,802
[info]   CI (99.9%): [1626217,432, 1649350,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   557,742 ±(99.9%) 3,859 MB/sec [Average]
[info]   (min, avg, max) = (556,600, 557,742, 558,927), stdev = 1,002
[info]   CI (99.9%): [553,884, 561,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   640,752 ±(99.9%) 278,128 MB/sec [Average]
[info]   (min, avg, max) = (511,557, 640,752, 674,066), stdev = 72,229
[info]   CI (99.9%): [362,624, 918,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   615,724 ±(99.9%) 265,440 B/op [Average]
[info]   (min, avg, max) = (492,443, 615,724, 649,118), stdev = 68,934
[info]   CI (99.9%): [350,284, 881,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,552 ±(99.9%) 4,529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,552, 2,655), stdev = 1,176
[info]   CI (99.9%): [≈ 0, 5,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,531 ±(99.9%) 4,362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,531, 2,557), stdev = 1,133
[info]   CI (99.9%): [≈ 0, 4,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,50% complete, ETA 01:06:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1164327,839 ops/s
[info] # Warmup Iteration   2: 1692621,290 ops/s
[info] # Warmup Iteration   3: 1686665,918 ops/s
[info] # Warmup Iteration   4: 1677785,029 ops/s
[info] # Warmup Iteration   5: 1705665,833 ops/s
[info] Iteration   1: 1707197,922 ops/s
[info]                  ·gc.alloc.rate:                   997,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     622,729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1706798,193 ops/s
[info]                  ·gc.alloc.rate:                   997,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,253 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1246,975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1702248,525 ops/s
[info]                  ·gc.alloc.rate:               995,123 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 625,458 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1700156,787 ops/s
[info]                  ·gc.alloc.rate:                   993,806 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1252,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1707296,937 ops/s
[info]                  ·gc.alloc.rate:               997,831 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 624,184 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1704739,673 ±(99.9%) 12775,313 ops/s [Average]
[info]   (min, avg, max) = (1700156,787, 1704739,673, 1707296,937), stdev = 3317,708
[info]   CI (99.9%): [1691964,360, 1717514,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   996,464 ±(99.9%) 7,260 MB/sec [Average]
[info]   (min, avg, max) = (993,806, 996,464, 997,887), stdev = 1,886
[info]   CI (99.9%): [989,204, 1003,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,946 ±(99.9%) 1426,919 MB/sec [Average]
[info]   (min, avg, max) = (675,449, 946,946, 1353,508), stdev = 370,566
[info]   CI (99.9%): [≈ 0, 2373,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   874,467 ±(99.9%) 1320,018 B/op [Average]
[info]   (min, avg, max) = (622,729, 874,467, 1252,989), stdev = 342,804
[info]   CI (99.9%): [≈ 0, 2194,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,058), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,70% complete, ETA 01:06:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1465170,976 ops/s
[info] # Warmup Iteration   2: 1595414,114 ops/s
[info] # Warmup Iteration   3: 1582706,500 ops/s
[info] # Warmup Iteration   4: 1589220,228 ops/s
[info] # Warmup Iteration   5: 1592453,993 ops/s
[info] Iteration   1: 1590800,957 ops/s
[info]                  ·gc.alloc.rate:               541,734 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 506,110 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1597881,438 ops/s
[info]                  ·gc.alloc.rate:                   544,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     664,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1596227,863 ops/s
[info]                  ·gc.alloc.rate:      543,618 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1544718,164 ops/s
[info]                  ·gc.alloc.rate:                   526,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     687,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1591303,356 ops/s
[info]                  ·gc.alloc.rate:               541,879 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 665,392 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1584186,356 ±(99.9%) 85772,953 ops/s [Average]
[info]   (min, avg, max) = (1544718,164, 1584186,356, 1597881,438), stdev = 22274,964
[info]   CI (99.9%): [1498413,403, 1669959,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   539,501 ±(99.9%) 29,141 MB/sec [Average]
[info]   (min, avg, max) = (526,098, 539,501, 544,176), stdev = 7,568
[info]   CI (99.9%): [510,360, 568,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,761 ±(99.9%) 1124,020 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,761, 674,799), stdev = 291,905
[info]   CI (99.9%): [≈ 0, 1630,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   504,731 ±(99.9%) 1121,897 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 504,731, 687,493), stdev = 291,353
[info]   CI (99.9%): [≈ 0, 1626,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,127), stdev = 1,390
[info]   CI (99.9%): [≈ 0, 5,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,633 ±(99.9%) 5,270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,633, 3,080), stdev = 1,368
[info]   CI (99.9%): [≈ 0, 5,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49,90% complete, ETA 01:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1420660,646 ops/s
[info] # Warmup Iteration   2: 1518233,162 ops/s
[info] # Warmup Iteration   3: 1512552,518 ops/s
[info] # Warmup Iteration   4: 1516262,157 ops/s
[info] # Warmup Iteration   5: 1512523,627 ops/s
[info] Iteration   1: 1515680,795 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1518931,713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1516290,158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1512460,592 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1497698,939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1512212,439 ±(99.9%) 32475,176 ops/s [Average]
[info]   (min, avg, max) = (1497698,939, 1512212,439, 1518931,713), stdev = 8433,700
[info]   CI (99.9%): [1479737,263, 1544687,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50,10% complete, ETA 01:06:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32222,467 ops/s
[info] # Warmup Iteration   2: 43916,319 ops/s
[info] # Warmup Iteration   3: 44214,712 ops/s
[info] # Warmup Iteration   4: 44364,091 ops/s
[info] # Warmup Iteration   5: 44447,266 ops/s
[info] Iteration   1: 44542,576 ops/s
[info]                  ·gc.alloc.rate:                   2065,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71134,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,206 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 44544,614 ops/s
[info]                  ·gc.alloc.rate:                   2065,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71255,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,678 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 44428,124 ops/s
[info]                  ·gc.alloc.rate:                   2059,842 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71601,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,737 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 44358,734 ops/s
[info]                  ·gc.alloc.rate:                   2056,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71831,119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,216 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 44272,900 ops/s
[info]                  ·gc.alloc.rate:                   2052,686 MB/sec
[info]                  ·gc.alloc.rate.norm:              72976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72089,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,480 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   44429,390 ±(99.9%) 453,865 ops/s [Average]
[info]   (min, avg, max) = (44272,900, 44429,390, 44544,614), stdev = 117,867
[info]   CI (99.9%): [43975,525, 44883,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2060,088 ±(99.9%) 21,517 MB/sec [Average]
[info]   (min, avg, max) = (2052,686, 2060,088, 2065,697), stdev = 5,588
[info]   CI (99.9%): [2038,572, 2081,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72976,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72976,009, 72976,009, 72976,010), stdev = 0,001
[info]   CI (99.9%): [72976,008, 72976,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2020,720 ±(99.9%) 22,266 MB/sec [Average]
[info]   (min, avg, max) = (2013,258, 2020,720, 2027,736), stdev = 5,782
[info]   CI (99.9%): [1998,454, 2042,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   71582,272 ±(99.9%) 1524,091 B/op [Average]
[info]   (min, avg, max) = (71134,375, 71582,272, 72089,008), stdev = 395,802
[info]   CI (99.9%): [70058,181, 73106,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,063 ±(99.9%) 4,195 B/op [Average]
[info]   (min, avg, max) = (0,737, 2,063, 3,678), stdev = 1,089
[info]   CI (99.9%): [≈ 0, 6,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50,30% complete, ETA 01:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137019,197 ops/s
[info] # Warmup Iteration   2: 145541,603 ops/s
[info] # Warmup Iteration   3: 145429,591 ops/s
[info] # Warmup Iteration   4: 146298,885 ops/s
[info] # Warmup Iteration   5: 146303,042 ops/s
[info] Iteration   1: 143645,293 ops/s
[info]                  ·gc.alloc.rate:                   1250,062 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14729,405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,456 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 145822,589 ops/s
[info]                  ·gc.alloc.rate:                   1268,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14509,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,674 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 144770,144 ops/s
[info]                  ·gc.alloc.rate:                   1259,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14614,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,453 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 145322,692 ops/s
[info]                  ·gc.alloc.rate:                   1264,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,659 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14572,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,676 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 145634,312 ops/s
[info]                  ·gc.alloc.rate:                   1267,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14555,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,225 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   145039,006 ±(99.9%) 3369,914 ops/s [Average]
[info]   (min, avg, max) = (143645,293, 145039,006, 145822,589), stdev = 875,156
[info]   CI (99.9%): [141669,092, 148408,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1262,148 ±(99.9%) 29,209 MB/sec [Average]
[info]   (min, avg, max) = (1250,062, 1262,148, 1268,996), stdev = 7,586
[info]   CI (99.9%): [1232,938, 1291,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   13696,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13696,003, 13696,003, 13696,003), stdev = 0,001
[info]   CI (99.9%): [13696,002, 13696,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1345,074 ±(99.9%) 4,170 MB/sec [Average]
[info]   (min, avg, max) = (1344,250, 1345,074, 1346,714), stdev = 1,083
[info]   CI (99.9%): [1340,904, 1349,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   14596,263 ±(99.9%) 320,882 B/op [Average]
[info]   (min, avg, max) = (14509,431, 14596,263, 14729,405), stdev = 83,332
[info]   CI (99.9%): [14275,381, 14917,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,497 ±(99.9%) 0,723 B/op [Average]
[info]   (min, avg, max) = (0,225, 0,497, 0,676), stdev = 0,188
[info]   CI (99.9%): [≈ 0, 1,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50,50% complete, ETA 01:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54159,797 ops/s
[info] # Warmup Iteration   2: 63207,316 ops/s
[info] # Warmup Iteration   3: 63123,382 ops/s
[info] # Warmup Iteration   4: 63394,109 ops/s
[info] # Warmup Iteration   5: 63571,315 ops/s
[info] Iteration   1: 63359,944 ops/s
[info]                  ·gc.alloc.rate:                   1265,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33388,976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,068 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 63468,339 ops/s
[info]                  ·gc.alloc.rate:                   1267,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33334,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,516 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 63591,340 ops/s
[info]                  ·gc.alloc.rate:                   1269,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33267,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,515 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 63338,421 ops/s
[info]                  ·gc.alloc.rate:                   1264,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33416,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,069 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 63463,325 ops/s
[info]                  ·gc.alloc.rate:                   1266,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33383,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,549 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   63444,274 ±(99.9%) 389,310 ops/s [Average]
[info]   (min, avg, max) = (63338,421, 63444,274, 63591,340), stdev = 101,102
[info]   CI (99.9%): [63054,964, 63833,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1266,716 ±(99.9%) 7,580 MB/sec [Average]
[info]   (min, avg, max) = (1264,699, 1266,716, 1269,594), stdev = 1,969
[info]   CI (99.9%): [1259,136, 1274,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (31424,006, 31424,007, 31424,007), stdev = 0,001
[info]   CI (99.9%): [31424,005, 31424,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1344,680 ±(99.9%) 3,008 MB/sec [Average]
[info]   (min, avg, max) = (1344,063, 1344,680, 1345,953), stdev = 0,781
[info]   CI (99.9%): [1341,672, 1347,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33358,173 ±(99.9%) 226,736 B/op [Average]
[info]   (min, avg, max) = (33267,193, 33358,173, 33416,595), stdev = 58,883
[info]   CI (99.9%): [33131,438, 33584,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,343 ±(99.9%) 3,022 B/op [Average]
[info]   (min, avg, max) = (0,515, 1,343, 2,069), stdev = 0,785
[info]   CI (99.9%): [≈ 0, 4,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,70% complete, ETA 01:05:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66335,918 ops/s
[info] # Warmup Iteration   2: 92373,033 ops/s
[info] # Warmup Iteration   3: 91751,236 ops/s
[info] # Warmup Iteration   4: 92891,603 ops/s
[info] # Warmup Iteration   5: 92787,248 ops/s
[info] Iteration   1: 92760,330 ops/s
[info]                  ·gc.alloc.rate:               973,719 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11459,723 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 92585,229 ops/s
[info]                  ·gc.alloc.rate:                   971,830 MB/sec
[info]                  ·gc.alloc.rate.norm:              16520,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22984,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,708 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 92796,637 ops/s
[info]                  ·gc.alloc.rate:               973,943 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11472,224 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 91668,547 ops/s
[info]                  ·gc.alloc.rate:                   962,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11612,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,357 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 88317,529 ops/s
[info]                  ·gc.alloc.rate:               927,113 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24131,528 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   91625,654 ±(99.9%) 7337,727 ops/s [Average]
[info]   (min, avg, max) = (88317,529, 91625,654, 92796,637), stdev = 1905,584
[info]   CI (99.9%): [84287,927, 98963,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   961,763 ±(99.9%) 76,855 MB/sec [Average]
[info]   (min, avg, max) = (927,113, 961,763, 973,943), stdev = 19,959
[info]   CI (99.9%): [884,908, 1038,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16520,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16520,004, 16520,005, 16520,005), stdev = 0,001
[info]   CI (99.9%): [16520,004, 16520,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,922 ±(99.9%) 1428,137 MB/sec [Average]
[info]   (min, avg, max) = (675,457, 946,922, 1354,277), stdev = 370,883
[info]   CI (99.9%): [≈ 0, 2375,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16332,223 ±(99.9%) 25448,952 B/op [Average]
[info]   (min, avg, max) = (11459,723, 16332,223, 24131,528), stdev = 6609,012
[info]   CI (99.9%): [≈ 0, 41781,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,213 ±(99.9%) 1,220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,213, 0,708), stdev = 0,317
[info]   CI (99.9%): [≈ 0, 1,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,91% complete, ETA 01:05:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271621,850 ops/s
[info] # Warmup Iteration   2: 292339,616 ops/s
[info] # Warmup Iteration   3: 285405,704 ops/s
[info] # Warmup Iteration   4: 291585,479 ops/s
[info] # Warmup Iteration   5: 293726,084 ops/s
[info] Iteration   1: 293586,637 ops/s
[info]                  ·gc.alloc.rate:                   955,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3606,729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,112 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 294081,518 ops/s
[info]                  ·gc.alloc.rate:                   956,775 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7198,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 293908,680 ops/s
[info]                  ·gc.alloc.rate:               956,095 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3599,223 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 293447,605 ops/s
[info]                  ·gc.alloc.rate:                   954,676 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7209,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 293691,352 ops/s
[info]                  ·gc.alloc.rate:               955,290 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3601,673 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   293743,158 ±(99.9%) 974,941 ops/s [Average]
[info]   (min, avg, max) = (293447,605, 293743,158, 294081,518), stdev = 253,189
[info]   CI (99.9%): [292768,217, 294718,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   955,578 ±(99.9%) 3,263 MB/sec [Average]
[info]   (min, avg, max) = (954,676, 955,578, 956,775), stdev = 0,847
[info]   CI (99.9%): [952,315, 958,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5120,001, 5120,001, 5120,001), stdev = 0,001
[info]   CI (99.9%): [5120,001, 5120,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,264 ±(99.9%) 1418,197 MB/sec [Average]
[info]   (min, avg, max) = (672,000, 941,264, 1345,132), stdev = 368,301
[info]   CI (99.9%): [≈ 0, 2359,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5043,090 ±(99.9%) 7595,616 B/op [Average]
[info]   (min, avg, max) = (3599,223, 5043,090, 7209,605), stdev = 1972,557
[info]   CI (99.9%): [≈ 0, 12638,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,112 ±(99.9%) 0,429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,112, 0,223), stdev = 0,112
[info]   CI (99.9%): [≈ 0, 0,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51,11% complete, ETA 01:04:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23781,816 ops/s
[info] # Warmup Iteration   2: 38396,997 ops/s
[info] # Warmup Iteration   3: 38516,773 ops/s
[info] # Warmup Iteration   4: 38400,572 ops/s
[info] # Warmup Iteration   5: 37720,504 ops/s
[info] Iteration   1: 38511,406 ops/s
[info]                  ·gc.alloc.rate:                   1809,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              73952,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82751,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,851 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38648,794 ops/s
[info]                  ·gc.alloc.rate:                   1815,917 MB/sec
[info]                  ·gc.alloc.rate.norm:              73952,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82573,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,543 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38610,096 ops/s
[info]                  ·gc.alloc.rate:               1814,317 MB/sec
[info]                  ·gc.alloc.rate.norm:          73952,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55176,777 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 38671,281 ops/s
[info]                  ·gc.alloc.rate:                   1817,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              73952,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82736,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,389 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 38622,079 ops/s
[info]                  ·gc.alloc.rate:                   1814,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              73952,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82925,179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,393 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   38612,731 ±(99.9%) 236,507 ops/s [Average]
[info]   (min, avg, max) = (38511,406, 38612,731, 38671,281), stdev = 61,420
[info]   CI (99.9%): [38376,224, 38849,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1814,240 ±(99.9%) 11,001 MB/sec [Average]
[info]   (min, avg, max) = (1809,581, 1814,240, 1817,089), stdev = 2,857
[info]   CI (99.9%): [1803,239, 1825,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73952,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (73952,011, 73952,011, 73952,011), stdev = 0,001
[info]   CI (99.9%): [73952,010, 73952,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1894,716 ±(99.9%) 1164,694 MB/sec [Average]
[info]   (min, avg, max) = (1353,691, 1894,716, 2034,438), stdev = 302,467
[info]   CI (99.9%): [730,022, 3059,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77232,657 ±(99.9%) 47479,368 B/op [Average]
[info]   (min, avg, max) = (55176,777, 77232,657, 82925,179), stdev = 12330,241
[info]   CI (99.9%): [29753,289, 124712,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,035 ±(99.9%) 5,928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,035, 3,393), stdev = 1,539
[info]   CI (99.9%): [≈ 0, 7,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51,31% complete, ETA 01:04:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46858,679 ops/s
[info] # Warmup Iteration   2: 52645,224 ops/s
[info] # Warmup Iteration   3: 52600,293 ops/s
[info] # Warmup Iteration   4: 52838,490 ops/s
[info] # Warmup Iteration   5: 52709,329 ops/s
[info] Iteration   1: 52756,317 ops/s
[info]                  ·gc.alloc.rate:                   880,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40199,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,863 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 52903,050 ops/s
[info]                  ·gc.alloc.rate:               882,899 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20015,909 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 52886,821 ops/s
[info]                  ·gc.alloc.rate:               882,460 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20000,249 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 52610,642 ops/s
[info]                  ·gc.alloc.rate:                   877,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40209,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,623 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 52872,036 ops/s
[info]                  ·gc.alloc.rate:               882,147 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20006,679 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   52805,773 ±(99.9%) 475,302 ops/s [Average]
[info]   (min, avg, max) = (52610,642, 52805,773, 52903,050), stdev = 123,434
[info]   CI (99.9%): [52330,471, 53281,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   881,168 ±(99.9%) 7,797 MB/sec [Average]
[info]   (min, avg, max) = (877,992, 881,168, 882,899), stdev = 2,025
[info]   CI (99.9%): [873,371, 888,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   26264,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (26264,008, 26264,008, 26264,008), stdev = 0,001
[info]   CI (99.9%): [26264,007, 26264,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   941,696 ±(99.9%) 1420,559 MB/sec [Average]
[info]   (min, avg, max) = (671,978, 941,696, 1347,455), stdev = 368,915
[info]   CI (99.9%): [≈ 0, 2362,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28086,456 ±(99.9%) 42597,420 B/op [Average]
[info]   (min, avg, max) = (20000,249, 28086,456, 40209,527), stdev = 11062,415
[info]   CI (99.9%): [≈ 0, 70683,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,497 ±(99.9%) 3,118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,497, 1,863), stdev = 0,810
[info]   CI (99.9%): [≈ 0, 3,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51,51% complete, ETA 01:04:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51609,228 ops/s
[info] # Warmup Iteration   2: 62045,451 ops/s
[info] # Warmup Iteration   3: 62373,388 ops/s
[info] # Warmup Iteration   4: 61157,930 ops/s
[info] # Warmup Iteration   5: 62676,190 ops/s
[info] Iteration   1: 57869,451 ops/s
[info]                  ·gc.alloc.rate:               858,667 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18279,742 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 62920,141 ops/s
[info]                  ·gc.alloc.rate:               933,592 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16812,274 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 62645,945 ops/s
[info]                  ·gc.alloc.rate:                   929,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33738,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,523 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 62326,905 ops/s
[info]                  ·gc.alloc.rate:                   924,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16955,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,526 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 62026,505 ops/s
[info]                  ·gc.alloc.rate:               920,078 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34074,748 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   61557,789 ±(99.9%) 8043,874 ops/s [Average]
[info]   (min, avg, max) = (57869,451, 61557,789, 62920,141), stdev = 2088,969
[info]   CI (99.9%): [53513,915, 69601,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   913,327 ±(99.9%) 119,257 MB/sec [Average]
[info]   (min, avg, max) = (858,667, 913,327, 933,592), stdev = 30,971
[info]   CI (99.9%): [794,070, 1032,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (23352,006, 23352,007, 23352,008), stdev = 0,001
[info]   CI (99.9%): [23352,005, 23352,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   940,242 ±(99.9%) 1414,720 MB/sec [Average]
[info]   (min, avg, max) = (671,501, 940,242, 1342,856), stdev = 367,398
[info]   CI (99.9%): [≈ 0, 2354,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23972,053 ±(99.9%) 34993,169 B/op [Average]
[info]   (min, avg, max) = (16812,274, 23972,053, 34074,748), stdev = 9087,615
[info]   CI (99.9%): [≈ 0, 58965,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,210 ±(99.9%) 1,106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,210, 0,526), stdev = 0,287
[info]   CI (99.9%): [≈ 0, 1,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,71% complete, ETA 01:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74048,680 ops/s
[info] # Warmup Iteration   2: 104021,367 ops/s
[info] # Warmup Iteration   3: 104095,059 ops/s
[info] # Warmup Iteration   4: 103490,500 ops/s
[info] # Warmup Iteration   5: 104040,513 ops/s
[info] Iteration   1: 103475,453 ops/s
[info]                  ·gc.alloc.rate:                   1417,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20576,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,633 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 103904,110 ops/s
[info]                  ·gc.alloc.rate:               1423,329 MB/sec
[info]                  ·gc.alloc.rate.norm:          21559,985 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20501,558 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 104304,309 ops/s
[info]                  ·gc.alloc.rate:                   1428,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20442,664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,942 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 104150,493 ops/s
[info]                  ·gc.alloc.rate:               1426,777 MB/sec
[info]                  ·gc.alloc.rate.norm:          21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20492,817 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 104234,212 ops/s
[info]                  ·gc.alloc.rate:                   1427,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20486,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,314 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   104013,715 ±(99.9%) 1296,574 ops/s [Average]
[info]   (min, avg, max) = (103475,453, 104013,715, 104304,309), stdev = 336,716
[info]   CI (99.9%): [102717,141, 105310,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1424,815 ±(99.9%) 17,715 MB/sec [Average]
[info]   (min, avg, max) = (1417,450, 1424,815, 1428,812), stdev = 4,600
[info]   CI (99.9%): [1407,101, 1442,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560,008 ±(99.9%) 0,062 B/op [Average]
[info]   (min, avg, max) = (21559,985, 21560,008, 21560,023), stdev = 0,016
[info]   CI (99.9%): [21559,946, 21560,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,756 ±(99.9%) 6,425 MB/sec [Average]
[info]   (min, avg, max) = (1352,769, 1354,756, 1356,638), stdev = 1,669
[info]   CI (99.9%): [1348,331, 1361,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20500,000 ±(99.9%) 185,912 B/op [Average]
[info]   (min, avg, max) = (20442,664, 20500,000, 20576,206), stdev = 48,281
[info]   CI (99.9%): [20314,089, 20685,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,378 ±(99.9%) 1,580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,378, 0,942), stdev = 0,410
[info]   CI (99.9%): [≈ 0, 1,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,91% complete, ETA 01:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298181,382 ops/s
[info] # Warmup Iteration   2: 318733,633 ops/s
[info] # Warmup Iteration   3: 306961,328 ops/s
[info] # Warmup Iteration   4: 306610,388 ops/s
[info] # Warmup Iteration   5: 307895,444 ops/s
[info] Iteration   1: 308082,080 ops/s
[info]                  ·gc.alloc.rate:                   981,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6874,101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 308207,976 ops/s
[info]                  ·gc.alloc.rate:               982,365 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3432,433 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 306956,569 ops/s
[info]                  ·gc.alloc.rate:                   978,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6892,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 306416,498 ops/s
[info]                  ·gc.alloc.rate:               976,589 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3452,054 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 304829,790 ops/s
[info]                  ·gc.alloc.rate:                   971,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6940,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,215 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   306898,582 ±(99.9%) 5318,507 ops/s [Average]
[info]   (min, avg, max) = (304829,790, 306898,582, 308207,976), stdev = 1381,199
[info]   CI (99.9%): [301580,075, 312217,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   978,083 ±(99.9%) 17,279 MB/sec [Average]
[info]   (min, avg, max) = (971,342, 978,083, 982,365), stdev = 4,487
[info]   CI (99.9%): [960,804, 995,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5016,001, 5016,001, 5016,001), stdev = 0,001
[info]   CI (99.9%): [5016,001, 5016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,606 ±(99.9%) 1418,163 MB/sec [Average]
[info]   (min, avg, max) = (672,097, 1075,606, 1345,621), stdev = 368,293
[info]   CI (99.9%): [≈ 0, 2493,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5518,201 ±(99.9%) 7297,921 B/op [Average]
[info]   (min, avg, max) = (3432,433, 5518,201, 6940,135), stdev = 1895,247
[info]   CI (99.9%): [≈ 0, 12816,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,128 ±(99.9%) 0,537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,128, 0,320), stdev = 0,139
[info]   CI (99.9%): [≈ 0, 0,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52,11% complete, ETA 01:03:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 335130,935 ops/s
[info] # Warmup Iteration   2: 359651,730 ops/s
[info] # Warmup Iteration   3: 361096,868 ops/s
[info] # Warmup Iteration   4: 361369,790 ops/s
[info] # Warmup Iteration   5: 361381,209 ops/s
[info] Iteration   1: 362085,456 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 361153,014 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 362258,123 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 361358,979 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 361223,745 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   361615,864 ±(99.9%) 1988,766 ops/s [Average]
[info]   (min, avg, max) = (361153,014, 361615,864, 362258,123), stdev = 516,476
[info]   CI (99.9%): [359627,098, 363604,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52,31% complete, ETA 01:03:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63049,805 ops/s
[info] # Warmup Iteration   2: 79004,619 ops/s
[info] # Warmup Iteration   3: 79745,081 ops/s
[info] # Warmup Iteration   4: 80254,971 ops/s
[info] # Warmup Iteration   5: 80081,835 ops/s
[info] Iteration   1: 80016,540 ops/s
[info]                  ·gc.alloc.rate:                   1186,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343,980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13179,748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,409 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 80391,608 ops/s
[info]                  ·gc.alloc.rate:               1192,798 MB/sec
[info]                  ·gc.alloc.rate.norm:          23344,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26238,526 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 79406,278 ops/s
[info]                  ·gc.alloc.rate:                   1177,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26571,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,825 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   4: 80035,140 ops/s
[info]                  ·gc.alloc.rate:                   1187,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26372,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,409 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 80421,985 ops/s
[info]                  ·gc.alloc.rate:               1192,768 MB/sec
[info]                  ·gc.alloc.rate.norm:          23343,980 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13126,916 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   80054,310 ±(99.9%) 1576,759 ops/s [Average]
[info]   (min, avg, max) = (79406,278, 80054,310, 80421,985), stdev = 409,479
[info]   CI (99.9%): [78477,551, 81631,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1187,457 ±(99.9%) 23,593 MB/sec [Average]
[info]   (min, avg, max) = (1177,823, 1187,457, 1192,798), stdev = 6,127
[info]   CI (99.9%): [1163,864, 1211,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344,000 ±(99.9%) 0,081 B/op [Average]
[info]   (min, avg, max) = (23343,980, 23344,000, 23344,030), stdev = 0,021
[info]   CI (99.9%): [23343,919, 23344,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,663 ±(99.9%) 1414,113 MB/sec [Average]
[info]   (min, avg, max) = (670,019, 1072,663, 1341,192), stdev = 367,241
[info]   CI (99.9%): [≈ 0, 2486,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   21097,992 ±(99.9%) 27930,425 B/op [Average]
[info]   (min, avg, max) = (13126,916, 21097,992, 26571,883), stdev = 7253,443
[info]   CI (99.9%): [≈ 0, 49028,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,329 ±(99.9%) 1,328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,329, 0,825), stdev = 0,345
[info]   CI (99.9%): [≈ 0, 1,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 6,000), stdev = 2,387
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52,52% complete, ETA 01:02:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10940,048 ops/s
[info] # Warmup Iteration   2: 11384,166 ops/s
[info] # Warmup Iteration   3: 11555,356 ops/s
[info] # Warmup Iteration   4: 11511,545 ops/s
[info] # Warmup Iteration   5: 11524,308 ops/s
[info] Iteration   1: 11512,469 ops/s
[info]                  ·gc.alloc.rate:               285,340 MB/sec
[info]                  ·gc.alloc.rate.norm:          39010,939 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69929,348 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 11537,211 ops/s
[info]                  ·gc.alloc.rate:               285,999 MB/sec
[info]                  ·gc.alloc.rate.norm:          39008,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69783,914 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 11567,536 ops/s
[info]                  ·gc.alloc.rate:      286,683 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11502,457 ops/s
[info]                  ·gc.alloc.rate:                   285,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              39008,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69990,124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,324 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 11554,343 ops/s
[info]                  ·gc.alloc.rate:      286,334 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   11534,803 ±(99.9%) 105,527 ops/s [Average]
[info]   (min, avg, max) = (11502,457, 11534,803, 11567,536), stdev = 27,405
[info]   CI (99.9%): [11429,276, 11640,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   285,889 ±(99.9%) 2,572 MB/sec [Average]
[info]   (min, avg, max) = (285,087, 285,889, 286,683), stdev = 0,668
[info]   CI (99.9%): [283,316, 288,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   39008,618 ±(99.9%) 4,996 B/op [Average]
[info]   (min, avg, max) = (39008,035, 39008,618, 39010,939), stdev = 1,297
[info]   CI (99.9%): [39003,622, 39013,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,930 ±(99.9%) 1078,901 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,930, 511,642), stdev = 280,187
[info]   CI (99.9%): [≈ 0, 1385,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   41940,677 ±(99.9%) 147427,672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41940,677, 69990,124), stdev = 38286,498
[info]   CI (99.9%): [≈ 0, 189368,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,039), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,065 ±(99.9%) 9,168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,065, 5,324), stdev = 2,381
[info]   CI (99.9%): [≈ 0, 10,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52,72% complete, ETA 01:02:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23328,024 ops/s
[info] # Warmup Iteration   2: 29412,169 ops/s
[info] # Warmup Iteration   3: 29364,724 ops/s
[info] # Warmup Iteration   4: 29503,413 ops/s
[info] # Warmup Iteration   5: 29660,588 ops/s
[info] Iteration   1: 29694,413 ops/s
[info]                  ·gc.alloc.rate:                   1546,830 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71168,879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29175,407 ops/s
[info]                  ·gc.alloc.rate:                   1519,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108796,184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,123 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 29758,358 ops/s
[info]                  ·gc.alloc.rate:                   1550,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71166,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 29665,348 ops/s
[info]                  ·gc.alloc.rate:                   1545,353 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71455,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,313 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 29637,793 ops/s
[info]                  ·gc.alloc.rate:                   1544,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107360,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,105 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   29586,264 ±(99.9%) 901,053 ops/s [Average]
[info]   (min, avg, max) = (29175,407, 29586,264, 29758,358), stdev = 234,001
[info]   CI (99.9%): [28685,211, 30487,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1541,194 ±(99.9%) 47,296 MB/sec [Average]
[info]   (min, avg, max) = (1519,607, 1541,194, 1550,163), stdev = 12,283
[info]   CI (99.9%): [1493,898, 1588,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (81984,014, 81984,014, 81984,015), stdev = 0,001
[info]   CI (99.9%): [81984,012, 81984,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1614,762 ±(99.9%) 1421,901 MB/sec [Average]
[info]   (min, avg, max) = (1342,776, 1614,762, 2021,941), stdev = 369,263
[info]   CI (99.9%): [192,861, 3036,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   85989,504 ±(99.9%) 77671,910 B/op [Average]
[info]   (min, avg, max) = (71166,331, 85989,504, 108796,184), stdev = 20171,148
[info]   CI (99.9%): [8317,594, 163661,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,990 ±(99.9%) 4,644 B/op [Average]
[info]   (min, avg, max) = (1,101, 1,990, 3,313), stdev = 1,206
[info]   CI (99.9%): [≈ 0, 6,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52,92% complete, ETA 01:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22718,193 ops/s
[info] # Warmup Iteration   2: 33985,166 ops/s
[info] # Warmup Iteration   3: 33881,234 ops/s
[info] # Warmup Iteration   4: 33874,945 ops/s
[info] # Warmup Iteration   5: 34084,747 ops/s
[info] Iteration   1: 34005,314 ops/s
[info]                  ·gc.alloc.rate:                   1331,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62580,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,963 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33975,536 ops/s
[info]                  ·gc.alloc.rate:                   1329,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62680,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,964 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34096,905 ops/s
[info]                  ·gc.alloc.rate:                   1334,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62503,812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,922 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 34212,655 ops/s
[info]                  ·gc.alloc.rate:               1339,207 MB/sec
[info]                  ·gc.alloc.rate.norm:          61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62358,694 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 34124,772 ops/s
[info]                  ·gc.alloc.rate:               1335,630 MB/sec
[info]                  ·gc.alloc.rate.norm:          61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62560,058 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   34083,036 ±(99.9%) 366,986 ops/s [Average]
[info]   (min, avg, max) = (33975,536, 34083,036, 34212,655), stdev = 95,305
[info]   CI (99.9%): [33716,051, 34450,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1334,126 ±(99.9%) 14,194 MB/sec [Average]
[info]   (min, avg, max) = (1329,997, 1334,126, 1339,207), stdev = 3,686
[info]   CI (99.9%): [1319,932, 1348,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61608,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (61608,012, 61608,012, 61608,013), stdev = 0,001
[info]   CI (99.9%): [61608,011, 61608,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,230 ±(99.9%) 6,499 MB/sec [Average]
[info]   (min, avg, max) = (1352,146, 1354,230, 1356,270), stdev = 1,688
[info]   CI (99.9%): [1347,731, 1360,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62536,604 ±(99.9%) 454,704 B/op [Average]
[info]   (min, avg, max) = (62358,694, 62536,604, 62680,069), stdev = 118,085
[info]   CI (99.9%): [62081,900, 62991,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,770 ±(99.9%) 3,097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,770, 1,922), stdev = 0,804
[info]   CI (99.9%): [≈ 0, 3,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,12% complete, ETA 01:02:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484449,716 ops/s
[info] # Warmup Iteration   2: 530833,152 ops/s
[info] # Warmup Iteration   3: 530377,576 ops/s
[info] # Warmup Iteration   4: 533765,862 ops/s
[info] # Warmup Iteration   5: 532054,238 ops/s
[info] Iteration   1: 532807,309 ops/s
[info]                  ·gc.alloc.rate:               1386,568 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3970,552 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 525743,433 ops/s
[info]                  ·gc.alloc.rate:                   1368,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4023,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 528918,865 ops/s
[info]                  ·gc.alloc.rate:               1376,497 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4001,684 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 531730,088 ops/s
[info]                  ·gc.alloc.rate:                   1383,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3984,582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 532042,458 ops/s
[info]                  ·gc.alloc.rate:                   1384,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3986,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   530248,431 ±(99.9%) 11230,495 ops/s [Average]
[info]   (min, avg, max) = (525743,433, 530248,431, 532807,309), stdev = 2916,524
[info]   CI (99.9%): [519017,935, 541478,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1379,959 ±(99.9%) 29,188 MB/sec [Average]
[info]   (min, avg, max) = (1368,243, 1379,959, 1386,568), stdev = 7,580
[info]   CI (99.9%): [1350,771, 1409,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345,374 ±(99.9%) 5,721 MB/sec [Average]
[info]   (min, avg, max) = (1344,101, 1345,374, 1347,507), stdev = 1,486
[info]   CI (99.9%): [1339,653, 1351,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3993,431 ±(99.9%) 78,146 B/op [Average]
[info]   (min, avg, max) = (3970,552, 3993,431, 4023,904), stdev = 20,294
[info]   CI (99.9%): [3915,285, 4071,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,062 ±(99.9%) 0,239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,125), stdev = 0,062
[info]   CI (99.9%): [≈ 0, 0,300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53,32% complete, ETA 01:01:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13140,736 ops/s
[info] # Warmup Iteration   2: 25501,966 ops/s
[info] # Warmup Iteration   3: 25244,519 ops/s
[info] # Warmup Iteration   4: 25355,865 ops/s
[info] # Warmup Iteration   5: 25432,982 ops/s
[info] Iteration   1: 25580,526 ops/s
[info]                  ·gc.alloc.rate:                   1944,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124955,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,842 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 25634,362 ops/s
[info]                  ·gc.alloc.rate:                   1949,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,987 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124865,533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,834 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 25673,768 ops/s
[info]                  ·gc.alloc.rate:                   1951,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83172,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,276 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 25485,648 ops/s
[info]                  ·gc.alloc.rate:                   1937,745 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125786,341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,285 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 25108,851 ops/s
[info]                  ·gc.alloc.rate:               1908,748 MB/sec
[info]                  ·gc.alloc.rate.norm:          119656,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2037,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 127752,929 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   25496,631 ±(99.9%) 877,827 ops/s [Average]
[info]   (min, avg, max) = (25108,851, 25496,631, 25673,768), stdev = 227,969
[info]   CI (99.9%): [24618,804, 26374,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1938,459 ±(99.9%) 67,161 MB/sec [Average]
[info]   (min, avg, max) = (1908,748, 1938,459, 1951,843), stdev = 17,441
[info]   CI (99.9%): [1871,298, 2005,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119656,017 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (119656,016, 119656,017, 119656,018), stdev = 0,001
[info]   CI (99.9%): [119656,013, 119656,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1899,320 ±(99.9%) 1168,041 MB/sec [Average]
[info]   (min, avg, max) = (1356,717, 1899,320, 2037,910), stdev = 303,337
[info]   CI (99.9%): [731,279, 3067,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117306,507 ±(99.9%) 73612,276 B/op [Average]
[info]   (min, avg, max) = (83172,357, 117306,507, 127752,929), stdev = 19116,874
[info]   CI (99.9%): [43694,231, 190918,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,048 ±(99.9%) 6,609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,048, 3,842), stdev = 1,716
[info]   CI (99.9%): [≈ 0, 8,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53,52% complete, ETA 01:01:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26375,498 ops/s
[info] # Warmup Iteration   2: 31996,442 ops/s
[info] # Warmup Iteration   3: 32671,939 ops/s
[info] # Warmup Iteration   4: 32779,285 ops/s
[info] # Warmup Iteration   5: 32467,070 ops/s
[info] Iteration   1: 32827,696 ops/s
[info]                  ·gc.alloc.rate:                   1481,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64444,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,996 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 32815,480 ops/s
[info]                  ·gc.alloc.rate:                   1481,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64471,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,998 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 32872,860 ops/s
[info]                  ·gc.alloc.rate:                   1483,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64387,924 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,993 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 32581,389 ops/s
[info]                  ·gc.alloc.rate:                   1470,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65027,221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 32759,579 ops/s
[info]                  ·gc.alloc.rate:                   1478,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97138,964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,000 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   32771,401 ±(99.9%) 437,562 ops/s [Average]
[info]   (min, avg, max) = (32581,389, 32771,401, 32872,860), stdev = 113,633
[info]   CI (99.9%): [32333,839, 33208,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1479,011 ±(99.9%) 19,487 MB/sec [Average]
[info]   (min, avg, max) = (1470,593, 1479,011, 1483,610), stdev = 5,061
[info]   CI (99.9%): [1459,524, 1498,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   71032,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (71032,012, 71032,013, 71032,013), stdev = 0,001
[info]   CI (99.9%): [71032,011, 71032,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1480,228 ±(99.9%) 1165,606 MB/sec [Average]
[info]   (min, avg, max) = (1343,978, 1480,228, 2021,719), stdev = 302,704
[info]   CI (99.9%): [314,622, 2645,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   71094,013 ±(99.9%) 56072,550 B/op [Average]
[info]   (min, avg, max) = (64387,924, 71094,013, 97138,964), stdev = 14561,863
[info]   CI (99.9%): [15021,463, 127166,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,399 ±(99.9%) 2,095 B/op [Average]
[info]   (min, avg, max) = (0,998, 1,399, 1,996), stdev = 0,544
[info]   CI (99.9%): [≈ 0, 3,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53,72% complete, ETA 01:01:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61881,918 ops/s
[info] # Warmup Iteration   2: 74938,043 ops/s
[info] # Warmup Iteration   3: 76578,284 ops/s
[info] # Warmup Iteration   4: 77774,355 ops/s
[info] # Warmup Iteration   5: 77834,953 ops/s
[info] Iteration   1: 77613,079 ops/s
[info]                  ·gc.alloc.rate:                   1642,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,834 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27230,478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,422 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 77587,713 ops/s
[info]                  ·gc.alloc.rate:                   1642,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40885,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 77786,531 ops/s
[info]                  ·gc.alloc.rate:                   1646,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27224,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,264 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 77905,295 ops/s
[info]                  ·gc.alloc.rate:                   1649,088 MB/sec
[info]                  ·gc.alloc.rate.norm:              33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40826,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,421 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 77642,553 ops/s
[info]                  ·gc.alloc.rate:               1643,542 MB/sec
[info]                  ·gc.alloc.rate.norm:          33312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27348,932 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   77707,034 ±(99.9%) 519,659 ops/s [Average]
[info]   (min, avg, max) = (77587,713, 77707,034, 77905,295), stdev = 134,954
[info]   CI (99.9%): [77187,376, 78226,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1644,809 ±(99.9%) 10,990 MB/sec [Average]
[info]   (min, avg, max) = (1642,348, 1644,809, 1649,088), stdev = 2,854
[info]   CI (99.9%): [1633,819, 1655,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33312,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (33312,005, 33312,005, 33312,006), stdev = 0,001
[info]   CI (99.9%): [33312,005, 33312,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,901 ±(99.9%) 1418,499 MB/sec [Average]
[info]   (min, avg, max) = (1342,834, 1614,901, 2021,098), stdev = 368,380
[info]   CI (99.9%): [196,401, 3033,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32703,309 ±(99.9%) 28659,655 B/op [Average]
[info]   (min, avg, max) = (27224,538, 32703,309, 40885,898), stdev = 7442,822
[info]   CI (99.9%): [4043,653, 61362,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,675 ±(99.9%) 2,179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,675, 1,267), stdev = 0,566
[info]   CI (99.9%): [≈ 0, 2,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,92% complete, ETA 01:01:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132326,298 ops/s
[info] # Warmup Iteration   2: 179005,971 ops/s
[info] # Warmup Iteration   3: 179618,585 ops/s
[info] # Warmup Iteration   4: 179497,012 ops/s
[info] # Warmup Iteration   5: 179263,887 ops/s
[info] Iteration   1: 177807,316 ops/s
[info]                  ·gc.alloc.rate:                   1347,520 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11971,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,368 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 178950,526 ops/s
[info]                  ·gc.alloc.rate:                   1356,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11904,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,549 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 179945,234 ops/s
[info]                  ·gc.alloc.rate:                   1363,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11848,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,546 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 179585,710 ops/s
[info]                  ·gc.alloc.rate:               1361,001 MB/sec
[info]                  ·gc.alloc.rate.norm:          11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11879,748 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 179311,179 ops/s
[info]                  ·gc.alloc.rate:                   1359,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11909,192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,183 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   179119,993 ±(99.9%) 3155,594 ops/s [Average]
[info]   (min, avg, max) = (177807,316, 179119,993, 179945,234), stdev = 819,498
[info]   CI (99.9%): [175964,399, 182275,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1357,484 ±(99.9%) 23,821 MB/sec [Average]
[info]   (min, avg, max) = (1347,520, 1357,484, 1363,592), stdev = 6,186
[info]   CI (99.9%): [1333,663, 1381,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11928,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11928,002, 11928,002, 11928,002), stdev = 0,001
[info]   CI (99.9%): [11928,002, 11928,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,582 ±(99.9%) 6,661 MB/sec [Average]
[info]   (min, avg, max) = (1352,436, 1354,582, 1356,935), stdev = 1,730
[info]   CI (99.9%): [1347,921, 1361,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11902,668 ±(99.9%) 175,372 B/op [Average]
[info]   (min, avg, max) = (11848,037, 11902,668, 11971,513), stdev = 45,544
[info]   CI (99.9%): [11727,296, 12078,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,329 ±(99.9%) 0,917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,329, 0,549), stdev = 0,238
[info]   CI (99.9%): [≈ 0, 1,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,12% complete, ETA 01:00:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1362684,893 ops/s
[info] # Warmup Iteration   2: 1460833,828 ops/s
[info] # Warmup Iteration   3: 1460829,173 ops/s
[info] # Warmup Iteration   4: 1461941,994 ops/s
[info] # Warmup Iteration   5: 1445303,260 ops/s
[info] Iteration   1: 1461772,682 ops/s
[info]                  ·gc.alloc.rate:                   1210,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1447,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,067 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1388654,052 ops/s
[info]                  ·gc.alloc.rate:               1150,464 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 761,796 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1467572,843 ops/s
[info]                  ·gc.alloc.rate:                   1215,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1441,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1466752,638 ops/s
[info]                  ·gc.alloc.rate:               1215,269 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1443,123 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1465586,017 ops/s
[info]                  ·gc.alloc.rate:                   1214,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,415 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1445,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1450067,647 ±(99.9%) 132473,877 ops/s [Average]
[info]   (min, avg, max) = (1388654,052, 1450067,647, 1467572,843), stdev = 34403,045
[info]   CI (99.9%): [1317593,769, 1582541,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1201,374 ±(99.9%) 109,830 MB/sec [Average]
[info]   (min, avg, max) = (1150,464, 1201,374, 1215,787), stdev = 28,522
[info]   CI (99.9%): [1091,545, 1311,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,000, 1304,000, 1304,000), stdev = 0,001
[info]   CI (99.9%): [1304,000, 1304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210,308 ±(99.9%) 1158,538 MB/sec [Average]
[info]   (min, avg, max) = (672,101, 1210,308, 1346,415), stdev = 300,869
[info]   CI (99.9%): [51,770, 2368,847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1307,914 ±(99.9%) 1175,589 B/op [Average]
[info]   (min, avg, max) = (761,796, 1307,914, 1447,237), stdev = 305,297
[info]   CI (99.9%): [132,325, 2483,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,040 ±(99.9%) 0,154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,040, 0,089), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54,33% complete, ETA 01:00:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1416150,521 ops/s
[info] # Warmup Iteration   2: 1486564,566 ops/s
[info] # Warmup Iteration   3: 1509958,406 ops/s
[info] # Warmup Iteration   4: 1507773,201 ops/s
[info] # Warmup Iteration   5: 1507628,265 ops/s
[info] Iteration   1: 1514340,095 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1510826,808 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1509399,122 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1498157,700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1510224,893 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1508589,724 ±(99.9%) 23598,145 ops/s [Average]
[info]   (min, avg, max) = (1498157,700, 1508589,724, 1514340,095), stdev = 6128,363
[info]   CI (99.9%): [1484991,578, 1532187,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54,53% complete, ETA 01:00:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112092,639 ops/s
[info] # Warmup Iteration   2: 164907,673 ops/s
[info] # Warmup Iteration   3: 165649,978 ops/s
[info] # Warmup Iteration   4: 165711,437 ops/s
[info] # Warmup Iteration   5: 152345,983 ops/s
[info] Iteration   1: 164733,716 ops/s
[info]                  ·gc.alloc.rate:                   1535,649 MB/sec
[info]                  ·gc.alloc.rate.norm:              14672,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19383,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 165500,608 ops/s
[info]                  ·gc.alloc.rate:                   1542,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              14672,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12878,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,594 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 165189,081 ops/s
[info]                  ·gc.alloc.rate:                   1539,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              14672,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12911,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,397 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 164624,996 ops/s
[info]                  ·gc.alloc.rate:               1534,715 MB/sec
[info]                  ·gc.alloc.rate.norm:          14672,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12962,089 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 165256,246 ops/s
[info]                  ·gc.alloc.rate:                   1540,376 MB/sec
[info]                  ·gc.alloc.rate.norm:              14672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19386,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,793 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   165060,929 ±(99.9%) 1421,345 ops/s [Average]
[info]   (min, avg, max) = (164624,996, 165060,929, 165500,608), stdev = 369,119
[info]   CI (99.9%): [163639,584, 166482,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1538,680 ±(99.9%) 13,123 MB/sec [Average]
[info]   (min, avg, max) = (1534,715, 1538,680, 1542,852), stdev = 3,408
[info]   CI (99.9%): [1525,557, 1551,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   14672,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14672,002, 14672,003, 14672,003), stdev = 0,001
[info]   CI (99.9%): [14672,002, 14672,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1625,858 ±(99.9%) 1427,928 MB/sec [Average]
[info]   (min, avg, max) = (1354,264, 1625,858, 2035,324), stdev = 370,828
[info]   CI (99.9%): [197,931, 3053,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   15504,455 ±(99.9%) 13641,589 B/op [Average]
[info]   (min, avg, max) = (12878,594, 15504,455, 19386,356), stdev = 3542,677
[info]   CI (99.9%): [1862,867, 29146,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,436 ±(99.9%) 1,132 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,436, 0,793), stdev = 0,294
[info]   CI (99.9%): [≈ 0, 1,568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54,73% complete, ETA 01:00:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31766,973 ops/s
[info] # Warmup Iteration   2: 33704,048 ops/s
[info] # Warmup Iteration   3: 33877,933 ops/s
[info] # Warmup Iteration   4: 33598,466 ops/s
[info] # Warmup Iteration   5: 33689,619 ops/s
[info] Iteration   1: 33358,715 ops/s
[info]                  ·gc.alloc.rate:                   440,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24134,092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,373 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         7,000 ms
[info] Iteration   2: 33890,783 ops/s
[info]                  ·gc.alloc.rate:               447,854 MB/sec
[info]                  ·gc.alloc.rate.norm:          20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23757,453 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 33966,298 ops/s
[info]                  ·gc.alloc.rate:      448,877 MB/sec
[info]                  ·gc.alloc.rate.norm: 20800,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 33708,548 ops/s
[info]                  ·gc.alloc.rate:                   445,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31503,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150,672 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33834,363 ops/s
[info]                  ·gc.alloc.rate:               447,080 MB/sec
[info]                  ·gc.alloc.rate.norm:          20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31388,183 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   33751,741 ±(99.9%) 920,395 ops/s [Average]
[info]   (min, avg, max) = (33358,715, 33751,741, 33966,298), stdev = 239,024
[info]   CI (99.9%): [32831,346, 34672,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   446,014 ±(99.9%) 12,250 MB/sec [Average]
[info]   (min, avg, max) = (440,771, 446,014, 448,877), stdev = 3,181
[info]   CI (99.9%): [433,764, 458,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   20800,012 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20800,012, 20800,012, 20800,012), stdev = 0,001
[info]   CI (99.9%): [20800,012, 20800,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,471 ±(99.9%) 1068,588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,471, 674,736), stdev = 277,509
[info]   CI (99.9%): [≈ 0, 1543,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22156,669 ±(99.9%) 49834,868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22156,669, 31503,618), stdev = 12941,957
[info]   CI (99.9%): [≈ 0, 71991,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,647 ±(99.9%) 5,554 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,647, 3,227), stdev = 1,442
[info]   CI (99.9%): [≈ 0, 6,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   30,209 ±(99.9%) 259,306 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30,209, 150,672), stdev = 67,341
[info]   CI (99.9%): [≈ 0, 289,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,400, 7,000), stdev = 2,881
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,93% complete, ETA 00:59:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31602,492 ops/s
[info] # Warmup Iteration   2: 45635,768 ops/s
[info] # Warmup Iteration   3: 45751,351 ops/s
[info] # Warmup Iteration   4: 44163,067 ops/s
[info] # Warmup Iteration   5: 45140,257 ops/s
[info] Iteration   1: 45749,275 ops/s
[info]                  ·gc.alloc.rate:                   1640,795 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69855,418 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,432 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45695,714 ops/s
[info]                  ·gc.alloc.rate:                   1639,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46667,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,151 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45853,351 ops/s
[info]                  ·gc.alloc.rate:                   1644,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46552,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,715 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 45805,932 ops/s
[info]                  ·gc.alloc.rate:                   1643,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69943,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,430 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 45812,437 ops/s
[info]                  ·gc.alloc.rate:               1642,798 MB/sec
[info]                  ·gc.alloc.rate.norm:          56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46660,842 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   45783,342 ±(99.9%) 236,567 ops/s [Average]
[info]   (min, avg, max) = (45695,714, 45783,342, 45853,351), stdev = 61,436
[info]   CI (99.9%): [45546,775, 46019,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1642,150 ±(99.9%) 8,609 MB/sec [Average]
[info]   (min, avg, max) = (1639,115, 1642,150, 1644,896), stdev = 2,236
[info]   CI (99.9%): [1633,540, 1650,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56456,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (56456,009, 56456,009, 56456,010), stdev = 0,001
[info]   CI (99.9%): [56456,007, 56456,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1626,992 ±(99.9%) 1427,048 MB/sec [Average]
[info]   (min, avg, max) = (1354,924, 1626,992, 2035,688), stdev = 370,600
[info]   CI (99.9%): [199,943, 3054,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   55935,932 ±(99.9%) 49083,719 B/op [Average]
[info]   (min, avg, max) = (46552,567, 55935,932, 69943,212), stdev = 12746,886
[info]   CI (99.9%): [6852,213, 105019,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,146 ±(99.9%) 3,147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,146, 2,151), stdev = 0,817
[info]   CI (99.9%): [≈ 0, 4,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,13% complete, ETA 00:59:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 730902,810 ops/s
[info] # Warmup Iteration   2: 795397,034 ops/s
[info] # Warmup Iteration   3: 796473,203 ops/s
[info] # Warmup Iteration   4: 783270,011 ops/s
[info] # Warmup Iteration   5: 799682,944 ops/s
[info] Iteration   1: 744542,961 ops/s
[info]                  ·gc.alloc.rate:                   1453,269 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4262,407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,132 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 761970,089 ops/s
[info]                  ·gc.alloc.rate:               1487,442 MB/sec
[info]                  ·gc.alloc.rate.norm:          3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2778,131 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 779670,403 ops/s
[info]                  ·gc.alloc.rate:                   1521,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2717,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 801668,030 ops/s
[info]                  ·gc.alloc.rate:                   1564,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2645,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 798963,950 ops/s
[info]                  ·gc.alloc.rate:                   1559,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3986,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   777363,087 ±(99.9%) 93863,273 ops/s [Average]
[info]   (min, avg, max) = (744542,961, 777363,087, 801668,030), stdev = 24375,994
[info]   CI (99.9%): [683499,814, 871226,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1517,407 ±(99.9%) 183,411 MB/sec [Average]
[info]   (min, avg, max) = (1453,269, 1517,407, 1564,929), stdev = 47,631
[info]   CI (99.9%): [1333,996, 1700,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,001, 3072,001, 3072,001), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1615,884 ±(99.9%) 1421,185 MB/sec [Average]
[info]   (min, avg, max) = (1345,153, 1615,884, 2023,939), stdev = 369,077
[info]   CI (99.9%): [194,699, 3037,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3278,049 ±(99.9%) 3004,182 B/op [Average]
[info]   (min, avg, max) = (2645,644, 3278,049, 4262,407), stdev = 780,177
[info]   CI (99.9%): [273,867, 6282,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,101 ±(99.9%) 0,247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,101, 0,168), stdev = 0,064
[info]   CI (99.9%): [≈ 0, 0,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,800, 5,000), stdev = 1,924
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55,33% complete, ETA 00:59:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16333,141 ops/s
[info] # Warmup Iteration   2: 32201,314 ops/s
[info] # Warmup Iteration   3: 32536,741 ops/s
[info] # Warmup Iteration   4: 32494,263 ops/s
[info] # Warmup Iteration   5: 32443,539 ops/s
[info] Iteration   1: 32713,660 ops/s
[info]                  ·gc.alloc.rate:                   2380,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              114512,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97842,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 32542,935 ops/s
[info]                  ·gc.alloc.rate:                   2368,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              114512,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131281,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,014 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 32665,662 ops/s
[info]                  ·gc.alloc.rate:               2376,581 MB/sec
[info]                  ·gc.alloc.rate.norm:          114512,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2037,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 98172,619 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 32590,728 ops/s
[info]                  ·gc.alloc.rate:                   2371,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              114512,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131301,182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,010 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 32647,971 ops/s
[info]                  ·gc.alloc.rate:                   2375,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              114512,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     98352,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,007 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   32632,191 ±(99.9%) 256,092 ops/s [Average]
[info]   (min, avg, max) = (32542,935, 32632,191, 32713,660), stdev = 66,506
[info]   CI (99.9%): [32376,099, 32888,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2374,235 ±(99.9%) 17,997 MB/sec [Average]
[info]   (min, avg, max) = (2368,009, 2374,235, 2380,114), stdev = 4,674
[info]   CI (99.9%): [2356,238, 2392,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114512,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (114512,012, 114512,013, 114512,014), stdev = 0,001
[info]   CI (99.9%): [114512,011, 114512,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2308,977 ±(99.9%) 1434,116 MB/sec [Average]
[info]   (min, avg, max) = (2033,637, 2308,977, 2719,113), stdev = 372,435
[info]   CI (99.9%): [874,861, 3743,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   111389,936 ±(99.9%) 69959,626 B/op [Average]
[info]   (min, avg, max) = (97842,310, 111389,936, 131301,182), stdev = 18168,293
[info]   CI (99.9%): [41430,311, 181349,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,807 ±(99.9%) 4,228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,807, 3,004), stdev = 1,098
[info]   CI (99.9%): [≈ 0, 6,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55,53% complete, ETA 00:58:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33028,012 ops/s
[info] # Warmup Iteration   2: 39544,464 ops/s
[info] # Warmup Iteration   3: 39533,023 ops/s
[info] # Warmup Iteration   4: 39751,531 ops/s
[info] # Warmup Iteration   5: 38808,117 ops/s
[info] Iteration   1: 39624,516 ops/s
[info]                  ·gc.alloc.rate:               1654,491 MB/sec
[info]                  ·gc.alloc.rate.norm:          65720,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53387,823 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 39687,154 ops/s
[info]                  ·gc.alloc.rate:                   1657,253 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79983,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,651 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 39862,057 ops/s
[info]                  ·gc.alloc.rate:                   1664,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53148,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,644 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 39811,970 ops/s
[info]                  ·gc.alloc.rate:               1662,508 MB/sec
[info]                  ·gc.alloc.rate.norm:          65720,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2022,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 79944,671 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 39750,096 ops/s
[info]                  ·gc.alloc.rate:                   1659,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     53458,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,648 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   39747,158 ±(99.9%) 365,571 ops/s [Average]
[info]   (min, avg, max) = (39624,516, 39747,158, 39862,057), stdev = 94,938
[info]   CI (99.9%): [39381,587, 40112,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1659,724 ±(99.9%) 15,342 MB/sec [Average]
[info]   (min, avg, max) = (1654,491, 1659,724, 1664,438), stdev = 3,984
[info]   CI (99.9%): [1644,382, 1675,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65720,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (65720,011, 65720,011, 65720,012), stdev = 0,001
[info]   CI (99.9%): [65720,010, 65720,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1615,915 ±(99.9%) 1419,178 MB/sec [Average]
[info]   (min, avg, max) = (1344,030, 1615,915, 2022,347), stdev = 368,556
[info]   CI (99.9%): [196,737, 3035,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   63984,459 ±(99.9%) 56171,665 B/op [Average]
[info]   (min, avg, max) = (53148,047, 63984,459, 79983,075), stdev = 14587,603
[info]   CI (99.9%): [7812,793, 120156,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,989 ±(99.9%) 3,475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,989, 1,651), stdev = 0,902
[info]   CI (99.9%): [≈ 0, 4,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,73% complete, ETA 00:58:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305924,757 ops/s
[info] # Warmup Iteration   2: 406814,185 ops/s
[info] # Warmup Iteration   3: 409281,461 ops/s
[info] # Warmup Iteration   4: 409544,417 ops/s
[info] # Warmup Iteration   5: 410049,564 ops/s
[info] Iteration   1: 410850,433 ops/s
[info]                  ·gc.alloc.rate:                   1142,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5179,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,159 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 412024,202 ops/s
[info]                  ·gc.alloc.rate:               1145,593 MB/sec
[info]                  ·gc.alloc.rate.norm:          4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2583,978 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 410018,896 ops/s
[info]                  ·gc.alloc.rate:                   1139,952 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5195,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 410710,228 ops/s
[info]                  ·gc.alloc.rate:                   1142,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5190,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 410839,661 ops/s
[info]                  ·gc.alloc.rate:               1142,169 MB/sec
[info]                  ·gc.alloc.rate.norm:          4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2595,062 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   410888,684 ±(99.9%) 2777,837 ops/s [Average]
[info]   (min, avg, max) = (410018,896, 410888,684, 412024,202), stdev = 721,395
[info]   CI (99.9%): [408110,847, 413666,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1142,410 ±(99.9%) 7,797 MB/sec [Average]
[info]   (min, avg, max) = (1139,952, 1142,410, 1145,593), stdev = 2,025
[info]   CI (99.9%): [1134,612, 1150,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4376,001, 4376,001, 4376,001), stdev = 0,001
[info]   CI (99.9%): [4376,001, 4376,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,780 ±(99.9%) 1426,747 MB/sec [Average]
[info]   (min, avg, max) = (676,459, 1082,780, 1354,555), stdev = 370,522
[info]   CI (99.9%): [≈ 0, 2509,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4148,934 ±(99.9%) 5481,624 B/op [Average]
[info]   (min, avg, max) = (2583,978, 4148,934, 5195,375), stdev = 1423,560
[info]   CI (99.9%): [≈ 0, 9630,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,144 ±(99.9%) 0,550 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,144, 0,320), stdev = 0,143
[info]   CI (99.9%): [≈ 0, 0,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,94% complete, ETA 00:58:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1570867,253 ops/s
[info] # Warmup Iteration   2: 1684687,488 ops/s
[info] # Warmup Iteration   3: 1672437,655 ops/s
[info] # Warmup Iteration   4: 1596359,416 ops/s
[info] # Warmup Iteration   5: 1697889,119 ops/s
[info] Iteration   1: 1701088,208 ops/s
[info]                  ·gc.alloc.rate:                   994,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1245,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1693417,966 ops/s
[info]                  ·gc.alloc.rate:               989,831 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 624,635 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1673405,499 ops/s
[info]                  ·gc.alloc.rate:                   978,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1264,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1697593,104 ops/s
[info]                  ·gc.alloc.rate:               992,361 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 623,098 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1694320,209 ops/s
[info]                  ·gc.alloc.rate:                   990,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1248,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1691964,997 ±(99.9%) 41607,526 ops/s [Average]
[info]   (min, avg, max) = (1673405,499, 1691964,997, 1701088,208), stdev = 10805,342
[info]   CI (99.9%): [1650357,471, 1733572,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   989,008 ±(99.9%) 24,452 MB/sec [Average]
[info]   (min, avg, max) = (978,096, 989,008, 994,327), stdev = 6,350
[info]   CI (99.9%): [964,557, 1013,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,593 ±(99.9%) 1418,420 MB/sec [Average]
[info]   (min, avg, max) = (672,046, 1075,593, 1345,588), stdev = 368,359
[info]   CI (99.9%): [≈ 0, 2494,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1001,109 ±(99.9%) 1326,356 B/op [Average]
[info]   (min, avg, max) = (623,098, 1001,109, 1264,211), stdev = 344,450
[info]   CI (99.9%): [≈ 0, 2327,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,082 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,039), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56,14% complete, ETA 00:58:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1781622,642 ops/s
[info] # Warmup Iteration   2: 1899864,482 ops/s
[info] # Warmup Iteration   3: 1906784,703 ops/s
[info] # Warmup Iteration   4: 1903322,048 ops/s
[info] # Warmup Iteration   5: 1904913,078 ops/s
[info] Iteration   1: 1909129,339 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1903561,458 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1909822,262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1904535,579 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1900694,834 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1905548,695 ±(99.9%) 14866,163 ops/s [Average]
[info]   (min, avg, max) = (1900694,834, 1905548,695, 1909822,262), stdev = 3860,695
[info]   CI (99.9%): [1890682,532, 1920414,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56,34% complete, ETA 00:57:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177842,402 ops/s
[info] # Warmup Iteration   2: 266638,744 ops/s
[info] # Warmup Iteration   3: 269370,134 ops/s
[info] # Warmup Iteration   4: 266892,816 ops/s
[info] # Warmup Iteration   5: 268439,144 ops/s
[info] Iteration   1: 268626,733 ops/s
[info]                  ·gc.alloc.rate:                   1739,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7929,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 268672,955 ops/s
[info]                  ·gc.alloc.rate:                   1739,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11906,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 269735,778 ops/s
[info]                  ·gc.alloc.rate:                   1746,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11868,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,121 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 269482,937 ops/s
[info]                  ·gc.alloc.rate:                   1745,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7928,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 268469,731 ops/s
[info]                  ·gc.alloc.rate:                   1738,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11944,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,244 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   268997,627 ±(99.9%) 2196,928 ops/s [Average]
[info]   (min, avg, max) = (268469,731, 268997,627, 269735,778), stdev = 570,535
[info]   CI (99.9%): [266800,699, 271194,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1741,959 ±(99.9%) 14,308 MB/sec [Average]
[info]   (min, avg, max) = (1738,715, 1741,959, 1746,761), stdev = 3,716
[info]   CI (99.9%): [1727,651, 1756,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10192,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10192,002, 10192,002, 10192,002), stdev = 0,001
[info]   CI (99.9%): [10192,001, 10192,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1763,035 ±(99.9%) 1432,713 MB/sec [Average]
[info]   (min, avg, max) = (1353,353, 1763,035, 2037,718), stdev = 372,071
[info]   CI (99.9%): [330,322, 3195,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10315,651 ±(99.9%) 8389,482 B/op [Average]
[info]   (min, avg, max) = (7928,403, 10315,651, 11944,700), stdev = 2178,722
[info]   CI (99.9%): [1926,169, 18705,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,025, 0,042), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,146 ±(99.9%) 0,211 B/op [Average]
[info]   (min, avg, max) = (0,121, 0,146, 0,244), stdev = 0,055
[info]   CI (99.9%): [≈ 0, 0,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56,54% complete, ETA 00:57:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47589,869 ops/s
[info] # Warmup Iteration   2: 51099,060 ops/s
[info] # Warmup Iteration   3: 51917,118 ops/s
[info] # Warmup Iteration   4: 52142,533 ops/s
[info] # Warmup Iteration   5: 51821,661 ops/s
[info] Iteration   1: 51861,189 ops/s
[info]                  ·gc.alloc.rate:               347,396 MB/sec
[info]                  ·gc.alloc.rate.norm:          10544,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15524,277 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 52149,991 ops/s
[info]                  ·gc.alloc.rate:      349,391 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 52001,711 ops/s
[info]                  ·gc.alloc.rate:               348,350 MB/sec
[info]                  ·gc.alloc.rate.norm:          10544,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15483,088 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 51766,090 ops/s
[info]                  ·gc.alloc.rate:               346,814 MB/sec
[info]                  ·gc.alloc.rate.norm:          10544,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15552,460 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 52003,136 ops/s
[info]                  ·gc.alloc.rate:      348,358 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   51956,423 ±(99.9%) 567,882 ops/s [Average]
[info]   (min, avg, max) = (51766,090, 51956,423, 52149,991), stdev = 147,477
[info]   CI (99.9%): [51388,542, 52524,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   348,062 ±(99.9%) 3,821 MB/sec [Average]
[info]   (min, avg, max) = (346,814, 348,062, 349,391), stdev = 0,992
[info]   CI (99.9%): [344,241, 351,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   10544,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10544,008, 10544,008, 10544,008), stdev = 0,001
[info]   CI (99.9%): [10544,007, 10544,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,912 ±(99.9%) 1078,839 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,912, 511,552), stdev = 280,171
[info]   CI (99.9%): [≈ 0, 1385,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9311,965 ±(99.9%) 32733,007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9311,965, 15552,460), stdev = 8500,658
[info]   CI (99.9%): [≈ 0, 42044,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56,74% complete, ETA 00:57:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71226,680 ops/s
[info] # Warmup Iteration   2: 89778,543 ops/s
[info] # Warmup Iteration   3: 89822,128 ops/s
[info] # Warmup Iteration   4: 90034,240 ops/s
[info] # Warmup Iteration   5: 89733,593 ops/s
[info] Iteration   1: 89766,873 ops/s
[info]                  ·gc.alloc.rate:               1803,715 MB/sec
[info]                  ·gc.alloc.rate.norm:          31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2010,569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35250,717 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 90057,382 ops/s
[info]                  ·gc.alloc.rate:                   1809,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23444,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,455 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 89407,564 ops/s
[info]                  ·gc.alloc.rate:                   1796,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35475,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,366 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 90021,365 ops/s
[info]                  ·gc.alloc.rate:                   1808,882 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35314,706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,728 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 89896,528 ops/s
[info]                  ·gc.alloc.rate:               1806,451 MB/sec
[info]                  ·gc.alloc.rate.norm:          31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23608,907 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   89829,942 ±(99.9%) 1009,989 ops/s [Average]
[info]   (min, avg, max) = (89407,564, 89829,942, 90057,382), stdev = 262,291
[info]   CI (99.9%): [88819,953, 90839,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1805,003 ±(99.9%) 20,600 MB/sec [Average]
[info]   (min, avg, max) = (1796,368, 1805,003, 1809,598), stdev = 5,350
[info]   CI (99.9%): [1784,403, 1825,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (31624,005, 31624,005, 31624,005), stdev = 0,001
[info]   CI (99.9%): [31624,004, 31624,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1747,164 ±(99.9%) 1413,511 MB/sec [Average]
[info]   (min, avg, max) = (1341,532, 1747,164, 2019,988), stdev = 367,084
[info]   CI (99.9%): [333,653, 3160,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   30618,729 ±(99.9%) 24932,952 B/op [Average]
[info]   (min, avg, max) = (23444,222, 30618,729, 35475,094), stdev = 6475,009
[info]   CI (99.9%): [5685,777, 55551,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,510 ±(99.9%) 2,343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,510, 1,455), stdev = 0,609
[info]   CI (99.9%): [≈ 0, 2,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56,94% complete, ETA 00:57:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65109,281 ops/s
[info] # Warmup Iteration   2: 94849,069 ops/s
[info] # Warmup Iteration   3: 92799,044 ops/s
[info] # Warmup Iteration   4: 94274,742 ops/s
[info] # Warmup Iteration   5: 95468,012 ops/s
[info] Iteration   1: 95460,598 ops/s
[info]                  ·gc.alloc.rate:                   1075,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              17736,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22249,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,686 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 95669,201 ops/s
[info]                  ·gc.alloc.rate:               1078,036 MB/sec
[info]                  ·gc.alloc.rate.norm:          17736,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11106,914 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 95460,445 ops/s
[info]                  ·gc.alloc.rate:                   1075,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              17736,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22284,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,686 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 95557,756 ops/s
[info]                  ·gc.alloc.rate:               1076,877 MB/sec
[info]                  ·gc.alloc.rate.norm:          17736,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,904 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22282,117 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 95467,440 ops/s
[info]                  ·gc.alloc.rate:                   1075,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              17736,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11156,349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   95523,088 ±(99.9%) 352,269 ops/s [Average]
[info]   (min, avg, max) = (95460,445, 95523,088, 95669,201), stdev = 91,483
[info]   CI (99.9%): [95170,819, 95875,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1076,429 ±(99.9%) 3,953 MB/sec [Average]
[info]   (min, avg, max) = (1075,637, 1076,429, 1078,036), stdev = 1,027
[info]   CI (99.9%): [1072,477, 1080,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17736,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17736,004, 17736,004, 17736,005), stdev = 0,001
[info]   CI (99.9%): [17736,003, 17736,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1081,164 ±(99.9%) 1424,622 MB/sec [Average]
[info]   (min, avg, max) = (675,105, 1081,164, 1352,904), stdev = 369,970
[info]   CI (99.9%): [≈ 0, 2505,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17815,929 ±(99.9%) 23496,403 B/op [Average]
[info]   (min, avg, max) = (11106,914, 17815,929, 22284,423), stdev = 6101,941
[info]   CI (99.9%): [≈ 0, 41312,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,343 ±(99.9%) 1,322 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,343, 0,686), stdev = 0,343
[info]   CI (99.9%): [≈ 0, 1,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,14% complete, ETA 00:56:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98798,295 ops/s
[info] # Warmup Iteration   2: 116127,654 ops/s
[info] # Warmup Iteration   3: 107769,529 ops/s
[info] # Warmup Iteration   4: 115460,742 ops/s
[info] # Warmup Iteration   5: 115863,096 ops/s
[info] Iteration   1: 115936,221 ops/s
[info]                  ·gc.alloc.rate:                   1220,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18193,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,283 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 116574,404 ops/s
[info]                  ·gc.alloc.rate:               1227,577 MB/sec
[info]                  ·gc.alloc.rate.norm:          16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9046,891 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 116267,566 ops/s
[info]                  ·gc.alloc.rate:                   1224,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18141,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,845 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 115961,498 ops/s
[info]                  ·gc.alloc.rate:                   1221,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18198,135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,283 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 115834,838 ops/s
[info]                  ·gc.alloc.rate:                   1219,877 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18237,285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,566 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   116114,906 ±(99.9%) 1168,504 ops/s [Average]
[info]   (min, avg, max) = (115834,838, 116114,906, 116574,404), stdev = 303,457
[info]   CI (99.9%): [114946,401, 117283,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1222,860 ±(99.9%) 12,074 MB/sec [Average]
[info]   (min, avg, max) = (1219,877, 1222,860, 1227,577), stdev = 3,136
[info]   CI (99.9%): [1210,786, 1234,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16576,004, 16576,004, 16576,004), stdev = 0,001
[info]   CI (99.9%): [16576,003, 16576,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206,648 ±(99.9%) 1155,202 MB/sec [Average]
[info]   (min, avg, max) = (669,990, 1206,648, 1342,136), stdev = 300,002
[info]   CI (99.9%): [51,446, 2361,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16363,344 ±(99.9%) 15749,766 B/op [Average]
[info]   (min, avg, max) = (9046,891, 16363,344, 18237,285), stdev = 4090,164
[info]   CI (99.9%): [613,578, 32113,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,395 ±(99.9%) 1,238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,395, 0,845), stdev = 0,321
[info]   CI (99.9%): [≈ 0, 1,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57,34% complete, ETA 00:56:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28410,177 ops/s
[info] # Warmup Iteration   2: 44278,073 ops/s
[info] # Warmup Iteration   3: 44296,314 ops/s
[info] # Warmup Iteration   4: 44391,695 ops/s
[info] # Warmup Iteration   5: 44532,495 ops/s
[info] Iteration   1: 44367,616 ops/s
[info]                  ·gc.alloc.rate:                   2204,725 MB/sec
[info]                  ·gc.alloc.rate.norm:              78208,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72078,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,954 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 44549,703 ops/s
[info]                  ·gc.alloc.rate:                   2213,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              78208,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95870,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,412 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 44736,416 ops/s
[info]                  ·gc.alloc.rate:                   2222,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              78208,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71659,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,732 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44561,420 ops/s
[info]                  ·gc.alloc.rate:                   2214,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              78208,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71987,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,206 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 44414,357 ops/s
[info]                  ·gc.alloc.rate:               2206,592 MB/sec
[info]                  ·gc.alloc.rate.norm:          78208,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2039,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72296,866 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   44525,903 ±(99.9%) 556,817 ops/s [Average]
[info]   (min, avg, max) = (44367,616, 44525,903, 44736,416), stdev = 144,604
[info]   CI (99.9%): [43969,086, 45082,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2212,480 ±(99.9%) 27,739 MB/sec [Average]
[info]   (min, avg, max) = (2204,725, 2212,480, 2222,832), stdev = 7,204
[info]   CI (99.9%): [2184,742, 2240,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78208,010 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (78208,009, 78208,010, 78208,011), stdev = 0,001
[info]   CI (99.9%): [78208,007, 78208,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2172,110 ±(99.9%) 1166,103 MB/sec [Average]
[info]   (min, avg, max) = (2031,919, 2172,110, 2713,808), stdev = 302,833
[info]   CI (99.9%): [1006,007, 3338,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76778,573 ±(99.9%) 41106,535 B/op [Average]
[info]   (min, avg, max) = (71659,450, 76778,573, 95870,613), stdev = 10675,237
[info]   CI (99.9%): [35672,037, 117885,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,125), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,061 ±(99.9%) 6,769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,061, 4,412), stdev = 1,758
[info]   CI (99.9%): [≈ 0, 8,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57,55% complete, ETA 00:56:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73634,350 ops/s
[info] # Warmup Iteration   2: 84659,898 ops/s
[info] # Warmup Iteration   3: 85999,900 ops/s
[info] # Warmup Iteration   4: 81359,677 ops/s
[info] # Warmup Iteration   5: 85848,935 ops/s
[info] Iteration   1: 85632,886 ops/s
[info]                  ·gc.alloc.rate:               1486,459 MB/sec
[info]                  ·gc.alloc.rate.norm:          27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,831 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24606,701 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 85845,183 ops/s
[info]                  ·gc.alloc.rate:                   1490,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24572,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,763 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 85709,422 ops/s
[info]                  ·gc.alloc.rate:               1487,733 MB/sec
[info]                  ·gc.alloc.rate.norm:          27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24621,581 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 85569,606 ops/s
[info]                  ·gc.alloc.rate:                   1485,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37066,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,531 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 85755,482 ops/s
[info]                  ·gc.alloc.rate:               1488,472 MB/sec
[info]                  ·gc.alloc.rate.norm:          27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24693,950 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   85702,516 ±(99.9%) 411,678 ops/s [Average]
[info]   (min, avg, max) = (85569,606, 85702,516, 85845,183), stdev = 106,911
[info]   CI (99.9%): [85290,838, 86114,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1487,695 ±(99.9%) 7,126 MB/sec [Average]
[info]   (min, avg, max) = (1485,509, 1487,695, 1490,300), stdev = 1,851
[info]   CI (99.9%): [1480,569, 1494,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   27320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27320,005, 27320,005, 27320,005), stdev = 0,001
[info]   CI (99.9%): [27320,004, 27320,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1476,175 ±(99.9%) 1160,884 MB/sec [Average]
[info]   (min, avg, max) = (1338,831, 1476,175, 2015,458), stdev = 301,478
[info]   CI (99.9%): [315,291, 2637,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27112,122 ±(99.9%) 21427,780 B/op [Average]
[info]   (min, avg, max) = (24572,088, 27112,122, 37066,290), stdev = 5564,726
[info]   CI (99.9%): [5684,342, 48539,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,459 ±(99.9%) 2,636 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,459, 1,531), stdev = 0,685
[info]   CI (99.9%): [≈ 0, 3,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57,75% complete, ETA 00:56:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112808,380 ops/s
[info] # Warmup Iteration   2: 138331,383 ops/s
[info] # Warmup Iteration   3: 136802,020 ops/s
[info] # Warmup Iteration   4: 138032,933 ops/s
[info] # Warmup Iteration   5: 136255,133 ops/s
[info] Iteration   1: 137009,768 ops/s
[info]                  ·gc.alloc.rate:                   605,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5876,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 136193,841 ops/s
[info]                  ·gc.alloc.rate:                   602,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7775,042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47,601 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 133774,521 ops/s
[info]                  ·gc.alloc.rate:                   591,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7915,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,490 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 135849,081 ops/s
[info]                  ·gc.alloc.rate:                   600,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7763,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,241 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 131829,906 ops/s
[info]                  ·gc.alloc.rate:                   583,033 MB/sec
[info]                  ·gc.alloc.rate.norm:              6960,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          683,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8161,732 B/op
[info]                  ·gc.churn.PS_Old_Gen:             0,139 MB/sec
[info]                  ·gc.churn.PS_Old_Gen.norm:        1,664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,994 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         23,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   134931,423 ±(99.9%) 8103,100 ops/s [Average]
[info]   (min, avg, max) = (131829,906, 134931,423, 137009,768), stdev = 2104,349
[info]   CI (99.9%): [126828,323, 143034,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   596,684 ±(99.9%) 35,712 MB/sec [Average]
[info]   (min, avg, max) = (583,033, 596,684, 605,804), stdev = 9,274
[info]   CI (99.9%): [560,972, 632,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6960,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6960,003, 6960,003, 6960,003), stdev = 0,001
[info]   CI (99.9%): [6960,003, 6960,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   642,176 ±(99.9%) 282,048 MB/sec [Average]
[info]   (min, avg, max) = (511,482, 642,176, 683,701), stdev = 73,247
[info]   CI (99.9%): [360,128, 924,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7498,474 ±(99.9%) 3545,964 B/op [Average]
[info]   (min, avg, max) = (5876,347, 7498,474, 8161,732), stdev = 920,876
[info]   CI (99.9%): [3952,509, 11044,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Old_Gen":
[info]   0,028 ±(99.9%) 0,240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,028, 0,139), stdev = 0,062
[info]   CI (99.9%): [≈ 0, 0,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Old_Gen.norm":
[info]   0,333 ±(99.9%) 2,865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,333, 1,664), stdev = 0,744
[info]   CI (99.9%): [≈ 0, 3,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,856 ±(99.9%) 7,025 MB/sec [Average]
[info]   (min, avg, max) = (0,014, 0,856, 4,119), stdev = 1,824
[info]   CI (99.9%): [≈ 0, 7,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9,897 ±(99.9%) 81,169 B/op [Average]
[info]   (min, avg, max) = (0,160, 9,897, 47,601), stdev = 21,079
[info]   CI (99.9%): [≈ 0, 91,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 3,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   29,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5,800, 23,000), stdev = 9,680
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,95% complete, ETA 00:55:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151829,287 ops/s
[info] # Warmup Iteration   2: 193829,282 ops/s
[info] # Warmup Iteration   3: 193554,600 ops/s
[info] # Warmup Iteration   4: 193913,817 ops/s
[info] # Warmup Iteration   5: 193951,783 ops/s
[info] Iteration   1: 193940,484 ops/s
[info]                  ·gc.alloc.rate:               287,840 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4151,299 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 194178,273 ops/s
[info]                  ·gc.alloc.rate:      288,213 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 194242,563 ops/s
[info]                  ·gc.alloc.rate:               288,263 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4144,740 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 193396,121 ops/s
[info]                  ·gc.alloc.rate:                   287,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4163,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 194363,689 ops/s
[info]                  ·gc.alloc.rate:      288,465 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   194024,226 ±(99.9%) 1476,566 ops/s [Average]
[info]   (min, avg, max) = (193396,121, 194024,226, 194363,689), stdev = 383,460
[info]   CI (99.9%): [192547,660, 195500,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   287,967 ±(99.9%) 2,152 MB/sec [Average]
[info]   (min, avg, max) = (287,052, 287,967, 288,465), stdev = 0,559
[info]   CI (99.9%): [285,815, 290,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2336,002, 2336,002, 2336,002), stdev = 0,001
[info]   CI (99.9%): [2336,002, 2336,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   306,908 ±(99.9%) 1078,824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,908, 511,559), stdev = 280,167
[info]   CI (99.9%): [≈ 0, 1385,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2491,811 ±(99.9%) 8759,103 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2491,811, 4163,016), stdev = 2274,711
[info]   CI (99.9%): [≈ 0, 11250,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,034 ±(99.9%) 0,292 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,034, 0,169), stdev = 0,076
[info]   CI (99.9%): [≈ 0, 0,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58,15% complete, ETA 00:55:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 707725,439 ops/s
[info] # Warmup Iteration   2: 714127,554 ops/s
[info] # Warmup Iteration   3: 786028,144 ops/s
[info] # Warmup Iteration   4: 764544,363 ops/s
[info] # Warmup Iteration   5: 784062,808 ops/s
[info] Iteration   1: 782367,439 ops/s
[info]                  ·gc.alloc.rate:                   970,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1349,426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 694826,971 ops/s
[info]                  ·gc.alloc.rate:                   861,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3037,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,141 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 758084,819 ops/s
[info]                  ·gc.alloc.rate:               940,182 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1391,268 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 783395,476 ops/s
[info]                  ·gc.alloc.rate:                   971,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2692,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 664548,707 ops/s
[info]                  ·gc.alloc.rate:               824,113 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1587,042 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   736644,682 ±(99.9%) 208099,049 ops/s [Average]
[info]   (min, avg, max) = (664548,707, 736644,682, 783395,476), stdev = 54042,662
[info]   CI (99.9%): [528545,634, 944743,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   913,618 ±(99.9%) 258,276 MB/sec [Average]
[info]   (min, avg, max) = (824,113, 913,618, 971,688), stdev = 67,073
[info]   CI (99.9%): [655,342, 1171,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,001, 1952,001, 1952,001), stdev = 0,001
[info]   CI (99.9%): [1952,000, 1952,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938,449 ±(99.9%) 1413,805 MB/sec [Average]
[info]   (min, avg, max) = (670,032, 938,449, 1340,939), stdev = 367,161
[info]   CI (99.9%): [≈ 0, 2352,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2011,551 ±(99.9%) 3056,098 B/op [Average]
[info]   (min, avg, max) = (1349,426, 2011,551, 3037,387), stdev = 793,659
[info]   CI (99.9%): [≈ 0, 5067,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,062 ±(99.9%) 0,261 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,141), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58,35% complete, ETA 00:55:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 721021,651 ops/s
[info] # Warmup Iteration   2: 780374,161 ops/s
[info] # Warmup Iteration   3: 777128,763 ops/s
[info] # Warmup Iteration   4: 775003,340 ops/s
[info] # Warmup Iteration   5: 773853,528 ops/s
[info] Iteration   1: 775146,366 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 780220,101 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 776429,769 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 778359,316 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 775329,735 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   777097,057 ±(99.9%) 8330,349 ops/s [Average]
[info]   (min, avg, max) = (775146,366, 777097,057, 780220,101), stdev = 2163,365
[info]   CI (99.9%): [768766,708, 785427,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58,55% complete, ETA 00:54:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173829,690 ops/s
[info] # Warmup Iteration   2: 220635,647 ops/s
[info] # Warmup Iteration   3: 221893,437 ops/s
[info] # Warmup Iteration   4: 222468,262 ops/s
[info] # Warmup Iteration   5: 198646,032 ops/s
[info] Iteration   1: 220725,500 ops/s
[info]                  ·gc.alloc.rate:                   721,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4792,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,239 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 221979,627 ops/s
[info]                  ·gc.alloc.rate:                   725,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4765,653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 222782,171 ops/s
[info]                  ·gc.alloc.rate:                   728,069 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4728,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,147 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 221882,109 ops/s
[info]                  ·gc.alloc.rate:               725,210 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4748,237 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 222218,379 ops/s
[info]                  ·gc.alloc.rate:                   726,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1335,958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9463,291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,442 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   221917,557 ±(99.9%) 2897,057 ops/s [Average]
[info]   (min, avg, max) = (220725,500, 221917,557, 222782,171), stdev = 752,356
[info]   CI (99.9%): [219020,500, 224814,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   725,287 ±(99.9%) 9,357 MB/sec [Average]
[info]   (min, avg, max) = (721,416, 725,287, 728,069), stdev = 2,430
[info]   CI (99.9%): [715,930, 734,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5144,002, 5144,002, 5144,002), stdev = 0,001
[info]   CI (99.9%): [5144,002, 5144,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   803,794 ±(99.9%) 1145,536 MB/sec [Average]
[info]   (min, avg, max) = (669,330, 803,794, 1335,958), stdev = 297,492
[info]   CI (99.9%): [≈ 0, 1949,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5699,685 ±(99.9%) 8101,941 B/op [Average]
[info]   (min, avg, max) = (4728,996, 5699,685, 9463,291), stdev = 2104,048
[info]   CI (99.9%): [≈ 0, 13801,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,929 ±(99.9%) 7,733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,929, 4,521), stdev = 2,008
[info]   CI (99.9%): [≈ 0, 8,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,625 ±(99.9%) 55,141 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,625, 32,239), stdev = 14,320
[info]   CI (99.9%): [≈ 0, 61,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58,75% complete, ETA 00:54:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24298,602 ops/s
[info] # Warmup Iteration   2: 25611,522 ops/s
[info] # Warmup Iteration   3: 25618,652 ops/s
[info] # Warmup Iteration   4: 25428,532 ops/s
[info] # Warmup Iteration   5: 25755,093 ops/s
[info] Iteration   1: 25682,836 ops/s
[info]                  ·gc.alloc.rate:      143,325 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25710,154 ops/s
[info]                  ·gc.alloc.rate:               143,493 MB/sec
[info]                  ·gc.alloc.rate.norm:          8784,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31316,600 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 25723,953 ops/s
[info]                  ·gc.alloc.rate:      143,560 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25685,116 ops/s
[info]                  ·gc.alloc.rate:      143,351 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25664,449 ops/s
[info]                  ·gc.alloc.rate:      143,236 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,016 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   25693,302 ±(99.9%) 90,971 ops/s [Average]
[info]   (min, avg, max) = (25664,449, 25693,302, 25723,953), stdev = 23,625
[info]   CI (99.9%): [25602,331, 25784,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   143,393 ±(99.9%) 0,506 MB/sec [Average]
[info]   (min, avg, max) = (143,236, 143,393, 143,560), stdev = 0,131
[info]   CI (99.9%): [142,887, 143,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8784,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (8784,016, 8784,016, 8784,017), stdev = 0,001
[info]   CI (99.9%): [8784,014, 8784,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   102,316 ±(99.9%) 880,968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,316, 511,578), stdev = 228,785
[info]   CI (99.9%): [≈ 0, 983,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6263,320 ±(99.9%) 53929,074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6263,320, 31316,600), stdev = 14005,209
[info]   CI (99.9%): [≈ 0, 60192,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   1,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58,95% complete, ETA 00:54:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114249,152 ops/s
[info] # Warmup Iteration   2: 145039,247 ops/s
[info] # Warmup Iteration   3: 147221,991 ops/s
[info] # Warmup Iteration   4: 147143,368 ops/s
[info] # Warmup Iteration   5: 146987,061 ops/s
[info] Iteration   1: 146641,606 ops/s
[info]                  ·gc.alloc.rate:                   1805,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21627,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 147026,124 ops/s
[info]                  ·gc.alloc.rate:                   1810,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14397,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 146866,042 ops/s
[info]                  ·gc.alloc.rate:                   1808,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21644,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 146643,355 ops/s
[info]                  ·gc.alloc.rate:                   1806,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21722,607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,894 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 146761,318 ops/s
[info]                  ·gc.alloc.rate:               1807,095 MB/sec
[info]                  ·gc.alloc.rate.norm:          19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14486,666 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   146787,689 ±(99.9%) 626,420 ops/s [Average]
[info]   (min, avg, max) = (146641,606, 146787,689, 147026,124), stdev = 162,679
[info]   CI (99.9%): [146161,269, 147414,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1807,789 ±(99.9%) 7,824 MB/sec [Average]
[info]   (min, avg, max) = (1805,983, 1807,789, 1810,758), stdev = 2,032
[info]   CI (99.9%): [1799,965, 1815,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19384,003, 19384,003, 19384,003), stdev = 0,001
[info]   CI (99.9%): [19384,002, 19384,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1750,898 ±(99.9%) 1417,239 MB/sec [Average]
[info]   (min, avg, max) = (1344,940, 1750,898, 2024,074), stdev = 368,052
[info]   CI (99.9%): [333,659, 3168,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   18775,831 ±(99.9%) 15234,908 B/op [Average]
[info]   (min, avg, max) = (14397,463, 18775,831, 21722,607), stdev = 3956,457
[info]   CI (99.9%): [3540,923, 34010,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,313 ±(99.9%) 1,305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,313, 0,894), stdev = 0,339
[info]   CI (99.9%): [≈ 0, 1,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,15% complete, ETA 00:54:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148310,324 ops/s
[info] # Warmup Iteration   2: 202335,725 ops/s
[info] # Warmup Iteration   3: 204800,558 ops/s
[info] # Warmup Iteration   4: 205156,508 ops/s
[info] # Warmup Iteration   5: 205407,806 ops/s
[info] Iteration   1: 204909,240 ops/s
[info]                  ·gc.alloc.rate:                   1084,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10381,687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 201732,604 ops/s
[info]                  ·gc.alloc.rate:                   1067,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10553,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,325 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 204967,580 ops/s
[info]                  ·gc.alloc.rate:               1084,417 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5194,490 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 204359,354 ops/s
[info]                  ·gc.alloc.rate:               1081,356 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10429,330 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 202401,230 ops/s
[info]                  ·gc.alloc.rate:               1071,079 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5267,430 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   203674,001 ±(99.9%) 5794,495 ops/s [Average]
[info]   (min, avg, max) = (201732,604, 203674,001, 204967,580), stdev = 1504,812
[info]   CI (99.9%): [197879,506, 209468,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1077,704 ±(99.9%) 30,495 MB/sec [Average]
[info]   (min, avg, max) = (1067,420, 1077,704, 1084,417), stdev = 7,919
[info]   CI (99.9%): [1047,209, 1108,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8328,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8328,002, 8328,002, 8328,002), stdev = 0,001
[info]   CI (99.9%): [8328,002, 8328,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,460 ±(99.9%) 1425,524 MB/sec [Average]
[info]   (min, avg, max) = (676,392, 1082,460, 1354,204), stdev = 370,204
[info]   CI (99.9%): [≈ 0, 2507,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8365,221 ±(99.9%) 11020,453 B/op [Average]
[info]   (min, avg, max) = (5194,490, 8365,221, 10553,169), stdev = 2861,977
[info]   CI (99.9%): [≈ 0, 19385,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,129 ±(99.9%) 0,680 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,129, 0,325), stdev = 0,177
[info]   CI (99.9%): [≈ 0, 0,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,36% complete, ETA 00:53:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 489534,609 ops/s
[info] # Warmup Iteration   2: 531290,623 ops/s
[info] # Warmup Iteration   3: 532846,445 ops/s
[info] # Warmup Iteration   4: 532746,815 ops/s
[info] # Warmup Iteration   5: 534094,679 ops/s
[info] Iteration   1: 532415,174 ops/s
[info]                  ·gc.alloc.rate:               1033,706 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1988,777 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 530308,624 ops/s
[info]                  ·gc.alloc.rate:                   1029,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,173 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3989,251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,247 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 533304,961 ops/s
[info]                  ·gc.alloc.rate:               1035,501 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1983,426 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 533233,428 ops/s
[info]                  ·gc.alloc.rate:                   1035,425 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3967,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 534027,904 ops/s
[info]                  ·gc.alloc.rate:               1036,758 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,969 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1980,731 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   532658,018 ±(99.9%) 5514,911 ops/s [Average]
[info]   (min, avg, max) = (530308,624, 532658,018, 534027,904), stdev = 1432,205
[info]   CI (99.9%): [527143,107, 538172,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1034,221 ±(99.9%) 10,561 MB/sec [Average]
[info]   (min, avg, max) = (1029,716, 1034,221, 1036,758), stdev = 2,743
[info]   CI (99.9%): [1023,661, 1044,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3056,001, 3056,001, 3056,001), stdev = 0,001
[info]   CI (99.9%): [3056,001, 3056,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,029 ±(99.9%) 1417,196 MB/sec [Average]
[info]   (min, avg, max) = (671,969, 941,029, 1344,223), stdev = 368,041
[info]   CI (99.9%): [≈ 0, 2358,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2781,918 ±(99.9%) 4205,667 B/op [Average]
[info]   (min, avg, max) = (1980,731, 2781,918, 3989,251), stdev = 1092,198
[info]   CI (99.9%): [≈ 0, 6987,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,074 ±(99.9%) 0,425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,074, 0,247), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59,56% complete, ETA 00:53:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42448,508 ops/s
[info] # Warmup Iteration   2: 76095,619 ops/s
[info] # Warmup Iteration   3: 75532,857 ops/s
[info] # Warmup Iteration   4: 75923,212 ops/s
[info] # Warmup Iteration   5: 74864,034 ops/s
[info] Iteration   1: 76686,111 ops/s
[info]                  ·gc.alloc.rate:                   3235,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69695,443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,709 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 76687,692 ops/s
[info]                  ·gc.alloc.rate:                   3235,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,355 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69765,617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,282 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 76719,419 ops/s
[info]                  ·gc.alloc.rate:                   3237,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69800,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,708 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 75705,788 ops/s
[info]                  ·gc.alloc.rate:                   3194,705 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56610,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,865 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 75941,361 ops/s
[info]                  ·gc.alloc.rate:                   3204,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70565,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,863 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   76348,074 ±(99.9%) 1872,077 ops/s [Average]
[info]   (min, avg, max) = (75705,788, 76348,074, 76719,419), stdev = 486,172
[info]   CI (99.9%): [74475,998, 78220,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3221,489 ±(99.9%) 78,776 MB/sec [Average]
[info]   (min, avg, max) = (3194,705, 3221,489, 3237,096), stdev = 20,458
[info]   CI (99.9%): [3142,714, 3300,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66408,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66408,005, 66408,005, 66408,006), stdev = 0,001
[info]   CI (99.9%): [66408,005, 66408,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3265,170 ±(99.9%) 1166,358 MB/sec [Average]
[info]   (min, avg, max) = (2723,359, 3265,170, 3404,663), stdev = 302,899
[info]   CI (99.9%): [2098,812, 4431,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67287,470 ±(99.9%) 23023,998 B/op [Average]
[info]   (min, avg, max) = (56610,170, 67287,470, 70565,816), stdev = 5979,259
[info]   CI (99.9%): [44263,472, 90311,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,285 ±(99.9%) 1,626 B/op [Average]
[info]   (min, avg, max) = (0,863, 1,285, 1,709), stdev = 0,422
[info]   CI (99.9%): [≈ 0, 2,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59,76% complete, ETA 00:53:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 126894,927 ops/s
[info] # Warmup Iteration   2: 143381,957 ops/s
[info] # Warmup Iteration   3: 139863,859 ops/s
[info] # Warmup Iteration   4: 145331,606 ops/s
[info] # Warmup Iteration   5: 143306,349 ops/s
[info] Iteration   1: 145560,671 ops/s
[info]                  ·gc.alloc.rate:                   1638,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14533,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,450 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 138813,960 ops/s
[info]                  ·gc.alloc.rate:                   1562,901 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22875,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,708 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 139579,727 ops/s
[info]                  ·gc.alloc.rate:                   1571,515 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15180,098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,469 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 144838,777 ops/s
[info]                  ·gc.alloc.rate:               1630,826 MB/sec
[info]                  ·gc.alloc.rate.norm:          17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14650,517 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 145438,184 ops/s
[info]                  ·gc.alloc.rate:                   1637,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21914,115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,225 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   142846,264 ±(99.9%) 12913,429 ops/s [Average]
[info]   (min, avg, max) = (138813,960, 142846,264, 145560,671), stdev = 3353,577
[info]   CI (99.9%): [129932,835, 155759,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1608,269 ±(99.9%) 145,266 MB/sec [Average]
[info]   (min, avg, max) = (1562,901, 1608,269, 1638,758), stdev = 37,725
[info]   CI (99.9%): [1463,002, 1753,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17720,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17720,003, 17720,003, 17720,003), stdev = 0,001
[info]   CI (99.9%): [17720,003, 17720,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,236 ±(99.9%) 1423,735 MB/sec [Average]
[info]   (min, avg, max) = (1344,082, 1616,236, 2024,882), stdev = 369,740
[info]   CI (99.9%): [192,501, 3039,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17830,791 ±(99.9%) 16123,911 B/op [Average]
[info]   (min, avg, max) = (14533,647, 17830,791, 22875,578), stdev = 4187,329
[info]   CI (99.9%): [1706,880, 33954,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,371 ±(99.9%) 1,034 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,371, 0,708), stdev = 0,269
[info]   CI (99.9%): [≈ 0, 1,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59,96% complete, ETA 00:53:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 167364,458 ops/s
[info] # Warmup Iteration   2: 211986,606 ops/s
[info] # Warmup Iteration   3: 211480,301 ops/s
[info] # Warmup Iteration   4: 207043,472 ops/s
[info] # Warmup Iteration   5: 212695,866 ops/s
[info] Iteration   1: 212539,966 ops/s
[info]                  ·gc.alloc.rate:                   728,056 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4996,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,030 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 212299,192 ops/s
[info]                  ·gc.alloc.rate:                   727,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5002,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 212818,966 ops/s
[info]                  ·gc.alloc.rate:               729,046 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4970,769 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 212448,092 ops/s
[info]                  ·gc.alloc.rate:                   727,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9953,399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 213879,096 ops/s
[info]                  ·gc.alloc.rate:               732,647 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4940,957 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   212797,062 ±(99.9%) 2440,706 ops/s [Average]
[info]   (min, avg, max) = (212299,192, 212797,062, 213879,096), stdev = 633,844
[info]   CI (99.9%): [210356,356, 215237,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   728,975 ±(99.9%) 8,267 MB/sec [Average]
[info]   (min, avg, max) = (727,327, 728,975, 732,647), stdev = 2,147
[info]   CI (99.9%): [720,707, 737,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,002, 5392,002, 5392,002), stdev = 0,001
[info]   CI (99.9%): [5392,002, 5392,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   807,289 ±(99.9%) 1154,207 MB/sec [Average]
[info]   (min, avg, max) = (671,361, 807,289, 1343,480), stdev = 299,744
[info]   CI (99.9%): [≈ 0, 1961,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5972,931 ±(99.9%) 8568,773 B/op [Average]
[info]   (min, avg, max) = (4940,957, 5972,931, 9953,399), stdev = 2225,283
[info]   CI (99.9%): [≈ 0, 14541,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,701 ±(99.9%) 5,768 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,701, 3,380), stdev = 1,498
[info]   CI (99.9%): [≈ 0, 6,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,191 ±(99.9%) 42,715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,191, 25,030), stdev = 11,093
[info]   CI (99.9%): [≈ 0, 47,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,16% complete, ETA 00:52:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226874,545 ops/s
[info] # Warmup Iteration   2: 302282,081 ops/s
[info] # Warmup Iteration   3: 278969,533 ops/s
[info] # Warmup Iteration   4: 303886,157 ops/s
[info] # Warmup Iteration   5: 303976,821 ops/s
[info] Iteration   1: 303767,515 ops/s
[info]                  ·gc.alloc.rate:               299,526 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2650,403 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 304780,164 ops/s
[info]                  ·gc.alloc.rate:                   300,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2641,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,215 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 304031,653 ops/s
[info]                  ·gc.alloc.rate:      299,794 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 302662,112 ops/s
[info]                  ·gc.alloc.rate:               298,461 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,568 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2660,156 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 304210,910 ops/s
[info]                  ·gc.alloc.rate:      299,944 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   303890,471 ±(99.9%) 3006,310 ops/s [Average]
[info]   (min, avg, max) = (302662,112, 303890,471, 304780,164), stdev = 780,729
[info]   CI (99.9%): [300884,161, 306896,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   299,652 ±(99.9%) 2,934 MB/sec [Average]
[info]   (min, avg, max) = (298,461, 299,652, 300,537), stdev = 0,762
[info]   CI (99.9%): [296,719, 302,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1552,001, 1552,001, 1552,001), stdev = 0,001
[info]   CI (99.9%): [1552,001, 1552,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   306,935 ±(99.9%) 1078,919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,935, 511,596), stdev = 280,192
[info]   CI (99.9%): [≈ 0, 1385,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1590,499 ±(99.9%) 5590,882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1590,499, 2660,156), stdev = 1451,934
[info]   CI (99.9%): [≈ 0, 7181,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,043 ±(99.9%) 0,370 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,043, 0,215), stdev = 0,096
[info]   CI (99.9%): [≈ 0, 0,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,36% complete, ETA 00:52:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1027858,105 ops/s
[info] # Warmup Iteration   2: 1082962,658 ops/s
[info] # Warmup Iteration   3: 1107039,926 ops/s
[info] # Warmup Iteration   4: 1101428,062 ops/s
[info] # Warmup Iteration   5: 1102991,266 ops/s
[info] Iteration   1: 1101655,570 ops/s
[info]                  ·gc.alloc.rate:                   817,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,119 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1102504,110 ops/s
[info]                  ·gc.alloc.rate:               818,244 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 960,458 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1096994,088 ops/s
[info]                  ·gc.alloc.rate:                   814,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1929,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1096555,522 ops/s
[info]                  ·gc.alloc.rate:               813,763 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 964,654 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1097240,698 ops/s
[info]                  ·gc.alloc.rate:               814,191 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 964,020 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1098989,998 ±(99.9%) 10963,291 ops/s [Average]
[info]   (min, avg, max) = (1096555,522, 1098989,998, 1102504,110), stdev = 2847,132
[info]   CI (99.9%): [1088026,706, 1109953,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   815,563 ±(99.9%) 8,257 MB/sec [Average]
[info]   (min, avg, max) = (813,763, 815,563, 818,244), stdev = 2,144
[info]   CI (99.9%): [807,306, 823,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1168,000, 1168,000, 1168,000), stdev = 0,001
[info]   CI (99.9%): [1168,000, 1168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,297 ±(99.9%) 1156,992 MB/sec [Average]
[info]   (min, avg, max) = (672,000, 807,297, 1344,785), stdev = 300,467
[info]   CI (99.9%): [≈ 0, 1964,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1156,516 ±(99.9%) 1663,757 B/op [Average]
[info]   (min, avg, max) = (960,458, 1156,516, 1929,425), stdev = 432,072
[info]   CI (99.9%): [≈ 0, 2820,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,042 ±(99.9%) 0,224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,119), stdev = 0,058
[info]   CI (99.9%): [≈ 0, 0,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60,56% complete, ETA 00:52:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1108642,710 ops/s
[info] # Warmup Iteration   2: 1190842,449 ops/s
[info] # Warmup Iteration   3: 1189954,609 ops/s
[info] # Warmup Iteration   4: 1187702,249 ops/s
[info] # Warmup Iteration   5: 1187729,710 ops/s
[info] Iteration   1: 1190237,443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1189788,946 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1190901,162 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1185753,363 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1190438,439 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1189423,870 ±(99.9%) 8049,491 ops/s [Average]
[info]   (min, avg, max) = (1185753,363, 1189423,870, 1190901,162), stdev = 2090,427
[info]   CI (99.9%): [1181374,379, 1197473,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60,76% complete, ETA 00:52:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217797,049 ops/s
[info] # Warmup Iteration   2: 325017,050 ops/s
[info] # Warmup Iteration   3: 324803,192 ops/s
[info] # Warmup Iteration   4: 324452,450 ops/s
[info] # Warmup Iteration   5: 324889,738 ops/s
[info] Iteration   1: 325189,633 ops/s
[info]                  ·gc.alloc.rate:                   887,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3267,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,403 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 323936,191 ops/s
[info]                  ·gc.alloc.rate:                   884,202 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6563,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 322863,724 ops/s
[info]                  ·gc.alloc.rate:               881,198 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3294,141 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 321802,039 ops/s
[info]                  ·gc.alloc.rate:                   878,411 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,096 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3306,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,204 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 323737,196 ops/s
[info]                  ·gc.alloc.rate:                   883,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6576,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   323505,757 ±(99.9%) 4866,587 ops/s [Average]
[info]   (min, avg, max) = (321802,039, 323505,757, 325189,633), stdev = 1263,837
[info]   CI (99.9%): [318639,170, 328372,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   883,039 ±(99.9%) 13,320 MB/sec [Average]
[info]   (min, avg, max) = (878,411, 883,039, 887,646), stdev = 3,459
[info]   CI (99.9%): [869,718, 896,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4296,001, 4296,001, 4296,001), stdev = 0,001
[info]   CI (99.9%): [4296,001, 4296,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   946,129 ±(99.9%) 1426,227 MB/sec [Average]
[info]   (min, avg, max) = (675,121, 946,129, 1352,928), stdev = 370,387
[info]   CI (99.9%): [≈ 0, 2372,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4601,600 ±(99.9%) 6919,233 B/op [Average]
[info]   (min, avg, max) = (3267,431, 4601,600, 6576,834), stdev = 1796,903
[info]   CI (99.9%): [≈ 0, 11520,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,162 ±(99.9%) 0,589 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,162, 0,403), stdev = 0,153
[info]   CI (99.9%): [≈ 0, 0,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60,97% complete, ETA 00:51:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46949,040 ops/s
[info] # Warmup Iteration   2: 50255,126 ops/s
[info] # Warmup Iteration   3: 50377,617 ops/s
[info] # Warmup Iteration   4: 50187,391 ops/s
[info] # Warmup Iteration   5: 50429,579 ops/s
[info] Iteration   1: 50304,556 ops/s
[info]                  ·gc.alloc.rate:      156,475 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 50074,771 ops/s
[info]                  ·gc.alloc.rate:               155,776 MB/sec
[info]                  ·gc.alloc.rate.norm:          4896,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16078,151 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 48503,844 ops/s
[info]                  ·gc.alloc.rate:      150,867 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 50163,200 ops/s
[info]                  ·gc.alloc.rate:      156,054 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 49673,227 ops/s
[info]                  ·gc.alloc.rate:                   154,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              4896,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16208,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,116 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   49743,920 ±(99.9%) 2818,053 ops/s [Average]
[info]   (min, avg, max) = (48503,844, 49743,920, 50304,556), stdev = 731,839
[info]   CI (99.9%): [46925,867, 52561,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   154,741 ±(99.9%) 8,792 MB/sec [Average]
[info]   (min, avg, max) = (150,867, 154,741, 156,475), stdev = 2,283
[info]   CI (99.9%): [145,949, 163,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4896,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4896,008, 4896,008, 4896,009), stdev = 0,001
[info]   CI (99.9%): [4896,007, 4896,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,626 ±(99.9%) 1078,935 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,626, 511,574), stdev = 280,196
[info]   CI (99.9%): [≈ 0, 1283,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6457,278 ±(99.9%) 34047,824 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6457,278, 16208,239), stdev = 8842,112
[info]   CI (99.9%): [≈ 0, 40505,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,006 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,116), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61,17% complete, ETA 00:51:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3952,615 ops/s
[info] # Warmup Iteration   2: 5604,834 ops/s
[info] # Warmup Iteration   3: 5752,933 ops/s
[info] # Warmup Iteration   4: 5760,434 ops/s
[info] # Warmup Iteration   5: 5710,533 ops/s
[info] Iteration   1: 5700,972 ops/s
[info]                  ·gc.alloc.rate:                   1123,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     367543,999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,491 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5701,864 ops/s
[info]                  ·gc.alloc.rate:               1123,218 MB/sec
[info]                  ·gc.alloc.rate.norm:          310024,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 183647,865 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 5704,324 ops/s
[info]                  ·gc.alloc.rate:                   1123,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366799,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,228 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5706,932 ops/s
[info]                  ·gc.alloc.rate:               1124,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          310024,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 366974,049 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 5736,333 ops/s
[info]                  ·gc.alloc.rate:                   1129,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              310024,071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     182742,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,711 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5710,085 ±(99.9%) 57,203 ops/s [Average]
[info]   (min, avg, max) = (5700,972, 5710,085, 5736,333), stdev = 14,855
[info]   CI (99.9%): [5652,882, 5767,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1124,782 ±(99.9%) 11,068 MB/sec [Average]
[info]   (min, avg, max) = (1123,046, 1124,782, 1129,864), stdev = 2,874
[info]   CI (99.9%): [1113,714, 1135,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310024,075 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (310024,071, 310024,075, 310024,077), stdev = 0,003
[info]   CI (99.9%): [310024,062, 310024,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1064,563 ±(99.9%) 1402,148 MB/sec [Average]
[info]   (min, avg, max) = (665,357, 1064,563, 1331,409), stdev = 364,133
[info]   CI (99.9%): [≈ 0, 2466,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   293541,558 ±(99.9%) 387886,606 B/op [Average]
[info]   (min, avg, max) = (182742,419, 293541,558, 367543,999), stdev = 100732,920
[info]   CI (99.9%): [≈ 0, 681428,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6,886 ±(99.9%) 28,840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,886, 17,228), stdev = 7,490
[info]   CI (99.9%): [≈ 0, 35,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,37% complete, ETA 00:51:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3598,231 ops/s
[info] # Warmup Iteration   2: 5995,068 ops/s
[info] # Warmup Iteration   3: 6068,325 ops/s
[info] # Warmup Iteration   4: 6058,914 ops/s
[info] # Warmup Iteration   5: 6044,338 ops/s
[info] Iteration   1: 6061,966 ops/s
[info]                  ·gc.alloc.rate:               1067,029 MB/sec
[info]                  ·gc.alloc.rate.norm:          277024,078 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 349035,398 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 6043,901 ops/s
[info]                  ·gc.alloc.rate:               1063,876 MB/sec
[info]                  ·gc.alloc.rate.norm:          277024,073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 175167,344 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 6074,258 ops/s
[info]                  ·gc.alloc.rate:                   1069,124 MB/sec
[info]                  ·gc.alloc.rate.norm:              277024,067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     349122,654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,179 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6076,524 ops/s
[info]                  ·gc.alloc.rate:               1069,709 MB/sec
[info]                  ·gc.alloc.rate.norm:          277024,067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 174647,672 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 6005,390 ops/s
[info]                  ·gc.alloc.rate:                   1057,145 MB/sec
[info]                  ·gc.alloc.rate.norm:              277024,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353743,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,910 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   6052,408 ±(99.9%) 112,814 ops/s [Average]
[info]   (min, avg, max) = (6005,390, 6052,408, 6076,524), stdev = 29,298
[info]   CI (99.9%): [5939,593, 6165,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1065,377 ±(99.9%) 19,780 MB/sec [Average]
[info]   (min, avg, max) = (1057,145, 1065,377, 1069,709), stdev = 5,137
[info]   CI (99.9%): [1045,596, 1085,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   277024,071 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (277024,067, 277024,071, 277024,078), stdev = 0,005
[info]   CI (99.9%): [277024,052, 277024,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1077,757 ±(99.9%) 1420,871 MB/sec [Average]
[info]   (min, avg, max) = (672,708, 1077,757, 1349,914), stdev = 368,996
[info]   CI (99.9%): [≈ 0, 2498,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   280343,382 ±(99.9%) 370695,189 B/op [Average]
[info]   (min, avg, max) = (174647,672, 280343,382, 353743,843), stdev = 96268,363
[info]   CI (99.9%): [≈ 0, 651038,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5,418 ±(99.9%) 29,453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,418, 16,179), stdev = 7,649
[info]   CI (99.9%): [≈ 0, 34,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,57% complete, ETA 00:50:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33597,423 ops/s
[info] # Warmup Iteration   2: 41818,189 ops/s
[info] # Warmup Iteration   3: 41485,947 ops/s
[info] # Warmup Iteration   4: 41584,197 ops/s
[info] # Warmup Iteration   5: 41430,846 ops/s
[info] Iteration   1: 41869,171 ops/s
[info]                  ·gc.alloc.rate:                   687,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25212,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202,673 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 41768,439 ops/s
[info]                  ·gc.alloc.rate:                   685,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25276,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,569 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 41546,216 ops/s
[info]                  ·gc.alloc.rate:               682,126 MB/sec
[info]                  ·gc.alloc.rate.norm:          25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25257,467 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 41330,895 ops/s
[info]                  ·gc.alloc.rate:                   678,572 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25389,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,585 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 41825,041 ops/s
[info]                  ·gc.alloc.rate:                   686,601 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25039,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,783 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   41667,952 ±(99.9%) 868,937 ops/s [Average]
[info]   (min, avg, max) = (41330,895, 41667,952, 41869,171), stdev = 225,660
[info]   CI (99.9%): [40799,015, 42536,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   684,091 ±(99.9%) 14,202 MB/sec [Average]
[info]   (min, avg, max) = (678,572, 684,091, 687,417), stdev = 3,688
[info]   CI (99.9%): [669,889, 698,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25840,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (25840,010, 25840,010, 25840,011), stdev = 0,001
[info]   CI (99.9%): [25840,009, 25840,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668,066 ±(99.9%) 9,717 MB/sec [Average]
[info]   (min, avg, max) = (665,331, 668,066, 670,781), stdev = 2,523
[info]   CI (99.9%): [658,350, 677,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25235,112 ±(99.9%) 489,982 B/op [Average]
[info]   (min, avg, max) = (25039,499, 25235,112, 25389,434), stdev = 127,247
[info]   CI (99.9%): [24745,131, 25725,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1,099 ±(99.9%) 9,240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,099, 5,392), stdev = 2,400
[info]   CI (99.9%): [≈ 0, 10,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41,322 ±(99.9%) 347,330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41,322, 202,673), stdev = 90,200
[info]   CI (99.9%): [≈ 0, 388,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61,77% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2877,474 ops/s
[info] # Warmup Iteration   2: 5241,879 ops/s
[info] # Warmup Iteration   3: 5274,446 ops/s
[info] # Warmup Iteration   4: 5293,404 ops/s
[info] # Warmup Iteration   5: 5306,792 ops/s
[info] Iteration   1: 5325,087 ops/s
[info]                  ·gc.alloc.rate:               1294,320 MB/sec
[info]                  ·gc.alloc.rate.norm:          382552,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 198847,495 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 4788,167 ops/s
[info]                  ·gc.alloc.rate:                   1163,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              382552,085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     442853,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20,523 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5310,358 ops/s
[info]                  ·gc.alloc.rate:                   1290,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              382552,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399927,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,169 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5241,618 ops/s
[info]                  ·gc.alloc.rate:                   1274,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              382552,084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     405513,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,249 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5278,835 ops/s
[info]                  ·gc.alloc.rate:                   1282,773 MB/sec
[info]                  ·gc.alloc.rate.norm:              382552,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     403145,697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,206 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   5188,813 ±(99.9%) 871,202 ops/s [Average]
[info]   (min, avg, max) = (4788,167, 5188,813, 5325,087), stdev = 226,248
[info]   CI (99.9%): [4317,611, 6060,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1261,184 ±(99.9%) 211,641 MB/sec [Average]
[info]   (min, avg, max) = (1163,843, 1261,184, 1294,320), stdev = 54,963
[info]   CI (99.9%): [1049,542, 1472,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   382552,080 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (382552,077, 382552,080, 382552,085), stdev = 0,004
[info]   CI (99.9%): [382552,064, 382552,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1214,399 ±(99.9%) 1165,898 MB/sec [Average]
[info]   (min, avg, max) = (672,777, 1214,399, 1351,827), stdev = 302,780
[info]   CI (99.9%): [48,500, 2380,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   370057,558 ±(99.9%) 374604,126 B/op [Average]
[info]   (min, avg, max) = (198847,495, 370057,558, 442853,705), stdev = 97283,502
[info]   CI (99.9%): [≈ 0, 744661,683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7,829 ±(99.9%) 29,219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,829, 20,523), stdev = 7,588
[info]   CI (99.9%): [≈ 0, 37,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61,97% complete, ETA 00:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4040,791 ops/s
[info] # Warmup Iteration   2: 5492,749 ops/s
[info] # Warmup Iteration   3: 5574,669 ops/s
[info] # Warmup Iteration   4: 4946,736 ops/s
[info] # Warmup Iteration   5: 5508,879 ops/s
[info] Iteration   1: 5487,941 ops/s
[info]                  ·gc.alloc.rate:               1053,697 MB/sec
[info]                  ·gc.alloc.rate.norm:          302160,080 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 381994,900 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 5508,449 ops/s
[info]                  ·gc.alloc.rate:                   1057,583 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160,080 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     380227,740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,841 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5491,993 ops/s
[info]                  ·gc.alloc.rate:               1054,425 MB/sec
[info]                  ·gc.alloc.rate.norm:          302160,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190476,674 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 5516,316 ops/s
[info]                  ·gc.alloc.rate:                   1059,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     379486,457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,815 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5506,544 ops/s
[info]                  ·gc.alloc.rate:               1057,087 MB/sec
[info]                  ·gc.alloc.rate.norm:          302160,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190182,902 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   5502,249 ±(99.9%) 45,751 ops/s [Average]
[info]   (min, avg, max) = (5487,941, 5502,249, 5516,316), stdev = 11,881
[info]   CI (99.9%): [5456,497, 5548,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1056,392 ±(99.9%) 8,765 MB/sec [Average]
[info]   (min, avg, max) = (1053,697, 1056,392, 1059,166), stdev = 2,276
[info]   CI (99.9%): [1047,626, 1065,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   302160,076 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (302160,074, 302160,076, 302160,080), stdev = 0,003
[info]   CI (99.9%): [302160,064, 302160,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1064,635 ±(99.9%) 1404,717 MB/sec [Average]
[info]   (min, avg, max) = (664,692, 1064,635, 1332,098), stdev = 364,801
[info]   CI (99.9%): [≈ 0, 2469,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   304473,735 ±(99.9%) 401247,598 B/op [Average]
[info]   (min, avg, max) = (190182,902, 304473,735, 381994,900), stdev = 104202,727
[info]   CI (99.9%): [≈ 0, 705721,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   7,131 ±(99.9%) 37,601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,131, 17,841), stdev = 9,765
[info]   CI (99.9%): [≈ 0, 44,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62,17% complete, ETA 00:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12304,313 ops/s
[info] # Warmup Iteration   2: 16204,842 ops/s
[info] # Warmup Iteration   3: 16207,820 ops/s
[info] # Warmup Iteration   4: 16272,899 ops/s
[info] # Warmup Iteration   5: 16302,152 ops/s
[info] Iteration   1: 16331,139 ops/s
[info]                  ·gc.alloc.rate:               915,314 MB/sec
[info]                  ·gc.alloc.rate.norm:          88208,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64059,675 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 16364,001 ops/s
[info]                  ·gc.alloc.rate:                   917,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              88206,307 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127900,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 16461,172 ops/s
[info]                  ·gc.alloc.rate:               922,327 MB/sec
[info]                  ·gc.alloc.rate.norm:          88184,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63593,485 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 16382,387 ops/s
[info]                  ·gc.alloc.rate:                   918,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127920,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,000 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16418,805 ops/s
[info]                  ·gc.alloc.rate:               920,005 MB/sec
[info]                  ·gc.alloc.rate.norm:          88184,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63943,790 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   16391,501 ±(99.9%) 193,325 ops/s [Average]
[info]   (min, avg, max) = (16331,139, 16391,501, 16461,172), stdev = 50,206
[info]   CI (99.9%): [16198,176, 16584,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   918,536 ±(99.9%) 10,454 MB/sec [Average]
[info]   (min, avg, max) = (915,314, 918,536, 922,327), stdev = 2,715
[info]   CI (99.9%): [908,082, 928,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88193,282 ±(99.9%) 48,862 B/op [Average]
[info]   (min, avg, max) = (88184,025, 88193,282, 88208,027), stdev = 12,689
[info]   CI (99.9%): [88144,420, 88242,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   931,670 ±(99.9%) 1402,609 MB/sec [Average]
[info]   (min, avg, max) = (664,732, 931,670, 1331,677), stdev = 364,253
[info]   CI (99.9%): [≈ 0, 2334,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89483,648 ±(99.9%) 135077,926 B/op [Average]
[info]   (min, avg, max) = (63593,485, 89483,648, 127920,385), stdev = 35079,308
[info]   CI (99.9%): [≈ 0, 224561,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,201 ±(99.9%) 6,894 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,201, 4,004), stdev = 1,790
[info]   CI (99.9%): [≈ 0, 8,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,37% complete, ETA 00:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13236,989 ops/s
[info] # Warmup Iteration   2: 18822,130 ops/s
[info] # Warmup Iteration   3: 18891,900 ops/s
[info] # Warmup Iteration   4: 18859,474 ops/s
[info] # Warmup Iteration   5: 18815,474 ops/s
[info] Iteration   1: 18835,362 ops/s
[info]                  ·gc.alloc.rate:               980,502 MB/sec
[info]                  ·gc.alloc.rate.norm:          81944,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56129,984 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 18909,141 ops/s
[info]                  ·gc.alloc.rate:               984,543 MB/sec
[info]                  ·gc.alloc.rate.norm:          81944,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111998,917 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 18855,827 ops/s
[info]                  ·gc.alloc.rate:               981,694 MB/sec
[info]                  ·gc.alloc.rate.norm:          81944,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56234,273 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 18808,569 ops/s
[info]                  ·gc.alloc.rate:                   979,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112811,238 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,742 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 18843,218 ops/s
[info]                  ·gc.alloc.rate:               980,968 MB/sec
[info]                  ·gc.alloc.rate.norm:          81943,932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,322 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56328,693 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18850,423 ±(99.9%) 142,884 ops/s [Average]
[info]   (min, avg, max) = (18808,569, 18850,423, 18909,141), stdev = 37,106
[info]   CI (99.9%): [18707,540, 18993,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   981,407 ±(99.9%) 7,519 MB/sec [Average]
[info]   (min, avg, max) = (979,328, 981,407, 984,543), stdev = 1,953
[info]   CI (99.9%): [973,887, 988,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81944,006 ±(99.9%) 0,158 B/op [Average]
[info]   (min, avg, max) = (81943,932, 81944,006, 81944,029), stdev = 0,041
[info]   CI (99.9%): [81943,847, 81944,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   942,702 ±(99.9%) 1420,953 MB/sec [Average]
[info]   (min, avg, max) = (671,624, 942,702, 1348,227), stdev = 369,017
[info]   CI (99.9%): [≈ 0, 2363,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   78700,621 ±(99.9%) 118481,385 B/op [Average]
[info]   (min, avg, max) = (56129,984, 78700,621, 112811,238), stdev = 30769,239
[info]   CI (99.9%): [≈ 0, 197182,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,348 ±(99.9%) 2,999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,348, 1,742), stdev = 0,779
[info]   CI (99.9%): [≈ 0, 3,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,58% complete, ETA 00:49:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 271106,457 ops/s
[info] # Warmup Iteration   2: 290313,312 ops/s
[info] # Warmup Iteration   3: 289793,409 ops/s
[info] # Warmup Iteration   4: 287164,150 ops/s
[info] # Warmup Iteration   5: 285323,176 ops/s
[info] Iteration   1: 286441,571 ops/s
[info]                  ·gc.alloc.rate:                   1038,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3663,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 286721,283 ops/s
[info]                  ·gc.alloc.rate:                   1039,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7306,054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,457 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 286088,380 ops/s
[info]                  ·gc.alloc.rate:               1037,077 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3660,725 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 274200,932 ops/s
[info]                  ·gc.alloc.rate:                   993,897 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7641,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 286438,896 ops/s
[info]                  ·gc.alloc.rate:               1038,171 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1332,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7320,056 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   283978,212 ±(99.9%) 21064,075 ops/s [Average]
[info]   (min, avg, max) = (274200,932, 283978,212, 286721,283), stdev = 5470,273
[info]   CI (99.9%): [262914,137, 305042,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1029,297 ±(99.9%) 76,259 MB/sec [Average]
[info]   (min, avg, max) = (993,897, 1029,297, 1039,240), stdev = 19,804
[info]   CI (99.9%): [953,038, 1105,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5704,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5704,001, 5704,001, 5704,002), stdev = 0,001
[info]   CI (99.9%): [5704,001, 5704,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1065,440 ±(99.9%) 1403,531 MB/sec [Average]
[info]   (min, avg, max) = (665,577, 1065,440, 1332,305), stdev = 364,493
[info]   CI (99.9%): [≈ 0, 2468,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5918,316 ±(99.9%) 7947,646 B/op [Average]
[info]   (min, avg, max) = (3660,725, 5918,316, 7641,239), stdev = 2063,978
[info]   CI (99.9%): [≈ 0, 13865,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,162 ±(99.9%) 0,740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,162, 0,457), stdev = 0,192
[info]   CI (99.9%): [≈ 0, 0,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62,78% complete, ETA 00:49:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 308663,407 ops/s
[info] # Warmup Iteration   2: 332110,484 ops/s
[info] # Warmup Iteration   3: 330850,724 ops/s
[info] # Warmup Iteration   4: 330198,242 ops/s
[info] # Warmup Iteration   5: 330190,591 ops/s
[info] Iteration   1: 331137,386 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 331576,612 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 331105,977 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 330480,110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 330860,110 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   331032,039 ±(99.9%) 1549,028 ops/s [Average]
[info]   (min, avg, max) = (330480,110, 331032,039, 331576,612), stdev = 402,278
[info]   CI (99.9%): [329483,011, 332581,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62,98% complete, ETA 00:49:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12519,136 ops/s
[info] # Warmup Iteration   2: 16722,080 ops/s
[info] # Warmup Iteration   3: 16750,602 ops/s
[info] # Warmup Iteration   4: 16834,098 ops/s
[info] # Warmup Iteration   5: 16842,159 ops/s
[info] Iteration   1: 16927,788 ops/s
[info]                  ·gc.alloc.rate:               966,321 MB/sec
[info]                  ·gc.alloc.rate.norm:          89848,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61866,727 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 16918,105 ops/s
[info]                  ·gc.alloc.rate:                   965,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              89847,915 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123689,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,810 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 16874,813 ops/s
[info]                  ·gc.alloc.rate:               963,276 MB/sec
[info]                  ·gc.alloc.rate.norm:          89848,140 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61933,073 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 16800,797 ops/s
[info]                  ·gc.alloc.rate:                   959,092 MB/sec
[info]                  ·gc.alloc.rate.norm:              89848,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     124294,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,900 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 16862,143 ops/s
[info]                  ·gc.alloc.rate:               962,514 MB/sec
[info]                  ·gc.alloc.rate.norm:          89847,926 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61977,133 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   16876,729 ±(99.9%) 195,410 ops/s [Average]
[info]   (min, avg, max) = (16800,797, 16876,729, 16927,788), stdev = 50,747
[info]   CI (99.9%): [16681,319, 17072,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   963,412 ±(99.9%) 11,218 MB/sec [Average]
[info]   (min, avg, max) = (959,092, 963,412, 966,321), stdev = 2,913
[info]   CI (99.9%): [952,195, 974,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89848,003 ±(99.9%) 0,349 B/op [Average]
[info]   (min, avg, max) = (89847,915, 89848,003, 89848,140), stdev = 0,091
[info]   CI (99.9%): [89847,654, 89848,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   929,953 ±(99.9%) 1399,989 MB/sec [Average]
[info]   (min, avg, max) = (663,942, 929,953, 1329,660), stdev = 363,573
[info]   CI (99.9%): [≈ 0, 2329,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86752,210 ±(99.9%) 130905,985 B/op [Average]
[info]   (min, avg, max) = (61866,727, 86752,210, 124294,162), stdev = 33995,869
[info]   CI (99.9%): [≈ 0, 217658,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,942 ±(99.9%) 10,564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,942, 5,810), stdev = 2,743
[info]   CI (99.9%): [≈ 0, 12,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63,18% complete, ETA 00:48:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7421,999 ops/s
[info] # Warmup Iteration   2: 8066,060 ops/s
[info] # Warmup Iteration   3: 8081,156 ops/s
[info] # Warmup Iteration   4: 8088,967 ops/s
[info] # Warmup Iteration   5: 8088,486 ops/s
[info] Iteration   1: 8103,363 ops/s
[info]                  ·gc.alloc.rate:               564,024 MB/sec
[info]                  ·gc.alloc.rate.norm:          109552,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 99346,949 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 8120,116 ops/s
[info]                  ·gc.alloc.rate:                   565,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              109552,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129877,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1053,601 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 8127,004 ops/s
[info]                  ·gc.alloc.rate:                   565,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              109556,170 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     129749,995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,092 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8140,675 ops/s
[info]                  ·gc.alloc.rate:               566,645 MB/sec
[info]                  ·gc.alloc.rate.norm:          109552,054 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 128899,002 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 8134,311 ops/s
[info]                  ·gc.alloc.rate:      566,113 MB/sec
[info]                  ·gc.alloc.rate.norm: 109552,050 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   8125,094 ±(99.9%) 55,413 ops/s [Average]
[info]   (min, avg, max) = (8103,363, 8125,094, 8140,675), stdev = 14,391
[info]   CI (99.9%): [8069,680, 8180,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   565,552 ±(99.9%) 3,824 MB/sec [Average]
[info]   (min, avg, max) = (564,024, 565,552, 566,645), stdev = 0,993
[info]   CI (99.9%): [561,728, 569,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   109552,875 ±(99.9%) 7,093 B/op [Average]
[info]   (min, avg, max) = (109552,050, 109552,875, 109556,170), stdev = 1,842
[info]   CI (99.9%): [109545,782, 109559,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   503,666 ±(99.9%) 1115,529 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503,666, 670,150), stdev = 289,699
[info]   CI (99.9%): [≈ 0, 1619,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   97574,748 ±(99.9%) 215978,860 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 97574,748, 129877,796), stdev = 56089,024
[info]   CI (99.9%): [≈ 0, 313553,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1,100 ±(99.9%) 9,336 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,100, 5,436), stdev = 2,424
[info]   CI (99.9%): [≈ 0, 10,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   213,138 ±(99.9%) 1809,271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 213,138, 1053,601), stdev = 469,862
[info]   CI (99.9%): [≈ 0, 2022,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,517
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,38% complete, ETA 00:48:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 923104,072 ops/s
[info] # Warmup Iteration   2: 984683,406 ops/s
[info] # Warmup Iteration   3: 982803,341 ops/s
[info] # Warmup Iteration   4: 982829,811 ops/s
[info] # Warmup Iteration   5: 982460,532 ops/s
[info] Iteration   1: 985082,747 ops/s
[info]                  ·gc.alloc.rate:      40,055 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 987086,196 ops/s
[info]                  ·gc.alloc.rate:      40,152 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 942439,911 ops/s
[info]                  ·gc.alloc.rate:      38,326 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 985046,275 ops/s
[info]                  ·gc.alloc.rate:      40,057 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 983253,690 ops/s
[info]                  ·gc.alloc.rate:      39,978 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   976581,764 ±(99.9%) 73678,186 ops/s [Average]
[info]   (min, avg, max) = (942439,911, 976581,764, 987086,196), stdev = 19133,991
[info]   CI (99.9%): [902903,578, 1050259,949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   39,714 ±(99.9%) 2,996 MB/sec [Average]
[info]   (min, avg, max) = (38,326, 39,714, 40,152), stdev = 0,778
[info]   CI (99.9%): [36,718, 42,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (64,000, 64,000, 64,000), stdev = 0,001
[info]   CI (99.9%): [64,000, 64,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63,58% complete, ETA 00:48:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47653,178 ops/s
[info] # Warmup Iteration   2: 83739,547 ops/s
[info] # Warmup Iteration   3: 83847,848 ops/s
[info] # Warmup Iteration   4: 83464,356 ops/s
[info] # Warmup Iteration   5: 84104,571 ops/s
[info] Iteration   1: 84270,198 ops/s
[info]                  ·gc.alloc.rate:                   3799,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76170,730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,555 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 84364,190 ops/s
[info]                  ·gc.alloc.rate:                   3804,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76165,853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,165 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 84236,302 ops/s
[info]                  ·gc.alloc.rate:                   3798,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63594,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,556 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 83836,589 ops/s
[info]                  ·gc.alloc.rate:                   3780,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76726,598 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,563 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 84437,189 ops/s
[info]                  ·gc.alloc.rate:                   3806,587 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63507,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,776 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   84228,894 ±(99.9%) 897,613 ops/s [Average]
[info]   (min, avg, max) = (83836,589, 84228,894, 84437,189), stdev = 233,107
[info]   CI (99.9%): [83331,281, 85126,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3797,943 ±(99.9%) 39,513 MB/sec [Average]
[info]   (min, avg, max) = (3780,644, 3797,943, 3806,587), stdev = 10,261
[info]   CI (99.9%): [3758,430, 3837,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70968,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70968,005, 70968,005, 70968,005), stdev = 0,001
[info]   CI (99.9%): [70968,004, 70968,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3811,786 ±(99.9%) 1430,097 MB/sec [Average]
[info]   (min, avg, max) = (3403,504, 3811,786, 4087,418), stdev = 371,392
[info]   CI (99.9%): [2381,689, 5241,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   71233,058 ±(99.9%) 27017,847 B/op [Average]
[info]   (min, avg, max) = (63507,545, 71233,058, 76726,598), stdev = 7016,449
[info]   CI (99.9%): [44215,211, 98250,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,323 ±(99.9%) 1,347 B/op [Average]
[info]   (min, avg, max) = (0,776, 1,323, 1,563), stdev = 0,350
[info]   CI (99.9%): [≈ 0, 2,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,78% complete, ETA 00:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 858460,978 ops/s
[info] # Warmup Iteration   2: 1203044,528 ops/s
[info] # Warmup Iteration   3: 1206781,248 ops/s
[info] # Warmup Iteration   4: 1205758,667 ops/s
[info] # Warmup Iteration   5: 1159087,059 ops/s
[info] Iteration   1: 1157816,711 ops/s
[info]                  ·gc.alloc.rate:               665,059 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 916,828 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1158584,914 ops/s
[info]                  ·gc.alloc.rate:                   665,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,183 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     917,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,113 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1166668,133 ops/s
[info]                  ·gc.alloc.rate:               670,093 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 910,767 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1152645,317 ops/s
[info]                  ·gc.alloc.rate:                   662,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     922,758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1145851,412 ops/s
[info]                  ·gc.alloc.rate:                   658,218 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,860 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     928,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1156313,297 ±(99.9%) 29674,219 ops/s [Average]
[info]   (min, avg, max) = (1145851,412, 1156313,297, 1166668,133), stdev = 7706,300
[info]   CI (99.9%): [1126639,078, 1185987,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   664,194 ±(99.9%) 16,921 MB/sec [Average]
[info]   (min, avg, max) = (658,218, 664,194, 670,093), stdev = 4,394
[info]   CI (99.9%): [647,273, 681,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,300 ±(99.9%) 2,208 MB/sec [Average]
[info]   (min, avg, max) = (674,496, 675,300, 675,860), stdev = 0,573
[info]   CI (99.9%): [673,092, 677,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   919,152 ±(99.9%) 25,471 B/op [Average]
[info]   (min, avg, max) = (910,767, 919,152, 928,229), stdev = 6,615
[info]   CI (99.9%): [893,681, 944,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,040 ±(99.9%) 0,182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,040, 0,113), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,98% complete, ETA 00:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 743575,832 ops/s
[info] # Warmup Iteration   2: 762329,393 ops/s
[info] # Warmup Iteration   3: 755620,143 ops/s
[info] # Warmup Iteration   4: 762401,433 ops/s
[info] # Warmup Iteration   5: 758520,301 ops/s
[info] Iteration   1: 757421,052 ops/s
[info]                  ·gc.alloc.rate:      204,047 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 760177,496 ops/s
[info]                  ·gc.alloc.rate:      204,787 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 759396,310 ops/s
[info]                  ·gc.alloc.rate:                   204,571 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1060,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,113 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 760346,652 ops/s
[info]                  ·gc.alloc.rate:      204,843 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 758743,701 ops/s
[info]                  ·gc.alloc.rate:               204,361 MB/sec
[info]                  ·gc.alloc.rate.norm:          424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1061,113 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   759217,042 ±(99.9%) 4588,676 ops/s [Average]
[info]   (min, avg, max) = (757421,052, 759217,042, 760346,652), stdev = 1191,665
[info]   CI (99.9%): [754628,366, 763805,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   204,522 ±(99.9%) 1,259 MB/sec [Average]
[info]   (min, avg, max) = (204,047, 204,522, 204,843), stdev = 0,327
[info]   CI (99.9%): [203,263, 205,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,001, 424,001, 424,001), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,598 ±(99.9%) 1078,787 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,598, 511,553), stdev = 280,158
[info]   CI (99.9%): [≈ 0, 1283,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   424,275 ±(99.9%) 2237,078 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 424,275, 1061,113), stdev = 580,962
[info]   CI (99.9%): [≈ 0, 2661,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,011 ±(99.9%) 0,094 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,055), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,113), stdev = 0,051
[info]   CI (99.9%): [≈ 0, 0,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64,19% complete, ETA 00:47:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1544411,551 ops/s
[info] # Warmup Iteration   2: 1631089,931 ops/s
[info] # Warmup Iteration   3: 1622475,217 ops/s
[info] # Warmup Iteration   4: 1621629,049 ops/s
[info] # Warmup Iteration   5: 1621774,476 ops/s
[info] Iteration   1: 1625637,898 ops/s
[info]                  ·gc.alloc.rate:      16,526 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1558303,485 ops/s
[info]                  ·gc.alloc.rate:      15,842 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1617085,974 ops/s
[info]                  ·gc.alloc.rate:      16,439 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1619511,085 ops/s
[info]                  ·gc.alloc.rate:      16,466 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1617092,475 ops/s
[info]                  ·gc.alloc.rate:      16,438 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1607526,183 ±(99.9%) 106806,785 ops/s [Average]
[info]   (min, avg, max) = (1558303,485, 1607526,183, 1625637,898), stdev = 27737,383
[info]   CI (99.9%): [1500719,399, 1714332,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   16,342 ±(99.9%) 1,085 MB/sec [Average]
[info]   (min, avg, max) = (15,842, 16,342, 16,526), stdev = 0,282
[info]   CI (99.9%): [15,257, 17,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64,39% complete, ETA 00:47:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30355,924 ops/s
[info] # Warmup Iteration   2: 50658,419 ops/s
[info] # Warmup Iteration   3: 50628,447 ops/s
[info] # Warmup Iteration   4: 50581,255 ops/s
[info] # Warmup Iteration   5: 50206,434 ops/s
[info] Iteration   1: 50180,368 ops/s
[info]                  ·gc.alloc.rate:                   2114,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63726,363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,306 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 50402,834 ops/s
[info]                  ·gc.alloc.rate:                   2124,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84705,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,300 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 50339,245 ops/s
[info]                  ·gc.alloc.rate:                   2121,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63663,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,952 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 50450,008 ops/s
[info]                  ·gc.alloc.rate:                   2126,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63584,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,649 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 50418,201 ops/s
[info]                  ·gc.alloc.rate:               2124,422 MB/sec
[info]                  ·gc.alloc.rate.norm:          66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2039,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63665,993 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   50358,131 ±(99.9%) 412,957 ops/s [Average]
[info]   (min, avg, max) = (50180,368, 50358,131, 50450,008), stdev = 107,244
[info]   CI (99.9%): [49945,175, 50771,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2122,224 ±(99.9%) 17,273 MB/sec [Average]
[info]   (min, avg, max) = (2114,828, 2122,224, 2126,293), stdev = 4,486
[info]   CI (99.9%): [2104,950, 2139,497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66328,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66328,008, 66328,008, 66328,009), stdev = 0,001
[info]   CI (99.9%): [66328,007, 66328,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2171,647 ±(99.9%) 1164,687 MB/sec [Average]
[info]   (min, avg, max) = (2031,876, 2171,647, 2712,690), stdev = 302,465
[info]   CI (99.9%): [1006,960, 3336,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67868,920 ±(99.9%) 36241,792 B/op [Average]
[info]   (min, avg, max) = (63584,063, 67868,920, 84705,157), stdev = 9411,878
[info]   CI (99.9%): [31627,128, 104110,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,041 ±(99.9%) 2,859 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,041, 1,952), stdev = 0,742
[info]   CI (99.9%): [≈ 0, 3,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64,59% complete, ETA 00:46:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597688,031 ops/s
[info] # Warmup Iteration   2: 872067,685 ops/s
[info] # Warmup Iteration   3: 877600,958 ops/s
[info] # Warmup Iteration   4: 882063,417 ops/s
[info] # Warmup Iteration   5: 879861,731 ops/s
[info] Iteration   1: 880589,242 ops/s
[info]                  ·gc.alloc.rate:                   2806,352 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4822,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 878338,506 ops/s
[info]                  ·gc.alloc.rate:               2799,460 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2704,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4846,169 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 885120,112 ops/s
[info]                  ·gc.alloc.rate:                   2820,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4817,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 883459,575 ops/s
[info]                  ·gc.alloc.rate:                   2815,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4834,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 884842,320 ops/s
[info]                  ·gc.alloc.rate:                   2819,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4832,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,037 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   882469,951 ±(99.9%) 11265,478 ops/s [Average]
[info]   (min, avg, max) = (878338,506, 882469,951, 885120,112), stdev = 2925,609
[info]   CI (99.9%): [871204,473, 893735,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2812,313 ±(99.9%) 35,105 MB/sec [Average]
[info]   (min, avg, max) = (2799,460, 2812,313, 2820,896), stdev = 9,117
[info]   CI (99.9%): [2777,208, 2847,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5016,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5016,000, 5016,000, 5016,000), stdev = 0,001
[info]   CI (99.9%): [5016,000, 5016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2708,375 ±(99.9%) 28,179 MB/sec [Average]
[info]   (min, avg, max) = (2697,841, 2708,375, 2716,084), stdev = 7,318
[info]   CI (99.9%): [2680,195, 2736,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4830,634 ±(99.9%) 42,739 B/op [Average]
[info]   (min, avg, max) = (4817,979, 4830,634, 4846,169), stdev = 11,099
[info]   CI (99.9%): [4787,895, 4873,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,044 ±(99.9%) 0,119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,044, 0,074), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64,79% complete, ETA 00:46:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 630631,117 ops/s
[info] # Warmup Iteration   2: 6143848,276 ops/s
[info] # Warmup Iteration   3: 6225788,534 ops/s
[info] # Warmup Iteration   4: 6253143,223 ops/s
[info] # Warmup Iteration   5: 5616802,651 ops/s
[info] Iteration   1: 4998220,456 ops/s
[info]                  ·gc.alloc.rate:      304,888 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5420947,097 ops/s
[info]                  ·gc.alloc.rate:               330,669 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 148,529 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 6132086,984 ops/s
[info]                  ·gc.alloc.rate:               373,995 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131,298 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 6186000,005 ops/s
[info]                  ·gc.alloc.rate:      377,359 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6212597,458 ops/s
[info]                  ·gc.alloc.rate:                   378,961 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170,771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,667 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5789970,400 ±(99.9%) 2122699,560 ops/s [Average]
[info]   (min, avg, max) = (4998220,456, 5789970,400, 6212597,458), stdev = 551258,335
[info]   CI (99.9%): [3667270,840, 7912669,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   353,174 ±(99.9%) 129,461 MB/sec [Average]
[info]   (min, avg, max) = (304,888, 353,174, 378,961), stdev = 33,621
[info]   CI (99.9%): [223,713, 482,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,446 ±(99.9%) 1220,262 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,446, 674,121), stdev = 316,898
[info]   CI (99.9%): [≈ 0, 1559,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   90,120 ±(99.9%) 321,333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 90,120, 170,771), stdev = 83,449
[info]   CI (99.9%): [≈ 0, 411,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,527 ±(99.9%) 4,534 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,527, 2,633), stdev = 1,178
[info]   CI (99.9%): [≈ 0, 5,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,133 ±(99.9%) 1,149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,133, 0,667), stdev = 0,298
[info]   CI (99.9%): [≈ 0, 1,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64,99% complete, ETA 00:46:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 479128,619 ops/s
[info] # Warmup Iteration   2: 1110461,698 ops/s
[info] # Warmup Iteration   3: 1102984,672 ops/s
[info] # Warmup Iteration   4: 1109503,201 ops/s
[info] # Warmup Iteration   5: 1110036,427 ops/s
[info] Iteration   1: 1105381,696 ops/s
[info]                  ·gc.alloc.rate:               1320,407 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 962,152 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1094846,263 ops/s
[info]                  ·gc.alloc.rate:                   1307,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1943,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1110608,868 ops/s
[info]                  ·gc.alloc.rate:               1326,583 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1918,118 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1109953,848 ops/s
[info]                  ·gc.alloc.rate:                   1325,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1921,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1100244,663 ops/s
[info]                  ·gc.alloc.rate:               1314,092 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1938,970 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1104207,068 ±(99.9%) 25738,436 ops/s [Average]
[info]   (min, avg, max) = (1094846,263, 1104207,068, 1110608,868), stdev = 6684,190
[info]   CI (99.9%): [1078468,632, 1129945,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1318,942 ±(99.9%) 30,971 MB/sec [Average]
[info]   (min, avg, max) = (1307,712, 1318,942, 1326,583), stdev = 8,043
[info]   CI (99.9%): [1287,971, 1349,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1880,000, 1880,000, 1880,000), stdev = 0,001
[info]   CI (99.9%): [1880,000, 1880,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,307 ±(99.9%) 1167,880 MB/sec [Average]
[info]   (min, avg, max) = (675,762, 1218,307, 1355,311), stdev = 303,295
[info]   CI (99.9%): [50,427, 2386,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1736,825 ±(99.9%) 1668,084 B/op [Average]
[info]   (min, avg, max) = (962,152, 1736,825, 1943,731), stdev = 433,196
[info]   CI (99.9%): [68,741, 3404,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,024 ±(99.9%) 0,150 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,024, 0,090), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65,19% complete, ETA 00:46:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7391208,176 ops/s
[info] # Warmup Iteration   2: 8731430,930 ops/s
[info] # Warmup Iteration   3: 8944928,529 ops/s
[info] # Warmup Iteration   4: 9030275,464 ops/s
[info] # Warmup Iteration   5: 8570410,748 ops/s
[info] Iteration   1: 9009320,707 ops/s
[info]                  ·gc.alloc.rate:               412,116 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89,366 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 9049594,040 ops/s
[info]                  ·gc.alloc.rate:               414,007 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 88,975 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 9040168,948 ops/s
[info]                  ·gc.alloc.rate:                   413,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9049675,997 ops/s
[info]                  ·gc.alloc.rate:      413,975 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9040976,184 ops/s
[info]                  ·gc.alloc.rate:                   413,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,537 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   9037947,175 ±(99.9%) 64052,791 ops/s [Average]
[info]   (min, avg, max) = (9009320,707, 9037947,175, 9049675,997), stdev = 16634,306
[info]   CI (99.9%): [8973894,384, 9101999,966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   413,440 ±(99.9%) 2,974 MB/sec [Average]
[info]   (min, avg, max) = (412,116, 413,440, 414,007), stdev = 0,772
[info]   CI (99.9%): [410,467, 416,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,869 ±(99.9%) 989,277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,869, 674,673), stdev = 256,912
[info]   CI (99.9%): [≈ 0, 1431,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   76,972 ±(99.9%) 172,290 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 76,972, 117,460), stdev = 44,743
[info]   CI (99.9%): [≈ 0, 249,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,620 ±(99.9%) 5,299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,620, 3,082), stdev = 1,376
[info]   CI (99.9%): [≈ 0, 5,920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,108 ±(99.9%) 0,923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,108, 0,537), stdev = 0,240
[info]   CI (99.9%): [≈ 0, 1,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65,39% complete, ETA 00:45:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87750,257 ops/s
[info] # Warmup Iteration   2: 375204,693 ops/s
[info] # Warmup Iteration   3: 377717,229 ops/s
[info] # Warmup Iteration   4: 379035,397 ops/s
[info] # Warmup Iteration   5: 378375,455 ops/s
[info] Iteration   1: 377804,925 ops/s
[info]                  ·gc.alloc.rate:                   2120,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              8832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8460,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,347 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 378919,288 ops/s
[info]                  ·gc.alloc.rate:                   2126,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              8832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8447,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 378465,573 ops/s
[info]                  ·gc.alloc.rate:                   2123,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              8832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11287,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,260 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 378464,750 ops/s
[info]                  ·gc.alloc.rate:                   2124,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              8832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8473,929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 376272,985 ops/s
[info]                  ·gc.alloc.rate:               2111,333 MB/sec
[info]                  ·gc.alloc.rate.norm:          8832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2038,855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8528,814 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   377985,504 ±(99.9%) 3991,237 ops/s [Average]
[info]   (min, avg, max) = (376272,985, 377985,504, 378919,288), stdev = 1036,512
[info]   CI (99.9%): [373994,267, 381976,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2121,147 ±(99.9%) 22,888 MB/sec [Average]
[info]   (min, avg, max) = (2111,333, 2121,147, 2126,503), stdev = 5,944
[info]   CI (99.9%): [2098,259, 2144,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8832,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8832,001, 8832,001, 8832,001), stdev = 0,001
[info]   CI (99.9%): [8832,001, 8832,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2171,174 ±(99.9%) 1169,030 MB/sec [Average]
[info]   (min, avg, max) = (2030,979, 2171,174, 2714,228), stdev = 303,593
[info]   CI (99.9%): [1002,144, 3340,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9039,679 ±(99.9%) 4840,504 B/op [Average]
[info]   (min, avg, max) = (8447,199, 9039,679, 11287,699), stdev = 1257,064
[info]   CI (99.9%): [4199,175, 13880,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,225 ±(99.9%) 0,506 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,225, 0,347), stdev = 0,131
[info]   CI (99.9%): [≈ 0, 0,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65,59% complete, ETA 00:45:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 583045,189 ops/s
[info] # Warmup Iteration   2: 825666,656 ops/s
[info] # Warmup Iteration   3: 824884,447 ops/s
[info] # Warmup Iteration   4: 804371,728 ops/s
[info] # Warmup Iteration   5: 825184,419 ops/s
[info] Iteration   1: 829934,853 ops/s
[info]                  ·gc.alloc.rate:                   1151,686 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2550,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 797077,148 ops/s
[info]                  ·gc.alloc.rate:               1106,015 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1327,125 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 801262,676 ops/s
[info]                  ·gc.alloc.rate:                   1111,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2640,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 828803,352 ops/s
[info]                  ·gc.alloc.rate:                   1150,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2552,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,119 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 831319,937 ops/s
[info]                  ·gc.alloc.rate:                   1153,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2546,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   817679,593 ±(99.9%) 65403,284 ops/s [Average]
[info]   (min, avg, max) = (797077,148, 817679,593, 831319,937), stdev = 16985,025
[info]   CI (99.9%): [752276,309, 883082,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1134,611 ±(99.9%) 90,805 MB/sec [Average]
[info]   (min, avg, max) = (1106,015, 1134,611, 1153,431), stdev = 23,582
[info]   CI (99.9%): [1043,806, 1225,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2184,000, 2184,001, 2184,001), stdev = 0,001
[info]   CI (99.9%): [2184,000, 2184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1209,980 ±(99.9%) 1157,875 MB/sec [Average]
[info]   (min, avg, max) = (672,079, 1209,980, 1344,942), stdev = 300,696
[info]   CI (99.9%): [52,106, 2367,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2323,282 ±(99.9%) 2149,635 B/op [Average]
[info]   (min, avg, max) = (1327,125, 2323,282, 2640,261), stdev = 558,253
[info]   CI (99.9%): [173,647, 4472,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,056 ±(99.9%) 0,173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,056, 0,119), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65,79% complete, ETA 00:45:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2928,403 ops/s
[info] # Warmup Iteration   2: 4316,337 ops/s
[info] # Warmup Iteration   3: 4359,036 ops/s
[info] # Warmup Iteration   4: 4396,972 ops/s
[info] # Warmup Iteration   5: 4386,751 ops/s
[info] Iteration   1: 4299,241 ops/s
[info]                  ·gc.alloc.rate:                   2030,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,110 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     744245,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,241 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4237,616 ops/s
[info]                  ·gc.alloc.rate:                   2001,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755449,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61,841 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 4403,371 ops/s
[info]                  ·gc.alloc.rate:               2079,722 MB/sec
[info]                  ·gc.alloc.rate.norm:          743312,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2036,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 727860,316 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 4400,148 ops/s
[info]                  ·gc.alloc.rate:                   2078,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728667,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81,883 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4378,751 ops/s
[info]                  ·gc.alloc.rate:                   2067,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              743312,108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     732806,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,444 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4343,826 ±(99.9%) 280,370 ops/s [Average]
[info]   (min, avg, max) = (4237,616, 4343,826, 4403,371), stdev = 72,811
[info]   CI (99.9%): [4063,456, 4624,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2051,546 ±(99.9%) 132,593 MB/sec [Average]
[info]   (min, avg, max) = (2001,166, 2051,546, 2079,722), stdev = 34,434
[info]   CI (99.9%): [1918,953, 2184,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   743312,103 ±(99.9%) 0,026 B/op [Average]
[info]   (min, avg, max) = (743312,093, 743312,103, 743312,110), stdev = 0,007
[info]   CI (99.9%): [743312,077, 743312,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2035,910 ±(99.9%) 8,623 MB/sec [Average]
[info]   (min, avg, max) = (2033,335, 2035,910, 2038,473), stdev = 2,239
[info]   CI (99.9%): [2027,287, 2044,534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   737805,739 ±(99.9%) 45569,125 B/op [Average]
[info]   (min, avg, max) = (727860,316, 737805,739, 755449,659), stdev = 11834,157
[info]   CI (99.9%): [692236,614, 783374,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,365 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,100, 0,229), stdev = 0,095
[info]   CI (99.9%): [≈ 0, 0,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   36,282 ±(99.9%) 131,759 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36,282, 81,883), stdev = 34,217
[info]   CI (99.9%): [≈ 0, 168,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 66,00% complete, ETA 00:45:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3303,713 ops/s
[info] # Warmup Iteration   2: 5830,806 ops/s
[info] # Warmup Iteration   3: 5979,303 ops/s
[info] # Warmup Iteration   4: 5948,560 ops/s
[info] # Warmup Iteration   5: 5962,393 ops/s
[info] Iteration   1: 5956,368 ops/s
[info]                  ·gc.alloc.rate:                   2461,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715946,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,999 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5967,166 ops/s
[info]                  ·gc.alloc.rate:                   2465,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715680,788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,469 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 5988,544 ops/s
[info]                  ·gc.alloc.rate:                   2474,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     535316,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,882 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5941,257 ops/s
[info]                  ·gc.alloc.rate:                   2455,207 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,319 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     720046,888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,055 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5977,865 ops/s
[info]                  ·gc.alloc.rate:                   2469,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716117,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,439 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5966,240 ±(99.9%) 70,873 ops/s [Average]
[info]   (min, avg, max) = (5941,257, 5966,240, 5988,544), stdev = 18,405
[info]   CI (99.9%): [5895,367, 6037,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2465,319 ±(99.9%) 28,680 MB/sec [Average]
[info]   (min, avg, max) = (2455,207, 2465,319, 2474,407), stdev = 7,448
[info]   CI (99.9%): [2436,639, 2493,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650352,071 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (650352,068, 650352,071, 650352,074), stdev = 0,003
[info]   CI (99.9%): [650352,058, 650352,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2579,546 ±(99.9%) 1168,556 MB/sec [Average]
[info]   (min, avg, max) = (2036,729, 2579,546, 2719,651), stdev = 303,470
[info]   CI (99.9%): [1410,990, 3748,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   680621,609 ±(99.9%) 312856,799 B/op [Average]
[info]   (min, avg, max) = (535316,429, 680621,609, 720046,888), stdev = 81247,917
[info]   CI (99.9%): [367764,810, 993478,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,075, 0,083), stdev = 0,011
[info]   CI (99.9%): [0,031, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19,769 ±(99.9%) 11,655 B/op [Average]
[info]   (min, avg, max) = (16,439, 19,769, 22,055), stdev = 3,027
[info]   CI (99.9%): [8,114, 31,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66,20% complete, ETA 00:44:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44805,276 ops/s
[info] # Warmup Iteration   2: 47683,770 ops/s
[info] # Warmup Iteration   3: 47738,287 ops/s
[info] # Warmup Iteration   4: 47548,886 ops/s
[info] # Warmup Iteration   5: 47746,979 ops/s
[info] Iteration   1: 47651,786 ops/s
[info]                  ·gc.alloc.rate:                   769,435 MB/sec
[info]                  ·gc.alloc.rate.norm:              25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22307,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 47826,467 ops/s
[info]                  ·gc.alloc.rate:               772,304 MB/sec
[info]                  ·gc.alloc.rate.norm:          25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22162,740 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 47780,932 ops/s
[info]                  ·gc.alloc.rate:               771,600 MB/sec
[info]                  ·gc.alloc.rate.norm:          25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22182,681 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 46489,963 ops/s
[info]                  ·gc.alloc.rate:                   750,785 MB/sec
[info]                  ·gc.alloc.rate.norm:              25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22776,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,705 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 47735,240 ops/s
[info]                  ·gc.alloc.rate:               770,812 MB/sec
[info]                  ·gc.alloc.rate.norm:          25416,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22180,697 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   47496,878 ±(99.9%) 2181,660 ops/s [Average]
[info]   (min, avg, max) = (46489,963, 47496,878, 47826,467), stdev = 566,570
[info]   CI (99.9%): [45315,218, 49678,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   766,987 ±(99.9%) 35,116 MB/sec [Average]
[info]   (min, avg, max) = (750,785, 766,987, 772,304), stdev = 9,120
[info]   CI (99.9%): [731,871, 802,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25416,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (25416,009, 25416,009, 25416,009), stdev = 0,001
[info]   CI (99.9%): [25416,007, 25416,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,541 ±(99.9%) 4,069 MB/sec [Average]
[info]   (min, avg, max) = (672,692, 673,541, 675,324), stdev = 1,057
[info]   CI (99.9%): [669,472, 677,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   22321,890 ±(99.9%) 1002,429 B/op [Average]
[info]   (min, avg, max) = (22162,740, 22321,890, 22776,012), stdev = 260,328
[info]   CI (99.9%): [21319,461, 23324,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,553 ±(99.9%) 3,454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,553, 2,062), stdev = 0,897
[info]   CI (99.9%): [≈ 0, 4,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66,40% complete, ETA 00:44:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3246,264 ops/s
[info] # Warmup Iteration   2: 4502,980 ops/s
[info] # Warmup Iteration   3: 4543,056 ops/s
[info] # Warmup Iteration   4: 4368,923 ops/s
[info] # Warmup Iteration   5: 4571,320 ops/s
[info] Iteration   1: 4554,282 ops/s
[info]                  ·gc.alloc.rate:               837,478 MB/sec
[info]                  ·gc.alloc.rate.norm:          289408,104 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 232569,370 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 4538,608 ops/s
[info]                  ·gc.alloc.rate:               834,579 MB/sec
[info]                  ·gc.alloc.rate.norm:          289408,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 233388,997 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 4573,515 ops/s
[info]                  ·gc.alloc.rate:               840,941 MB/sec
[info]                  ·gc.alloc.rate.norm:          289408,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 231832,705 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 4556,941 ops/s
[info]                  ·gc.alloc.rate:                   838,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              289408,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     465522,664 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,375 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4554,172 ops/s
[info]                  ·gc.alloc.rate:               837,389 MB/sec
[info]                  ·gc.alloc.rate.norm:          289408,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 233029,675 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4555,504 ±(99.9%) 47,755 ops/s [Average]
[info]   (min, avg, max) = (4538,608, 4555,504, 4573,515), stdev = 12,402
[info]   CI (99.9%): [4507,749, 4603,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   837,690 ±(99.9%) 8,721 MB/sec [Average]
[info]   (min, avg, max) = (834,579, 837,690, 840,941), stdev = 2,265
[info]   CI (99.9%): [828,969, 846,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289408,097 ±(99.9%) 0,019 B/op [Average]
[info]   (min, avg, max) = (289408,089, 289408,097, 289408,104), stdev = 0,005
[info]   CI (99.9%): [289408,077, 289408,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   808,398 ±(99.9%) 1161,648 MB/sec [Average]
[info]   (min, avg, max) = (673,000, 808,398, 1348,052), stdev = 301,676
[info]   CI (99.9%): [≈ 0, 1970,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   279268,682 ±(99.9%) 400931,991 B/op [Average]
[info]   (min, avg, max) = (231832,705, 279268,682, 465522,664), stdev = 104120,765
[info]   CI (99.9%): [≈ 0, 680200,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,875 ±(99.9%) 24,755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,875, 14,375), stdev = 6,429
[info]   CI (99.9%): [≈ 0, 27,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66,60% complete, ETA 00:44:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_435ee987/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3015,536 ops/s
[info] # Warmup Iteration   2: 4858,325 ops/s
[info] # Warmup Iteration   3: 4941,748 ops/s
[info] # Warmup Iteration   4: 4997,486 ops/s
[info] # Warmup Iteration   5: 4935,515 ops/s
[info] Iteration   1: 4951,275 ops/s
[info]                  ·gc.alloc.rate:                   606,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              192758,638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     214245,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 288,925 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5011,249 ops/s
[info]                  ·gc.alloc.rate:               613,833 MB/sec
[info]                  ·gc.alloc.rate.norm:          192756,400 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 211681,411 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 5003,073 ops/s
[info]                  ·gc.alloc.rate:               612,694 MB/sec
[info]                  ·gc.alloc.rate.norm:          192758,215 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 212124,515 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 4997,368 ops/s
[info]                  ·gc.alloc.rate:                   612,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              192757,083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212379,116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,555 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4999,092 ops/s
[info]                  ·gc.alloc.rate:                   612,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              192757,421 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     212399,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,105 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   4992,412 ±(99.9%) 90,918 ops/s [Average]
[info]   (min, avg, max) = (4951,275, 4992,412, 5011,249), stdev = 23,611
[info]   CI (99.9%): [4901,494, 5083,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   611,453 ±(99.9%) 11,136 MB/sec [Average]
[info]   (min, avg, max) = (606,428, 611,453, 613,833), stdev = 2,892
[info]   CI (99.9%): [600,317, 622,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   192757,551 ±(99.9%) 3,436 B/op [Average]
[info]   (min, avg, max) = (192756,400, 192757,551, 192758,638), stdev = 0,892
[info]   CI (99.9%): [192754,116, 192760,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,276 ±(99.9%) 0,899 MB/sec [Average]
[info]   (min, avg, max) = (674,027, 674,276, 674,608), stdev = 0,233
[info]   CI (99.9%): [673,377, 675,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   212565,950 ±(99.9%) 3783,432 B/op [Average]
[info]   (min, avg, max) = (211681,411, 212565,950, 214245,692), stdev = 982,545
[info]   CI (99.9%): [208782,519, 216349,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,194 ±(99.9%) 1,540 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,194, 0,909), stdev = 0,400
[info]   CI (99.9%): [≈ 0, 1,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61,717 ±(99.9%) 489,531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61,717, 288,925), stdev = 127,130
[info]   CI (99.9%): [≈ 0, 551,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66,80% complete, ETA 00:44:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6800,436 ops/s
[info] # Warmup Iteration   2: 7073,701 ops/s
[info] # Warmup Iteration   3: 6951,684 ops/s
[info] # Warmup Iteration   4: 7082,429 ops/s
[info] # Warmup Iteration   5: 7070,775 ops/s
[info] Iteration   1: 7034,401 ops/s
[info]                  ·gc.alloc.rate:               187,962 MB/sec
[info]                  ·gc.alloc.rate.norm:          42056,063 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114455,140 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 7028,720 ops/s
[info]                  ·gc.alloc.rate:      187,831 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,058 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7052,043 ops/s
[info]                  ·gc.alloc.rate:               188,440 MB/sec
[info]                  ·gc.alloc.rate.norm:          42056,058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114163,080 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 6906,847 ops/s
[info]                  ·gc.alloc.rate:      184,580 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,059 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7029,423 ops/s
[info]                  ·gc.alloc.rate:      187,821 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,063 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   7010,287 ±(99.9%) 225,606 ops/s [Average]
[info]   (min, avg, max) = (6906,847, 7010,287, 7052,043), stdev = 58,589
[info]   CI (99.9%): [6784,680, 7235,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   187,327 ±(99.9%) 5,992 MB/sec [Average]
[info]   (min, avg, max) = (184,580, 187,327, 188,440), stdev = 1,556
[info]   CI (99.9%): [181,334, 193,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42056,060 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (42056,058, 42056,060, 42056,063), stdev = 0,002
[info]   CI (99.9%): [42056,051, 42056,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,613 ±(99.9%) 1078,865 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,613, 511,535), stdev = 280,178
[info]   CI (99.9%): [≈ 0, 1283,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45723,644 ±(99.9%) 241087,905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45723,644, 114455,140), stdev = 62609,763
[info]   CI (99.9%): [≈ 0, 286811,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67,00% complete, ETA 00:43:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6870,468 ops/s
[info] # Warmup Iteration   2: 7238,097 ops/s
[info] # Warmup Iteration   3: 7036,501 ops/s
[info] # Warmup Iteration   4: 7128,675 ops/s
[info] # Warmup Iteration   5: 7235,608 ops/s
[info] Iteration   1: 7206,419 ops/s
[info]                  ·gc.alloc.rate:      139,882 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7216,960 ops/s
[info]                  ·gc.alloc.rate:               140,104 MB/sec
[info]                  ·gc.alloc.rate.norm:          30552,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 111553,729 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 7217,674 ops/s
[info]                  ·gc.alloc.rate:      140,110 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,057 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7194,918 ops/s
[info]                  ·gc.alloc.rate:      139,681 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7225,287 ops/s
[info]                  ·gc.alloc.rate:      140,258 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   7212,252 ±(99.9%) 45,397 ops/s [Average]
[info]   (min, avg, max) = (7194,918, 7212,252, 7225,287), stdev = 11,789
[info]   CI (99.9%): [7166,854, 7257,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   140,007 ±(99.9%) 0,871 MB/sec [Average]
[info]   (min, avg, max) = (139,681, 140,007, 140,258), stdev = 0,226
[info]   CI (99.9%): [139,136, 140,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30552,063 ±(99.9%) 0,047 B/op [Average]
[info]   (min, avg, max) = (30552,056, 30552,063, 30552,084), stdev = 0,012
[info]   CI (99.9%): [30552,016, 30552,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102,311 ±(99.9%) 880,930 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,311, 511,556), stdev = 228,775
[info]   CI (99.9%): [≈ 0, 983,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   22310,746 ±(99.9%) 192102,249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22310,746, 111553,729), stdev = 49888,344
[info]   CI (99.9%): [≈ 0, 214412,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67,20% complete, ETA 00:43:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7067,938 ops/s
[info] # Warmup Iteration   2: 8848,718 ops/s
[info] # Warmup Iteration   3: 8902,780 ops/s
[info] # Warmup Iteration   4: 8880,641 ops/s
[info] # Warmup Iteration   5: 8930,560 ops/s
[info] Iteration   1: 8919,039 ops/s
[info]                  ·gc.alloc.rate:                   2077,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355813,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,781 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8964,653 ops/s
[info]                  ·gc.alloc.rate:                   2087,958 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354534,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,568 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8952,927 ops/s
[info]                  ·gc.alloc.rate:                   2085,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              366565,686 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355574,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,953 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8991,418 ops/s
[info]                  ·gc.alloc.rate:                   2094,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     354655,125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,312 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8965,733 ops/s
[info]                  ·gc.alloc.rate:                   2087,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     356326,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,962 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8958,754 ±(99.9%) 101,179 ops/s [Average]
[info]   (min, avg, max) = (8919,039, 8958,754, 8991,418), stdev = 26,276
[info]   CI (99.9%): [8857,575, 9059,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2086,478 ±(99.9%) 23,692 MB/sec [Average]
[info]   (min, avg, max) = (2077,251, 2086,478, 2094,226), stdev = 6,153
[info]   CI (99.9%): [2062,786, 2110,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366557,976 ±(99.9%) 49,101 B/op [Average]
[info]   (min, avg, max) = (366544,046, 366557,976, 366568,053), stdev = 12,751
[info]   CI (99.9%): [366508,875, 366607,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2022,851 ±(99.9%) 20,035 MB/sec [Average]
[info]   (min, avg, max) = (2016,437, 2022,851, 2029,570), stdev = 5,203
[info]   CI (99.9%): [2002,816, 2042,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   355380,758 ±(99.9%) 2958,383 B/op [Average]
[info]   (min, avg, max) = (354534,703, 355380,758, 356326,423), stdev = 768,283
[info]   CI (99.9%): [352422,375, 358339,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,088 ±(99.9%) 0,152 MB/sec [Average]
[info]   (min, avg, max) = (0,037, 0,088, 0,129), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   15,515 ±(99.9%) 26,890 B/op [Average]
[info]   (min, avg, max) = (6,568, 15,515, 22,781), stdev = 6,983
[info]   CI (99.9%): [≈ 0, 42,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67,40% complete, ETA 00:43:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10091,713 ops/s
[info] # Warmup Iteration   2: 15437,246 ops/s
[info] # Warmup Iteration   3: 16234,780 ops/s
[info] # Warmup Iteration   4: 16265,925 ops/s
[info] # Warmup Iteration   5: 16089,575 ops/s
[info] Iteration   1: 16241,892 ops/s
[info]                  ·gc.alloc.rate:               412,281 MB/sec
[info]                  ·gc.alloc.rate.norm:          39952,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49572,568 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 16410,793 ops/s
[info]                  ·gc.alloc.rate:               416,608 MB/sec
[info]                  ·gc.alloc.rate.norm:          39952,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49062,164 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 16296,084 ops/s
[info]                  ·gc.alloc.rate:      413,659 MB/sec
[info]                  ·gc.alloc.rate.norm: 39952,025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 16360,700 ops/s
[info]                  ·gc.alloc.rate:                   415,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              39952,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64843,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56,065 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16348,469 ops/s
[info]                  ·gc.alloc.rate:               414,950 MB/sec
[info]                  ·gc.alloc.rate.norm:          39952,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64894,748 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   16331,588 ±(99.9%) 248,894 ops/s [Average]
[info]   (min, avg, max) = (16241,892, 16331,588, 16410,793), stdev = 64,637
[info]   CI (99.9%): [16082,694, 16580,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   414,569 ±(99.9%) 6,376 MB/sec [Average]
[info]   (min, avg, max) = (412,281, 414,569, 416,608), stdev = 1,656
[info]   CI (99.9%): [408,193, 420,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39952,027 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (39952,025, 39952,027, 39952,033), stdev = 0,004
[info]   CI (99.9%): [39952,013, 39952,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,259 ±(99.9%) 1067,733 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,259, 674,119), stdev = 277,287
[info]   CI (99.9%): [≈ 0, 1541,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   45674,535 ±(99.9%) 102778,440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45674,535, 64894,748), stdev = 26691,235
[info]   CI (99.9%): [≈ 0, 148452,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,117 ±(99.9%) 1,004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,117, 0,583), stdev = 0,261
[info]   CI (99.9%): [≈ 0, 1,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11,213 ±(99.9%) 96,547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,213, 56,065), stdev = 25,073
[info]   CI (99.9%): [≈ 0, 107,760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67,61% complete, ETA 00:42:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24422,755 ops/s
[info] # Warmup Iteration   2: 25281,080 ops/s
[info] # Warmup Iteration   3: 27731,599 ops/s
[info] # Warmup Iteration   4: 27737,729 ops/s
[info] # Warmup Iteration   5: 27537,940 ops/s
[info] Iteration   1: 27767,005 ops/s
[info]                  ·gc.alloc.rate:               476,319 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28997,061 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 27792,539 ops/s
[info]                  ·gc.alloc.rate:                   476,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28972,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,022 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,247 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 27759,256 ops/s
[info]                  ·gc.alloc.rate:                   476,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38258,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184,600 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 27682,026 ops/s
[info]                  ·gc.alloc.rate:      474,944 MB/sec
[info]                  ·gc.alloc.rate.norm: 27000,015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 27791,274 ops/s
[info]                  ·gc.alloc.rate:                   476,732 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38213,026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,536 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   27758,420 ±(99.9%) 173,855 ops/s [Average]
[info]   (min, avg, max) = (27682,026, 27758,420, 27792,539), stdev = 45,150
[info]   CI (99.9%): [27584,565, 27932,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   476,203 ±(99.9%) 2,885 MB/sec [Average]
[info]   (min, avg, max) = (474,944, 476,203, 476,808), stdev = 0,749
[info]   CI (99.9%): [473,319, 479,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   27000,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (27000,015, 27000,015, 27000,016), stdev = 0,001
[info]   CI (99.9%): [27000,013, 27000,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,537 ±(99.9%) 1068,689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,537, 674,785), stdev = 277,535
[info]   CI (99.9%): [≈ 0, 1543,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26888,111 ±(99.9%) 60557,393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26888,111, 38258,446), stdev = 15726,563
[info]   CI (99.9%): [≈ 0, 87445,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,668 ±(99.9%) 5,571 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,668, 3,256), stdev = 1,447
[info]   CI (99.9%): [≈ 0, 6,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   37,877 ±(99.9%) 315,882 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37,877, 184,600), stdev = 82,033
[info]   CI (99.9%): [≈ 0, 353,758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67,81% complete, ETA 00:42:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1386,475 ops/s
[info] # Warmup Iteration   2: 2651,884 ops/s
[info] # Warmup Iteration   3: 2653,784 ops/s
[info] # Warmup Iteration   4: 2702,181 ops/s
[info] # Warmup Iteration   5: 2686,247 ops/s
[info] Iteration   1: 2702,425 ops/s
[info]                  ·gc.alloc.rate:                   1716,758 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,151 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1180423,574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,237 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2703,520 ops/s
[info]                  ·gc.alloc.rate:               1717,692 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,174 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 787304,198 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 2697,841 ops/s
[info]                  ·gc.alloc.rate:               1713,779 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2031,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1185135,638 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 2678,179 ops/s
[info]                  ·gc.alloc.rate:                   1701,433 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,152 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     796706,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48,926 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2694,384 ops/s
[info]                  ·gc.alloc.rate:               1711,347 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,163 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2035,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1189034,603 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2695,270 ±(99.9%) 39,399 ops/s [Average]
[info]   (min, avg, max) = (2678,179, 2695,270, 2703,520), stdev = 10,232
[info]   CI (99.9%): [2655,871, 2734,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1712,202 ±(99.9%) 25,111 MB/sec [Average]
[info]   (min, avg, max) = (1701,433, 1712,202, 1717,692), stdev = 6,521
[info]   CI (99.9%): [1687,091, 1737,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   999760,161 ±(99.9%) 0,037 B/op [Average]
[info]   (min, avg, max) = (999760,151, 999760,161, 999760,174), stdev = 0,010
[info]   CI (99.9%): [999760,124, 999760,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1760,483 ±(99.9%) 1427,950 MB/sec [Average]
[info]   (min, avg, max) = (1352,671, 1760,483, 2035,339), stdev = 370,834
[info]   CI (99.9%): [332,533, 3188,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1027720,883 ±(99.9%) 828755,520 B/op [Average]
[info]   (min, avg, max) = (787304,198, 1027720,883, 1189034,603), stdev = 215225,177
[info]   CI (99.9%): [198965,363, 1856476,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14,632 ±(99.9%) 84,157 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,632, 48,926), stdev = 21,855
[info]   CI (99.9%): [≈ 0, 98,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68,01% complete, ETA 00:42:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7753,327 ops/s
[info] # Warmup Iteration   2: 9168,448 ops/s
[info] # Warmup Iteration   3: 9153,801 ops/s
[info] # Warmup Iteration   4: 9159,064 ops/s
[info] # Warmup Iteration   5: 9151,175 ops/s
[info] Iteration   1: 9165,432 ops/s
[info]                  ·gc.alloc.rate:                   1125,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              193248,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230691,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,574 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 9178,360 ops/s
[info]                  ·gc.alloc.rate:               1127,072 MB/sec
[info]                  ·gc.alloc.rate.norm:          193254,116 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 230250,432 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 9178,341 ops/s
[info]                  ·gc.alloc.rate:                   1127,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              193272,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115125,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,569 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9159,511 ops/s
[info]                  ·gc.alloc.rate:               1124,883 MB/sec
[info]                  ·gc.alloc.rate.norm:          193272,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 230842,370 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 9166,364 ops/s
[info]                  ·gc.alloc.rate:               1125,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          193272,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 230780,496 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   9169,602 ±(99.9%) 32,376 ops/s [Average]
[info]   (min, avg, max) = (9159,511, 9169,602, 9178,360), stdev = 8,408
[info]   CI (99.9%): [9137,226, 9201,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1126,012 ±(99.9%) 3,918 MB/sec [Average]
[info]   (min, avg, max) = (1124,883, 1126,012, 1127,105), stdev = 1,017
[info]   CI (99.9%): [1122,094, 1129,930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   193263,660 ±(99.9%) 44,979 B/op [Average]
[info]   (min, avg, max) = (193248,048, 193263,660, 193272,048), stdev = 11,681
[info]   CI (99.9%): [193218,681, 193308,639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1209,052 ±(99.9%) 1157,390 MB/sec [Average]
[info]   (min, avg, max) = (671,376, 1209,052, 1344,054), stdev = 300,571
[info]   CI (99.9%): [51,662, 2366,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   207537,962 ±(99.9%) 198927,407 B/op [Average]
[info]   (min, avg, max) = (115125,216, 207537,962, 230842,370), stdev = 51660,816
[info]   CI (99.9%): [8610,555, 406465,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,429 ±(99.9%) 7,533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,429, 3,574), stdev = 1,956
[info]   CI (99.9%): [≈ 0, 8,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68,21% complete, ETA 00:42:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7354,561 ops/s
[info] # Warmup Iteration   2: 10092,995 ops/s
[info] # Warmup Iteration   3: 10079,926 ops/s
[info] # Warmup Iteration   4: 10064,483 ops/s
[info] # Warmup Iteration   5: 10121,514 ops/s
[info] Iteration   1: 10176,497 ops/s
[info]                  ·gc.alloc.rate:                   1959,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              303088,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209014,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,438 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10137,466 ops/s
[info]                  ·gc.alloc.rate:                   1952,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              303119,283 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315172,636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,696 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10146,808 ops/s
[info]                  ·gc.alloc.rate:                   1954,386 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,651 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315275,363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,686 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 10137,784 ops/s
[info]                  ·gc.alloc.rate:                   1952,612 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136,043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,940 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     315917,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,926 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10126,768 ops/s
[info]                  ·gc.alloc.rate:                   1950,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     316539,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,939 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   10145,065 ±(99.9%) 72,973 ops/s [Average]
[info]   (min, avg, max) = (10126,768, 10145,065, 10176,497), stdev = 18,951
[info]   CI (99.9%): [10072,091, 10218,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1953,775 ±(99.9%) 13,339 MB/sec [Average]
[info]   (min, avg, max) = (1950,184, 1953,775, 1959,367), stdev = 3,464
[info]   CI (99.9%): [1940,436, 1967,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   303123,090 ±(99.9%) 80,449 B/op [Average]
[info]   (min, avg, max) = (303088,043, 303123,090, 303136,043), stdev = 20,892
[info]   CI (99.9%): [303042,641, 303203,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1897,035 ±(99.9%) 1174,960 MB/sec [Average]
[info]   (min, avg, max) = (1351,213, 1897,035, 2036,413), stdev = 305,133
[info]   CI (99.9%): [722,075, 3071,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   294383,872 ±(99.9%) 183775,745 B/op [Average]
[info]   (min, avg, max) = (209014,707, 294383,872, 316539,527), stdev = 47725,977
[info]   CI (99.9%): [110608,128, 478159,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10,337 ±(99.9%) 10,459 B/op [Average]
[info]   (min, avg, max) = (6,438, 10,337, 12,939), stdev = 2,716
[info]   CI (99.9%): [≈ 0, 20,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68,41% complete, ETA 00:41:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16567,781 ops/s
[info] # Warmup Iteration   2: 57912,053 ops/s
[info] # Warmup Iteration   3: 57919,850 ops/s
[info] # Warmup Iteration   4: 57538,610 ops/s
[info] # Warmup Iteration   5: 57840,058 ops/s
[info] Iteration   1: 58394,093 ops/s
[info]                  ·gc.alloc.rate:                   545,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13787,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,374 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 58542,549 ops/s
[info]                  ·gc.alloc.rate:                   547,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18123,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81,806 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 58417,546 ops/s
[info]                  ·gc.alloc.rate:               546,061 MB/sec
[info]                  ·gc.alloc.rate.norm:          14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18160,889 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 58290,263 ops/s
[info]                  ·gc.alloc.rate:                   544,926 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18146,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,562 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 58410,143 ops/s
[info]                  ·gc.alloc.rate:      545,964 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   58410,919 ±(99.9%) 345,550 ops/s [Average]
[info]   (min, avg, max) = (58290,263, 58410,919, 58542,549), stdev = 89,738
[info]   CI (99.9%): [58065,368, 58756,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   546,011 ±(99.9%) 3,268 MB/sec [Average]
[info]   (min, avg, max) = (544,926, 546,011, 547,298), stdev = 0,849
[info]   CI (99.9%): [542,743, 549,279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14712,007, 14712,007, 14712,008), stdev = 0,001
[info]   CI (99.9%): [14712,006, 14712,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,387 ±(99.9%) 1122,995 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,387, 674,203), stdev = 291,638
[info]   CI (99.9%): [≈ 0, 1629,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   13643,731 ±(99.9%) 30254,005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13643,731, 18160,889), stdev = 7856,869
[info]   CI (99.9%): [≈ 0, 43897,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,623 ±(99.9%) 5,210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,623, 3,043), stdev = 1,353
[info]   CI (99.9%): [≈ 0, 5,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   16,749 ±(99.9%) 140,058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,749, 81,806), stdev = 36,373
[info]   CI (99.9%): [≈ 0, 156,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68,61% complete, ETA 00:41:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_435ee987/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 29143,483 ops/s
[info] # Warmup Iteration   2: 45568,377 ops/s
[info] # Warmup Iteration   3: 45857,341 ops/s
[info] # Warmup Iteration   4: 45654,508 ops/s
[info] # Warmup Iteration   5: 46100,005 ops/s
[info] Iteration   1: 45853,339 ops/s
[info]                  ·gc.alloc.rate:                   682,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,841 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23148,004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,714 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45663,137 ops/s
[info]                  ·gc.alloc.rate:                   679,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,928 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23257,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,717 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         6,000 ms
[info] Iteration   3: 45857,324 ops/s
[info]                  ·gc.alloc.rate:               682,685 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431,813 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23156,911 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 45752,577 ops/s
[info]                  ·gc.alloc.rate:                   681,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,825 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23210,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,716 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 45775,809 ops/s
[info]                  ·gc.alloc.rate:               681,450 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431,894 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23197,368 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   45780,437 ±(99.9%) 309,152 ops/s [Average]
[info]   (min, avg, max) = (45663,137, 45780,437, 45857,324), stdev = 80,286
[info]   CI (99.9%): [45471,286, 46089,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   681,574 ±(99.9%) 4,490 MB/sec [Average]
[info]   (min, avg, max) = (679,878, 681,574, 682,685), stdev = 1,166
[info]   CI (99.9%): [677,083, 686,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431,860 ±(99.9%) 0,189 B/op [Average]
[info]   (min, avg, max) = (23431,813, 23431,860, 23431,928), stdev = 0,049
[info]   CI (99.9%): [23431,671, 23432,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,654 ±(99.9%) 0,643 MB/sec [Average]
[info]   (min, avg, max) = (674,387, 674,654, 674,826), stdev = 0,167
[info]   CI (99.9%): [674,011, 675,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23194,027 ±(99.9%) 170,385 B/op [Average]
[info]   (min, avg, max) = (23148,004, 23194,027, 23257,811), stdev = 44,249
[info]   CI (99.9%): [23023,641, 23364,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,021), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,430 ±(99.9%) 1,510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,430, 0,717), stdev = 0,392
[info]   CI (99.9%): [≈ 0, 1,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 6,000), stdev = 2,510
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68,81% complete, ETA 00:41:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77715,815 ops/s
[info] # Warmup Iteration   2: 84159,217 ops/s
[info] # Warmup Iteration   3: 84549,518 ops/s
[info] # Warmup Iteration   4: 84470,677 ops/s
[info] # Warmup Iteration   5: 84466,274 ops/s
[info] Iteration   1: 84166,466 ops/s
[info]                  ·gc.alloc.rate:                   632,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12617,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61,163 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 84723,068 ops/s
[info]                  ·gc.alloc.rate:                   637,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,889 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12535,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,773 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 84683,936 ops/s
[info]                  ·gc.alloc.rate:                   636,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12502,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 84556,152 ops/s
[info]                  ·gc.alloc.rate:               635,704 MB/sec
[info]                  ·gc.alloc.rate.norm:          11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12521,717 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 84418,654 ops/s
[info]                  ·gc.alloc.rate:      634,554 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   84509,655 ±(99.9%) 869,898 ops/s [Average]
[info]   (min, avg, max) = (84166,466, 84509,655, 84723,068), stdev = 225,910
[info]   CI (99.9%): [83639,757, 85379,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   635,317 ±(99.9%) 6,765 MB/sec [Average]
[info]   (min, avg, max) = (632,674, 635,317, 637,014), stdev = 1,757
[info]   CI (99.9%): [628,552, 642,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11832,005, 11832,005, 11832,005), stdev = 0,001
[info]   CI (99.9%): [11832,004, 11832,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   539,010 ±(99.9%) 1160,266 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,010, 674,889), stdev = 301,318
[info]   CI (99.9%): [≈ 0, 1699,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10035,478 ±(99.9%) 21602,777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10035,478, 12617,239), stdev = 5610,173
[info]   CI (99.9%): [≈ 0, 31638,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,667 ±(99.9%) 5,605 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,667, 3,270), stdev = 1,456
[info]   CI (99.9%): [≈ 0, 6,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12,465 ±(99.9%) 104,834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12,465, 61,163), stdev = 27,225
[info]   CI (99.9%): [≈ 0, 117,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69,01% complete, ETA 00:41:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104667,290 ops/s
[info] # Warmup Iteration   2: 112130,879 ops/s
[info] # Warmup Iteration   3: 107115,111 ops/s
[info] # Warmup Iteration   4: 111776,389 ops/s
[info] # Warmup Iteration   5: 111806,025 ops/s
[info] Iteration   1: 112060,336 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 112224,282 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 112407,552 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 112214,202 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 112259,108 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   112233,096 ±(99.9%) 477,045 ops/s [Average]
[info]   (min, avg, max) = (112060,336, 112233,096, 112407,552), stdev = 123,887
[info]   CI (99.9%): [111756,051, 112710,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,004, 0,004), stdev = 0,001
[info]   CI (99.9%): [0,004, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69,22% complete, ETA 00:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3563,142 ops/s
[info] # Warmup Iteration   2: 6503,474 ops/s
[info] # Warmup Iteration   3: 6566,226 ops/s
[info] # Warmup Iteration   4: 6579,371 ops/s
[info] # Warmup Iteration   5: 6560,372 ops/s
[info] Iteration   1: 6583,951 ops/s
[info]                  ·gc.alloc.rate:                   2043,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              488623,649 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     485201,239 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44,779 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6586,428 ops/s
[info]                  ·gc.alloc.rate:                   2044,867 MB/sec
[info]                  ·gc.alloc.rate.norm:              488623,548 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     485531,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,974 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6577,157 ops/s
[info]                  ·gc.alloc.rate:                   2041,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              488624,253 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     486833,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,923 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6572,714 ops/s
[info]                  ·gc.alloc.rate:               2040,770 MB/sec
[info]                  ·gc.alloc.rate.norm:          488623,315 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2036,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 487522,444 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 6564,224 ops/s
[info]                  ·gc.alloc.rate:                   2037,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              488623,694 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     488675,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,972 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   6576,895 ±(99.9%) 34,375 ops/s [Average]
[info]   (min, avg, max) = (6564,224, 6576,895, 6586,428), stdev = 8,927
[info]   CI (99.9%): [6542,520, 6611,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2041,877 ±(99.9%) 10,679 MB/sec [Average]
[info]   (min, avg, max) = (2037,847, 2041,877, 2044,867), stdev = 2,773
[info]   CI (99.9%): [2031,198, 2052,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   488623,692 ±(99.9%) 1,333 B/op [Average]
[info]   (min, avg, max) = (488623,315, 488623,692, 488624,253), stdev = 0,346
[info]   CI (99.9%): [488622,359, 488625,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2034,052 ±(99.9%) 12,866 MB/sec [Average]
[info]   (min, avg, max) = (2029,647, 2034,052, 2038,062), stdev = 3,341
[info]   CI (99.9%): [2021,186, 2046,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   486752,733 ±(99.9%) 5511,336 B/op [Average]
[info]   (min, avg, max) = (485201,239, 486752,733, 488675,382), stdev = 1431,276
[info]   CI (99.9%): [481241,397, 492264,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,281 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,187), stdev = 0,073
[info]   CI (99.9%): [≈ 0, 0,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16,929 ±(99.9%) 67,191 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,929, 44,779), stdev = 17,449
[info]   CI (99.9%): [≈ 0, 84,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69,42% complete, ETA 00:40:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4493,134 ops/s
[info] # Warmup Iteration   2: 4841,307 ops/s
[info] # Warmup Iteration   3: 4877,298 ops/s
[info] # Warmup Iteration   4: 4848,753 ops/s
[info] # Warmup Iteration   5: 4852,350 ops/s
[info] Iteration   1: 4853,618 ops/s
[info]                  ·gc.alloc.rate:               269,194 MB/sec
[info]                  ·gc.alloc.rate.norm:          87296,084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165871,549 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 4868,179 ops/s
[info]                  ·gc.alloc.rate:      270,024 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296,084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4840,954 ops/s
[info]                  ·gc.alloc.rate:                   268,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              87296,091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     166282,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,466 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4864,417 ops/s
[info]                  ·gc.alloc.rate:      269,824 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296,090 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4840,469 ops/s
[info]                  ·gc.alloc.rate:               268,433 MB/sec
[info]                  ·gc.alloc.rate.norm:          87296,084 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 166316,887 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   4853,527 ±(99.9%) 49,533 ops/s [Average]
[info]   (min, avg, max) = (4840,469, 4853,527, 4868,179), stdev = 12,864
[info]   CI (99.9%): [4803,994, 4903,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   269,196 ±(99.9%) 2,817 MB/sec [Average]
[info]   (min, avg, max) = (268,433, 269,196, 270,024), stdev = 0,732
[info]   CI (99.9%): [266,379, 272,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   87296,087 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (87296,084, 87296,087, 87296,091), stdev = 0,004
[info]   CI (99.9%): [87296,073, 87296,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,873 ±(99.9%) 1078,702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,873, 511,496), stdev = 280,136
[info]   CI (99.9%): [≈ 0, 1385,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   99694,196 ±(99.9%) 350439,796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99694,196, 166316,887), stdev = 91008,102
[info]   CI (99.9%): [≈ 0, 450133,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,041), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,693 ±(99.9%) 23,189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,693, 13,466), stdev = 6,022
[info]   CI (99.9%): [≈ 0, 25,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69,62% complete, ETA 00:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4433494,594 ops/s
[info] # Warmup Iteration   2: 6127338,004 ops/s
[info] # Warmup Iteration   3: 6114505,223 ops/s
[info] # Warmup Iteration   4: 6161424,269 ops/s
[info] # Warmup Iteration   5: 6166817,136 ops/s
[info] Iteration   1: 6148834,065 ops/s
[info]                  ·gc.alloc.rate:                   3813,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4064,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 6190117,906 ops/s
[info]                  ·gc.alloc.rate:                   3838,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     862,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6131276,105 ops/s
[info]                  ·gc.alloc.rate:                   3802,031 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1046,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6156076,129 ops/s
[info]                  ·gc.alloc.rate:                   3817,868 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,683 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     869,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 6173103,374 ops/s
[info]                  ·gc.alloc.rate:                   3827,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1041,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6159881,516 ±(99.9%) 87041,876 ops/s [Average]
[info]   (min, avg, max) = (6131276,105, 6159881,516, 6190117,906), stdev = 22604,499
[info]   CI (99.9%): [6072839,640, 6246923,392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3819,886 ±(99.9%) 53,894 MB/sec [Average]
[info]   (min, avg, max) = (3802,031, 3819,886, 3838,579), stdev = 13,996
[info]   CI (99.9%): [3765,992, 3873,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (976,000, 976,000, 976,000), stdev = 0,001
[info]   CI (99.9%): [976,000, 976,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3804,721 ±(99.9%) 1429,278 MB/sec [Average]
[info]   (min, avg, max) = (3393,731, 3804,721, 4084,375), stdev = 371,179
[info]   CI (99.9%): [2375,442, 5233,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   972,287 ±(99.9%) 372,533 B/op [Average]
[info]   (min, avg, max) = (862,893, 972,287, 1046,948), stdev = 96,746
[info]   CI (99.9%): [599,754, 1344,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,013, 0,016), stdev = 0,003
[info]   CI (99.9%): [0,002, 0,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69,82% complete, ETA 00:40:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5684973,065 ops/s
[info] # Warmup Iteration   2: 41996922,834 ops/s
[info] # Warmup Iteration   3: 47289219,051 ops/s
[info] # Warmup Iteration   4: 47451623,209 ops/s
[info] # Warmup Iteration   5: 47232091,125 ops/s
[info] Iteration   1: 47262734,032 ops/s
[info]                  ·gc.alloc.rate:                   480,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 47301533,328 ops/s
[info]                  ·gc.alloc.rate:                   480,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 46636751,751 ops/s
[info]                  ·gc.alloc.rate:                   474,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47201558,639 ops/s
[info]                  ·gc.alloc.rate:               479,892 MB/sec
[info]                  ·gc.alloc.rate.norm:          16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 22,476 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 47378761,562 ops/s
[info]                  ·gc.alloc.rate:      481,627 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   47156267,862 ±(99.9%) 1145346,172 ops/s [Average]
[info]   (min, avg, max) = (46636751,751, 47156267,862, 47378761,562), stdev = 297442,764
[info]   CI (99.9%): [46010921,690, 48301614,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   479,408 ±(99.9%) 11,687 MB/sec [Average]
[info]   (min, avg, max) = (474,099, 479,408, 481,627), stdev = 3,035
[info]   CI (99.9%): [467,721, 491,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   474,303 ±(99.9%) 1067,822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,303, 674,136), stdev = 277,310
[info]   CI (99.9%): [≈ 0, 1542,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   15,857 ±(99.9%) 35,788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15,857, 22,750), stdev = 9,294
[info]   CI (99.9%): [≈ 0, 51,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,531 ±(99.9%) 4,528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,531, 2,635), stdev = 1,176
[info]   CI (99.9%): [≈ 0, 5,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,089), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70,02% complete, ETA 00:39:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5301472,701 ops/s
[info] # Warmup Iteration   2: 9748654,005 ops/s
[info] # Warmup Iteration   3: 9905755,693 ops/s
[info] # Warmup Iteration   4: 9913994,321 ops/s
[info] # Warmup Iteration   5: 9841962,027 ops/s
[info] Iteration   1: 9906966,457 ops/s
[info]                  ·gc.alloc.rate:                   3474,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 9934282,435 ops/s
[info]                  ·gc.alloc.rate:                   3484,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     538,348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9866903,495 ops/s
[info]                  ·gc.alloc.rate:                   3460,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4081,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 9891863,424 ops/s
[info]                  ·gc.alloc.rate:                   3469,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     541,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9878073,781 ops/s
[info]                  ·gc.alloc.rate:                   3464,267 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     542,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   9895617,918 ±(99.9%) 101333,873 ops/s [Average]
[info]   (min, avg, max) = (9866903,495, 9895617,918, 9934282,435), stdev = 26316,085
[info]   CI (99.9%): [9794284,046, 9996951,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3470,554 ±(99.9%) 36,072 MB/sec [Average]
[info]   (min, avg, max) = (3460,523, 3470,554, 3484,581), stdev = 9,368
[info]   CI (99.9%): [3434,482, 3506,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   552,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (552,000, 552,000, 552,000), stdev = 0,001
[info]   CI (99.9%): [552,000, 552,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3535,902 ±(99.9%) 1173,688 MB/sec [Average]
[info]   (min, avg, max) = (3391,532, 3535,902, 4081,070), stdev = 304,803
[info]   CI (99.9%): [2362,214, 4709,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   562,461 ±(99.9%) 190,677 B/op [Average]
[info]   (min, avg, max) = (538,348, 562,461, 650,986), stdev = 49,518
[info]   CI (99.9%): [371,784, 753,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,009 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (0,003, 0,009, 0,013), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70,22% complete, ETA 00:39:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47522478,156 ops/s
[info] # Warmup Iteration   2: 54578035,832 ops/s
[info] # Warmup Iteration   3: 55776894,549 ops/s
[info] # Warmup Iteration   4: 56732856,028 ops/s
[info] # Warmup Iteration   5: 56806856,915 ops/s
[info] Iteration   1: 54560778,484 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 56024468,259 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 56941674,227 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 56798199,067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 56761992,064 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   56217422,420 ±(99.9%) 3821702,861 ops/s [Average]
[info]   (min, avg, max) = (54560778,484, 56217422,420, 56941674,227), stdev = 992484,097
[info]   CI (99.9%): [52395719,559, 60039125,282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70,42% complete, ETA 00:39:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37834844,005 ops/s
[info] # Warmup Iteration   2: 45848635,825 ops/s
[info] # Warmup Iteration   3: 46610021,632 ops/s
[info] # Warmup Iteration   4: 47582697,380 ops/s
[info] # Warmup Iteration   5: 47204491,570 ops/s
[info] Iteration   1: 47334057,370 ops/s
[info]                  ·gc.alloc.rate:                   1684,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 47508378,955 ops/s
[info]                  ·gc.alloc.rate:                   1690,553 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66,855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 47509770,486 ops/s
[info]                  ·gc.alloc.rate:                   1690,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,832 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47346554,187 ops/s
[info]                  ·gc.alloc.rate:                   1684,745 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 47332130,966 ops/s
[info]                  ·gc.alloc.rate:               1683,982 MB/sec
[info]                  ·gc.alloc.rate.norm:          56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67,376 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   47406178,393 ±(99.9%) 362327,926 ops/s [Average]
[info]   (min, avg, max) = (47332130,966, 47406178,393, 47509770,486), stdev = 94095,412
[info]   CI (99.9%): [47043850,467, 47768506,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1686,757 ±(99.9%) 13,115 MB/sec [Average]
[info]   (min, avg, max) = (1683,982, 1686,757, 1690,553), stdev = 3,406
[info]   CI (99.9%): [1673,642, 1699,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56,000, 56,000, 56,000), stdev = 0,001
[info]   CI (99.9%): [56,000, 56,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1751,695 ±(99.9%) 1423,801 MB/sec [Average]
[info]   (min, avg, max) = (1344,420, 1751,695, 2026,056), stdev = 369,757
[info]   CI (99.9%): [327,894, 3175,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   58,144 ±(99.9%) 47,015 B/op [Average]
[info]   (min, avg, max) = (44,705, 58,144, 67,376), stdev = 12,210
[info]   CI (99.9%): [11,129, 105,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70,62% complete, ETA 00:38:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5666475,852 ops/s
[info] # Warmup Iteration   2: 8548225,927 ops/s
[info] # Warmup Iteration   3: 8590058,920 ops/s
[info] # Warmup Iteration   4: 8948621,125 ops/s
[info] # Warmup Iteration   5: 8930732,265 ops/s
[info] Iteration   1: 8940168,609 ops/s
[info]                  ·gc.alloc.rate:                   4180,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              736,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4738,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     834,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 8948022,850 ops/s
[info]                  ·gc.alloc.rate:                   4184,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              736,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 8935394,925 ops/s
[info]                  ·gc.alloc.rate:                   4178,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              736,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8943085,955 ops/s
[info]                  ·gc.alloc.rate:                   4182,313 MB/sec
[info]                  ·gc.alloc.rate.norm:              736,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 8862297,359 ops/s
[info]                  ·gc.alloc.rate:                   4144,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              736,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     725,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   8925793,940 ±(99.9%) 137815,455 ops/s [Average]
[info]   (min, avg, max) = (8862297,359, 8925793,940, 8948022,850), stdev = 35790,236
[info]   CI (99.9%): [8787978,484, 9063609,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4174,124 ±(99.9%) 64,938 MB/sec [Average]
[info]   (min, avg, max) = (4144,254, 4174,124, 4184,896), stdev = 16,864
[info]   CI (99.9%): [4109,186, 4239,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   736,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (736,000, 736,000, 736,000), stdev = 0,001
[info]   CI (99.9%): [736,000, 736,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4212,175 ±(99.9%) 1132,388 MB/sec [Average]
[info]   (min, avg, max) = (4073,891, 4212,175, 4738,171), stdev = 294,078
[info]   CI (99.9%): [3079,788, 5344,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   742,684 ±(99.9%) 197,296 B/op [Average]
[info]   (min, avg, max) = (716,477, 742,684, 834,130), stdev = 51,237
[info]   CI (99.9%): [545,388, 939,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,012, 0,018), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70,82% complete, ETA 00:38:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9117079,920 ops/s
[info] # Warmup Iteration   2: 11554770,361 ops/s
[info] # Warmup Iteration   3: 11518588,477 ops/s
[info] # Warmup Iteration   4: 11500828,918 ops/s
[info] # Warmup Iteration   5: 11512201,041 ops/s
[info] Iteration   1: 11488667,116 ops/s
[info]                  ·gc.alloc.rate:                   4847,006 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4755,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     651,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 11525113,319 ops/s
[info]                  ·gc.alloc.rate:                   4862,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4762,317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     650,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 11455209,175 ops/s
[info]                  ·gc.alloc.rate:                   4832,975 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4765,850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     654,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 11490067,282 ops/s
[info]                  ·gc.alloc.rate:                   4847,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4770,261 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     653,396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 11457993,455 ops/s
[info]                  ·gc.alloc.rate:                   4833,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655,205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   11483410,069 ±(99.9%) 109800,940 ops/s [Average]
[info]   (min, avg, max) = (11455209,175, 11483410,069, 11525113,319), stdev = 28514,956
[info]   CI (99.9%): [11373609,129, 11593211,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4844,697 ±(99.9%) 46,442 MB/sec [Average]
[info]   (min, avg, max) = (4832,975, 4844,697, 4862,223), stdev = 12,061
[info]   CI (99.9%): [4798,255, 4891,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   664,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (664,000, 664,000, 664,000), stdev = 0,001
[info]   CI (99.9%): [664,000, 664,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   4764,769 ±(99.9%) 22,810 MB/sec [Average]
[info]   (min, avg, max) = (4755,833, 4764,769, 4770,261), stdev = 5,924
[info]   CI (99.9%): [4741,958, 4787,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   653,049 ±(99.9%) 8,026 B/op [Average]
[info]   (min, avg, max) = (650,357, 653,049, 655,205), stdev = 2,084
[info]   CI (99.9%): [645,023, 661,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,079, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (0,009, 0,011, 0,014), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   35,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,000, 7,000), stdev = 0,001
[info]   CI (99.9%): [35,000, 35,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   15,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71,03% complete, ETA 00:38:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17664361,058 ops/s
[info] # Warmup Iteration   2: 22743478,598 ops/s
[info] # Warmup Iteration   3: 23290678,693 ops/s
[info] # Warmup Iteration   4: 23469806,080 ops/s
[info] # Warmup Iteration   5: 23423047,493 ops/s
[info] Iteration   1: 22899828,854 ops/s
[info]                  ·gc.alloc.rate:                   2095,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 22907041,739 ops/s
[info]                  ·gc.alloc.rate:                   2096,065 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138,775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 23049809,294 ops/s
[info]                  ·gc.alloc.rate:                   2108,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138,195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 22971279,457 ops/s
[info]                  ·gc.alloc.rate:                   2102,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     185,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 23024082,742 ops/s
[info]                  ·gc.alloc.rate:                   2106,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   22970408,417 ±(99.9%) 259618,810 ops/s [Average]
[info]   (min, avg, max) = (22899828,854, 22970408,417, 23049809,294), stdev = 67422,180
[info]   CI (99.9%): [22710789,608, 23230027,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2101,860 ±(99.9%) 22,452 MB/sec [Average]
[info]   (min, avg, max) = (2095,887, 2101,860, 2108,712), stdev = 5,831
[info]   CI (99.9%): [2079,408, 2124,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (144,000, 144,000, 144,000), stdev = 0,001
[info]   CI (99.9%): [144,000, 144,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2158,725 ±(99.9%) 1169,476 MB/sec [Average]
[info]   (min, avg, max) = (2017,609, 2158,725, 2701,949), stdev = 303,709
[info]   CI (99.9%): [989,249, 3328,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   147,894 ±(99.9%) 80,027 B/op [Average]
[info]   (min, avg, max) = (138,195, 147,894, 185,069), stdev = 20,783
[info]   CI (99.9%): [67,867, 227,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,083), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,004, 0,006), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71,23% complete, ETA 00:38:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8482294,245 ops/s
[info] # Warmup Iteration   2: 58799898,701 ops/s
[info] # Warmup Iteration   3: 63444129,151 ops/s
[info] # Warmup Iteration   4: 63395599,660 ops/s
[info] # Warmup Iteration   5: 63303002,264 ops/s
[info] Iteration   1: 63418317,434 ops/s
[info]                  ·gc.alloc.rate:                   1934,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 63664141,617 ops/s
[info]                  ·gc.alloc.rate:                   1941,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 63495440,964 ops/s
[info]                  ·gc.alloc.rate:                   1936,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 62991192,178 ops/s
[info]                  ·gc.alloc.rate:                   1921,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 63398218,292 ops/s
[info]                  ·gc.alloc.rate:                   1933,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,360 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   63393462,097 ±(99.9%) 955178,188 ops/s [Average]
[info]   (min, avg, max) = (62991192,178, 63393462,097, 63664141,617), stdev = 248056,742
[info]   CI (99.9%): [62438283,909, 64348640,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1933,393 ±(99.9%) 28,964 MB/sec [Average]
[info]   (min, avg, max) = (1921,268, 1933,393, 1941,720), stdev = 7,522
[info]   CI (99.9%): [1904,429, 1962,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1888,403 ±(99.9%) 1170,208 MB/sec [Average]
[info]   (min, avg, max) = (1344,802, 1888,403, 2028,484), stdev = 303,899
[info]   CI (99.9%): [718,195, 3058,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   46,885 ±(99.9%) 29,097 B/op [Average]
[info]   (min, avg, max) = (33,375, 46,885, 50,620), stdev = 7,556
[info]   CI (99.9%): [17,788, 75,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,104), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71,43% complete, ETA 00:37:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7312815,543 ops/s
[info] # Warmup Iteration   2: 14481010,504 ops/s
[info] # Warmup Iteration   3: 14398805,634 ops/s
[info] # Warmup Iteration   4: 14763835,972 ops/s
[info] # Warmup Iteration   5: 14128997,352 ops/s
[info] Iteration   1: 14253466,758 ops/s
[info]                  ·gc.alloc.rate:                   2825,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     299,847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 14197919,792 ops/s
[info]                  ·gc.alloc.rate:                   2814,494 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     301,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 13937551,645 ops/s
[info]                  ·gc.alloc.rate:                   2762,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307,184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13668786,388 ops/s
[info]                  ·gc.alloc.rate:                   2709,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13869624,834 ops/s
[info]                  ·gc.alloc.rate:                   2748,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     309,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   13985469,883 ±(99.9%) 929278,457 ops/s [Average]
[info]   (min, avg, max) = (13668786,388, 13985469,883, 14253466,758), stdev = 241330,664
[info]   CI (99.9%): [13056191,427, 14914748,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2772,351 ±(99.9%) 184,362 MB/sec [Average]
[info]   (min, avg, max) = (2709,827, 2772,351, 2825,678), stdev = 47,878
[info]   CI (99.9%): [2587,989, 2956,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (312,000, 312,000, 312,000), stdev = 0,001
[info]   CI (99.9%): [312,000, 312,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2719,821 ±(99.9%) 11,310 MB/sec [Average]
[info]   (min, avg, max) = (2715,611, 2719,821, 2722,553), stdev = 2,937
[info]   CI (99.9%): [2708,511, 2731,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   306,166 ±(99.9%) 21,566 B/op [Average]
[info]   (min, avg, max) = (299,847, 306,166, 313,451), stdev = 5,601
[info]   CI (99.9%): [284,600, 327,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,005, 0,007), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71,63% complete, ETA 00:37:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37224867,383 ops/s
[info] # Warmup Iteration   2: 49138782,200 ops/s
[info] # Warmup Iteration   3: 47599541,885 ops/s
[info] # Warmup Iteration   4: 49317501,161 ops/s
[info] # Warmup Iteration   5: 46949723,206 ops/s
[info] Iteration   1: 49667470,366 ops/s
[info]                  ·gc.alloc.rate:                   1009,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 42376434,515 ops/s
[info]                  ·gc.alloc.rate:               861,709 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24,965 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 45618362,903 ops/s
[info]                  ·gc.alloc.rate:               927,485 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23,189 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 49611677,504 ops/s
[info]                  ·gc.alloc.rate:                   1008,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 49599826,088 ops/s
[info]                  ·gc.alloc.rate:               1008,358 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21,326 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   47374754,275 ±(99.9%) 12666135,297 ops/s [Average]
[info]   (min, avg, max) = (42376434,515, 47374754,275, 49667470,366), stdev = 3289355,113
[info]   CI (99.9%): [34708618,979, 60040889,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   963,238 ±(99.9%) 257,372 MB/sec [Average]
[info]   (min, avg, max) = (861,709, 963,238, 1009,859), stdev = 66,839
[info]   CI (99.9%): [705,865, 1220,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,000, 32,000, 32,000), stdev = 0,001
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,264 ±(99.9%) 1419,093 MB/sec [Average]
[info]   (min, avg, max) = (672,011, 941,264, 1345,625), stdev = 368,534
[info]   CI (99.9%): [≈ 0, 2360,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30,953 ±(99.9%) 41,386 B/op [Average]
[info]   (min, avg, max) = (21,326, 30,953, 42,644), stdev = 10,748
[info]   CI (99.9%): [≈ 0, 72,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71,83% complete, ETA 00:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39959971,471 ops/s
[info] # Warmup Iteration   2: 50493786,476 ops/s
[info] # Warmup Iteration   3: 56310735,989 ops/s
[info] # Warmup Iteration   4: 56445378,585 ops/s
[info] # Warmup Iteration   5: 56299124,074 ops/s
[info] Iteration   1: 56468519,566 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 56548506,285 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 56449780,888 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 56295882,407 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 56406263,529 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   56433790,535 ±(99.9%) 357083,067 ops/s [Average]
[info]   (min, avg, max) = (56295882,407, 56433790,535, 56548506,285), stdev = 92733,338
[info]   CI (99.9%): [56076707,468, 56790873,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72,03% complete, ETA 00:37:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47086405,124 ops/s
[info] # Warmup Iteration   2: 44621364,060 ops/s
[info] # Warmup Iteration   3: 44839298,425 ops/s
[info] # Warmup Iteration   4: 44798849,614 ops/s
[info] # Warmup Iteration   5: 44812488,493 ops/s
[info] Iteration   1: 44724629,934 ops/s
[info]                  ·gc.alloc.rate:                   2273,315 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696,272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 44921337,512 ops/s
[info]                  ·gc.alloc.rate:                   2283,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 44893627,368 ops/s
[info]                  ·gc.alloc.rate:                   2281,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44664254,020 ops/s
[info]                  ·gc.alloc.rate:                   2270,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 44814350,767 ops/s
[info]                  ·gc.alloc.rate:                   2277,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   44803639,920 ±(99.9%) 420656,164 ops/s [Average]
[info]   (min, avg, max) = (44664254,020, 44803639,920, 44921337,512), stdev = 109243,070
[info]   CI (99.9%): [44382983,756, 45224296,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2277,242 ±(99.9%) 21,089 MB/sec [Average]
[info]   (min, avg, max) = (2270,316, 2277,242, 2283,243), stdev = 5,477
[info]   CI (99.9%): [2256,153, 2298,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2298,988 ±(99.9%) 1420,253 MB/sec [Average]
[info]   (min, avg, max) = (2025,990, 2298,988, 2709,686), stdev = 368,835
[info]   CI (99.9%): [878,735, 3719,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   80,787 ±(99.9%) 50,616 B/op [Average]
[info]   (min, avg, max) = (70,986, 80,787, 95,482), stdev = 13,145
[info]   CI (99.9%): [30,171, 131,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻⁴, 0,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72,23% complete, ETA 00:36:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2052395,839 ops/s
[info] # Warmup Iteration   2: 2790477,341 ops/s
[info] # Warmup Iteration   3: 2819512,806 ops/s
[info] # Warmup Iteration   4: 2813440,387 ops/s
[info] # Warmup Iteration   5: 2817981,538 ops/s
[info] Iteration   1: 2831736,068 ops/s
[info]                  ·gc.alloc.rate:                   2317,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1493,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2846463,478 ops/s
[info]                  ·gc.alloc.rate:                   2329,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1117,121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2790488,714 ops/s
[info]                  ·gc.alloc.rate:                   2283,509 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1522,305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2847469,741 ops/s
[info]                  ·gc.alloc.rate:                   2330,279 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1121,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2839468,842 ops/s
[info]                  ·gc.alloc.rate:                   2323,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1126,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2831125,369 ±(99.9%) 90791,136 ops/s [Average]
[info]   (min, avg, max) = (2790488,714, 2831125,369, 2847469,741), stdev = 23578,170
[info]   CI (99.9%): [2740334,233, 2921916,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2316,855 ±(99.9%) 74,504 MB/sec [Average]
[info]   (min, avg, max) = (2283,509, 2316,855, 2330,279), stdev = 19,348
[info]   CI (99.9%): [2242,351, 2391,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1288,000, 1288,000, 1288,000), stdev = 0,001
[info]   CI (99.9%): [1288,000, 1288,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2293,451 ±(99.9%) 1405,506 MB/sec [Average]
[info]   (min, avg, max) = (2020,477, 2293,451, 2698,910), stdev = 365,005
[info]   CI (99.9%): [887,945, 3698,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1276,126 ±(99.9%) 816,114 B/op [Average]
[info]   (min, avg, max) = (1117,121, 1276,126, 1522,305), stdev = 211,942
[info]   CI (99.9%): [460,012, 2092,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (0,023, 0,028, 0,035), stdev = 0,006
[info]   CI (99.9%): [0,003, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72,43% complete, ETA 00:36:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10246767,133 ops/s
[info] # Warmup Iteration   2: 12724410,525 ops/s
[info] # Warmup Iteration   3: 13125499,874 ops/s
[info] # Warmup Iteration   4: 13005029,344 ops/s
[info] # Warmup Iteration   5: 13202522,721 ops/s
[info] Iteration   1: 13109995,402 ops/s
[info]                  ·gc.alloc.rate:                   2732,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 13148868,164 ops/s
[info]                  ·gc.alloc.rate:                   2740,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 13092006,076 ops/s
[info]                  ·gc.alloc.rate:                   2728,376 MB/sec
[info]                  ·gc.alloc.rate.norm:              328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     407,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13079811,249 ops/s
[info]                  ·gc.alloc.rate:                   2725,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     326,528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13221733,178 ops/s
[info]                  ·gc.alloc.rate:                   2754,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              328,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     323,417 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   13130482,814 ±(99.9%) 220635,940 ops/s [Average]
[info]   (min, avg, max) = (13079811,249, 13130482,814, 13221733,178), stdev = 57298,453
[info]   CI (99.9%): [12909846,874, 13351118,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2736,342 ±(99.9%) 45,207 MB/sec [Average]
[info]   (min, avg, max) = (2725,992, 2736,342, 2754,980), stdev = 11,740
[info]   CI (99.9%): [2691,135, 2781,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   328,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (328,000, 328,000, 328,000), stdev = 0,001
[info]   CI (99.9%): [328,000, 328,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   2843,414 ±(99.9%) 1168,989 MB/sec [Average]
[info]   (min, avg, max) = (2697,550, 2843,414, 3386,303), stdev = 303,583
[info]   CI (99.9%): [1674,425, 4012,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   340,886 ±(99.9%) 142,605 B/op [Average]
[info]   (min, avg, max) = (323,417, 340,886, 407,095), stdev = 37,034
[info]   CI (99.9%): [198,281, 483,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,006, 0,010), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72,64% complete, ETA 00:36:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 170594,946 ops/s
[info] # Warmup Iteration   2: 190067,656 ops/s
[info] # Warmup Iteration   3: 189972,033 ops/s
[info] # Warmup Iteration   4: 189950,457 ops/s
[info] # Warmup Iteration   5: 189975,048 ops/s
[info] Iteration   1: 190034,399 ops/s
[info]                  ·gc.alloc.rate:                   3486,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4060,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33628,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,517 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 189693,032 ops/s
[info]                  ·gc.alloc.rate:                   3480,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391,988 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28141,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,518 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 190031,670 ops/s
[info]                  ·gc.alloc.rate:                   3485,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,149 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28130,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,862 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 189850,052 ops/s
[info]                  ·gc.alloc.rate:                   3482,734 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28191,475 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,518 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 189764,506 ops/s
[info]                  ·gc.alloc.rate:                   3480,876 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28226,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,518 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   189874,732 ±(99.9%) 596,218 ops/s [Average]
[info]   (min, avg, max) = (189693,032, 189874,732, 190034,399), stdev = 154,836
[info]   CI (99.9%): [189278,514, 190470,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3483,063 ±(99.9%) 10,383 MB/sec [Average]
[info]   (min, avg, max) = (3480,071, 3483,063, 3486,008), stdev = 2,697
[info]   CI (99.9%): [3472,680, 3493,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28872,002, 28872,002, 28872,002), stdev = 0,001
[info]   CI (99.9%): [28872,002, 28872,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3530,426 ±(99.9%) 1140,701 MB/sec [Average]
[info]   (min, avg, max) = (3391,988, 3530,426, 4060,295), stdev = 296,236
[info]   CI (99.9%): [2389,725, 4671,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29263,689 ±(99.9%) 9396,544 B/op [Average]
[info]   (min, avg, max) = (28130,845, 29263,689, 33628,397), stdev = 2440,253
[info]   CI (99.9%): [19867,145, 38660,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,071, 0,104), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,587 ±(99.9%) 0,593 B/op [Average]
[info]   (min, avg, max) = (0,517, 0,587, 0,862), stdev = 0,154
[info]   CI (99.9%): [≈ 0, 1,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72,84% complete, ETA 00:36:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11106,403 ops/s
[info] # Warmup Iteration   2: 20820,818 ops/s
[info] # Warmup Iteration   3: 21017,742 ops/s
[info] # Warmup Iteration   4: 20828,702 ops/s
[info] # Warmup Iteration   5: 19950,866 ops/s
[info] Iteration   1: 20956,532 ops/s
[info]                  ·gc.alloc.rate:                   1629,174 MB/sec
[info]                  ·gc.alloc.rate.norm:              122352,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101600,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 20920,884 ops/s
[info]                  ·gc.alloc.rate:                   1626,510 MB/sec
[info]                  ·gc.alloc.rate.norm:              122352,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101875,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,566 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 20244,135 ops/s
[info]                  ·gc.alloc.rate:                   1573,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              122352,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158045,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,618 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 21042,906 ops/s
[info]                  ·gc.alloc.rate:                   1636,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              122352,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101425,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,557 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21053,418 ops/s
[info]                  ·gc.alloc.rate:                   1636,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              122352,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152239,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,112 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   20843,575 ±(99.9%) 1308,413 ops/s [Average]
[info]   (min, avg, max) = (20244,135, 20843,575, 21053,418), stdev = 339,791
[info]   CI (99.9%): [19535,162, 22151,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1620,418 ±(99.9%) 101,598 MB/sec [Average]
[info]   (min, avg, max) = (1573,857, 1620,418, 1636,532), stdev = 26,385
[info]   CI (99.9%): [1518,820, 1722,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122352,021 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (122352,019, 122352,021, 122352,024), stdev = 0,002
[info]   CI (99.9%): [122352,014, 122352,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1626,532 ±(99.9%) 1434,592 MB/sec [Average]
[info]   (min, avg, max) = (1352,864, 1626,532, 2036,302), stdev = 372,559
[info]   CI (99.9%): [191,940, 3061,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   123037,444 ±(99.9%) 113131,850 B/op [Average]
[info]   (min, avg, max) = (101425,281, 123037,444, 158045,037), stdev = 29379,982
[info]   CI (99.9%): [9905,594, 236169,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,196 ±(99.9%) 3,247 B/op [Average]
[info]   (min, avg, max) = (1,557, 2,196, 3,127), stdev = 0,843
[info]   CI (99.9%): [≈ 0, 5,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,04% complete, ETA 00:35:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106456,765 ops/s
[info] # Warmup Iteration   2: 165569,953 ops/s
[info] # Warmup Iteration   3: 157014,667 ops/s
[info] # Warmup Iteration   4: 167241,002 ops/s
[info] # Warmup Iteration   5: 165932,204 ops/s
[info] Iteration   1: 165851,210 ops/s
[info]                  ·gc.alloc.rate:                   1541,829 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19253,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 166805,013 ops/s
[info]                  ·gc.alloc.rate:                   1550,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12773,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,589 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 167450,094 ops/s
[info]                  ·gc.alloc.rate:                   1556,706 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12733,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,391 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 167070,108 ops/s
[info]                  ·gc.alloc.rate:                   1553,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19159,995 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,588 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 167058,523 ops/s
[info]                  ·gc.alloc.rate:                   1552,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12788,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,196 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   166846,990 ±(99.9%) 2319,675 ops/s [Average]
[info]   (min, avg, max) = (165851,210, 166846,990, 167450,094), stdev = 602,412
[info]   CI (99.9%): [164527,315, 169166,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1551,113 ±(99.9%) 21,611 MB/sec [Average]
[info]   (min, avg, max) = (1541,829, 1551,113, 1556,706), stdev = 5,612
[info]   CI (99.9%): [1529,502, 1572,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14632,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14632,002, 14632,003, 14632,003), stdev = 0,001
[info]   CI (99.9%): [14632,002, 14632,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1625,733 ±(99.9%) 1426,062 MB/sec [Average]
[info]   (min, avg, max) = (1353,777, 1625,733, 2034,045), stdev = 370,344
[info]   CI (99.9%): [199,671, 3051,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15341,850 ±(99.9%) 13586,062 B/op [Average]
[info]   (min, avg, max) = (12733,536, 15341,850, 19253,264), stdev = 3528,257
[info]   CI (99.9%): [1755,787, 28927,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,432 ±(99.9%) 0,632 B/op [Average]
[info]   (min, avg, max) = (0,196, 0,432, 0,589), stdev = 0,164
[info]   CI (99.9%): [≈ 0, 1,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,24% complete, ETA 00:35:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 518930,109 ops/s
[info] # Warmup Iteration   2: 544683,575 ops/s
[info] # Warmup Iteration   3: 553107,778 ops/s
[info] # Warmup Iteration   4: 557953,015 ops/s
[info] # Warmup Iteration   5: 558978,172 ops/s
[info] Iteration   1: 555071,570 ops/s
[info]                  ·gc.alloc.rate:                   1148,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3813,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,177 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 558843,003 ops/s
[info]                  ·gc.alloc.rate:                   1156,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3785,866 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 560817,120 ops/s
[info]                  ·gc.alloc.rate:                   1160,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3772,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 528639,294 ops/s
[info]                  ·gc.alloc.rate:               1093,679 MB/sec
[info]                  ·gc.alloc.rate.norm:          3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2000,906 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 558572,157 ops/s
[info]                  ·gc.alloc.rate:                   1155,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3791,171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,176 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   552388,629 ±(99.9%) 51739,369 ops/s [Average]
[info]   (min, avg, max) = (528639,294, 552388,629, 560817,120), stdev = 13436,550
[info]   CI (99.9%): [500649,260, 604127,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1142,724 ±(99.9%) 106,856 MB/sec [Average]
[info]   (min, avg, max) = (1093,679, 1142,724, 1160,127), stdev = 27,750
[info]   CI (99.9%): [1035,868, 1249,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3256,001, 3256,001, 3256,001), stdev = 0,001
[info]   CI (99.9%): [3256,001, 3256,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210,107 ±(99.9%) 1158,107 MB/sec [Average]
[info]   (min, avg, max) = (672,097, 1210,107, 1345,281), stdev = 300,757
[info]   CI (99.9%): [51,999, 2368,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3432,678 ±(99.9%) 3082,522 B/op [Average]
[info]   (min, avg, max) = (2000,906, 3432,678, 3813,223), stdev = 800,521
[info]   CI (99.9%): [350,156, 6515,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,129 ±(99.9%) 0,295 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,129, 0,177), stdev = 0,077
[info]   CI (99.9%): [≈ 0, 0,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73,44% complete, ETA 00:35:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547521,065 ops/s
[info] # Warmup Iteration   2: 604283,644 ops/s
[info] # Warmup Iteration   3: 599834,278 ops/s
[info] # Warmup Iteration   4: 599567,074 ops/s
[info] # Warmup Iteration   5: 593042,573 ops/s
[info] Iteration   1: 596549,534 ops/s
[info]                  ·gc.alloc.rate:               582,152 MB/sec
[info]                  ·gc.alloc.rate.norm:          1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1349,607 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 597850,717 ops/s
[info]                  ·gc.alloc.rate:                   583,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1776,415 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,314 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 594836,757 ops/s
[info]                  ·gc.alloc.rate:                   580,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1785,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 596737,465 ops/s
[info]                  ·gc.alloc.rate:                   582,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1774,309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 596882,562 ops/s
[info]                  ·gc.alloc.rate:                   582,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1773,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   596571,407 ±(99.9%) 4205,195 ops/s [Average]
[info]   (min, avg, max) = (594836,757, 596571,407, 597850,717), stdev = 1092,076
[info]   CI (99.9%): [592366,212, 600776,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   582,206 ±(99.9%) 4,218 MB/sec [Average]
[info]   (min, avg, max) = (580,478, 582,206, 583,508), stdev = 1,095
[info]   CI (99.9%): [577,988, 586,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1536,001, 1536,001, 1536,001), stdev = 0,001
[info]   CI (99.9%): [1536,001, 1536,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   641,299 ±(99.9%) 279,413 MB/sec [Average]
[info]   (min, avg, max) = (511,508, 641,299, 674,838), stdev = 72,563
[info]   CI (99.9%): [361,886, 920,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1691,901 ±(99.9%) 737,028 B/op [Average]
[info]   (min, avg, max) = (1349,607, 1691,901, 1785,280), stdev = 191,404
[info]   CI (99.9%): [954,873, 2428,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,648 ±(99.9%) 5,403 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,648, 3,158), stdev = 1,403
[info]   CI (99.9%): [≈ 0, 6,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,707 ±(99.9%) 14,223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,707, 8,314), stdev = 3,694
[info]   CI (99.9%): [≈ 0, 15,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73,64% complete, ETA 00:34:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14704,601 ops/s
[info] # Warmup Iteration   2: 22872,448 ops/s
[info] # Warmup Iteration   3: 22675,947 ops/s
[info] # Warmup Iteration   4: 22899,965 ops/s
[info] # Warmup Iteration   5: 22966,249 ops/s
[info] Iteration   1: 22969,238 ops/s
[info]                  ·gc.alloc.rate:                   502,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,732 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35051,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,426 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 23034,280 ops/s
[info]                  ·gc.alloc.rate:                   503,792 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46082,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,713 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 23026,549 ops/s
[info]                  ·gc.alloc.rate:               503,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          34424,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46096,006 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 23038,007 ops/s
[info]                  ·gc.alloc.rate:      503,922 MB/sec
[info]                  ·gc.alloc.rate.norm: 34424,019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21781,925 ops/s
[info]                  ·gc.alloc.rate:                   476,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48778,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,504 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   22770,000 ±(99.9%) 2129,615 ops/s [Average]
[info]   (min, avg, max) = (21781,925, 22770,000, 23038,007), stdev = 553,054
[info]   CI (99.9%): [20640,385, 24899,615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   498,006 ±(99.9%) 46,724 MB/sec [Average]
[info]   (min, avg, max) = (476,327, 498,006, 503,922), stdev = 12,134
[info]   CI (99.9%): [451,282, 544,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34424,162 ±(99.9%) 1,227 B/op [Average]
[info]   (min, avg, max) = (34424,019, 34424,162, 34424,732), stdev = 0,319
[info]   CI (99.9%): [34422,934, 34425,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   507,049 ±(99.9%) 1124,807 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,049, 674,948), stdev = 292,109
[info]   CI (99.9%): [≈ 0, 1631,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35201,535 ±(99.9%) 78457,091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35201,535, 48778,252), stdev = 20375,057
[info]   CI (99.9%): [≈ 0, 113658,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,104, 0,479), stdev = 0,210
[info]   CI (99.9%): [≈ 0, 0,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7,129 ±(99.9%) 55,144 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,129, 32,713), stdev = 14,321
[info]   CI (99.9%): [≈ 0, 62,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73,84% complete, ETA 00:34:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 384060,245 ops/s
[info] # Warmup Iteration   2: 446717,366 ops/s
[info] # Warmup Iteration   3: 445560,001 ops/s
[info] # Warmup Iteration   4: 448011,513 ops/s
[info] # Warmup Iteration   5: 447618,382 ops/s
[info] Iteration   1: 448886,819 ops/s
[info]                  ·gc.alloc.rate:                   3046,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3378,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11843,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,219 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 447611,536 ops/s
[info]                  ·gc.alloc.rate:                   3037,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9523,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 447566,912 ops/s
[info]                  ·gc.alloc.rate:                   3037,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9540,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 450247,302 ops/s
[info]                  ·gc.alloc.rate:                   3055,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11870,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,218 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 449767,007 ops/s
[info]                  ·gc.alloc.rate:                   3051,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9517,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,291 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   448815,915 ±(99.9%) 4703,861 ops/s [Average]
[info]   (min, avg, max) = (447566,912, 448815,915, 450247,302), stdev = 1221,578
[info]   CI (99.9%): [444112,054, 453519,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   3045,633 ±(99.9%) 31,802 MB/sec [Average]
[info]   (min, avg, max) = (3037,086, 3045,633, 3055,415), stdev = 8,259
[info]   CI (99.9%): [3013,831, 3077,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10680,001, 10680,001, 10680,001), stdev = 0,001
[info]   CI (99.9%): [10680,001, 10680,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2983,133 ±(99.9%) 1420,253 MB/sec [Average]
[info]   (min, avg, max) = (2708,653, 2983,133, 3396,076), stdev = 368,835
[info]   CI (99.9%): [1562,880, 4403,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10459,253 ±(99.9%) 4914,307 B/op [Average]
[info]   (min, avg, max) = (9517,485, 10459,253, 11870,760), stdev = 1276,230
[info]   CI (99.9%): [5544,947, 15373,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,204 ±(99.9%) 0,307 B/op [Average]
[info]   (min, avg, max) = (0,073, 0,204, 0,291), stdev = 0,080
[info]   CI (99.9%): [≈ 0, 0,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,04% complete, ETA 00:34:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229605,358 ops/s
[info] # Warmup Iteration   2: 359314,689 ops/s
[info] # Warmup Iteration   3: 364773,093 ops/s
[info] # Warmup Iteration   4: 362954,835 ops/s
[info] # Warmup Iteration   5: 364286,398 ops/s
[info] Iteration   1: 364877,620 ops/s
[info]                  ·gc.alloc.rate:                   966,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5823,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,269 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 359191,597 ops/s
[info]                  ·gc.alloc.rate:               951,231 MB/sec
[info]                  ·gc.alloc.rate.norm:          4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2960,917 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 363896,888 ops/s
[info]                  ·gc.alloc.rate:                   963,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,779 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5846,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 363775,248 ops/s
[info]                  ·gc.alloc.rate:               963,411 MB/sec
[info]                  ·gc.alloc.rate.norm:          4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2925,023 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 364286,638 ops/s
[info]                  ·gc.alloc.rate:                   964,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5847,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   363205,598 ±(99.9%) 8797,456 ops/s [Average]
[info]   (min, avg, max) = (359191,597, 363205,598, 364877,620), stdev = 2284,671
[info]   CI (99.9%): [354408,143, 372003,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   961,843 ±(99.9%) 23,250 MB/sec [Average]
[info]   (min, avg, max) = (951,231, 961,843, 966,281), stdev = 6,038
[info]   CI (99.9%): [938,593, 985,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4168,001, 4168,001, 4168,001), stdev = 0,001
[info]   CI (99.9%): [4168,001, 4168,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1081,437 ±(99.9%) 1425,439 MB/sec [Average]
[info]   (min, avg, max) = (675,748, 1081,437, 1353,412), stdev = 370,182
[info]   CI (99.9%): [≈ 0, 2506,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4680,850 ±(99.9%) 6109,200 B/op [Average]
[info]   (min, avg, max) = (2925,023, 4680,850, 5847,902), stdev = 1586,540
[info]   CI (99.9%): [≈ 0, 10790,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,126 ±(99.9%) 0,464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,126, 0,269), stdev = 0,121
[info]   CI (99.9%): [≈ 0, 0,590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,25% complete, ETA 00:34:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1239056,434 ops/s
[info] # Warmup Iteration   2: 1347080,167 ops/s
[info] # Warmup Iteration   3: 1358942,044 ops/s
[info] # Warmup Iteration   4: 1353808,430 ops/s
[info] # Warmup Iteration   5: 1356344,810 ops/s
[info] Iteration   1: 1355207,215 ops/s
[info]                  ·gc.alloc.rate:                   2645,076 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3132,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1352083,616 ops/s
[info]                  ·gc.alloc.rate:                   2639,143 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3146,318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1356350,332 ops/s
[info]                  ·gc.alloc.rate:                   2647,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,181 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3142,624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1353213,500 ops/s
[info]                  ·gc.alloc.rate:                   2641,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3155,354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1355341,535 ops/s
[info]                  ·gc.alloc.rate:                   2645,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3154,266 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1354439,240 ±(99.9%) 6699,345 ops/s [Average]
[info]   (min, avg, max) = (1352083,616, 1354439,240, 1356350,332), stdev = 1739,799
[info]   CI (99.9%): [1347739,894, 1361138,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2643,634 ±(99.9%) 12,657 MB/sec [Average]
[info]   (min, avg, max) = (2639,143, 2643,634, 2647,321), stdev = 3,287
[info]   CI (99.9%): [2630,976, 2656,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,000, 3072,000, 3072,000), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2707,558 ±(99.9%) 28,904 MB/sec [Average]
[info]   (min, avg, max) = (2697,484, 2707,558, 2716,044), stdev = 7,506
[info]   CI (99.9%): [2678,654, 2736,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3146,286 ±(99.9%) 35,469 B/op [Average]
[info]   (min, avg, max) = (3132,867, 3146,286, 3155,354), stdev = 9,211
[info]   CI (99.9%): [3110,817, 3181,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,044 ±(99.9%) 0,078 B/op [Average]
[info]   (min, avg, max) = (0,024, 0,044, 0,073), stdev = 0,020
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74,45% complete, ETA 00:33:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84497,599 ops/s
[info] # Warmup Iteration   2: 122177,415 ops/s
[info] # Warmup Iteration   3: 122958,271 ops/s
[info] # Warmup Iteration   4: 122796,955 ops/s
[info] # Warmup Iteration   5: 122541,089 ops/s
[info] Iteration   1: 123235,723 ops/s
[info]                  ·gc.alloc.rate:                   4458,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52109,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,063 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 123028,428 ops/s
[info]                  ·gc.alloc.rate:                   4451,296 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4764,827 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60954,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,331 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 122914,403 ops/s
[info]                  ·gc.alloc.rate:                   4447,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52326,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,800 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 121257,064 ops/s
[info]                  ·gc.alloc.rate:                   4387,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4770,005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61909,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,081 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 122204,587 ops/s
[info]                  ·gc.alloc.rate:                   4421,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52653,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,536 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   122528,041 ±(99.9%) 3116,693 ops/s [Average]
[info]   (min, avg, max) = (121257,064, 122528,041, 123235,723), stdev = 809,395
[info]   CI (99.9%): [119411,348, 125644,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4433,151 ±(99.9%) 112,400 MB/sec [Average]
[info]   (min, avg, max) = (4387,403, 4433,151, 4458,635), stdev = 29,190
[info]   CI (99.9%): [4320,751, 4545,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56944,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56944,003, 56944,003, 56944,004), stdev = 0,001
[info]   CI (99.9%): [56944,003, 56944,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4357,928 ±(99.9%) 1439,473 MB/sec [Average]
[info]   (min, avg, max) = (4080,090, 4357,928, 4770,005), stdev = 373,827
[info]   CI (99.9%): [2918,455, 5797,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55990,898 ±(99.9%) 19186,113 B/op [Average]
[info]   (min, avg, max) = (52109,364, 55990,898, 61909,790), stdev = 4982,573
[info]   CI (99.9%): [36804,784, 75177,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,962 ±(99.9%) 1,169 B/op [Average]
[info]   (min, avg, max) = (0,536, 0,962, 1,331), stdev = 0,304
[info]   CI (99.9%): [≈ 0, 2,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74,65% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 564397,856 ops/s
[info] # Warmup Iteration   2: 612013,249 ops/s
[info] # Warmup Iteration   3: 623873,564 ops/s
[info] # Warmup Iteration   4: 617951,379 ops/s
[info] # Warmup Iteration   5: 622002,202 ops/s
[info] Iteration   1: 619340,322 ops/s
[info]                  ·gc.alloc.rate:                   2704,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6858,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 617811,451 ops/s
[info]                  ·gc.alloc.rate:                   2697,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6890,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,265 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 614070,856 ops/s
[info]                  ·gc.alloc.rate:                   2681,116 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,453 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6944,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 622690,992 ops/s
[info]                  ·gc.alloc.rate:                   2718,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6858,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 619446,757 ops/s
[info]                  ·gc.alloc.rate:                   2704,259 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6903,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   618672,076 ±(99.9%) 12040,618 ops/s [Average]
[info]   (min, avg, max) = (614070,856, 618672,076, 622690,992), stdev = 3126,910
[info]   CI (99.9%): [606631,458, 630712,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2701,190 ±(99.9%) 52,785 MB/sec [Average]
[info]   (min, avg, max) = (2681,116, 2701,190, 2718,985), stdev = 13,708
[info]   CI (99.9%): [2648,405, 2753,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   6872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6872,001, 6872,001, 6872,001), stdev = 0,001
[info]   CI (99.9%): [6872,001, 6872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2708,687 ±(99.9%) 27,120 MB/sec [Average]
[info]   (min, avg, max) = (2698,870, 2708,687, 2716,525), stdev = 7,043
[info]   CI (99.9%): [2681,568, 2735,807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6891,201 ±(99.9%) 137,696 B/op [Average]
[info]   (min, avg, max) = (6858,626, 6891,201, 6944,630), stdev = 35,759
[info]   CI (99.9%): [6753,505, 7028,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,148 ±(99.9%) 0,303 B/op [Average]
[info]   (min, avg, max) = (0,053, 0,148, 0,265), stdev = 0,079
[info]   CI (99.9%): [≈ 0, 0,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74,85% complete, ETA 00:33:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305542,786 ops/s
[info] # Warmup Iteration   2: 365010,301 ops/s
[info] # Warmup Iteration   3: 358857,157 ops/s
[info] # Warmup Iteration   4: 355827,123 ops/s
[info] # Warmup Iteration   5: 361151,853 ops/s
[info] Iteration   1: 359540,112 ops/s
[info]                  ·gc.alloc.rate:               548,260 MB/sec
[info]                  ·gc.alloc.rate.norm:          2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2239,475 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 358558,742 ops/s
[info]                  ·gc.alloc.rate:                   546,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2961,963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,933 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 358704,644 ops/s
[info]                  ·gc.alloc.rate:      546,955 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 357638,802 ops/s
[info]                  ·gc.alloc.rate:                   545,408 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2969,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,275 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 358038,142 ops/s
[info]                  ·gc.alloc.rate:               545,923 MB/sec
[info]                  ·gc.alloc.rate.norm:          2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2954,379 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   358496,088 ±(99.9%) 2778,114 ops/s [Average]
[info]   (min, avg, max) = (357638,802, 358496,088, 359540,112), stdev = 721,467
[info]   CI (99.9%): [355717,974, 361274,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   546,667 ±(99.9%) 4,206 MB/sec [Average]
[info]   (min, avg, max) = (545,408, 546,667, 548,260), stdev = 1,092
[info]   CI (99.9%): [542,461, 550,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2400,001, 2400,001, 2400,001), stdev = 0,001
[info]   CI (99.9%): [2400,001, 2400,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,654 ±(99.9%) 1123,695 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,654, 674,836), stdev = 291,820
[info]   CI (99.9%): [≈ 0, 1630,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2225,070 ±(99.9%) 4938,843 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2225,070, 2969,532), stdev = 1282,602
[info]   CI (99.9%): [≈ 0, 7163,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,693 ±(99.9%) 5,833 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,693, 3,402), stdev = 1,515
[info]   CI (99.9%): [≈ 0, 6,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,042 ±(99.9%) 25,601 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,042, 14,933), stdev = 6,649
[info]   CI (99.9%): [≈ 0, 28,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,414
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,05% complete, ETA 00:33:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 473979,061 ops/s
[info] # Warmup Iteration   2: 684758,926 ops/s
[info] # Warmup Iteration   3: 683263,839 ops/s
[info] # Warmup Iteration   4: 682707,218 ops/s
[info] # Warmup Iteration   5: 679721,198 ops/s
[info] Iteration   1: 681754,785 ops/s
[info]                  ·gc.alloc.rate:               498,992 MB/sec
[info]                  ·gc.alloc.rate.norm:          1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1180,940 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 682866,806 ops/s
[info]                  ·gc.alloc.rate:                   499,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1554,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,672 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 586336,812 ops/s
[info]                  ·gc.alloc.rate:      429,160 MB/sec
[info]                  ·gc.alloc.rate.norm: 1152,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 681700,590 ops/s
[info]                  ·gc.alloc.rate:                   499,002 MB/sec
[info]                  ·gc.alloc.rate.norm:              1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1557,022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,096 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 684039,757 ops/s
[info]                  ·gc.alloc.rate:               500,603 MB/sec
[info]                  ·gc.alloc.rate.norm:          1152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1552,465 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   663339,750 ±(99.9%) 165795,630 ops/s [Average]
[info]   (min, avg, max) = (586336,812, 663339,750, 684039,757), stdev = 43056,599
[info]   CI (99.9%): [497544,120, 829135,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   485,511 ±(99.9%) 121,327 MB/sec [Average]
[info]   (min, avg, max) = (429,160, 485,511, 500,603), stdev = 31,508
[info]   CI (99.9%): [364,185, 606,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1152,001, 1152,001, 1152,001), stdev = 0,001
[info]   CI (99.9%): [1152,000, 1152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   506,992 ±(99.9%) 1124,651 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,992, 674,625), stdev = 292,068
[info]   CI (99.9%): [≈ 0, 1631,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1168,958 ±(99.9%) 2592,269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1168,958, 1557,022), stdev = 673,204
[info]   CI (99.9%): [≈ 0, 3761,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,291), stdev = 0,127
[info]   CI (99.9%): [≈ 0, 0,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,154 ±(99.9%) 1,127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,154, 0,672), stdev = 0,293
[info]   CI (99.9%): [≈ 0, 1,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,25% complete, ETA 00:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2138152,012 ops/s
[info] # Warmup Iteration   2: 2379162,890 ops/s
[info] # Warmup Iteration   3: 2199010,516 ops/s
[info] # Warmup Iteration   4: 2093352,749 ops/s
[info] # Warmup Iteration   5: 2204250,400 ops/s
[info] Iteration   1: 2203440,419 ops/s
[info]                  ·gc.alloc.rate:               1019,140 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 480,538 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2199881,758 ops/s
[info]                  ·gc.alloc.rate:                   1017,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     961,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2187919,872 ops/s
[info]                  ·gc.alloc.rate:               1012,311 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 483,468 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2191775,174 ops/s
[info]                  ·gc.alloc.rate:                   1013,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,482 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     965,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2207468,300 ops/s
[info]                  ·gc.alloc.rate:               1020,886 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479,208 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2198097,105 ±(99.9%) 31229,301 ops/s [Average]
[info]   (min, avg, max) = (2187919,872, 2198097,105, 2207468,300), stdev = 8110,150
[info]   CI (99.9%): [2166867,804, 2229326,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1016,789 ±(99.9%) 13,771 MB/sec [Average]
[info]   (min, avg, max) = (1012,311, 1016,789, 1020,886), stdev = 3,576
[info]   CI (99.9%): [1003,017, 1030,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,175 ±(99.9%) 1417,536 MB/sec [Average]
[info]   (min, avg, max) = (672,000, 941,175, 1344,482), stdev = 368,130
[info]   CI (99.9%): [≈ 0, 2358,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   674,055 ±(99.9%) 1017,575 B/op [Average]
[info]   (min, avg, max) = (479,208, 674,055, 965,314), stdev = 264,261
[info]   CI (99.9%): [≈ 0, 1691,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,045), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75,45% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2552421,955 ops/s
[info] # Warmup Iteration   2: 2546327,824 ops/s
[info] # Warmup Iteration   3: 2315293,574 ops/s
[info] # Warmup Iteration   4: 2312489,656 ops/s
[info] # Warmup Iteration   5: 2315548,185 ops/s
[info] Iteration   1: 2313618,882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2322643,500 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2317059,166 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2317239,732 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2317459,346 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2317604,125 ±(99.9%) 12437,072 ops/s [Average]
[info]   (min, avg, max) = (2313618,882, 2317604,125, 2322643,500), stdev = 3229,868
[info]   CI (99.9%): [2305167,053, 2330041,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75,65% complete, ETA 00:32:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 366540,302 ops/s
[info] # Warmup Iteration   2: 441537,027 ops/s
[info] # Warmup Iteration   3: 433142,984 ops/s
[info] # Warmup Iteration   4: 433934,506 ops/s
[info] # Warmup Iteration   5: 429922,276 ops/s
[info] Iteration   1: 431865,245 ops/s
[info]                  ·gc.alloc.rate:                   621,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2454,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,920 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 434902,422 ops/s
[info]                  ·gc.alloc.rate:      625,587 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 434904,431 ops/s
[info]                  ·gc.alloc.rate:                   625,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2437,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,226 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 434631,121 ops/s
[info]                  ·gc.alloc.rate:               625,232 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2428,923 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 432658,460 ops/s
[info]                  ·gc.alloc.rate:                   622,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2440,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   433792,336 ±(99.9%) 5503,850 ops/s [Average]
[info]   (min, avg, max) = (431865,245, 433792,336, 434904,431), stdev = 1429,332
[info]   CI (99.9%): [428288,486, 439296,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   623,922 ±(99.9%) 7,960 MB/sec [Average]
[info]   (min, avg, max) = (621,085, 623,922, 625,587), stdev = 2,067
[info]   CI (99.9%): [615,962, 631,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   537,599 ±(99.9%) 1157,232 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,599, 673,278), stdev = 300,529
[info]   CI (99.9%): [≈ 0, 1694,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1952,086 ±(99.9%) 4202,159 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1952,086, 2454,260), stdev = 1091,287
[info]   CI (99.9%): [≈ 0, 6154,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,785 ±(99.9%) 6,532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,785, 3,819), stdev = 1,696
[info]   CI (99.9%): [≈ 0, 7,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,859 ±(99.9%) 23,811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,859, 13,920), stdev = 6,184
[info]   CI (99.9%): [≈ 0, 26,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 3,000), stdev = 1,304
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75,86% complete, ETA 00:32:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185544,650 ops/s
[info] # Warmup Iteration   2: 197183,638 ops/s
[info] # Warmup Iteration   3: 196841,192 ops/s
[info] # Warmup Iteration   4: 196814,383 ops/s
[info] # Warmup Iteration   5: 196872,723 ops/s
[info] Iteration   1: 196784,752 ops/s
[info]                  ·gc.alloc.rate:               502,346 MB/sec
[info]                  ·gc.alloc.rate.norm:          4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4085,568 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 197650,025 ops/s
[info]                  ·gc.alloc.rate:      504,357 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 197255,242 ops/s
[info]                  ·gc.alloc.rate:                   503,312 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5383,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,032 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 197388,387 ops/s
[info]                  ·gc.alloc.rate:                   503,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5379,873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,664 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 197216,187 ops/s
[info]                  ·gc.alloc.rate:               503,145 MB/sec
[info]                  ·gc.alloc.rate.norm:          4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5368,808 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   197258,918 ±(99.9%) 1212,189 ops/s [Average]
[info]   (min, avg, max) = (196784,752, 197258,918, 197650,025), stdev = 314,802
[info]   CI (99.9%): [196046,729, 198471,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   503,372 ±(99.9%) 2,846 MB/sec [Average]
[info]   (min, avg, max) = (502,346, 503,372, 504,357), stdev = 0,739
[info]   CI (99.9%): [500,526, 506,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,630 ±(99.9%) 1123,915 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,630, 674,761), stdev = 291,877
[info]   CI (99.9%): [≈ 0, 1630,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4043,571 ±(99.9%) 8966,687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4043,571, 5383,608), stdev = 2328,620
[info]   CI (99.9%): [≈ 0, 13010,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,644 ±(99.9%) 5,368 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,644, 3,137), stdev = 1,394
[info]   CI (99.9%): [≈ 0, 6,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,139 ±(99.9%) 42,834 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,139, 25,032), stdev = 11,124
[info]   CI (99.9%): [≈ 0, 47,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76,06% complete, ETA 00:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59506,253 ops/s
[info] # Warmup Iteration   2: 72561,558 ops/s
[info] # Warmup Iteration   3: 73917,001 ops/s
[info] # Warmup Iteration   4: 73851,829 ops/s
[info] # Warmup Iteration   5: 73780,524 ops/s
[info] Iteration   1: 73974,711 ops/s
[info]                  ·gc.alloc.rate:                   2491,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2695,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57346,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,886 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 73518,920 ops/s
[info]                  ·gc.alloc.rate:                   2476,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43362,112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,891 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 65239,702 ops/s
[info]                  ·gc.alloc.rate:                   2198,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48944,366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 73917,307 ops/s
[info]                  ·gc.alloc.rate:                   2490,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57697,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,886 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 73727,866 ops/s
[info]                  ·gc.alloc.rate:                   2483,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              53016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57927,976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,444 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   72075,701 ±(99.9%) 14731,061 ops/s [Average]
[info]   (min, avg, max) = (65239,702, 72075,701, 73974,711), stdev = 3825,610
[info]   CI (99.9%): [57344,640, 86806,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2427,925 ±(99.9%) 495,246 MB/sec [Average]
[info]   (min, avg, max) = (2198,114, 2427,925, 2491,820), stdev = 128,614
[info]   CI (99.9%): [1932,679, 2923,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53016,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (53016,006, 53016,006, 53016,006), stdev = 0,001
[info]   CI (99.9%): [53016,004, 53016,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2434,665 ±(99.9%) 1431,804 MB/sec [Average]
[info]   (min, avg, max) = (2025,519, 2434,665, 2713,073), stdev = 371,835
[info]   CI (99.9%): [1002,860, 3866,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53055,606 ±(99.9%) 25437,661 B/op [Average]
[info]   (min, avg, max) = (43362,112, 53055,606, 57927,976), stdev = 6606,080
[info]   CI (99.9%): [27617,944, 78493,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,042), stdev = 0,009
[info]   CI (99.9%): [0,002, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,822 ±(99.9%) 0,837 B/op [Average]
[info]   (min, avg, max) = (0,444, 0,822, 1,004), stdev = 0,217
[info]   CI (99.9%): [≈ 0, 1,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,26% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68297,581 ops/s
[info] # Warmup Iteration   2: 104321,460 ops/s
[info] # Warmup Iteration   3: 104743,401 ops/s
[info] # Warmup Iteration   4: 104965,105 ops/s
[info] # Warmup Iteration   5: 103444,711 ops/s
[info] Iteration   1: 104289,191 ops/s
[info]                  ·gc.alloc.rate:                   1872,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30659,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,942 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 104796,257 ops/s
[info]                  ·gc.alloc.rate:                   1881,902 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20358,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,313 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 101029,698 ops/s
[info]                  ·gc.alloc.rate:                   1814,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31699,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,297 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 104444,808 ops/s
[info]                  ·gc.alloc.rate:               1875,832 MB/sec
[info]                  ·gc.alloc.rate.norm:          28264,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2037,090 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 30693,750 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 104375,318 ops/s
[info]                  ·gc.alloc.rate:                   1874,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,366 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30739,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,942 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   103787,054 ±(99.9%) 5981,631 ops/s [Average]
[info]   (min, avg, max) = (101029,698, 103787,054, 104796,257), stdev = 1553,411
[info]   CI (99.9%): [97805,423, 109768,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1863,822 ±(99.9%) 107,464 MB/sec [Average]
[info]   (min, avg, max) = (1814,282, 1863,822, 1881,902), stdev = 27,908
[info]   CI (99.9%): [1756,358, 1971,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28264,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28264,004, 28264,004, 28264,004), stdev = 0,001
[info]   CI (99.9%): [28264,003, 28264,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,479 ±(99.9%) 1170,883 MB/sec [Average]
[info]   (min, avg, max) = (1355,553, 1899,479, 2038,366), stdev = 304,075
[info]   CI (99.9%): [728,596, 3070,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28830,106 ±(99.9%) 18311,676 B/op [Average]
[info]   (min, avg, max) = (20358,854, 28830,106, 31699,253), stdev = 4755,484
[info]   CI (99.9%): [10518,431, 47141,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,699 ±(99.9%) 2,032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,699, 1,297), stdev = 0,528
[info]   CI (99.9%): [≈ 0, 2,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,46% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98615,487 ops/s
[info] # Warmup Iteration   2: 109783,531 ops/s
[info] # Warmup Iteration   3: 110369,316 ops/s
[info] # Warmup Iteration   4: 110312,327 ops/s
[info] # Warmup Iteration   5: 110715,087 ops/s
[info] Iteration   1: 110534,090 ops/s
[info]                  ·gc.alloc.rate:                   1693,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28708,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,889 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 110710,972 ops/s
[info]                  ·gc.alloc.rate:                   1696,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19129,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,888 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 110180,669 ops/s
[info]                  ·gc.alloc.rate:                   1688,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28864,952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,595 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 108311,272 ops/s
[info]                  ·gc.alloc.rate:               1660,018 MB/sec
[info]                  ·gc.alloc.rate.norm:          24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19599,642 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 107360,042 ops/s
[info]                  ·gc.alloc.rate:                   1645,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29693,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,610 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   109419,409 ±(99.9%) 5762,835 ops/s [Average]
[info]   (min, avg, max) = (107360,042, 109419,409, 110710,972), stdev = 1496,590
[info]   CI (99.9%): [103656,574, 115182,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1676,882 ±(99.9%) 88,452 MB/sec [Average]
[info]   (min, avg, max) = (1645,173, 1676,882, 1696,764), stdev = 22,971
[info]   CI (99.9%): [1588,430, 1765,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24120,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24120,004, 24120,004, 24120,004), stdev = 0,001
[info]   CI (99.9%): [24120,003, 24120,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1751,360 ±(99.9%) 1420,427 MB/sec [Average]
[info]   (min, avg, max) = (1345,668, 1751,360, 2025,363), stdev = 368,880
[info]   CI (99.9%): [330,933, 3171,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25199,178 ±(99.9%) 20570,855 B/op [Average]
[info]   (min, avg, max) = (19129,069, 25199,178, 29693,998), stdev = 5342,186
[info]   CI (99.9%): [4628,323, 45770,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,596 ±(99.9%) 1,397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,596, 0,889), stdev = 0,363
[info]   CI (99.9%): [≈ 0, 1,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76,66% complete, ETA 00:30:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11312,862 ops/s
[info] # Warmup Iteration   2: 20853,450 ops/s
[info] # Warmup Iteration   3: 20866,164 ops/s
[info] # Warmup Iteration   4: 20897,213 ops/s
[info] # Warmup Iteration   5: 20955,037 ops/s
[info] Iteration   1: 20939,975 ops/s
[info]                  ·gc.alloc.rate:                   1459,410 MB/sec
[info]                  ·gc.alloc.rate.norm:              109684,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101638,222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,565 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 20773,351 ops/s
[info]                  ·gc.alloc.rate:               1447,490 MB/sec
[info]                  ·gc.alloc.rate.norm:          109656,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102546,272 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 20789,490 ops/s
[info]                  ·gc.alloc.rate:                   1448,398 MB/sec
[info]                  ·gc.alloc.rate.norm:              109656,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102522,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,304 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20243,252 ops/s
[info]                  ·gc.alloc.rate:                   1410,533 MB/sec
[info]                  ·gc.alloc.rate.norm:              109656,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105391,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,618 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 20921,705 ops/s
[info]                  ·gc.alloc.rate:                   1457,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              109656,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102021,444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,566 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   20733,555 ±(99.9%) 1094,423 ops/s [Average]
[info]   (min, avg, max) = (20243,252, 20733,555, 20939,975), stdev = 284,218
[info]   CI (99.9%): [19639,132, 21827,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1444,692 ±(99.9%) 76,347 MB/sec [Average]
[info]   (min, avg, max) = (1410,533, 1444,692, 1459,410), stdev = 19,827
[info]   CI (99.9%): [1368,345, 1521,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109661,618 ±(99.9%) 48,199 B/op [Average]
[info]   (min, avg, max) = (109656,019, 109661,618, 109684,009), stdev = 12,517
[info]   CI (99.9%): [109613,418, 109709,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1354,398 ±(99.9%) 5,925 MB/sec [Average]
[info]   (min, avg, max) = (1352,356, 1354,398, 1356,147), stdev = 1,539
[info]   CI (99.9%): [1348,473, 1360,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   102823,938 ±(99.9%) 5713,927 B/op [Average]
[info]   (min, avg, max) = (101638,222, 102823,938, 105391,029), stdev = 1483,889
[info]   CI (99.9%): [97110,011, 108537,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,211 ±(99.9%) 9,198 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,211, 6,304), stdev = 2,389
[info]   CI (99.9%): [≈ 0, 11,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,86% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112791,435 ops/s
[info] # Warmup Iteration   2: 181427,897 ops/s
[info] # Warmup Iteration   3: 182209,211 ops/s
[info] # Warmup Iteration   4: 180976,810 ops/s
[info] # Warmup Iteration   5: 178609,250 ops/s
[info] Iteration   1: 181401,988 ops/s
[info]                  ·gc.alloc.rate:                   1341,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11725,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 162683,481 ops/s
[info]                  ·gc.alloc.rate:                   1203,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13085,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,604 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 179526,609 ops/s
[info]                  ·gc.alloc.rate:                   1327,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11866,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,548 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 182298,806 ops/s
[info]                  ·gc.alloc.rate:                   1348,183 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11694,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 181339,739 ops/s
[info]                  ·gc.alloc.rate:                   1341,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              11640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11764,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,181 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   177450,125 ±(99.9%) 32021,849 ops/s [Average]
[info]   (min, avg, max) = (162683,481, 177450,125, 182298,806), stdev = 8315,973
[info]   CI (99.9%): [145428,275, 209471,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1312,328 ±(99.9%) 236,768 MB/sec [Average]
[info]   (min, avg, max) = (1203,136, 1312,328, 1348,183), stdev = 61,488
[info]   CI (99.9%): [1075,560, 1549,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11640,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11640,002, 11640,002, 11640,003), stdev = 0,001
[info]   CI (99.9%): [11640,002, 11640,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1353,486 ±(99.9%) 6,430 MB/sec [Average]
[info]   (min, avg, max) = (1351,214, 1353,486, 1355,526), stdev = 1,670
[info]   CI (99.9%): [1347,056, 1359,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12027,372 ±(99.9%) 2292,015 B/op [Average]
[info]   (min, avg, max) = (11694,295, 12027,372, 13085,772), stdev = 595,229
[info]   CI (99.9%): [9735,357, 14319,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,375 ±(99.9%) 0,766 B/op [Average]
[info]   (min, avg, max) = (0,180, 0,375, 0,604), stdev = 0,199
[info]   CI (99.9%): [≈ 0, 1,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77,06% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 520975,861 ops/s
[info] # Warmup Iteration   2: 557014,187 ops/s
[info] # Warmup Iteration   3: 547764,041 ops/s
[info] # Warmup Iteration   4: 567737,741 ops/s
[info] # Warmup Iteration   5: 567173,926 ops/s
[info] Iteration   1: 564905,692 ops/s
[info]                  ·gc.alloc.rate:                   622,916 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1879,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,895 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 562393,667 ops/s
[info]                  ·gc.alloc.rate:      620,310 MB/sec
[info]                  ·gc.alloc.rate.norm: 1736,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 561922,484 ops/s
[info]                  ·gc.alloc.rate:                   619,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1890,059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,117 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 540881,036 ops/s
[info]                  ·gc.alloc.rate:               596,605 MB/sec
[info]                  ·gc.alloc.rate.norm:          1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1957,640 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 561544,446 ops/s
[info]                  ·gc.alloc.rate:                   619,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1885,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   558329,465 ±(99.9%) 37897,950 ops/s [Average]
[info]   (min, avg, max) = (540881,036, 558329,465, 564905,692), stdev = 9841,977
[info]   CI (99.9%): [520431,515, 596227,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   615,743 ±(99.9%) 41,566 MB/sec [Average]
[info]   (min, avg, max) = (596,605, 615,743, 622,916), stdev = 10,795
[info]   CI (99.9%): [574,177, 657,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1736,001, 1736,001, 1736,001), stdev = 0,001
[info]   CI (99.9%): [1736,001, 1736,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   538,919 ±(99.9%) 1160,070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,919, 674,693), stdev = 301,267
[info]   CI (99.9%): [≈ 0, 1698,989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1522,658 ±(99.9%) 3279,889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1522,658, 1957,640), stdev = 851,777
[info]   CI (99.9%): [≈ 0, 4802,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,651 ±(99.9%) 5,470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,651, 3,192), stdev = 1,421
[info]   CI (99.9%): [≈ 0, 6,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,814 ±(99.9%) 15,244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,814, 8,895), stdev = 3,959
[info]   CI (99.9%): [≈ 0, 17,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77,26% complete, ETA 00:30:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512866,392 ops/s
[info] # Warmup Iteration   2: 552624,900 ops/s
[info] # Warmup Iteration   3: 542507,012 ops/s
[info] # Warmup Iteration   4: 539374,388 ops/s
[info] # Warmup Iteration   5: 539777,055 ops/s
[info] Iteration   1: 542377,453 ops/s
[info]                  ·gc.alloc.rate:      5,514 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 542133,601 ops/s
[info]                  ·gc.alloc.rate:      5,512 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 540319,335 ops/s
[info]                  ·gc.alloc.rate:      5,493 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 539715,705 ops/s
[info]                  ·gc.alloc.rate:      5,488 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 539547,156 ops/s
[info]                  ·gc.alloc.rate:      5,485 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   540818,650 ±(99.9%) 5181,034 ops/s [Average]
[info]   (min, avg, max) = (539547,156, 540818,650, 542377,453), stdev = 1345,498
[info]   CI (99.9%): [535637,616, 545999,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5,498 ±(99.9%) 0,053 MB/sec [Average]
[info]   (min, avg, max) = (5,485, 5,498, 5,514), stdev = 0,014
[info]   CI (99.9%): [5,446, 5,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77,46% complete, ETA 00:29:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14574,242 ops/s
[info] # Warmup Iteration   2: 23376,437 ops/s
[info] # Warmup Iteration   3: 23300,336 ops/s
[info] # Warmup Iteration   4: 23760,247 ops/s
[info] # Warmup Iteration   5: 23749,277 ops/s
[info] Iteration   1: 23801,827 ops/s
[info]                  ·gc.alloc.rate:               454,405 MB/sec
[info]                  ·gc.alloc.rate.norm:          30048,705 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33826,453 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 23861,488 ops/s
[info]                  ·gc.alloc.rate:      455,614 MB/sec
[info]                  ·gc.alloc.rate.norm: 30048,018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23772,334 ops/s
[info]                  ·gc.alloc.rate:                   453,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44649,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34,452 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23805,973 ops/s
[info]                  ·gc.alloc.rate:                   454,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              30048,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44586,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,376 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23810,733 ops/s
[info]                  ·gc.alloc.rate:      454,509 MB/sec
[info]                  ·gc.alloc.rate.norm: 30048,017 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   23810,471 ±(99.9%) 124,062 ops/s [Average]
[info]   (min, avg, max) = (23772,334, 23810,471, 23861,488), stdev = 32,219
[info]   CI (99.9%): [23686,409, 23934,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   454,573 ±(99.9%) 2,496 MB/sec [Average]
[info]   (min, avg, max) = (453,823, 454,573, 455,614), stdev = 0,648
[info]   CI (99.9%): [452,077, 457,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30048,155 ±(99.9%) 1,182 B/op [Average]
[info]   (min, avg, max) = (30048,017, 30048,155, 30048,705), stdev = 0,307
[info]   CI (99.9%): [30046,973, 30049,338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   372,063 ±(99.9%) 1332,677 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,063, 674,424), stdev = 346,092
[info]   CI (99.9%): [≈ 0, 1704,740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24612,464 ±(99.9%) 88163,856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24612,464, 44649,811), stdev = 22895,873
[info]   CI (99.9%): [≈ 0, 112776,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,108 ±(99.9%) 0,888 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,108, 0,520), stdev = 0,231
[info]   CI (99.9%): [≈ 0, 0,996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7,166 ±(99.9%) 58,781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,166, 34,452), stdev = 15,265
[info]   CI (99.9%): [≈ 0, 65,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77,67% complete, ETA 00:29:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1644046,681 ops/s
[info] # Warmup Iteration   2: 2504973,212 ops/s
[info] # Warmup Iteration   3: 2580018,636 ops/s
[info] # Warmup Iteration   4: 2583781,798 ops/s
[info] # Warmup Iteration   5: 2596473,998 ops/s
[info] Iteration   1: 2595097,425 ops/s
[info]                  ·gc.alloc.rate:                   3509,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2050,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2553431,627 ops/s
[info]                  ·gc.alloc.rate:                   3452,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2089,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         9,000 ms
[info] Iteration   3: 2595344,625 ops/s
[info]                  ·gc.alloc.rate:                   3508,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073,952 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2470,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 2595940,185 ops/s
[info]                  ·gc.alloc.rate:                   3509,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2061,193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2587646,892 ops/s
[info]                  ·gc.alloc.rate:                   3498,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3401,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069,424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2585492,151 ±(99.9%) 70241,646 ops/s [Average]
[info]   (min, avg, max) = (2553431,627, 2585492,151, 2595940,185), stdev = 18241,532
[info]   CI (99.9%): [2515250,505, 2655733,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3495,870 ±(99.9%) 94,505 MB/sec [Average]
[info]   (min, avg, max) = (3452,827, 3495,870, 3509,857), stdev = 24,543
[info]   CI (99.9%): [3401,365, 3590,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2128,000, 2128,000, 2128,000), stdev = 0,001
[info]   CI (99.9%): [2128,000, 2128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3529,448 ±(99.9%) 1172,500 MB/sec [Average]
[info]   (min, avg, max) = (3381,705, 3529,448, 4073,952), stdev = 304,494
[info]   CI (99.9%): [2356,948, 4701,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2148,209 ±(99.9%) 696,186 B/op [Average]
[info]   (min, avg, max) = (2050,554, 2148,209, 2470,634), stdev = 180,797
[info]   CI (99.9%): [1452,024, 2844,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,038 ±(99.9%) 0,034 B/op [Average]
[info]   (min, avg, max) = (0,025, 0,038, 0,050), stdev = 0,009
[info]   CI (99.9%): [0,004, 0,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   18,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,600, 9,000), stdev = 3,050
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77,87% complete, ETA 00:29:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108096,948 ops/s
[info] # Warmup Iteration   2: 891000,109 ops/s
[info] # Warmup Iteration   3: 893113,256 ops/s
[info] # Warmup Iteration   4: 885818,407 ops/s
[info] # Warmup Iteration   5: 888267,584 ops/s
[info] Iteration   1: 865689,125 ops/s
[info]                  ·gc.alloc.rate:               550,043 MB/sec
[info]                  ·gc.alloc.rate.norm:          1000,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 930,033 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 865482,058 ops/s
[info]                  ·gc.alloc.rate:                   549,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1225,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,784 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 868164,670 ops/s
[info]                  ·gc.alloc.rate:                   551,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1222,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 861061,073 ops/s
[info]                  ·gc.alloc.rate:               547,101 MB/sec
[info]                  ·gc.alloc.rate.norm:          1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1229,724 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 859590,896 ops/s
[info]                  ·gc.alloc.rate:      546,195 MB/sec
[info]                  ·gc.alloc.rate.norm: 1000,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   863997,564 ±(99.9%) 13678,132 ops/s [Average]
[info]   (min, avg, max) = (859590,896, 863997,564, 868164,670), stdev = 3552,167
[info]   CI (99.9%): [850319,432, 877675,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   548,968 ±(99.9%) 8,657 MB/sec [Average]
[info]   (min, avg, max) = (546,195, 548,968, 551,627), stdev = 2,248
[info]   CI (99.9%): [540,310, 557,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1000,000, 1000,000, 1000,001), stdev = 0,001
[info]   CI (99.9%): [1000,000, 1000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,510 ±(99.9%) 1123,307 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,510, 674,172), stdev = 291,719
[info]   CI (99.9%): [≈ 0, 1629,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   921,544 ±(99.9%) 2044,138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 921,544, 1229,724), stdev = 530,856
[info]   CI (99.9%): [≈ 0, 2965,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,530 ±(99.9%) 4,522 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,530, 2,631), stdev = 1,174
[info]   CI (99.9%): [≈ 0, 5,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,964 ±(99.9%) 8,223 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,964, 4,784), stdev = 2,136
[info]   CI (99.9%): [≈ 0, 9,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78,07% complete, ETA 00:29:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61382,519 ops/s
[info] # Warmup Iteration   2: 340482,314 ops/s
[info] # Warmup Iteration   3: 341943,506 ops/s
[info] # Warmup Iteration   4: 341236,086 ops/s
[info] # Warmup Iteration   5: 340986,711 ops/s
[info] Iteration   1: 341485,112 ops/s
[info]                  ·gc.alloc.rate:                   654,354 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3108,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,959 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 342149,699 ops/s
[info]                  ·gc.alloc.rate:                   655,684 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3102,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 341760,436 ops/s
[info]                  ·gc.alloc.rate:                   654,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3108,848 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 341374,973 ops/s
[info]                  ·gc.alloc.rate:               654,227 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3112,253 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 341587,174 ops/s
[info]                  ·gc.alloc.rate:               654,530 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3113,409 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   341671,479 ±(99.9%) 1165,358 ops/s [Average]
[info]   (min, avg, max) = (341374,973, 341671,479, 342149,699), stdev = 302,640
[info]   CI (99.9%): [340506,120, 342836,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   654,733 ±(99.9%) 2,248 MB/sec [Average]
[info]   (min, avg, max) = (654,227, 654,733, 655,684), stdev = 0,584
[info]   CI (99.9%): [652,485, 656,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3016,001, 3016,001, 3016,001), stdev = 0,001
[info]   CI (99.9%): [3016,001, 3016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,932 ±(99.9%) 2,018 MB/sec [Average]
[info]   (min, avg, max) = (674,372, 674,932, 675,670), stdev = 0,524
[info]   CI (99.9%): [672,914, 676,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3109,050 ±(99.9%) 16,464 B/op [Average]
[info]   (min, avg, max) = (3102,477, 3109,050, 3113,409), stdev = 4,276
[info]   CI (99.9%): [3092,586, 3125,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,208), stdev = 0,086
[info]   CI (99.9%): [≈ 0, 0,391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,269 ±(99.9%) 1,532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,269, 0,959), stdev = 0,398
[info]   CI (99.9%): [≈ 0, 1,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78,27% complete, ETA 00:28:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 647378,089 ops/s
[info] # Warmup Iteration   2: 783562,047 ops/s
[info] # Warmup Iteration   3: 792659,871 ops/s
[info] # Warmup Iteration   4: 795303,027 ops/s
[info] # Warmup Iteration   5: 789054,850 ops/s
[info] Iteration   1: 795372,636 ops/s
[info]                  ·gc.alloc.rate:                   598,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1012,313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 723295,291 ops/s
[info]                  ·gc.alloc.rate:                   544,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,840 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1468,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,770 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 793722,670 ops/s
[info]                  ·gc.alloc.rate:                   597,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1338,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 710324,318 ops/s
[info]                  ·gc.alloc.rate:               534,423 MB/sec
[info]                  ·gc.alloc.rate.norm:          1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1490,618 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 796451,684 ops/s
[info]                  ·gc.alloc.rate:                   599,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1329,504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   763833,320 ±(99.9%) 166276,989 ops/s [Average]
[info]   (min, avg, max) = (710324,318, 763833,320, 796451,684), stdev = 43181,606
[info]   CI (99.9%): [597556,331, 930110,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   574,606 ±(99.9%) 124,924 MB/sec [Average]
[info]   (min, avg, max) = (534,423, 574,606, 599,086), stdev = 32,442
[info]   CI (99.9%): [449,683, 699,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1184,001, 1184,001, 1184,001), stdev = 0,001
[info]   CI (99.9%): [1184,000, 1184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,339 ±(99.9%) 279,414 MB/sec [Average]
[info]   (min, avg, max) = (511,547, 641,339, 674,840), stdev = 72,563
[info]   CI (99.9%): [361,925, 920,752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1327,782 ±(99.9%) 735,474 B/op [Average]
[info]   (min, avg, max) = (1012,313, 1327,782, 1490,618), stdev = 191,000
[info]   CI (99.9%): [592,308, 2063,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,645 ±(99.9%) 5,311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,645, 3,111), stdev = 1,379
[info]   CI (99.9%): [≈ 0, 5,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,399 ±(99.9%) 11,565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,399, 6,770), stdev = 3,003
[info]   CI (99.9%): [≈ 0, 12,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78,47% complete, ETA 00:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3771510,772 ops/s
[info] # Warmup Iteration   2: 4909093,206 ops/s
[info] # Warmup Iteration   3: 4343163,636 ops/s
[info] # Warmup Iteration   4: 4941983,207 ops/s
[info] # Warmup Iteration   5: 4913369,781 ops/s
[info] Iteration   1: 4861132,170 ops/s
[info]                  ·gc.alloc.rate:                   1556,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     435,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4925411,549 ops/s
[info]                  ·gc.alloc.rate:                   1577,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     644,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 4940865,318 ops/s
[info]                  ·gc.alloc.rate:                   1582,105 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,072 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428,809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 4951648,207 ops/s
[info]                  ·gc.alloc.rate:                   1585,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     428,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4930266,086 ops/s
[info]                  ·gc.alloc.rate:                   1578,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     645,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4921864,666 ±(99.9%) 136408,544 ops/s [Average]
[info]   (min, avg, max) = (4861132,170, 4921864,666, 4951648,207), stdev = 35424,866
[info]   CI (99.9%): [4785456,123, 5058273,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1576,051 ±(99.9%) 43,726 MB/sec [Average]
[info]   (min, avg, max) = (1556,639, 1576,051, 1585,791), stdev = 11,356
[info]   CI (99.9%): [1532,325, 1619,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   1615,591 ±(99.9%) 1421,824 MB/sec [Average]
[info]   (min, avg, max) = (1344,138, 1615,591, 2023,170), stdev = 369,243
[info]   CI (99.9%): [193,767, 3037,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   516,561 ±(99.9%) 452,483 B/op [Average]
[info]   (min, avg, max) = (428,301, 516,561, 645,968), stdev = 117,509
[info]   CI (99.9%): [64,078, 969,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,022 B/op [Average]
[info]   (min, avg, max) = (0,007, 0,012, 0,020), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78,67% complete, ETA 00:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7496833,754 ops/s
[info] # Warmup Iteration   2: 9246413,311 ops/s
[info] # Warmup Iteration   3: 9182960,934 ops/s
[info] # Warmup Iteration   4: 9322423,892 ops/s
[info] # Warmup Iteration   5: 8982878,859 ops/s
[info] Iteration   1: 9225209,916 ops/s
[info]                  ·gc.alloc.rate:                   750,262 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     230,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,547 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8941906,127 ops/s
[info]                  ·gc.alloc.rate:               727,288 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118,421 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 9344749,676 ops/s
[info]                  ·gc.alloc.rate:               759,973 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113,304 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 9271861,693 ops/s
[info]                  ·gc.alloc.rate:               754,059 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114,085 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 9249089,600 ops/s
[info]                  ·gc.alloc.rate:                   752,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   9206563,402 ±(99.9%) 595167,303 ops/s [Average]
[info]   (min, avg, max) = (8941906,127, 9206563,402, 9344749,676), stdev = 154563,059
[info]   CI (99.9%): [8611396,099, 9801730,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   748,737 ±(99.9%) 48,261 MB/sec [Average]
[info]   (min, avg, max) = (727,288, 748,737, 759,973), stdev = 12,533
[info]   CI (99.9%): [700,476, 796,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (128,000, 128,000, 128,000), stdev = 0,001
[info]   CI (99.9%): [128,000, 128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   807,829 ±(99.9%) 1165,954 MB/sec [Average]
[info]   (min, avg, max) = (671,999, 807,829, 1349,484), stdev = 302,795
[info]   CI (99.9%): [≈ 0, 1973,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   138,082 ±(99.9%) 198,507 B/op [Average]
[info]   (min, avg, max) = (113,304, 138,082, 230,232), stdev = 51,552
[info]   CI (99.9%): [≈ 0, 336,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0,650 ±(99.9%) 5,507 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,650, 3,208), stdev = 1,430
[info]   CI (99.9%): [≈ 0, 6,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0,111 ±(99.9%) 0,939 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,111, 0,547), stdev = 0,244
[info]   CI (99.9%): [≈ 0, 1,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78,87% complete, ETA 00:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56076,226 ops/s
[info] # Warmup Iteration   2: 214446,249 ops/s
[info] # Warmup Iteration   3: 213108,680 ops/s
[info] # Warmup Iteration   4: 218901,534 ops/s
[info] # Warmup Iteration   5: 214971,609 ops/s
[info] Iteration   1: 215011,928 ops/s
[info]                  ·gc.alloc.rate:                   1451,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9892,594 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,305 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 215702,890 ops/s
[info]                  ·gc.alloc.rate:                   1456,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9870,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,456 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 216429,245 ops/s
[info]                  ·gc.alloc.rate:                   1460,906 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9844,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 214000,051 ops/s
[info]                  ·gc.alloc.rate:                   1444,675 MB/sec
[info]                  ·gc.alloc.rate.norm:              10624,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14948,725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,153 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 215708,328 ops/s
[info]                  ·gc.alloc.rate:               1455,952 MB/sec
[info]                  ·gc.alloc.rate.norm:          10624,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9895,528 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   215370,489 ±(99.9%) 3525,104 ops/s [Average]
[info]   (min, avg, max) = (214000,051, 215370,489, 216429,245), stdev = 915,458
[info]   CI (99.9%): [211845,385, 218895,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1453,789 ±(99.9%) 23,541 MB/sec [Average]
[info]   (min, avg, max) = (1444,675, 1453,789, 1460,906), stdev = 6,113
[info]   CI (99.9%): [1430,248, 1477,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10624,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10624,002, 10624,002, 10624,002), stdev = 0,001
[info]   CI (99.9%): [10624,002, 10624,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1489,378 ±(99.9%) 1169,690 MB/sec [Average]
[info]   (min, avg, max) = (1351,432, 1489,378, 2032,761), stdev = 303,765
[info]   CI (99.9%): [319,688, 2659,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10890,473 ±(99.9%) 8736,044 B/op [Average]
[info]   (min, avg, max) = (9844,840, 10890,473, 14948,725), stdev = 2268,723
[info]   CI (99.9%): [2154,429, 19626,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,213 ±(99.9%) 0,667 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,213, 0,456), stdev = 0,173
[info]   CI (99.9%): [≈ 0, 0,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79,07% complete, ETA 00:27:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233317,674 ops/s
[info] # Warmup Iteration   2: 320378,342 ops/s
[info] # Warmup Iteration   3: 326058,236 ops/s
[info] # Warmup Iteration   4: 322445,967 ops/s
[info] # Warmup Iteration   5: 323249,241 ops/s
[info] Iteration   1: 324988,602 ops/s
[info]                  ·gc.alloc.rate:                   642,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3267,738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,645 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 325890,402 ops/s
[info]                  ·gc.alloc.rate:      644,350 MB/sec
[info]                  ·gc.alloc.rate.norm: 3112,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 325100,837 ops/s
[info]                  ·gc.alloc.rate:                   642,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3266,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,302 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 325240,042 ops/s
[info]                  ·gc.alloc.rate:               643,123 MB/sec
[info]                  ·gc.alloc.rate.norm:          3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3255,486 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 324117,686 ops/s
[info]                  ·gc.alloc.rate:                   640,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3266,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   325067,514 ±(99.9%) 2447,826 ops/s [Average]
[info]   (min, avg, max) = (324117,686, 325067,514, 325890,402), stdev = 635,693
[info]   CI (99.9%): [322619,687, 327515,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   642,720 ±(99.9%) 4,976 MB/sec [Average]
[info]   (min, avg, max) = (640,761, 642,720, 644,350), stdev = 1,292
[info]   CI (99.9%): [637,744, 647,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3112,001, 3112,001, 3112,001), stdev = 0,001
[info]   CI (99.9%): [3112,001, 3112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   538,967 ±(99.9%) 1160,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,967, 674,739), stdev = 301,294
[info]   CI (99.9%): [≈ 0, 1699,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2611,298 ±(99.9%) 5621,048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2611,298, 3267,738), stdev = 1459,768
[info]   CI (99.9%): [≈ 0, 8232,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,663 ±(99.9%) 5,528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,663, 3,230), stdev = 1,436
[info]   CI (99.9%): [≈ 0, 6,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,210 ±(99.9%) 26,772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,210, 15,645), stdev = 6,953
[info]   CI (99.9%): [≈ 0, 29,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,28% complete, ETA 00:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 967785,250 ops/s
[info] # Warmup Iteration   2: 1039128,229 ops/s
[info] # Warmup Iteration   3: 1039647,570 ops/s
[info] # Warmup Iteration   4: 1037536,648 ops/s
[info] # Warmup Iteration   5: 1038253,721 ops/s
[info] Iteration   1: 1029548,526 ops/s
[info]                  ·gc.alloc.rate:      57,566 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1042245,222 ops/s
[info]                  ·gc.alloc.rate:      58,274 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1040266,825 ops/s
[info]                  ·gc.alloc.rate:      58,160 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1007266,575 ops/s
[info]                  ·gc.alloc.rate:               56,322 MB/sec
[info]                  ·gc.alloc.rate.norm:          88,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 799,283 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1029281,788 ops/s
[info]                  ·gc.alloc.rate:      57,562 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1029721,787 ±(99.9%) 53511,982 ops/s [Average]
[info]   (min, avg, max) = (1007266,575, 1029721,787, 1042245,222), stdev = 13896,892
[info]   CI (99.9%): [976209,805, 1083233,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   57,577 ±(99.9%) 2,983 MB/sec [Average]
[info]   (min, avg, max) = (56,322, 57,577, 58,274), stdev = 0,775
[info]   CI (99.9%): [54,594, 60,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (88,000, 88,000, 88,000), stdev = 0,001
[info]   CI (99.9%): [88,000, 88,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102,312 ±(99.9%) 880,937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,312, 511,560), stdev = 228,776
[info]   CI (99.9%): [≈ 0, 983,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   159,857 ±(99.9%) 1376,413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159,857, 799,283), stdev = 357,450
[info]   CI (99.9%): [≈ 0, 1536,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79,48% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41295,143 ops/s
[info] # Warmup Iteration   2: 70777,768 ops/s
[info] # Warmup Iteration   3: 70744,904 ops/s
[info] # Warmup Iteration   4: 71154,887 ops/s
[info] # Warmup Iteration   5: 70956,321 ops/s
[info] Iteration   1: 70818,234 ops/s
[info]                  ·gc.alloc.rate:                   3288,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75468,220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,388 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 68874,149 ops/s
[info]                  ·gc.alloc.rate:                   3197,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77688,081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,427 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 71261,284 ops/s
[info]                  ·gc.alloc.rate:                   3308,885 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75166,264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,920 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 71118,216 ops/s
[info]                  ·gc.alloc.rate:                   3302,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60262,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,921 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 71161,901 ops/s
[info]                  ·gc.alloc.rate:                   3303,850 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,557 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75307,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,841 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   70646,757 ±(99.9%) 3868,332 ops/s [Average]
[info]   (min, avg, max) = (68874,149, 70646,757, 71261,284), stdev = 1004,594
[info]   CI (99.9%): [66778,425, 74515,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3280,200 ±(99.9%) 179,985 MB/sec [Average]
[info]   (min, avg, max) = (3197,724, 3280,200, 3308,885), stdev = 46,742
[info]   CI (99.9%): [3100,215, 3460,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73080,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (73080,006, 73080,006, 73080,006), stdev = 0,001
[info]   CI (99.9%): [73080,005, 73080,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3265,210 ±(99.9%) 1166,911 MB/sec [Average]
[info]   (min, avg, max) = (2723,147, 3265,210, 3404,557), stdev = 303,043
[info]   CI (99.9%): [2098,299, 4432,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72778,498 ±(99.9%) 27234,385 B/op [Average]
[info]   (min, avg, max) = (60262,311, 72778,498, 77688,081), stdev = 7072,683
[info]   CI (99.9%): [45544,112, 100012,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,299 ±(99.9%) 1,498 B/op [Average]
[info]   (min, avg, max) = (0,920, 1,299, 1,841), stdev = 0,389
[info]   CI (99.9%): [≈ 0, 2,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,68% complete, ETA 00:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 890551,130 ops/s
[info] # Warmup Iteration   2: 1198942,241 ops/s
[info] # Warmup Iteration   3: 1199914,534 ops/s
[info] # Warmup Iteration   4: 1195730,480 ops/s
[info] # Warmup Iteration   5: 1153958,303 ops/s
[info] Iteration   1: 1196476,685 ops/s
[info]                  ·gc.alloc.rate:               687,270 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 887,201 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1159583,243 ops/s
[info]                  ·gc.alloc.rate:                   666,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916,332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1199560,190 ops/s
[info]                  ·gc.alloc.rate:               688,963 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 885,794 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1160482,021 ops/s
[info]                  ·gc.alloc.rate:                   666,606 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     916,522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1198526,737 ops/s
[info]                  ·gc.alloc.rate:               688,462 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 887,408 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1182925,775 ±(99.9%) 80595,293 ops/s [Average]
[info]   (min, avg, max) = (1159583,243, 1182925,775, 1199560,190), stdev = 20930,342
[info]   CI (99.9%): [1102330,482, 1263521,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   679,472 ±(99.9%) 46,253 MB/sec [Average]
[info]   (min, avg, max) = (666,060, 679,472, 688,963), stdev = 12,012
[info]   CI (99.9%): [633,219, 725,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,280 ±(99.9%) 2,175 MB/sec [Average]
[info]   (min, avg, max) = (674,498, 675,280, 675,839), stdev = 0,565
[info]   CI (99.9%): [673,104, 677,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   898,651 ±(99.9%) 62,530 B/op [Average]
[info]   (min, avg, max) = (885,794, 898,651, 916,522), stdev = 16,239
[info]   CI (99.9%): [836,122, 961,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,028, 0,085), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,88% complete, ETA 00:26:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1474117,715 ops/s
[info] # Warmup Iteration   2: 1563071,067 ops/s
[info] # Warmup Iteration   3: 1578457,538 ops/s
[info] # Warmup Iteration   4: 1575805,849 ops/s
[info] # Warmup Iteration   5: 1570389,471 ops/s
[info] Iteration   1: 1568875,716 ops/s
[info]                  ·gc.alloc.rate:               438,575 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 513,190 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1576773,030 ops/s
[info]                  ·gc.alloc.rate:               440,849 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 510,657 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1577637,919 ops/s
[info]                  ·gc.alloc.rate:      441,034 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1573559,601 ops/s
[info]                  ·gc.alloc.rate:                   439,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,162 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1576963,703 ops/s
[info]                  ·gc.alloc.rate:                   440,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     673,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1574761,994 ±(99.9%) 14050,467 ops/s [Average]
[info]   (min, avg, max) = (1568875,716, 1574761,994, 1577637,919), stdev = 3648,862
[info]   CI (99.9%): [1560711,527, 1588812,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   440,243 ±(99.9%) 3,950 MB/sec [Average]
[info]   (min, avg, max) = (438,575, 440,243, 441,034), stdev = 1,026
[info]   CI (99.9%): [436,293, 444,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,525 ±(99.9%) 1068,655 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,525, 674,776), stdev = 277,526
[info]   CI (99.9%): [≈ 0, 1543,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   474,429 ±(99.9%) 1067,946 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 474,429, 674,877), stdev = 277,342
[info]   CI (99.9%): [≈ 0, 1542,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,645 ±(99.9%) 5,419 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,645, 3,162), stdev = 1,407
[info]   CI (99.9%): [≈ 0, 6,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,645 ±(99.9%) 5,419 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,645, 3,162), stdev = 1,407
[info]   CI (99.9%): [≈ 0, 6,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80,08% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1487595,661 ops/s
[info] # Warmup Iteration   2: 1589577,487 ops/s
[info] # Warmup Iteration   3: 1566454,016 ops/s
[info] # Warmup Iteration   4: 1566281,864 ops/s
[info] # Warmup Iteration   5: 1465495,090 ops/s
[info] Iteration   1: 1529170,778 ops/s
[info]                  ·gc.alloc.rate:      15,546 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1566308,933 ops/s
[info]                  ·gc.alloc.rate:      15,924 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1570287,591 ops/s
[info]                  ·gc.alloc.rate:      15,964 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1565984,770 ops/s
[info]                  ·gc.alloc.rate:      15,921 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1568818,893 ops/s
[info]                  ·gc.alloc.rate:      15,948 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1560114,193 ±(99.9%) 66961,448 ops/s [Average]
[info]   (min, avg, max) = (1529170,778, 1560114,193, 1570287,591), stdev = 17389,675
[info]   CI (99.9%): [1493152,746, 1627075,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   15,861 ±(99.9%) 0,681 MB/sec [Average]
[info]   (min, avg, max) = (15,546, 15,861, 15,964), stdev = 0,177
[info]   CI (99.9%): [15,180, 16,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,28% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31627,872 ops/s
[info] # Warmup Iteration   2: 50386,668 ops/s
[info] # Warmup Iteration   3: 50409,515 ops/s
[info] # Warmup Iteration   4: 50432,351 ops/s
[info] # Warmup Iteration   5: 49869,823 ops/s
[info] Iteration   1: 50765,408 ops/s
[info]                  ·gc.alloc.rate:                   2138,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84035,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,936 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 50732,891 ops/s
[info]                  ·gc.alloc.rate:                   2137,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,283 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63133,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,292 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 50786,456 ops/s
[info]                  ·gc.alloc.rate:                   2139,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63128,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,645 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 50689,053 ops/s
[info]                  ·gc.alloc.rate:                   2135,794 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63298,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,646 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 50642,665 ops/s
[info]                  ·gc.alloc.rate:                   2133,306 MB/sec
[info]                  ·gc.alloc.rate.norm:              66312,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63393,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,294 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   50723,294 ±(99.9%) 223,939 ops/s [Average]
[info]   (min, avg, max) = (50642,665, 50723,294, 50786,456), stdev = 58,156
[info]   CI (99.9%): [50499,355, 50947,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2137,102 ±(99.9%) 9,951 MB/sec [Average]
[info]   (min, avg, max) = (2133,306, 2137,102, 2139,681), stdev = 2,584
[info]   CI (99.9%): [2127,150, 2147,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66312,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66312,008, 66312,008, 66312,009), stdev = 0,001
[info]   CI (99.9%): [66312,007, 66312,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2172,213 ±(99.9%) 1159,103 MB/sec [Average]
[info]   (min, avg, max) = (2035,283, 2172,213, 2710,678), stdev = 301,015
[info]   CI (99.9%): [1013,110, 3331,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67397,926 ±(99.9%) 35816,484 B/op [Average]
[info]   (min, avg, max) = (63128,429, 67397,926, 84035,605), stdev = 9301,427
[info]   CI (99.9%): [31581,442, 103214,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,163 ±(99.9%) 2,080 B/op [Average]
[info]   (min, avg, max) = (0,645, 1,163, 1,936), stdev = 0,540
[info]   CI (99.9%): [≈ 0, 3,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,48% complete, ETA 00:25:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273242,339 ops/s
[info] # Warmup Iteration   2: 310396,701 ops/s
[info] # Warmup Iteration   3: 299857,376 ops/s
[info] # Warmup Iteration   4: 306478,716 ops/s
[info] # Warmup Iteration   5: 310918,617 ops/s
[info] Iteration   1: 298929,908 ops/s
[info]                  ·gc.alloc.rate:                   1169,999 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7077,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,219 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 295370,741 ops/s
[info]                  ·gc.alloc.rate:               1156,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3581,544 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 311757,357 ops/s
[info]                  ·gc.alloc.rate:                   1220,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6786,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,315 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 312948,001 ops/s
[info]                  ·gc.alloc.rate:               1224,946 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6763,774 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 308107,639 ops/s
[info]                  ·gc.alloc.rate:                   1205,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6876,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,213 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   305422,729 ±(99.9%) 30268,924 ops/s [Average]
[info]   (min, avg, max) = (295370,741, 305422,729, 312948,001), stdev = 7860,743
[info]   CI (99.9%): [275153,805, 335691,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1195,406 ±(99.9%) 118,321 MB/sec [Average]
[info]   (min, avg, max) = (1156,176, 1195,406, 1224,946), stdev = 30,728
[info]   CI (99.9%): [1077,085, 1313,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6160,001, 6160,001, 6160,001), stdev = 0,001
[info]   CI (99.9%): [6160,001, 6160,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210,354 ±(99.9%) 1158,371 MB/sec [Average]
[info]   (min, avg, max) = (672,223, 1210,354, 1346,064), stdev = 300,825
[info]   CI (99.9%): [51,983, 2368,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6217,190 ±(99.9%) 5693,397 B/op [Average]
[info]   (min, avg, max) = (3581,544, 6217,190, 7077,485), stdev = 1478,557
[info]   CI (99.9%): [523,793, 11910,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,149 ±(99.9%) 0,548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,149, 0,315), stdev = 0,142
[info]   CI (99.9%): [≈ 0, 0,697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,68% complete, ETA 00:25:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16296,660 ops/s
[info] # Warmup Iteration   2: 31370,165 ops/s
[info] # Warmup Iteration   3: 31622,273 ops/s
[info] # Warmup Iteration   4: 31459,268 ops/s
[info] # Warmup Iteration   5: 31471,904 ops/s
[info] Iteration   1: 31639,277 ops/s
[info]                  ·gc.alloc.rate:                   1727,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100954,597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,035 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31530,720 ops/s
[info]                  ·gc.alloc.rate:                   1721,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67591,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31162,202 ops/s
[info]                  ·gc.alloc.rate:                   1701,150 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102704,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,103 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31546,443 ops/s
[info]                  ·gc.alloc.rate:                   1722,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101554,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,038 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 31648,264 ops/s
[info]                  ·gc.alloc.rate:                   1727,423 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67506,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,070 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   31505,381 ±(99.9%) 766,375 ops/s [Average]
[info]   (min, avg, max) = (31162,202, 31505,381, 31648,264), stdev = 199,025
[info]   CI (99.9%): [30739,006, 32271,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1719,880 ±(99.9%) 41,732 MB/sec [Average]
[info]   (min, avg, max) = (1701,150, 1719,880, 1727,423), stdev = 10,838
[info]   CI (99.9%): [1678,148, 1761,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85920,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (85920,013, 85920,014, 85920,014), stdev = 0,001
[info]   CI (99.9%): [85920,012, 85920,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1761,994 ±(99.9%) 1428,356 MB/sec [Average]
[info]   (min, avg, max) = (1354,091, 1761,994, 2035,687), stdev = 370,940
[info]   CI (99.9%): [333,638, 3190,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88062,317 ±(99.9%) 72148,005 B/op [Average]
[info]   (min, avg, max) = (67506,883, 88062,317, 102704,605), stdev = 18736,608
[info]   CI (99.9%): [15914,312, 160210,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,457 ±(99.9%) 2,212 B/op [Average]
[info]   (min, avg, max) = (1,035, 1,457, 2,103), stdev = 0,575
[info]   CI (99.9%): [≈ 0, 3,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,89% complete, ETA 00:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95543,112 ops/s
[info] # Warmup Iteration   2: 142706,345 ops/s
[info] # Warmup Iteration   3: 143548,369 ops/s
[info] # Warmup Iteration   4: 141964,885 ops/s
[info] # Warmup Iteration   5: 142663,011 ops/s
[info] Iteration   1: 143468,497 ops/s
[info]                  ·gc.alloc.rate:                   1753,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22275,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,685 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 143753,462 ops/s
[info]                  ·gc.alloc.rate:                   1756,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14832,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,456 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 143568,303 ops/s
[info]                  ·gc.alloc.rate:                   1754,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22296,068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,456 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 143643,278 ops/s
[info]                  ·gc.alloc.rate:                   1755,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14873,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,228 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 143905,570 ops/s
[info]                  ·gc.alloc.rate:                   1758,364 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22283,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,683 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   143667,822 ±(99.9%) 650,335 ops/s [Average]
[info]   (min, avg, max) = (143468,497, 143667,822, 143905,570), stdev = 168,890
[info]   CI (99.9%): [143017,487, 144318,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1755,522 ±(99.9%) 7,849 MB/sec [Average]
[info]   (min, avg, max) = (1753,166, 1755,522, 1758,364), stdev = 2,038
[info]   CI (99.9%): [1747,673, 1763,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19232,003, 19232,003, 19232,003), stdev = 0,001
[info]   CI (99.9%): [19232,002, 19232,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1762,786 ±(99.9%) 1429,404 MB/sec [Average]
[info]   (min, avg, max) = (1354,751, 1762,786, 2037,399), stdev = 371,212
[info]   CI (99.9%): [333,383, 3192,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19312,355 ±(99.9%) 15675,238 B/op [Average]
[info]   (min, avg, max) = (14832,870, 19312,355, 22296,068), stdev = 4070,810
[info]   CI (99.9%): [3637,117, 34987,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,502 ±(99.9%) 0,734 B/op [Average]
[info]   (min, avg, max) = (0,228, 0,502, 0,685), stdev = 0,191
[info]   CI (99.9%): [≈ 0, 1,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,09% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 358061,026 ops/s
[info] # Warmup Iteration   2: 389570,413 ops/s
[info] # Warmup Iteration   3: 389923,288 ops/s
[info] # Warmup Iteration   4: 392695,738 ops/s
[info] # Warmup Iteration   5: 392353,161 ops/s
[info] Iteration   1: 392494,096 ops/s
[info]                  ·gc.alloc.rate:                   1869,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5392,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 393233,544 ops/s
[info]                  ·gc.alloc.rate:                   1872,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8083,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,250 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 393233,447 ops/s
[info]                  ·gc.alloc.rate:                   1872,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8096,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,250 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 391352,510 ops/s
[info]                  ·gc.alloc.rate:                   1863,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8146,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 389219,168 ops/s
[info]                  ·gc.alloc.rate:                   1853,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8204,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   391906,553 ±(99.9%) 6499,427 ops/s [Average]
[info]   (min, avg, max) = (389219,168, 391906,553, 393233,544), stdev = 1687,880
[info]   CI (99.9%): [385407,127, 398405,980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1866,469 ±(99.9%) 31,140 MB/sec [Average]
[info]   (min, avg, max) = (1853,555, 1866,469, 1872,874), stdev = 8,087
[info]   CI (99.9%): [1835,329, 1897,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7496,001, 7496,001, 7496,001), stdev = 0,001
[info]   CI (99.9%): [7496,001, 7496,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1888,274 ±(99.9%) 1170,043 MB/sec [Average]
[info]   (min, avg, max) = (1344,751, 1888,274, 2028,685), stdev = 303,857
[info]   CI (99.9%): [718,231, 3058,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7584,563 ±(99.9%) 4722,001 B/op [Average]
[info]   (min, avg, max) = (5392,558, 7584,563, 8204,247), stdev = 1226,289
[info]   CI (99.9%): [2862,562, 12306,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,150 ±(99.9%) 0,350 B/op [Average]
[info]   (min, avg, max) = (0,083, 0,150, 0,250), stdev = 0,091
[info]   CI (99.9%): [≈ 0, 0,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81,29% complete, ETA 00:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 415493,710 ops/s
[info] # Warmup Iteration   2: 460809,331 ops/s
[info] # Warmup Iteration   3: 464844,397 ops/s
[info] # Warmup Iteration   4: 466646,022 ops/s
[info] # Warmup Iteration   5: 463934,137 ops/s
[info] Iteration   1: 466783,771 ops/s
[info]                  ·gc.alloc.rate:                   1599,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4532,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,211 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 466672,641 ops/s
[info]                  ·gc.alloc.rate:               1598,810 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4535,799 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 452510,822 ops/s
[info]                  ·gc.alloc.rate:                   1550,307 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7024,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,217 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 451242,194 ops/s
[info]                  ·gc.alloc.rate:                   1546,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4702,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 465267,210 ops/s
[info]                  ·gc.alloc.rate:               1593,896 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4564,953 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   460495,327 ±(99.9%) 30432,721 ops/s [Average]
[info]   (min, avg, max) = (451242,194, 460495,327, 466783,771), stdev = 7903,281
[info]   CI (99.9%): [430062,607, 490928,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1577,652 ±(99.9%) 104,126 MB/sec [Average]
[info]   (min, avg, max) = (1546,024, 1577,652, 1599,222), stdev = 27,041
[info]   CI (99.9%): [1473,526, 1681,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,001, 5392,001, 5392,001), stdev = 0,001
[info]   CI (99.9%): [5392,001, 5392,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1481,349 ±(99.9%) 1158,893 MB/sec [Average]
[info]   (min, avg, max) = (1344,371, 1481,349, 2019,710), stdev = 300,961
[info]   CI (99.9%): [322,456, 2640,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   5072,106 ±(99.9%) 4211,401 B/op [Average]
[info]   (min, avg, max) = (4532,736, 5072,106, 7024,595), stdev = 1093,688
[info]   CI (99.9%): [860,705, 9283,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,100 ±(99.9%) 0,416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,100, 0,217), stdev = 0,108
[info]   CI (99.9%): [≈ 0, 0,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81,49% complete, ETA 00:24:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13822,475 ops/s
[info] # Warmup Iteration   2: 22081,915 ops/s
[info] # Warmup Iteration   3: 22057,100 ops/s
[info] # Warmup Iteration   4: 22329,077 ops/s
[info] # Warmup Iteration   5: 22093,984 ops/s
[info] Iteration   1: 22250,420 ops/s
[info]                  ·gc.alloc.rate:      558,052 MB/sec
[info]                  ·gc.alloc.rate.norm: 39472,021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22359,206 ops/s
[info]                  ·gc.alloc.rate:                   560,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              39472,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47470,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,977 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 22435,380 ops/s
[info]                  ·gc.alloc.rate:               562,576 MB/sec
[info]                  ·gc.alloc.rate.norm:          39472,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47309,977 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 22345,203 ops/s
[info]                  ·gc.alloc.rate:               560,434 MB/sec
[info]                  ·gc.alloc.rate.norm:          39472,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47547,393 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 22340,105 ops/s
[info]                  ·gc.alloc.rate:                   560,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              39472,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47555,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,933 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   22346,063 ±(99.9%) 253,486 ops/s [Average]
[info]   (min, avg, max) = (22250,420, 22346,063, 22435,380), stdev = 65,830
[info]   CI (99.9%): [22092,577, 22599,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   560,424 ±(99.9%) 6,200 MB/sec [Average]
[info]   (min, avg, max) = (558,052, 560,424, 562,576), stdev = 1,610
[info]   CI (99.9%): [554,225, 566,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39472,019 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (39472,018, 39472,019, 39472,021), stdev = 0,001
[info]   CI (99.9%): [39472,015, 39472,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   539,764 ±(99.9%) 1161,884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,764, 675,091), stdev = 301,738
[info]   CI (99.9%): [≈ 0, 1701,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   37976,804 ±(99.9%) 81748,817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37976,804, 47555,904), stdev = 21229,908
[info]   CI (99.9%): [≈ 0, 119725,620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,524 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,312), stdev = 0,136
[info]   CI (99.9%): [≈ 0, 0,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,982 ±(99.9%) 36,909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,982, 21,977), stdev = 9,585
[info]   CI (99.9%): [≈ 0, 41,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   1,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81,69% complete, ETA 00:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75533,936 ops/s
[info] # Warmup Iteration   2: 88965,680 ops/s
[info] # Warmup Iteration   3: 89442,665 ops/s
[info] # Warmup Iteration   4: 86028,392 ops/s
[info] # Warmup Iteration   5: 89448,518 ops/s
[info] Iteration   1: 89560,849 ops/s
[info]                  ·gc.alloc.rate:                   1851,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35437,124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,366 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 89691,521 ops/s
[info]                  ·gc.alloc.rate:                   1854,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35423,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,731 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 90166,240 ops/s
[info]                  ·gc.alloc.rate:                   1864,401 MB/sec
[info]                  ·gc.alloc.rate.norm:              32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,255 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35299,404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,727 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 89849,233 ops/s
[info]                  ·gc.alloc.rate:               1857,886 MB/sec
[info]                  ·gc.alloc.rate.norm:          32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23650,160 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 89898,138 ops/s
[info]                  ·gc.alloc.rate:               1858,653 MB/sec
[info]                  ·gc.alloc.rate.norm:          32544,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2027,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35496,723 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   89833,196 ±(99.9%) 881,532 ops/s [Average]
[info]   (min, avg, max) = (89560,849, 89833,196, 90166,240), stdev = 228,931
[info]   CI (99.9%): [88951,664, 90714,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1857,488 ±(99.9%) 18,234 MB/sec [Average]
[info]   (min, avg, max) = (1851,759, 1857,488, 1864,401), stdev = 4,735
[info]   CI (99.9%): [1839,254, 1875,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32544,005 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (32544,005, 32544,005, 32544,005), stdev = 0,001
[info]   CI (99.9%): [32544,003, 32544,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1886,989 ±(99.9%) 1155,693 MB/sec [Average]
[info]   (min, avg, max) = (1350,151, 1886,989, 2027,289), stdev = 300,130
[info]   CI (99.9%): [731,296, 3042,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33061,481 ±(99.9%) 20260,464 B/op [Average]
[info]   (min, avg, max) = (23650,160, 33061,481, 35496,723), stdev = 5261,578
[info]   CI (99.9%): [12801,018, 53321,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,365 ±(99.9%) 1,403 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,365, 0,731), stdev = 0,364
[info]   CI (99.9%): [≈ 0, 1,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,89% complete, ETA 00:24:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70593,322 ops/s
[info] # Warmup Iteration   2: 127408,723 ops/s
[info] # Warmup Iteration   3: 127647,320 ops/s
[info] # Warmup Iteration   4: 126693,308 ops/s
[info] # Warmup Iteration   5: 127223,614 ops/s
[info] Iteration   1: 116959,352 ops/s
[info]                  ·gc.alloc.rate:                   575,633 MB/sec
[info]                  ·gc.alloc.rate.norm:              7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9075,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,081 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 128134,055 ops/s
[info]                  ·gc.alloc.rate:                   630,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              7744,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8284,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,767 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 127895,700 ops/s
[info]                  ·gc.alloc.rate:               629,218 MB/sec
[info]                  ·gc.alloc.rate.norm:          7744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8308,304 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 102078,405 ops/s
[info]                  ·gc.alloc.rate:               502,245 MB/sec
[info]                  ·gc.alloc.rate.norm:          7744,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10408,734 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 127921,230 ops/s
[info]                  ·gc.alloc.rate:      629,230 MB/sec
[info]                  ·gc.alloc.rate.norm: 7744,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   120597,748 ±(99.9%) 43899,595 ops/s [Average]
[info]   (min, avg, max) = (102078,405, 120597,748, 128134,055), stdev = 11400,585
[info]   CI (99.9%): [76698,153, 164497,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   593,344 ±(99.9%) 215,775 MB/sec [Average]
[info]   (min, avg, max) = (502,245, 593,344, 630,395), stdev = 56,036
[info]   CI (99.9%): [377,569, 809,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7744,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7744,003, 7744,004, 7744,004), stdev = 0,001
[info]   CI (99.9%): [7744,002, 7744,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,829 ±(99.9%) 1162,023 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,829, 675,069), stdev = 301,774
[info]   CI (99.9%): [≈ 0, 1701,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7215,422 ±(99.9%) 15883,232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7215,422, 10408,734), stdev = 4124,825
[info]   CI (99.9%): [≈ 0, 23098,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,229), stdev = 0,099
[info]   CI (99.9%): [≈ 0, 0,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,770 ±(99.9%) 5,137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,770, 3,081), stdev = 1,334
[info]   CI (99.9%): [≈ 0, 5,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,09% complete, ETA 00:23:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185603,164 ops/s
[info] # Warmup Iteration   2: 205410,209 ops/s
[info] # Warmup Iteration   3: 205366,829 ops/s
[info] # Warmup Iteration   4: 204959,943 ops/s
[info] # Warmup Iteration   5: 203527,002 ops/s
[info] Iteration   1: 201426,155 ops/s
[info]                  ·gc.alloc.rate:                   829,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5272,574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,325 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 202769,918 ops/s
[info]                  ·gc.alloc.rate:               834,918 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10444,705 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 205642,815 ops/s
[info]                  ·gc.alloc.rate:                   846,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5143,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,159 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 205357,776 ops/s
[info]                  ·gc.alloc.rate:                   845,528 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5150,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,319 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 205150,122 ops/s
[info]                  ·gc.alloc.rate:               844,550 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5156,060 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   204069,357 ±(99.9%) 7198,467 ops/s [Average]
[info]   (min, avg, max) = (201426,155, 204069,357, 205642,815), stdev = 1869,419
[info]   CI (99.9%): [196870,890, 211267,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   840,198 ±(99.9%) 29,504 MB/sec [Average]
[info]   (min, avg, max) = (829,339, 840,198, 846,654), stdev = 7,662
[info]   CI (99.9%): [810,694, 869,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6480,002, 6480,002, 6480,002), stdev = 0,001
[info]   CI (99.9%): [6480,002, 6480,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,341 ±(99.9%) 1158,978 MB/sec [Average]
[info]   (min, avg, max) = (671,998, 807,341, 1345,752), stdev = 300,983
[info]   CI (99.9%): [≈ 0, 1966,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6233,571 ±(99.9%) 9067,096 B/op [Average]
[info]   (min, avg, max) = (5143,727, 6233,571, 10444,705), stdev = 2354,696
[info]   CI (99.9%): [≈ 0, 15300,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,161 ±(99.9%) 0,620 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,161, 0,325), stdev = 0,161
[info]   CI (99.9%): [≈ 0, 0,781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82,29% complete, ETA 00:23:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9831,100 ops/s
[info] # Warmup Iteration   2: 20723,478 ops/s
[info] # Warmup Iteration   3: 20539,082 ops/s
[info] # Warmup Iteration   4: 20615,436 ops/s
[info] # Warmup Iteration   5: 20705,836 ops/s
[info] Iteration   1: 20696,807 ops/s
[info]                  ·gc.alloc.rate:               1184,389 MB/sec
[info]                  ·gc.alloc.rate.norm:          90064,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 51382,908 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 20777,440 ops/s
[info]                  ·gc.alloc.rate:                   1189,018 MB/sec
[info]                  ·gc.alloc.rate.norm:              90064,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102395,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,577 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 20724,448 ops/s
[info]                  ·gc.alloc.rate:               1185,919 MB/sec
[info]                  ·gc.alloc.rate.norm:          90064,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102738,089 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 20466,748 ops/s
[info]                  ·gc.alloc.rate:                   1171,341 MB/sec
[info]                  ·gc.alloc.rate.norm:              90064,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104135,363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,201 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 20312,627 ops/s
[info]                  ·gc.alloc.rate:               1162,365 MB/sec
[info]                  ·gc.alloc.rate.norm:          90064,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52488,152 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   20595,614 ±(99.9%) 761,871 ops/s [Average]
[info]   (min, avg, max) = (20312,627, 20595,614, 20777,440), stdev = 197,855
[info]   CI (99.9%): [19833,743, 21357,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1178,607 ±(99.9%) 43,561 MB/sec [Average]
[info]   (min, avg, max) = (1162,365, 1178,607, 1189,018), stdev = 11,313
[info]   CI (99.9%): [1135,046, 1222,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90064,021 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (90064,020, 90064,021, 90064,026), stdev = 0,003
[info]   CI (99.9%): [90064,011, 90064,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1082,419 ±(99.9%) 1426,650 MB/sec [Average]
[info]   (min, avg, max) = (675,712, 1082,419, 1354,348), stdev = 370,496
[info]   CI (99.9%): [≈ 0, 2509,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   82627,996 ±(99.9%) 107928,014 B/op [Average]
[info]   (min, avg, max) = (51382,908, 82627,996, 104135,363), stdev = 28028,562
[info]   CI (99.9%): [≈ 0, 190556,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,956 ±(99.9%) 5,503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,956, 3,201), stdev = 1,429
[info]   CI (99.9%): [≈ 0, 6,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,49% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102639,089 ops/s
[info] # Warmup Iteration   2: 152083,535 ops/s
[info] # Warmup Iteration   3: 150881,677 ops/s
[info] # Warmup Iteration   4: 151463,212 ops/s
[info] # Warmup Iteration   5: 151828,866 ops/s
[info] Iteration   1: 151588,483 ops/s
[info]                  ·gc.alloc.rate:                   1525,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21061,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,432 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 152496,258 ops/s
[info]                  ·gc.alloc.rate:                   1534,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13970,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,645 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 152177,635 ops/s
[info]                  ·gc.alloc.rate:                   1531,473 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14008,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,431 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 145603,211 ops/s
[info]                  ·gc.alloc.rate:                   1465,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14651,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,225 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 152233,307 ops/s
[info]                  ·gc.alloc.rate:                   1531,951 MB/sec
[info]                  ·gc.alloc.rate.norm:              15840,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21037,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,215 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   150819,779 ±(99.9%) 11301,477 ops/s [Average]
[info]   (min, avg, max) = (145603,211, 150819,779, 152496,258), stdev = 2934,958
[info]   CI (99.9%): [139518,302, 162121,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1517,843 ±(99.9%) 113,497 MB/sec [Average]
[info]   (min, avg, max) = (1465,454, 1517,843, 1534,736), stdev = 29,475
[info]   CI (99.9%): [1404,346, 1631,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   15840,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15840,003, 15840,003, 15840,003), stdev = 0,001
[info]   CI (99.9%): [15840,002, 15840,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1625,317 ±(99.9%) 1428,094 MB/sec [Average]
[info]   (min, avg, max) = (1353,553, 1625,317, 2034,635), stdev = 370,871
[info]   CI (99.9%): [197,223, 3053,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16945,828 ±(99.9%) 14463,230 B/op [Average]
[info]   (min, avg, max) = (13970,013, 16945,828, 21061,700), stdev = 3756,055
[info]   CI (99.9%): [2482,599, 31409,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,389 ±(99.9%) 0,683 B/op [Average]
[info]   (min, avg, max) = (0,215, 0,389, 0,645), stdev = 0,177
[info]   CI (99.9%): [≈ 0, 1,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,70% complete, ETA 00:22:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 534999,807 ops/s
[info] # Warmup Iteration   2: 570792,285 ops/s
[info] # Warmup Iteration   3: 567229,633 ops/s
[info] # Warmup Iteration   4: 574443,635 ops/s
[info] # Warmup Iteration   5: 575708,302 ops/s
[info] Iteration   1: 568505,408 ops/s
[info]                  ·gc.alloc.rate:                   632,748 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1868,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,693 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 577281,167 ops/s
[info]                  ·gc.alloc.rate:                   642,661 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1839,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,114 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 577476,334 ops/s
[info]                  ·gc.alloc.rate:               642,801 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1833,533 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 576436,298 ops/s
[info]                  ·gc.alloc.rate:               641,715 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1836,838 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 576596,656 ops/s
[info]                  ·gc.alloc.rate:                   641,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,009 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1834,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   575259,173 ±(99.9%) 14636,511 ops/s [Average]
[info]   (min, avg, max) = (568505,408, 575259,173, 577476,334), stdev = 3801,055
[info]   CI (99.9%): [560622,662, 589895,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   640,341 ±(99.9%) 16,454 MB/sec [Average]
[info]   (min, avg, max) = (632,748, 640,341, 642,801), stdev = 4,273
[info]   CI (99.9%): [623,886, 656,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1752,001, 1752,001, 1752,001), stdev = 0,001
[info]   CI (99.9%): [1752,001, 1752,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,404 ±(99.9%) 4,894 MB/sec [Average]
[info]   (min, avg, max) = (672,009, 673,404, 674,844), stdev = 1,271
[info]   CI (99.9%): [668,510, 678,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1842,539 ±(99.9%) 55,702 B/op [Average]
[info]   (min, avg, max) = (1833,533, 1842,539, 1868,061), stdev = 14,466
[info]   CI (99.9%): [1786,838, 1898,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,640 ±(99.9%) 5,380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,640, 3,140), stdev = 1,397
[info]   CI (99.9%): [≈ 0, 6,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,773 ±(99.9%) 14,898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,773, 8,693), stdev = 3,869
[info]   CI (99.9%): [≈ 0, 16,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82,90% complete, ETA 00:22:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 569423,498 ops/s
[info] # Warmup Iteration   2: 610417,262 ops/s
[info] # Warmup Iteration   3: 607775,104 ops/s
[info] # Warmup Iteration   4: 591160,661 ops/s
[info] # Warmup Iteration   5: 605344,261 ops/s
[info] Iteration   1: 608892,732 ops/s
[info]                  ·gc.alloc.rate:      12,380 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 605868,546 ops/s
[info]                  ·gc.alloc.rate:      12,319 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 609889,478 ops/s
[info]                  ·gc.alloc.rate:      12,400 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 598797,035 ops/s
[info]                  ·gc.alloc.rate:      12,176 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 606708,736 ops/s
[info]                  ·gc.alloc.rate:      12,335 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   606031,305 ±(99.9%) 16772,784 ops/s [Average]
[info]   (min, avg, max) = (598797,035, 606031,305, 609889,478), stdev = 4355,839
[info]   CI (99.9%): [589258,522, 622804,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12,322 ±(99.9%) 0,338 MB/sec [Average]
[info]   (min, avg, max) = (12,176, 12,322, 12,400), stdev = 0,088
[info]   CI (99.9%): [11,984, 12,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,001, 32,001, 32,001), stdev = 0,001
[info]   CI (99.9%): [32,001, 32,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,10% complete, ETA 00:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15004,439 ops/s
[info] # Warmup Iteration   2: 23511,384 ops/s
[info] # Warmup Iteration   3: 23387,157 ops/s
[info] # Warmup Iteration   4: 23195,123 ops/s
[info] # Warmup Iteration   5: 23501,964 ops/s
[info] Iteration   1: 23535,383 ops/s
[info]                  ·gc.alloc.rate:               482,486 MB/sec
[info]                  ·gc.alloc.rate.norm:          32264,713 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34208,673 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 23605,317 ops/s
[info]                  ·gc.alloc.rate:                   483,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44969,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23,595 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 23711,311 ops/s
[info]                  ·gc.alloc.rate:      486,056 MB/sec
[info]                  ·gc.alloc.rate.norm: 32264,019 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23447,124 ops/s
[info]                  ·gc.alloc.rate:                   480,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45266,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,794 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 23649,776 ops/s
[info]                  ·gc.alloc.rate:                   484,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              32264,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,958 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44924,407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,385 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   23589,782 ±(99.9%) 394,200 ops/s [Average]
[info]   (min, avg, max) = (23447,124, 23589,782, 23711,311), stdev = 102,372
[info]   CI (99.9%): [23195,582, 23983,982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   483,588 ±(99.9%) 7,968 MB/sec [Average]
[info]   (min, avg, max) = (480,699, 483,588, 486,056), stdev = 2,069
[info]   CI (99.9%): [475,620, 491,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32264,157 ±(99.9%) 1,196 B/op [Average]
[info]   (min, avg, max) = (32264,017, 32264,157, 32264,713), stdev = 0,311
[info]   CI (99.9%): [32262,961, 32265,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   507,094 ±(99.9%) 1124,918 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,094, 674,958), stdev = 292,138
[info]   CI (99.9%): [≈ 0, 1632,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   33873,824 ±(99.9%) 75126,339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 33873,824, 45266,616), stdev = 19510,072
[info]   CI (99.9%): [≈ 0, 109000,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,354), stdev = 0,152
[info]   CI (99.9%): [≈ 0, 0,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,555 ±(99.9%) 39,088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,555, 23,595), stdev = 10,151
[info]   CI (99.9%): [≈ 0, 44,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83,30% complete, ETA 00:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74031,476 ops/s
[info] # Warmup Iteration   2: 84623,335 ops/s
[info] # Warmup Iteration   3: 85864,560 ops/s
[info] # Warmup Iteration   4: 86432,425 ops/s
[info] # Warmup Iteration   5: 86027,461 ops/s
[info] Iteration   1: 86320,699 ops/s
[info]                  ·gc.alloc.rate:                   1509,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24507,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,139 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 86451,048 ops/s
[info]                  ·gc.alloc.rate:               1512,066 MB/sec
[info]                  ·gc.alloc.rate.norm:          27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24471,220 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 86557,196 ops/s
[info]                  ·gc.alloc.rate:                   1513,652 MB/sec
[info]                  ·gc.alloc.rate.norm:              27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36711,606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,136 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 86330,499 ops/s
[info]                  ·gc.alloc.rate:               1510,018 MB/sec
[info]                  ·gc.alloc.rate.norm:          27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24565,090 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 86374,057 ops/s
[info]                  ·gc.alloc.rate:               1510,617 MB/sec
[info]                  ·gc.alloc.rate.norm:          27528,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24577,138 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   86406,700 ±(99.9%) 379,656 ops/s [Average]
[info]   (min, avg, max) = (86320,699, 86406,700, 86557,196), stdev = 98,596
[info]   CI (99.9%): [86027,044, 86786,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1511,227 ±(99.9%) 6,239 MB/sec [Average]
[info]   (min, avg, max) = (1509,784, 1511,227, 1513,652), stdev = 1,620
[info]   CI (99.9%): [1504,989, 1517,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27528,005, 27528,005, 27528,005), stdev = 0,001
[info]   CI (99.9%): [27528,004, 27528,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1480,613 ±(99.9%) 1158,127 MB/sec [Average]
[info]   (min, avg, max) = (1344,108, 1480,613, 2018,620), stdev = 300,762
[info]   CI (99.9%): [322,487, 2638,740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26966,454 ±(99.9%) 20977,831 B/op [Average]
[info]   (min, avg, max) = (24471,220, 26966,454, 36711,606), stdev = 5447,876
[info]   CI (99.9%): [5988,622, 47944,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,455 ±(99.9%) 2,398 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,455, 1,139), stdev = 0,623
[info]   CI (99.9%): [≈ 0, 2,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,50% complete, ETA 00:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97272,187 ops/s
[info] # Warmup Iteration   2: 154457,789 ops/s
[info] # Warmup Iteration   3: 155192,693 ops/s
[info] # Warmup Iteration   4: 155492,950 ops/s
[info] # Warmup Iteration   5: 155540,064 ops/s
[info] Iteration   1: 154819,582 ops/s
[info]                  ·gc.alloc.rate:                   653,052 MB/sec
[info]                  ·gc.alloc.rate.norm:              6640,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6856,071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,116 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 154379,068 ops/s
[info]                  ·gc.alloc.rate:               651,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          6640,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6876,142 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 153088,802 ops/s
[info]                  ·gc.alloc.rate:                   645,870 MB/sec
[info]                  ·gc.alloc.rate.norm:              6640,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6940,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,428 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 155054,124 ops/s
[info]                  ·gc.alloc.rate:               654,178 MB/sec
[info]                  ·gc.alloc.rate.norm:          6640,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6852,620 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 154496,374 ops/s
[info]                  ·gc.alloc.rate:               651,685 MB/sec
[info]                  ·gc.alloc.rate.norm:          6640,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6883,750 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   154367,590 ±(99.9%) 2937,389 ops/s [Average]
[info]   (min, avg, max) = (153088,802, 154367,590, 155054,124), stdev = 762,831
[info]   CI (99.9%): [151430,201, 157304,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   651,207 ±(99.9%) 12,319 MB/sec [Average]
[info]   (min, avg, max) = (645,870, 651,207, 654,178), stdev = 3,199
[info]   CI (99.9%): [638,887, 663,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6640,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6640,003, 6640,003, 6640,003), stdev = 0,001
[info]   CI (99.9%): [6640,002, 6640,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,905 ±(99.9%) 2,096 MB/sec [Average]
[info]   (min, avg, max) = (674,302, 674,905, 675,608), stdev = 0,544
[info]   CI (99.9%): [672,809, 677,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6881,784 ±(99.9%) 135,807 B/op [Average]
[info]   (min, avg, max) = (6852,620, 6881,784, 6940,334), stdev = 35,269
[info]   CI (99.9%): [6745,977, 7017,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,208), stdev = 0,090
[info]   CI (99.9%): [≈ 0, 0,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,509 ±(99.9%) 3,533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,509, 2,116), stdev = 0,917
[info]   CI (99.9%): [≈ 0, 4,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,70% complete, ETA 00:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 217157,970 ops/s
[info] # Warmup Iteration   2: 234299,447 ops/s
[info] # Warmup Iteration   3: 234861,981 ops/s
[info] # Warmup Iteration   4: 234044,393 ops/s
[info] # Warmup Iteration   5: 234568,663 ops/s
[info] Iteration   1: 234884,150 ops/s
[info]                  ·gc.alloc.rate:                   836,890 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4521,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,418 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 235223,658 ops/s
[info]                  ·gc.alloc.rate:               838,173 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9003,330 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 235542,159 ops/s
[info]                  ·gc.alloc.rate:                   839,212 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4490,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,139 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 224381,165 ops/s
[info]                  ·gc.alloc.rate:                   799,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4714,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 234165,168 ops/s
[info]                  ·gc.alloc.rate:               834,263 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,977 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4517,100 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   232839,260 ±(99.9%) 18312,838 ops/s [Average]
[info]   (min, avg, max) = (224381,165, 232839,260, 235542,159), stdev = 4755,786
[info]   CI (99.9%): [214526,422, 251152,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   829,607 ±(99.9%) 65,203 MB/sec [Average]
[info]   (min, avg, max) = (799,498, 829,607, 839,212), stdev = 16,933
[info]   CI (99.9%): [764,405, 894,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5608,002, 5608,002, 5608,002), stdev = 0,001
[info]   CI (99.9%): [5608,001, 5608,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,276 ±(99.9%) 1158,876 MB/sec [Average]
[info]   (min, avg, max) = (671,977, 807,276, 1345,639), stdev = 300,956
[info]   CI (99.9%): [≈ 0, 1966,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5449,266 ±(99.9%) 7658,111 B/op [Average]
[info]   (min, avg, max) = (4490,699, 5449,266, 9003,330), stdev = 1988,787
[info]   CI (99.9%): [≈ 0, 13107,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,141 ±(99.9%) 0,658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,141, 0,418), stdev = 0,171
[info]   CI (99.9%): [≈ 0, 0,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,90% complete, ETA 00:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33214,339 ops/s
[info] # Warmup Iteration   2: 48213,756 ops/s
[info] # Warmup Iteration   3: 45735,843 ops/s
[info] # Warmup Iteration   4: 48216,236 ops/s
[info] # Warmup Iteration   5: 48605,478 ops/s
[info] Iteration   1: 48743,957 ops/s
[info]                  ·gc.alloc.rate:                   2019,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              65208,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65445,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,344 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 48750,119 ops/s
[info]                  ·gc.alloc.rate:                   2019,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              65208,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65529,279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,016 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 48731,802 ops/s
[info]                  ·gc.alloc.rate:                   2019,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              65208,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65662,398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,017 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 48469,712 ops/s
[info]                  ·gc.alloc.rate:                   2008,256 MB/sec
[info]                  ·gc.alloc.rate.norm:              65208,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66076,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,704 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 48436,997 ops/s
[info]                  ·gc.alloc.rate:                   2006,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              65208,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66186,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,029 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   48626,517 ±(99.9%) 610,846 ops/s [Average]
[info]   (min, avg, max) = (48436,997, 48626,517, 48750,119), stdev = 158,635
[info]   CI (99.9%): [48015,671, 49237,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2014,541 ±(99.9%) 25,951 MB/sec [Average]
[info]   (min, avg, max) = (2006,161, 2014,541, 2019,846), stdev = 6,739
[info]   CI (99.9%): [1988,590, 2040,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65208,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (65208,009, 65208,009, 65208,009), stdev = 0,001
[info]   CI (99.9%): [65208,009, 65208,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2032,191 ±(99.9%) 15,318 MB/sec [Average]
[info]   (min, avg, max) = (2026,560, 2032,191, 2036,270), stdev = 3,978
[info]   CI (99.9%): [2016,874, 2047,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65780,202 ±(99.9%) 1279,595 B/op [Average]
[info]   (min, avg, max) = (65445,939, 65780,202, 66186,666), stdev = 332,307
[info]   CI (99.9%): [64500,607, 67059,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,022 ±(99.9%) 1,851 B/op [Average]
[info]   (min, avg, max) = (1,344, 2,022, 2,704), stdev = 0,481
[info]   CI (99.9%): [0,171, 3,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84,10% complete, ETA 00:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119752,842 ops/s
[info] # Warmup Iteration   2: 128365,374 ops/s
[info] # Warmup Iteration   3: 132675,986 ops/s
[info] # Warmup Iteration   4: 133343,988 ops/s
[info] # Warmup Iteration   5: 134015,533 ops/s
[info] Iteration   1: 134121,290 ops/s
[info]                  ·gc.alloc.rate:                   1242,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15772,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,244 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 134276,149 ops/s
[info]                  ·gc.alloc.rate:                   1244,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15756,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,732 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 132415,412 ops/s
[info]                  ·gc.alloc.rate:                   1226,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,000 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15976,160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,495 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 134044,402 ops/s
[info]                  ·gc.alloc.rate:               1242,110 MB/sec
[info]                  ·gc.alloc.rate.norm:          14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7898,907 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 134109,539 ops/s
[info]                  ·gc.alloc.rate:                   1242,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15798,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,244 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   133793,359 ±(99.9%) 2984,159 ops/s [Average]
[info]   (min, avg, max) = (132415,412, 133793,359, 134276,149), stdev = 774,977
[info]   CI (99.9%): [130809,200, 136777,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1239,711 ±(99.9%) 27,803 MB/sec [Average]
[info]   (min, avg, max) = (1226,884, 1239,711, 1244,339), stdev = 7,220
[info]   CI (99.9%): [1211,908, 1267,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   14584,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14584,003, 14584,003, 14584,004), stdev = 0,001
[info]   CI (99.9%): [14584,002, 14584,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,212 ±(99.9%) 1156,943 MB/sec [Average]
[info]   (min, avg, max) = (672,745, 1210,212, 1345,941), stdev = 300,454
[info]   CI (99.9%): [53,269, 2367,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   14240,448 ±(99.9%) 13654,857 B/op [Average]
[info]   (min, avg, max) = (7898,907, 14240,448, 15976,160), stdev = 3546,123
[info]   CI (99.9%): [585,591, 27895,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,343 ±(99.9%) 1,075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,343, 0,732), stdev = 0,279
[info]   CI (99.9%): [≈ 0, 1,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84,31% complete, ETA 00:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243040,650 ops/s
[info] # Warmup Iteration   2: 295756,648 ops/s
[info] # Warmup Iteration   3: 297437,686 ops/s
[info] # Warmup Iteration   4: 294666,552 ops/s
[info] # Warmup Iteration   5: 297233,156 ops/s
[info] Iteration   1: 299162,685 ops/s
[info]                  ·gc.alloc.rate:                   1408,119 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7064,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,329 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 282053,923 ops/s
[info]                  ·gc.alloc.rate:                   1327,980 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7492,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,232 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 300107,530 ops/s
[info]                  ·gc.alloc.rate:               1412,586 MB/sec
[info]                  ·gc.alloc.rate.norm:          7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7046,309 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 299193,757 ops/s
[info]                  ·gc.alloc.rate:                   1408,377 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7074,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,219 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 298596,620 ops/s
[info]                  ·gc.alloc.rate:                   1405,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              7408,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7095,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,329 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   295822,903 ±(99.9%) 29711,976 ops/s [Average]
[info]   (min, avg, max) = (282053,923, 295822,903, 300107,530), stdev = 7716,106
[info]   CI (99.9%): [266110,927, 325534,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1392,522 ±(99.9%) 139,271 MB/sec [Average]
[info]   (min, avg, max) = (1327,980, 1392,522, 1412,586), stdev = 36,168
[info]   CI (99.9%): [1253,250, 1531,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7408,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7408,001, 7408,001, 7408,001), stdev = 0,001
[info]   CI (99.9%): [7408,001, 7408,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1344,185 ±(99.9%) 5,484 MB/sec [Average]
[info]   (min, avg, max) = (1342,852, 1344,185, 1346,310), stdev = 1,424
[info]   CI (99.9%): [1338,701, 1349,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7154,799 ±(99.9%) 731,212 B/op [Average]
[info]   (min, avg, max) = (7046,309, 7154,799, 7492,988), stdev = 189,893
[info]   CI (99.9%): [6423,587, 7886,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,222 ±(99.9%) 0,517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,222, 0,329), stdev = 0,134
[info]   CI (99.9%): [≈ 0, 0,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,51% complete, ETA 00:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 384159,288 ops/s
[info] # Warmup Iteration   2: 574338,104 ops/s
[info] # Warmup Iteration   3: 570532,550 ops/s
[info] # Warmup Iteration   4: 570203,268 ops/s
[info] # Warmup Iteration   5: 569555,043 ops/s
[info] Iteration   1: 568637,110 ops/s
[info]                  ·gc.alloc.rate:               456,676 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,545 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1415,869 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 571996,922 ops/s
[info]                  ·gc.alloc.rate:      459,414 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 571965,782 ops/s
[info]                  ·gc.alloc.rate:                   459,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1855,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,859 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 570530,839 ops/s
[info]                  ·gc.alloc.rate:                   458,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1860,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,172 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 568558,873 ops/s
[info]                  ·gc.alloc.rate:      456,542 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   570337,905 ±(99.9%) 6528,290 ops/s [Average]
[info]   (min, avg, max) = (568558,873, 570337,905, 571996,922), stdev = 1695,376
[info]   CI (99.9%): [563809,615, 576866,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   458,039 ±(99.9%) 5,339 MB/sec [Average]
[info]   (min, avg, max) = (456,542, 458,039, 459,414), stdev = 1,386
[info]   CI (99.9%): [452,700, 463,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   372,073 ±(99.9%) 1332,711 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,073, 674,445), stdev = 346,101
[info]   CI (99.9%): [≈ 0, 1704,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1026,408 ±(99.9%) 3674,335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1026,408, 1860,406), stdev = 954,213
[info]   CI (99.9%): [≈ 0, 4700,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,312), stdev = 0,135
[info]   CI (99.9%): [≈ 0, 0,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,206 ±(99.9%) 1,434 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,206, 0,859), stdev = 0,373
[info]   CI (99.9%): [≈ 0, 1,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,71% complete, ETA 00:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 627852,111 ops/s
[info] # Warmup Iteration   2: 667479,628 ops/s
[info] # Warmup Iteration   3: 664047,119 ops/s
[info] # Warmup Iteration   4: 664997,680 ops/s
[info] # Warmup Iteration   5: 670561,132 ops/s
[info] Iteration   1: 676801,622 ops/s
[info]                  ·gc.alloc.rate:               357,765 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1189,664 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 678900,187 ops/s
[info]                  ·gc.alloc.rate:      358,895 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 659216,823 ops/s
[info]                  ·gc.alloc.rate:               348,486 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1221,331 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 631115,902 ops/s
[info]                  ·gc.alloc.rate:               333,724 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1275,711 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 670756,278 ops/s
[info]                  ·gc.alloc.rate:      354,584 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   663358,162 ±(99.9%) 75401,057 ops/s [Average]
[info]   (min, avg, max) = (631115,902, 663358,162, 678900,187), stdev = 19581,415
[info]   CI (99.9%): [587957,105, 738759,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   350,691 ±(99.9%) 39,702 MB/sec [Average]
[info]   (min, avg, max) = (333,724, 350,691, 358,895), stdev = 10,311
[info]   CI (99.9%): [310,988, 390,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (832,001, 832,001, 832,001), stdev = 0,001
[info]   CI (99.9%): [832,000, 832,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,964 ±(99.9%) 1079,022 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,964, 511,700), stdev = 280,219
[info]   CI (99.9%): [≈ 0, 1385,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   737,341 ±(99.9%) 2594,565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 737,341, 1275,711), stdev = 673,800
[info]   CI (99.9%): [≈ 0, 3331,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84,91% complete, ETA 00:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 761686,090 ops/s
[info] # Warmup Iteration   2: 847123,788 ops/s
[info] # Warmup Iteration   3: 805917,198 ops/s
[info] # Warmup Iteration   4: 845403,890 ops/s
[info] # Warmup Iteration   5: 873797,453 ops/s
[info] Iteration   1: 737515,302 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 875601,059 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 876883,473 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 875286,355 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 877528,658 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   848562,969 ±(99.9%) 239064,555 ops/s [Average]
[info]   (min, avg, max) = (737515,302, 848562,969, 877528,658), stdev = 62084,306
[info]   CI (99.9%): [609498,414, 1087627,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85,11% complete, ETA 00:19:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25085,137 ops/s
[info] # Warmup Iteration   2: 33385,866 ops/s
[info] # Warmup Iteration   3: 33242,710 ops/s
[info] # Warmup Iteration   4: 33450,658 ops/s
[info] # Warmup Iteration   5: 33540,708 ops/s
[info] Iteration   1: 33622,785 ops/s
[info]                  ·gc.alloc.rate:                   1977,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              92576,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,805 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94172,925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,949 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33330,556 ops/s
[info]                  ·gc.alloc.rate:                   1960,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              92576,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95192,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,983 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33557,959 ops/s
[info]                  ·gc.alloc.rate:                   1973,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              92576,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94701,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,976 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33519,456 ops/s
[info]                  ·gc.alloc.rate:                   1971,756 MB/sec
[info]                  ·gc.alloc.rate.norm:              92576,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95025,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,977 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33445,752 ops/s
[info]                  ·gc.alloc.rate:                   1967,125 MB/sec
[info]                  ·gc.alloc.rate.norm:              92576,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95363,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,979 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   33495,301 ±(99.9%) 432,051 ops/s [Average]
[info]   (min, avg, max) = (33330,556, 33495,301, 33622,785), stdev = 112,202
[info]   CI (99.9%): [33063,251, 33927,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1970,169 ±(99.9%) 25,504 MB/sec [Average]
[info]   (min, avg, max) = (1960,476, 1970,169, 1977,690), stdev = 6,623
[info]   CI (99.9%): [1944,665, 1995,673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   92576,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (92576,012, 92576,013, 92576,013), stdev = 0,001
[info]   CI (99.9%): [92576,011, 92576,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2019,416 ±(99.9%) 22,698 MB/sec [Average]
[info]   (min, avg, max) = (2011,805, 2019,416, 2026,357), stdev = 5,895
[info]   CI (99.9%): [1996,718, 2042,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   94891,098 ±(99.9%) 1809,642 B/op [Average]
[info]   (min, avg, max) = (94172,925, 94891,098, 95363,558), stdev = 469,958
[info]   CI (99.9%): [93081,455, 96700,740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,025, 0,042), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,173 ±(99.9%) 1,670 B/op [Average]
[info]   (min, avg, max) = (0,976, 1,173, 1,949), stdev = 0,434
[info]   CI (99.9%): [≈ 0, 2,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85,31% complete, ETA 00:19:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144967,859 ops/s
[info] # Warmup Iteration   2: 152884,669 ops/s
[info] # Warmup Iteration   3: 153219,050 ops/s
[info] # Warmup Iteration   4: 153243,015 ops/s
[info] # Warmup Iteration   5: 153705,044 ops/s
[info] Iteration   1: 153919,784 ops/s
[info]                  ·gc.alloc.rate:                   1144,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13751,079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,851 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 153764,181 ops/s
[info]                  ·gc.alloc.rate:                   1143,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13758,388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,639 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 153720,078 ops/s
[info]                  ·gc.alloc.rate:                   1143,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13762,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,213 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 153750,251 ops/s
[info]                  ·gc.alloc.rate:               1143,429 MB/sec
[info]                  ·gc.alloc.rate.norm:          11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6879,776 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 153275,164 ops/s
[info]                  ·gc.alloc.rate:                   1140,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13815,771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,641 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   153685,892 ±(99.9%) 933,022 ops/s [Average]
[info]   (min, avg, max) = (153275,164, 153685,892, 153919,784), stdev = 242,303
[info]   CI (99.9%): [152752,870, 154618,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1142,933 ±(99.9%) 6,373 MB/sec [Average]
[info]   (min, avg, max) = (1140,132, 1142,933, 1144,524), stdev = 1,655
[info]   CI (99.9%): [1136,560, 1149,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11704,003, 11704,003, 11704,003), stdev = 0,001
[info]   CI (99.9%): [11704,002, 11704,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,199 ±(99.9%) 1158,251 MB/sec [Average]
[info]   (min, avg, max) = (672,123, 1210,199, 1345,848), stdev = 300,794
[info]   CI (99.9%): [51,948, 2368,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12393,450 ±(99.9%) 11869,011 B/op [Average]
[info]   (min, avg, max) = (6879,776, 12393,450, 13815,771), stdev = 3082,345
[info]   CI (99.9%): [524,439, 24262,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,469 ±(99.9%) 1,348 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,469, 0,851), stdev = 0,350
[info]   CI (99.9%): [≈ 0, 1,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85,51% complete, ETA 00:19:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55770,134 ops/s
[info] # Warmup Iteration   2: 69177,337 ops/s
[info] # Warmup Iteration   3: 69335,226 ops/s
[info] # Warmup Iteration   4: 69589,418 ops/s
[info] # Warmup Iteration   5: 69596,976 ops/s
[info] Iteration   1: 69299,316 ops/s
[info]                  ·gc.alloc.rate:                   3138,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61388,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,418 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 69964,520 ops/s
[info]                  ·gc.alloc.rate:                   3168,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3386,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76177,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,810 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 69827,608 ops/s
[info]                  ·gc.alloc.rate:                   3163,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3392,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     76461,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,754 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 68759,042 ops/s
[info]                  ·gc.alloc.rate:                   3114,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62205,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,382 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 61710,886 ops/s
[info]                  ·gc.alloc.rate:                   2850,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3265,198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81662,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,000 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         126,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   67912,274 ±(99.9%) 13474,274 ops/s [Average]
[info]   (min, avg, max) = (61710,886, 67912,274, 69964,520), stdev = 3499,226
[info]   CI (99.9%): [54438,000, 81386,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3087,051 ±(99.9%) 516,167 MB/sec [Average]
[info]   (min, avg, max) = (2850,382, 3087,051, 3168,803), stdev = 134,047
[info]   CI (99.9%): [2570,884, 3603,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   71288,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (71288,006, 71288,006, 71288,007), stdev = 0,001
[info]   CI (99.9%): [71288,005, 71288,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3092,866 ±(99.9%) 1359,500 MB/sec [Average]
[info]   (min, avg, max) = (2702,627, 3092,866, 3392,648), stdev = 353,058
[info]   CI (99.9%): [1733,366, 4452,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71579,133 ±(99.9%) 35416,503 B/op [Average]
[info]   (min, avg, max) = (61388,176, 71579,133, 81662,555), stdev = 9197,553
[info]   CI (99.9%): [36162,630, 106995,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,100 ±(99.9%) 0,193 MB/sec [Average]
[info]   (min, avg, max) = (0,040, 0,100, 0,167), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,273 ±(99.9%) 4,237 B/op [Average]
[info]   (min, avg, max) = (1,000, 2,273, 3,754), stdev = 1,100
[info]   CI (99.9%): [≈ 0, 6,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   134,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 26,800, 126,000), stdev = 55,459
[info]   CI (99.9%): [134,000, 134,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,71% complete, ETA 00:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102129,153 ops/s
[info] # Warmup Iteration   2: 146727,010 ops/s
[info] # Warmup Iteration   3: 148015,014 ops/s
[info] # Warmup Iteration   4: 148847,279 ops/s
[info] # Warmup Iteration   5: 147822,580 ops/s
[info] Iteration   1: 134839,878 ops/s
[info]                  ·gc.alloc.rate:                   1732,669 MB/sec
[info]                  ·gc.alloc.rate.norm:              20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23714,643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,972 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 141629,773 ops/s
[info]                  ·gc.alloc.rate:                   1820,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,912 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15062,769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,925 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 142744,861 ops/s
[info]                  ·gc.alloc.rate:                   1834,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22437,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,148 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 147241,337 ops/s
[info]                  ·gc.alloc.rate:                   1892,176 MB/sec
[info]                  ·gc.alloc.rate.norm:              20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21771,764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 147608,632 ops/s
[info]                  ·gc.alloc.rate:                   1896,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              20224,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21737,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,888 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   142812,896 ±(99.9%) 19969,924 ops/s [Average]
[info]   (min, avg, max) = (134839,878, 142812,896, 147608,632), stdev = 5186,126
[info]   CI (99.9%): [122842,972, 162782,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1835,252 ±(99.9%) 256,297 MB/sec [Average]
[info]   (min, avg, max) = (1732,669, 1835,252, 1896,402), stdev = 66,560
[info]   CI (99.9%): [1578,955, 2091,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20224,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20224,003, 20224,003, 20224,003), stdev = 0,001
[info]   CI (99.9%): [20224,002, 20224,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,651 ±(99.9%) 1170,477 MB/sec [Average]
[info]   (min, avg, max) = (1355,912, 1899,651, 2038,306), stdev = 303,969
[info]   CI (99.9%): [729,174, 3070,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20944,890 ±(99.9%) 13031,426 B/op [Average]
[info]   (min, avg, max) = (15062,769, 20944,890, 23714,643), stdev = 3384,220
[info]   CI (99.9%): [7913,463, 33976,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,831 ±(99.9%) 1,365 B/op [Average]
[info]   (min, avg, max) = (0,222, 0,831, 1,148), stdev = 0,354
[info]   CI (99.9%): [≈ 0, 2,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,92% complete, ETA 00:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 510392,876 ops/s
[info] # Warmup Iteration   2: 533110,046 ops/s
[info] # Warmup Iteration   3: 532571,556 ops/s
[info] # Warmup Iteration   4: 535658,106 ops/s
[info] # Warmup Iteration   5: 537206,479 ops/s
[info] Iteration   1: 520932,646 ops/s
[info]                  ·gc.alloc.rate:                   1361,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,158 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4061,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 534105,787 ops/s
[info]                  ·gc.alloc.rate:                   1395,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3960,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 535675,378 ops/s
[info]                  ·gc.alloc.rate:                   1399,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5927,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 535507,864 ops/s
[info]                  ·gc.alloc.rate:                   1399,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3958,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 514020,785 ops/s
[info]                  ·gc.alloc.rate:                   1342,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,141 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4128,172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,064 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   528048,492 ±(99.9%) 38405,915 ops/s [Average]
[info]   (min, avg, max) = (514020,785, 528048,492, 535675,378), stdev = 9973,894
[info]   CI (99.9%): [489642,576, 566454,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1379,604 ±(99.9%) 100,529 MB/sec [Average]
[info]   (min, avg, max) = (1342,860, 1379,604, 1399,508), stdev = 26,107
[info]   CI (99.9%): [1279,076, 1480,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1480,187 ±(99.9%) 1156,719 MB/sec [Average]
[info]   (min, avg, max) = (1344,128, 1480,187, 2017,543), stdev = 300,396
[info]   CI (99.9%): [323,468, 2636,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4407,287 ±(99.9%) 3284,794 B/op [Average]
[info]   (min, avg, max) = (3958,420, 4407,287, 5927,895), stdev = 853,050
[info]   CI (99.9%): [1122,493, 7692,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,099 ±(99.9%) 0,125 B/op [Average]
[info]   (min, avg, max) = (0,063, 0,099, 0,123), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86,12% complete, ETA 00:18:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9668,780 ops/s
[info] # Warmup Iteration   2: 18084,805 ops/s
[info] # Warmup Iteration   3: 18108,311 ops/s
[info] # Warmup Iteration   4: 18122,916 ops/s
[info] # Warmup Iteration   5: 18112,266 ops/s
[info] Iteration   1: 18133,600 ops/s
[info]                  ·gc.alloc.rate:                   2310,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235230,010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,034 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18179,797 ops/s
[info]                  ·gc.alloc.rate:                   2315,931 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,974 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176165,842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,802 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18123,324 ops/s
[info]                  ·gc.alloc.rate:                   2308,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235883,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,653 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 17943,326 ops/s
[info]                  ·gc.alloc.rate:                   2285,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178793,629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,954 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 17556,192 ops/s
[info]                  ·gc.alloc.rate:               2236,138 MB/sec
[info]                  ·gc.alloc.rate.norm:          200488,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2039,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 182863,390 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   17987,248 ±(99.9%) 990,650 ops/s [Average]
[info]   (min, avg, max) = (17556,192, 17987,248, 18179,797), stdev = 257,269
[info]   CI (99.9%): [16996,598, 18977,898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2291,331 ±(99.9%) 126,680 MB/sec [Average]
[info]   (min, avg, max) = (2236,138, 2291,331, 2315,931), stdev = 32,899
[info]   CI (99.9%): [2164,651, 2418,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200488,025 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (200488,023, 200488,025, 200488,028), stdev = 0,002
[info]   CI (99.9%): [200488,017, 200488,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2307,928 ±(99.9%) 1424,843 MB/sec [Average]
[info]   (min, avg, max) = (2034,974, 2307,928, 2716,130), stdev = 370,027
[info]   CI (99.9%): [883,086, 3732,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   201787,239 ±(99.9%) 119062,697 B/op [Average]
[info]   (min, avg, max) = (176165,842, 201787,239, 235883,326), stdev = 30920,204
[info]   CI (99.9%): [82724,542, 320849,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,146), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,889 ±(99.9%) 21,756 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,889, 12,653), stdev = 5,650
[info]   CI (99.9%): [≈ 0, 28,644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86,32% complete, ETA 00:18:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33977,225 ops/s
[info] # Warmup Iteration   2: 43372,714 ops/s
[info] # Warmup Iteration   3: 43673,376 ops/s
[info] # Warmup Iteration   4: 43851,061 ops/s
[info] # Warmup Iteration   5: 43852,820 ops/s
[info] Iteration   1: 43703,624 ops/s
[info]                  ·gc.alloc.rate:                   2471,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              89008,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72732,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,498 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 43600,267 ops/s
[info]                  ·gc.alloc.rate:                   2465,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              89008,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97412,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,509 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 43910,246 ops/s
[info]                  ·gc.alloc.rate:                   2483,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              89008,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96928,999 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,476 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 43889,200 ops/s
[info]                  ·gc.alloc.rate:                   2482,560 MB/sec
[info]                  ·gc.alloc.rate.norm:              89008,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72859,576 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,210 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42110,079 ops/s
[info]                  ·gc.alloc.rate:                   2381,305 MB/sec
[info]                  ·gc.alloc.rate.norm:              89008,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101389,566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,334 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   43442,683 ±(99.9%) 2911,471 ops/s [Average]
[info]   (min, avg, max) = (42110,079, 43442,683, 43910,246), stdev = 756,100
[info]   CI (99.9%): [40531,212, 46354,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2456,900 ±(99.9%) 165,225 MB/sec [Average]
[info]   (min, avg, max) = (2381,305, 2456,900, 2483,426), stdev = 42,908
[info]   CI (99.9%): [2291,675, 2622,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89008,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (89008,009, 89008,010, 89008,010), stdev = 0,001
[info]   CI (99.9%): [89008,008, 89008,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2433,467 ±(99.9%) 1433,377 MB/sec [Average]
[info]   (min, avg, max) = (2019,362, 2433,467, 2712,559), stdev = 372,244
[info]   CI (99.9%): [1000,089, 3866,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   88264,680 ±(99.9%) 54781,651 B/op [Average]
[info]   (min, avg, max) = (72732,486, 88264,680, 101389,566), stdev = 14226,621
[info]   CI (99.9%): [33483,029, 143046,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,133 ±(99.9%) 0,231 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,133, 0,229), stdev = 0,060
[info]   CI (99.9%): [≈ 0, 0,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,805 ±(99.9%) 8,167 B/op [Average]
[info]   (min, avg, max) = (2,334, 4,805, 8,210), stdev = 2,121
[info]   CI (99.9%): [≈ 0, 12,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,52% complete, ETA 00:17:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_435ee987/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 181155,386 ops/s
[info] # Warmup Iteration   2: 254888,857 ops/s
[info] # Warmup Iteration   3: 251892,033 ops/s
[info] # Warmup Iteration   4: 258289,328 ops/s
[info] # Warmup Iteration   5: 257678,641 ops/s
[info] Iteration   1: 258203,431 ops/s
[info]                  ·gc.alloc.rate:                   1200,893 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8233,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 258206,221 ops/s
[info]                  ·gc.alloc.rate:                   1200,807 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8238,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 258440,502 ops/s
[info]                  ·gc.alloc.rate:               1201,910 MB/sec
[info]                  ·gc.alloc.rate.norm:          7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4119,245 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 257619,665 ops/s
[info]                  ·gc.alloc.rate:                   1198,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8266,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,254 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 257447,259 ops/s
[info]                  ·gc.alloc.rate:               1197,159 MB/sec
[info]                  ·gc.alloc.rate.norm:          7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8278,339 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   257983,415 ±(99.9%) 1641,336 ops/s [Average]
[info]   (min, avg, max) = (257447,259, 257983,415, 258440,502), stdev = 426,250
[info]   CI (99.9%): [256342,079, 259624,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1199,791 ±(99.9%) 7,761 MB/sec [Average]
[info]   (min, avg, max) = (1197,159, 1199,791, 1201,910), stdev = 2,016
[info]   CI (99.9%): [1192,029, 1207,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7320,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7320,002, 7320,002, 7320,002), stdev = 0,001
[info]   CI (99.9%): [7320,001, 7320,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,140 ±(99.9%) 1164,078 MB/sec [Average]
[info]   (min, avg, max) = (676,361, 1217,140, 1353,891), stdev = 302,307
[info]   CI (99.9%): [53,062, 2381,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7427,333 ±(99.9%) 7121,276 B/op [Average]
[info]   (min, avg, max) = (4119,245, 7427,333, 8278,339), stdev = 1849,373
[info]   CI (99.9%): [306,057, 14548,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,102 ±(99.9%) 0,410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,102, 0,254), stdev = 0,106
[info]   CI (99.9%): [≈ 0, 0,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,72% complete, ETA 00:17:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1232409,962 ops/s
[info] # Warmup Iteration   2: 1259010,764 ops/s
[info] # Warmup Iteration   3: 1256259,074 ops/s
[info] # Warmup Iteration   4: 1256187,332 ops/s
[info] # Warmup Iteration   5: 1180646,862 ops/s
[info] Iteration   1: 1259224,152 ops/s
[info]                  ·gc.alloc.rate:                   633,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843,396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,889 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1254918,369 ops/s
[info]                  ·gc.alloc.rate:                   631,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1252599,433 ops/s
[info]                  ·gc.alloc.rate:               630,229 MB/sec
[info]                  ·gc.alloc.rate.norm:          792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,639 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 845,297 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1253796,853 ops/s
[info]                  ·gc.alloc.rate:      630,915 MB/sec
[info]                  ·gc.alloc.rate.norm: 792,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1257432,082 ops/s
[info]                  ·gc.alloc.rate:                   632,669 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     842,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1255594,178 ±(99.9%) 10405,682 ops/s [Average]
[info]   (min, avg, max) = (1252599,433, 1255594,178, 1259224,152), stdev = 2702,323
[info]   CI (99.9%): [1245188,495, 1265999,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   631,791 ±(99.9%) 5,286 MB/sec [Average]
[info]   (min, avg, max) = (630,229, 631,791, 633,653), stdev = 1,373
[info]   CI (99.9%): [626,505, 637,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   792,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (792,000, 792,000, 792,000), stdev = 0,001
[info]   CI (99.9%): [792,000, 792,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   538,965 ±(99.9%) 1160,170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,965, 674,773), stdev = 301,292
[info]   CI (99.9%): [≈ 0, 1699,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   675,403 ±(99.9%) 1453,869 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 675,403, 846,243), stdev = 377,565
[info]   CI (99.9%): [≈ 0, 2129,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,643 ±(99.9%) 5,315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,112), stdev = 1,380
[info]   CI (99.9%): [≈ 0, 5,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,804 ±(99.9%) 6,643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,804, 3,889), stdev = 1,725
[info]   CI (99.9%): [≈ 0, 7,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86,92% complete, ETA 00:17:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1271473,958 ops/s
[info] # Warmup Iteration   2: 1286038,292 ops/s
[info] # Warmup Iteration   3: 1292637,776 ops/s
[info] # Warmup Iteration   4: 1292933,452 ops/s
[info] # Warmup Iteration   5: 1292532,248 ops/s
[info] Iteration   1: 1294725,949 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1293334,236 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1295905,871 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1283559,573 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1295056,522 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1292516,430 ±(99.9%) 19607,723 ops/s [Average]
[info]   (min, avg, max) = (1283559,573, 1292516,430, 1295905,871), stdev = 5092,063
[info]   CI (99.9%): [1272908,707, 1312124,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87,12% complete, ETA 00:17:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23726,287 ops/s
[info] # Warmup Iteration   2: 36854,894 ops/s
[info] # Warmup Iteration   3: 37514,759 ops/s
[info] # Warmup Iteration   4: 37222,350 ops/s
[info] # Warmup Iteration   5: 37566,743 ops/s
[info] Iteration   1: 37598,715 ops/s
[info]                  ·gc.alloc.rate:                   2013,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85011,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,614 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37430,529 ops/s
[info]                  ·gc.alloc.rate:                   2004,294 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56979,911 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,750 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 36269,086 ops/s
[info]                  ·gc.alloc.rate:                   1942,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88286,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,806 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 37349,190 ops/s
[info]                  ·gc.alloc.rate:                   2000,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85825,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,632 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37381,217 ops/s
[info]                  ·gc.alloc.rate:                   2001,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,540 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85801,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,506 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   37205,748 ±(99.9%) 2049,948 ops/s [Average]
[info]   (min, avg, max) = (36269,086, 37205,748, 37598,715), stdev = 532,365
[info]   CI (99.9%): [35155,799, 39255,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1992,379 ±(99.9%) 108,908 MB/sec [Average]
[info]   (min, avg, max) = (1942,624, 1992,379, 2013,328), stdev = 28,283
[info]   CI (99.9%): [1883,470, 2101,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   84280,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84280,011, 84280,011, 84280,012), stdev = 0,001
[info]   CI (99.9%): [84280,009, 84280,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1899,061 ±(99.9%) 1171,047 MB/sec [Average]
[info]   (min, avg, max) = (1355,061, 1899,061, 2037,540), stdev = 304,117
[info]   CI (99.9%): [728,014, 3070,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   80381,110 ±(99.9%) 50595,445 B/op [Average]
[info]   (min, avg, max) = (56979,911, 80381,110, 88286,989), stdev = 13139,476
[info]   CI (99.9%): [29785,665, 130976,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,462 ±(99.9%) 2,775 B/op [Average]
[info]   (min, avg, max) = (1,750, 2,462, 3,506), stdev = 0,721
[info]   CI (99.9%): [≈ 0, 5,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87,32% complete, ETA 00:16:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 302374,525 ops/s
[info] # Warmup Iteration   2: 743295,773 ops/s
[info] # Warmup Iteration   3: 755674,439 ops/s
[info] # Warmup Iteration   4: 763151,903 ops/s
[info] # Warmup Iteration   5: 758288,495 ops/s
[info] Iteration   1: 760033,510 ops/s
[info]                  ·gc.alloc.rate:                   2213,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4178,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 760806,123 ops/s
[info]                  ·gc.alloc.rate:                   2215,902 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4180,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 752154,806 ops/s
[info]                  ·gc.alloc.rate:                   2190,644 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4235,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,131 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 754832,979 ops/s
[info]                  ·gc.alloc.rate:                   2198,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5638,655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 757878,111 ops/s
[info]                  ·gc.alloc.rate:                   2207,004 MB/sec
[info]                  ·gc.alloc.rate.norm:              4584,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4218,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   757141,106 ±(99.9%) 13954,556 ops/s [Average]
[info]   (min, avg, max) = (752154,806, 757141,106, 760806,123), stdev = 3623,954
[info]   CI (99.9%): [743186,550, 771095,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2205,171 ±(99.9%) 40,595 MB/sec [Average]
[info]   (min, avg, max) = (2190,644, 2205,171, 2215,902), stdev = 10,542
[info]   CI (99.9%): [2164,575, 2245,766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4584,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4584,001, 4584,001, 4584,001), stdev = 0,001
[info]   CI (99.9%): [4584,000, 4584,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2159,718 ±(99.9%) 1172,791 MB/sec [Average]
[info]   (min, avg, max) = (2017,921, 2159,718, 2704,477), stdev = 304,570
[info]   CI (99.9%): [986,927, 3332,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4490,449 ±(99.9%) 2473,424 B/op [Average]
[info]   (min, avg, max) = (4178,646, 4490,449, 5638,655), stdev = 642,340
[info]   CI (99.9%): [2017,025, 6963,874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,104 ±(99.9%) 0,149 B/op [Average]
[info]   (min, avg, max) = (0,043, 0,104, 0,131), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87,53% complete, ETA 00:16:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 800709,756 ops/s
[info] # Warmup Iteration   2: 1735036,237 ops/s
[info] # Warmup Iteration   3: 1735400,834 ops/s
[info] # Warmup Iteration   4: 1732465,629 ops/s
[info] # Warmup Iteration   5: 1738214,436 ops/s
[info] Iteration   1: 1731022,241 ops/s
[info]                  ·gc.alloc.rate:                   1231,792 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1228,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1742819,211 ops/s
[info]                  ·gc.alloc.rate:                   1240,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1221,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1692702,014 ops/s
[info]                  ·gc.alloc.rate:               1204,653 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 629,312 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1621817,706 ops/s
[info]                  ·gc.alloc.rate:                   1154,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1314,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1743589,094 ops/s
[info]                  ·gc.alloc.rate:               1240,716 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1223,333 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1706390,053 ±(99.9%) 198760,390 ops/s [Average]
[info]   (min, avg, max) = (1621817,706, 1706390,053, 1743589,094), stdev = 51617,442
[info]   CI (99.9%): [1507629,664, 1905150,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1214,316 ±(99.9%) 141,165 MB/sec [Average]
[info]   (min, avg, max) = (1154,228, 1214,316, 1240,716), stdev = 36,660
[info]   CI (99.9%): [1073,151, 1355,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1120,000, 1120,000, 1120,000), stdev = 0,001
[info]   CI (99.9%): [1120,000, 1120,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,020 ±(99.9%) 1164,865 MB/sec [Average]
[info]   (min, avg, max) = (676,878, 1218,020, 1355,186), stdev = 302,512
[info]   CI (99.9%): [53,155, 2382,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1123,364 ±(99.9%) 1074,021 B/op [Average]
[info]   (min, avg, max) = (629,312, 1123,364, 1314,212), stdev = 278,920
[info]   CI (99.9%): [49,343, 2197,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,027, 0,061), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87,73% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6884402,422 ops/s
[info] # Warmup Iteration   2: 8521923,241 ops/s
[info] # Warmup Iteration   3: 8379106,791 ops/s
[info] # Warmup Iteration   4: 8447273,845 ops/s
[info] # Warmup Iteration   5: 8472833,700 ops/s
[info] Iteration   1: 8441827,527 ops/s
[info]                  ·gc.alloc.rate:                   257,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95,376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8495817,480 ops/s
[info]                  ·gc.alloc.rate:      259,140 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8335711,091 ops/s
[info]                  ·gc.alloc.rate:                   254,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96,587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8472451,691 ops/s
[info]                  ·gc.alloc.rate:      258,408 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8443200,320 ops/s
[info]                  ·gc.alloc.rate:               257,460 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 95,358 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8437801,622 ±(99.9%) 236072,247 ops/s [Average]
[info]   (min, avg, max) = (8335711,091, 8437801,622, 8495817,480), stdev = 61307,213
[info]   CI (99.9%): [8201729,375, 8673873,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   257,332 ±(99.9%) 7,238 MB/sec [Average]
[info]   (min, avg, max) = (254,221, 257,332, 259,140), stdev = 1,880
[info]   CI (99.9%): [250,094, 264,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,909 ±(99.9%) 1078,827 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,909, 511,551), stdev = 280,168
[info]   CI (99.9%): [≈ 0, 1385,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   57,464 ±(99.9%) 202,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57,464, 96,587), stdev = 52,460
[info]   CI (99.9%): [≈ 0, 259,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,009 ±(99.9%) 0,056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,033), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,006), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87,93% complete, ETA 00:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 88701,284 ops/s
[info] # Warmup Iteration   2: 261954,479 ops/s
[info] # Warmup Iteration   3: 262502,956 ops/s
[info] # Warmup Iteration   4: 262424,760 ops/s
[info] # Warmup Iteration   5: 261613,578 ops/s
[info] Iteration   1: 264016,549 ops/s
[info]                  ·gc.alloc.rate:               1842,525 MB/sec
[info]                  ·gc.alloc.rate.norm:          10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8068,413 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 263464,651 ops/s
[info]                  ·gc.alloc.rate:                   1838,745 MB/sec
[info]                  ·gc.alloc.rate.norm:              10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12137,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,373 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 262080,584 ops/s
[info]                  ·gc.alloc.rate:                   1828,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12214,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,375 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 247811,024 ops/s
[info]                  ·gc.alloc.rate:               1729,490 MB/sec
[info]                  ·gc.alloc.rate.norm:          10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8621,516 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 262844,041 ops/s
[info]                  ·gc.alloc.rate:                   1834,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              10984,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12200,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,374 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   260043,370 ±(99.9%) 26476,894 ops/s [Average]
[info]   (min, avg, max) = (247811,024, 260043,370, 264016,549), stdev = 6875,965
[info]   CI (99.9%): [233566,476, 286520,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1814,759 ±(99.9%) 184,587 MB/sec [Average]
[info]   (min, avg, max) = (1729,490, 1814,759, 1842,525), stdev = 47,937
[info]   CI (99.9%): [1630,172, 1999,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10984,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10984,002, 10984,002, 10984,002), stdev = 0,001
[info]   CI (99.9%): [10984,001, 10984,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1762,776 ±(99.9%) 1431,750 MB/sec [Average]
[info]   (min, avg, max) = (1353,446, 1762,776, 2037,209), stdev = 371,821
[info]   CI (99.9%): [331,026, 3194,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10648,523 ±(99.9%) 8133,023 B/op [Average]
[info]   (min, avg, max) = (8068,413, 10648,523, 12214,047), stdev = 2112,120
[info]   CI (99.9%): [2515,500, 18781,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,224 ±(99.9%) 0,789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,224, 0,375), stdev = 0,205
[info]   CI (99.9%): [≈ 0, 1,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88,13% complete, ETA 00:15:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 584505,828 ops/s
[info] # Warmup Iteration   2: 1031676,974 ops/s
[info] # Warmup Iteration   3: 1090133,806 ops/s
[info] # Warmup Iteration   4: 1099233,905 ops/s
[info] # Warmup Iteration   5: 1097454,479 ops/s
[info] Iteration   1: 1095673,596 ops/s
[info]                  ·gc.alloc.rate:                   1637,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1928,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1095632,089 ops/s
[info]                  ·gc.alloc.rate:                   1637,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2894,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1101806,607 ops/s
[info]                  ·gc.alloc.rate:                   1646,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1921,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1100317,097 ops/s
[info]                  ·gc.alloc.rate:                   1644,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,709 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2889,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1071403,803 ops/s
[info]                  ·gc.alloc.rate:               1600,862 MB/sec
[info]                  ·gc.alloc.rate.norm:          2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1981,490 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1092966,639 ±(99.9%) 47612,804 ops/s [Average]
[info]   (min, avg, max) = (1071403,803, 1092966,639, 1101806,607), stdev = 12364,894
[info]   CI (99.9%): [1045353,834, 1140579,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1633,171 ±(99.9%) 71,252 MB/sec [Average]
[info]   (min, avg, max) = (1600,862, 1633,171, 1646,178), stdev = 18,504
[info]   CI (99.9%): [1561,919, 1704,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2352,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2352,000, 2352,000, 2352,000), stdev = 0,001
[info]   CI (99.9%): [2352,000, 2352,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,084 ±(99.9%) 1417,096 MB/sec [Average]
[info]   (min, avg, max) = (1342,792, 1614,084, 2019,709), stdev = 368,015
[info]   CI (99.9%): [196,988, 3031,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2322,953 ±(99.9%) 2001,226 B/op [Average]
[info]   (min, avg, max) = (1921,009, 2322,953, 2894,314), stdev = 519,712
[info]   CI (99.9%): [321,727, 4324,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,096 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,036, 0,060), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88,33% complete, ETA 00:15:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_435ee987/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1175057,106 ops/s
[info] # Warmup Iteration   2: 2761236,302 ops/s
[info] # Warmup Iteration   3: 2775721,581 ops/s
[info] # Warmup Iteration   4: 2777734,708 ops/s
[info] # Warmup Iteration   5: 2774406,212 ops/s
[info] Iteration   1: 2737022,764 ops/s
[info]                  ·gc.alloc.rate:               1126,875 MB/sec
[info]                  ·gc.alloc.rate.norm:          648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 776,380 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2761666,480 ops/s
[info]                  ·gc.alloc.rate:                   1137,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     770,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2775495,103 ops/s
[info]                  ·gc.alloc.rate:               1142,727 MB/sec
[info]                  ·gc.alloc.rate.norm:          648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 383,189 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2765082,790 ops/s
[info]                  ·gc.alloc.rate:                   1138,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     770,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2760352,986 ops/s
[info]                  ·gc.alloc.rate:                   1136,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,372 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2759924,024 ±(99.9%) 54345,917 ops/s [Average]
[info]   (min, avg, max) = (2737022,764, 2759924,024, 2775495,103), stdev = 14113,462
[info]   CI (99.9%): [2705578,107, 2814269,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1136,318 ±(99.9%) 22,424 MB/sec [Average]
[info]   (min, avg, max) = (1126,875, 1136,318, 1142,727), stdev = 5,823
[info]   CI (99.9%): [1113,894, 1158,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (648,000, 648,000, 648,000), stdev = 0,001
[info]   CI (99.9%): [648,000, 648,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1216,662 ±(99.9%) 1164,384 MB/sec [Average]
[info]   (min, avg, max) = (675,741, 1216,662, 1353,372), stdev = 302,387
[info]   CI (99.9%): [52,278, 2381,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   694,264 ±(99.9%) 669,689 B/op [Average]
[info]   (min, avg, max) = (383,189, 694,264, 776,380), stdev = 173,916
[info]   CI (99.9%): [24,576, 1363,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,046 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,024), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88,53% complete, ETA 00:15:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4706263,073 ops/s
[info] # Warmup Iteration   2: 6446445,899 ops/s
[info] # Warmup Iteration   3: 6416562,305 ops/s
[info] # Warmup Iteration   4: 6549039,763 ops/s
[info] # Warmup Iteration   5: 6562840,166 ops/s
[info] Iteration   1: 6584853,442 ops/s
[info]                  ·gc.alloc.rate:                   736,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,762 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6606317,614 ops/s
[info]                  ·gc.alloc.rate:                   738,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 6604960,898 ops/s
[info]                  ·gc.alloc.rate:               738,518 MB/sec
[info]                  ·gc.alloc.rate.norm:          176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 160,304 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 6573690,104 ops/s
[info]                  ·gc.alloc.rate:                   735,118 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     321,980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 6583873,613 ops/s
[info]                  ·gc.alloc.rate:               736,156 MB/sec
[info]                  ·gc.alloc.rate.norm:          176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 160,660 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6590739,134 ±(99.9%) 55045,146 ops/s [Average]
[info]   (min, avg, max) = (6573690,104, 6590739,134, 6606317,614), stdev = 14295,050
[info]   CI (99.9%): [6535693,989, 6645784,280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   736,987 ±(99.9%) 6,186 MB/sec [Average]
[info]   (min, avg, max) = (735,118, 736,987, 738,818), stdev = 1,606
[info]   CI (99.9%): [730,801, 743,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
[info]   CI (99.9%): [176,000, 176,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,813 ±(99.9%) 1156,015 MB/sec [Average]
[info]   (min, avg, max) = (671,993, 807,813, 1344,847), stdev = 300,214
[info]   CI (99.9%): [≈ 0, 1963,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   192,996 ±(99.9%) 277,650 B/op [Average]
[info]   (min, avg, max) = (160,304, 192,996, 321,980), stdev = 72,105
[info]   CI (99.9%): [≈ 0, 470,647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,667 ±(99.9%) 5,431 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,667, 3,189), stdev = 1,410
[info]   CI (99.9%): [≈ 0, 6,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,159 ±(99.9%) 1,298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,159, 0,762), stdev = 0,337
[info]   CI (99.9%): [≈ 0, 1,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88,73% complete, ETA 00:14:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5498365,429 ops/s
[info] # Warmup Iteration   2: 6564916,260 ops/s
[info] # Warmup Iteration   3: 6647327,564 ops/s
[info] # Warmup Iteration   4: 6669161,158 ops/s
[info] # Warmup Iteration   5: 6594108,068 ops/s
[info] Iteration   1: 6598668,144 ops/s
[info]                  ·gc.alloc.rate:               402,467 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,013 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 6642842,780 ops/s
[info]                  ·gc.alloc.rate:                   405,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121,203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,061 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6006659,120 ops/s
[info]                  ·gc.alloc.rate:      366,366 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6623996,680 ops/s
[info]                  ·gc.alloc.rate:               404,033 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121,547 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 6649301,056 ops/s
[info]                  ·gc.alloc.rate:                   405,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,744 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6504293,556 ±(99.9%) 1073871,510 ops/s [Average]
[info]   (min, avg, max) = (6006659,120, 6504293,556, 6649301,056), stdev = 278881,021
[info]   CI (99.9%): [5430422,047, 7578165,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   396,718 ±(99.9%) 65,497 MB/sec [Average]
[info]   (min, avg, max) = (366,366, 396,718, 405,539), stdev = 17,009
[info]   CI (99.9%): [331,220, 462,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   441,860 ±(99.9%) 989,264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,860, 674,671), stdev = 256,909
[info]   CI (99.9%): [≈ 0, 1431,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   104,894 ±(99.9%) 234,572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104,894, 159,710), stdev = 60,918
[info]   CI (99.9%): [≈ 0, 339,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,641 ±(99.9%) 5,388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,641, 3,144), stdev = 1,399
[info]   CI (99.9%): [≈ 0, 6,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,152 ±(99.9%) 1,276 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,152, 0,744), stdev = 0,331
[info]   CI (99.9%): [≈ 0, 1,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88,93% complete, ETA 00:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122745,516 ops/s
[info] # Warmup Iteration   2: 388678,253 ops/s
[info] # Warmup Iteration   3: 390390,944 ops/s
[info] # Warmup Iteration   4: 375450,823 ops/s
[info] # Warmup Iteration   5: 389212,021 ops/s
[info] Iteration   1: 389423,800 ops/s
[info]                  ·gc.alloc.rate:                   2191,206 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8211,917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 386803,014 ops/s
[info]                  ·gc.alloc.rate:                   2176,495 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8275,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,254 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 390061,583 ops/s
[info]                  ·gc.alloc.rate:                   2194,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8217,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 389308,456 ops/s
[info]                  ·gc.alloc.rate:                   2190,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10986,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 373890,734 ops/s
[info]                  ·gc.alloc.rate:                   2103,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              8856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8586,910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,175 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   385897,517 ±(99.9%) 26285,502 ops/s [Average]
[info]   (min, avg, max) = (373890,734, 385897,517, 390061,583), stdev = 6826,261
[info]   CI (99.9%): [359612,015, 412183,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2171,331 ±(99.9%) 148,579 MB/sec [Average]
[info]   (min, avg, max) = (2103,450, 2171,331, 2194,768), stdev = 38,586
[info]   CI (99.9%): [2022,752, 2319,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8856,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8856,001, 8856,001, 8856,001), stdev = 0,001
[info]   CI (99.9%): [8856,001, 8856,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2171,925 ±(99.9%) 1175,111 MB/sec [Average]
[info]   (min, avg, max) = (2031,842, 2171,925, 2717,810), stdev = 305,173
[info]   CI (99.9%): [996,814, 3347,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8855,765 ±(99.9%) 4625,319 B/op [Average]
[info]   (min, avg, max) = (8211,917, 8855,765, 10986,677), stdev = 1201,181
[info]   CI (99.9%): [4230,446, 13481,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,187 ±(99.9%) 0,272 B/op [Average]
[info]   (min, avg, max) = (0,084, 0,187, 0,254), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89,13% complete, ETA 00:14:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56616,127 ops/s
[info] # Warmup Iteration   2: 66884,568 ops/s
[info] # Warmup Iteration   3: 66875,031 ops/s
[info] # Warmup Iteration   4: 67955,215 ops/s
[info] # Warmup Iteration   5: 67460,041 ops/s
[info] Iteration   1: 67393,358 ops/s
[info]                  ·gc.alloc.rate:                   1927,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47116,699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,944 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 64595,959 ops/s
[info]                  ·gc.alloc.rate:                   1847,586 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49217,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,507 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 67838,905 ops/s
[info]                  ·gc.alloc.rate:                   1940,193 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31285,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,483 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 67718,935 ops/s
[info]                  ·gc.alloc.rate:                   1937,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47075,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,968 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 67462,846 ops/s
[info]                  ·gc.alloc.rate:                   1929,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              45016,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47331,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,457 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   67002,001 ±(99.9%) 5226,453 ops/s [Average]
[info]   (min, avg, max) = (64595,959, 67002,001, 67838,905), stdev = 1357,293
[info]   CI (99.9%): [61775,548, 72228,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1916,354 ±(99.9%) 149,395 MB/sec [Average]
[info]   (min, avg, max) = (1847,586, 1916,354, 1940,193), stdev = 38,797
[info]   CI (99.9%): [1766,960, 2065,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   45016,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (45016,006, 45016,006, 45016,006), stdev = 0,001
[info]   CI (99.9%): [45016,005, 45016,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888,053 ±(99.9%) 1161,711 MB/sec [Average]
[info]   (min, avg, max) = (1348,425, 1888,053, 2028,523), stdev = 301,693
[info]   CI (99.9%): [726,342, 3049,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44405,453 ±(99.9%) 28448,012 B/op [Average]
[info]   (min, avg, max) = (31285,899, 44405,453, 49217,681), stdev = 7387,858
[info]   CI (99.9%): [15957,441, 72853,465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,072 ±(99.9%) 2,425 B/op [Average]
[info]   (min, avg, max) = (0,483, 1,072, 1,944), stdev = 0,630
[info]   CI (99.9%): [≈ 0, 3,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,34% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81234,531 ops/s
[info] # Warmup Iteration   2: 124466,437 ops/s
[info] # Warmup Iteration   3: 124988,382 ops/s
[info] # Warmup Iteration   4: 119677,596 ops/s
[info] # Warmup Iteration   5: 124502,173 ops/s
[info] Iteration   1: 124408,185 ops/s
[info]                  ·gc.alloc.rate:                   1912,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,724 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25702,871 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,053 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 125066,262 ops/s
[info]                  ·gc.alloc.rate:                   1923,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25594,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,786 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 123500,178 ops/s
[info]                  ·gc.alloc.rate:                   1898,942 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17291,916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,265 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 124903,223 ops/s
[info]                  ·gc.alloc.rate:                   1920,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25667,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,262 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 124754,546 ops/s
[info]                  ·gc.alloc.rate:                   1918,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,327 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25717,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,263 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   124526,479 ±(99.9%) 2399,019 ops/s [Average]
[info]   (min, avg, max) = (123500,178, 124526,479, 125066,262), stdev = 623,018
[info]   CI (99.9%): [122127,460, 126925,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1914,749 ±(99.9%) 37,050 MB/sec [Average]
[info]   (min, avg, max) = (1898,942, 1914,749, 1923,248), stdev = 9,622
[info]   CI (99.9%): [1877,700, 1951,799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24200,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24200,003, 24200,003, 24200,004), stdev = 0,001
[info]   CI (99.9%): [24200,003, 24200,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,596 ±(99.9%) 1168,292 MB/sec [Average]
[info]   (min, avg, max) = (1356,874, 1899,596, 2038,327), stdev = 303,402
[info]   CI (99.9%): [731,303, 3067,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23994,709 ±(99.9%) 14429,439 B/op [Average]
[info]   (min, avg, max) = (17291,916, 23994,709, 25717,569), stdev = 3747,279
[info]   CI (99.9%): [9565,270, 38424,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,526 ±(99.9%) 1,431 B/op [Average]
[info]   (min, avg, max) = (0,262, 0,526, 1,053), stdev = 0,372
[info]   CI (99.9%): [≈ 0, 1,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,54% complete, ETA 00:13:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153803,505 ops/s
[info] # Warmup Iteration   2: 173864,802 ops/s
[info] # Warmup Iteration   3: 169579,642 ops/s
[info] # Warmup Iteration   4: 175132,720 ops/s
[info] # Warmup Iteration   5: 175019,220 ops/s
[info] Iteration   1: 175403,478 ops/s
[info]                  ·gc.alloc.rate:                   2576,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18153,305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,187 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 175414,612 ops/s
[info]                  ·gc.alloc.rate:                   2577,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24242,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,374 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 173050,215 ops/s
[info]                  ·gc.alloc.rate:                   2542,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24619,352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,189 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 174328,818 ops/s
[info]                  ·gc.alloc.rate:                   2560,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,291 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24485,978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,376 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 174861,913 ops/s
[info]                  ·gc.alloc.rate:                   2568,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24439,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,562 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   174611,807 ±(99.9%) 3778,954 ops/s [Average]
[info]   (min, avg, max) = (173050,215, 174611,807, 175414,612), stdev = 981,382
[info]   CI (99.9%): [170832,854, 178390,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2565,033 ±(99.9%) 55,545 MB/sec [Average]
[info]   (min, avg, max) = (2542,082, 2565,033, 2577,043), stdev = 14,425
[info]   CI (99.9%): [2509,488, 2620,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23120,002, 23120,002, 23120,003), stdev = 0,001
[info]   CI (99.9%): [23120,002, 23120,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2571,912 ±(99.9%) 1181,596 MB/sec [Average]
[info]   (min, avg, max) = (2023,061, 2571,912, 2715,081), stdev = 306,857
[info]   CI (99.9%): [1390,315, 3753,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23188,177 ±(99.9%) 10850,420 B/op [Average]
[info]   (min, avg, max) = (18153,305, 23188,177, 24619,352), stdev = 2817,820
[info]   CI (99.9%): [12337,757, 34038,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,338 ±(99.9%) 0,602 B/op [Average]
[info]   (min, avg, max) = (0,187, 0,338, 0,562), stdev = 0,156
[info]   CI (99.9%): [≈ 0, 0,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89,74% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36862,391 ops/s
[info] # Warmup Iteration   2: 56648,852 ops/s
[info] # Warmup Iteration   3: 57420,681 ops/s
[info] # Warmup Iteration   4: 57353,826 ops/s
[info] # Warmup Iteration   5: 56957,316 ops/s
[info] Iteration   1: 57161,221 ops/s
[info]                  ·gc.alloc.rate:                   3004,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93492,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,146 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 57337,131 ops/s
[info]                  ·gc.alloc.rate:                   3013,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74651,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,714 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 57486,727 ops/s
[info]                  ·gc.alloc.rate:                   3021,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93158,122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,280 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 57023,198 ops/s
[info]                  ·gc.alloc.rate:                   2997,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75156,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,149 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 56997,373 ops/s
[info]                  ·gc.alloc.rate:                   2996,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93987,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,299 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   57201,130 ±(99.9%) 805,032 ops/s [Average]
[info]   (min, avg, max) = (56997,373, 57201,130, 57486,727), stdev = 209,064
[info]   CI (99.9%): [56396,098, 58006,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3006,450 ±(99.9%) 41,721 MB/sec [Average]
[info]   (min, avg, max) = (2996,163, 3006,450, 3021,348), stdev = 10,835
[info]   CI (99.9%): [2964,729, 3048,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82720,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82720,007, 82720,007, 82720,008), stdev = 0,001
[info]   CI (99.9%): [82720,005, 82720,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3128,989 ±(99.9%) 1433,370 MB/sec [Average]
[info]   (min, avg, max) = (2719,472, 3128,989, 3404,285), stdev = 372,242
[info]   CI (99.9%): [1695,619, 4562,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86089,420 ±(99.9%) 39339,985 B/op [Average]
[info]   (min, avg, max) = (74651,459, 86089,420, 93987,688), stdev = 10216,469
[info]   CI (99.9%): [46749,435, 125429,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,718 ±(99.9%) 2,198 B/op [Average]
[info]   (min, avg, max) = (1,146, 1,718, 2,299), stdev = 0,571
[info]   CI (99.9%): [≈ 0, 3,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89,94% complete, ETA 00:13:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76264,261 ops/s
[info] # Warmup Iteration   2: 88508,482 ops/s
[info] # Warmup Iteration   3: 89198,721 ops/s
[info] # Warmup Iteration   4: 89543,162 ops/s
[info] # Warmup Iteration   5: 89402,979 ops/s
[info] Iteration   1: 89423,187 ops/s
[info]                  ·gc.alloc.rate:                   1823,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,973 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35501,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,366 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 89219,679 ops/s
[info]                  ·gc.alloc.rate:                   1819,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35629,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,367 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 89397,788 ops/s
[info]                  ·gc.alloc.rate:                   1822,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23737,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,733 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 88802,781 ops/s
[info]                  ·gc.alloc.rate:                   1811,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35889,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,369 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 89205,027 ops/s
[info]                  ·gc.alloc.rate:                   1818,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35774,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,367 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   89209,692 ±(99.9%) 956,205 ops/s [Average]
[info]   (min, avg, max) = (88802,781, 89209,692, 89423,187), stdev = 248,323
[info]   CI (99.9%): [88253,487, 90165,897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1819,137 ±(99.9%) 19,085 MB/sec [Average]
[info]   (min, avg, max) = (1811,037, 1819,137, 1823,487), stdev = 4,956
[info]   CI (99.9%): [1800,052, 1838,222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   32096,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32096,005, 32096,005, 32096,005), stdev = 0,001
[info]   CI (99.9%): [32096,004, 32096,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1887,460 ±(99.9%) 1161,102 MB/sec [Average]
[info]   (min, avg, max) = (1348,110, 1887,460, 2027,464), stdev = 301,535
[info]   CI (99.9%): [726,357, 3048,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   33306,590 ±(99.9%) 20606,596 B/op [Average]
[info]   (min, avg, max) = (23737,183, 33306,590, 35889,921), stdev = 5351,467
[info]   CI (99.9%): [12699,994, 53913,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,025, 0,042), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,441 ±(99.9%) 0,629 B/op [Average]
[info]   (min, avg, max) = (0,366, 0,441, 0,733), stdev = 0,163
[info]   CI (99.9%): [≈ 0, 1,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90,14% complete, ETA 00:13:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204542,436 ops/s
[info] # Warmup Iteration   2: 263247,090 ops/s
[info] # Warmup Iteration   3: 264120,688 ops/s
[info] # Warmup Iteration   4: 260415,146 ops/s
[info] # Warmup Iteration   5: 264925,293 ops/s
[info] Iteration   1: 262172,750 ops/s
[info]                  ·gc.alloc.rate:                   1247,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8061,325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,250 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 265388,379 ops/s
[info]                  ·gc.alloc.rate:                   1262,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7964,288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 264669,144 ops/s
[info]                  ·gc.alloc.rate:                   1259,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7985,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,248 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 264741,937 ops/s
[info]                  ·gc.alloc.rate:               1259,632 MB/sec
[info]                  ·gc.alloc.rate.norm:          7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3995,488 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 264562,165 ops/s
[info]                  ·gc.alloc.rate:                   1258,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,635 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8000,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,248 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   264306,875 ±(99.9%) 4759,024 ops/s [Average]
[info]   (min, avg, max) = (262172,750, 264306,875, 265388,379), stdev = 1235,904
[info]   CI (99.9%): [259547,851, 269065,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1257,461 ±(99.9%) 22,628 MB/sec [Average]
[info]   (min, avg, max) = (1247,332, 1257,461, 1262,632), stdev = 5,877
[info]   CI (99.9%): [1234,833, 1280,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7488,002, 7488,002, 7488,002), stdev = 0,001
[info]   CI (99.9%): [7488,001, 7488,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1209,064 ±(99.9%) 1155,813 MB/sec [Average]
[info]   (min, avg, max) = (672,121, 1209,064, 1344,635), stdev = 300,161
[info]   CI (99.9%): [53,251, 2364,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7201,316 ±(99.9%) 6902,190 B/op [Average]
[info]   (min, avg, max) = (3995,488, 7201,316, 8061,325), stdev = 1792,477
[info]   CI (99.9%): [299,126, 14103,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,174 ±(99.9%) 0,428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,174, 0,250), stdev = 0,111
[info]   CI (99.9%): [≈ 0, 0,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,34% complete, ETA 00:12:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 422575,703 ops/s
[info] # Warmup Iteration   2: 638071,044 ops/s
[info] # Warmup Iteration   3: 639969,392 ops/s
[info] # Warmup Iteration   4: 637612,202 ops/s
[info] # Warmup Iteration   5: 636841,440 ops/s
[info] Iteration   1: 638092,596 ops/s
[info]                  ·gc.alloc.rate:      551,557 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 634067,483 ops/s
[info]                  ·gc.alloc.rate:                   547,938 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1674,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,878 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 642115,530 ops/s
[info]                  ·gc.alloc.rate:                   554,823 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1653,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 638956,862 ops/s
[info]                  ·gc.alloc.rate:                   552,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1662,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 641925,793 ops/s
[info]                  ·gc.alloc.rate:               554,524 MB/sec
[info]                  ·gc.alloc.rate.norm:          1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1655,222 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   639031,653 ±(99.9%) 12686,214 ops/s [Average]
[info]   (min, avg, max) = (634067,483, 639031,653, 642115,530), stdev = 3294,569
[info]   CI (99.9%): [626345,439, 651717,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   552,193 ±(99.9%) 10,696 MB/sec [Average]
[info]   (min, avg, max) = (547,938, 552,193, 554,823), stdev = 2,778
[info]   CI (99.9%): [541,497, 562,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1360,001, 1360,001, 1360,001), stdev = 0,001
[info]   CI (99.9%): [1360,001, 1360,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,771 ±(99.9%) 1161,898 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,771, 675,068), stdev = 301,741
[info]   CI (99.9%): [≈ 0, 1701,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1329,056 ±(99.9%) 2861,071 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1329,056, 1674,183), stdev = 743,011
[info]   CI (99.9%): [≈ 0, 4190,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,593 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,079, 0,354), stdev = 0,154
[info]   CI (99.9%): [≈ 0, 0,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,196 ±(99.9%) 1,472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,196, 0,878), stdev = 0,382
[info]   CI (99.9%): [≈ 0, 1,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,54% complete, ETA 00:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 543276,500 ops/s
[info] # Warmup Iteration   2: 566852,164 ops/s
[info] # Warmup Iteration   3: 552351,282 ops/s
[info] # Warmup Iteration   4: 546603,547 ops/s
[info] # Warmup Iteration   5: 462734,515 ops/s
[info] Iteration   1: 522487,488 ops/s
[info]                  ·gc.alloc.rate:               281,503 MB/sec
[info]                  ·gc.alloc.rate.norm:          848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1541,029 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 524551,546 ops/s
[info]                  ·gc.alloc.rate:               282,591 MB/sec
[info]                  ·gc.alloc.rate.norm:          848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1534,888 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 555259,491 ops/s
[info]                  ·gc.alloc.rate:      299,201 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 551470,960 ops/s
[info]                  ·gc.alloc.rate:                   297,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1460,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,009 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 554535,632 ops/s
[info]                  ·gc.alloc.rate:      298,719 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   541661,024 ±(99.9%) 64066,297 ops/s [Average]
[info]   (min, avg, max) = (522487,488, 541661,024, 555259,491), stdev = 16637,814
[info]   CI (99.9%): [477594,727, 605727,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   291,830 ±(99.9%) 34,548 MB/sec [Average]
[info]   (min, avg, max) = (281,503, 291,830, 299,201), stdev = 8,972
[info]   CI (99.9%): [257,282, 326,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (848,001, 848,001, 848,001), stdev = 0,001
[info]   CI (99.9%): [848,001, 848,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,928 ±(99.9%) 1078,894 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,928, 511,586), stdev = 280,185
[info]   CI (99.9%): [≈ 0, 1385,822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   907,185 ±(99.9%) 3191,247 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 907,185, 1541,029), stdev = 828,757
[info]   CI (99.9%): [≈ 0, 4098,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,002 ±(99.9%) 0,015 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,009), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,025), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90,74% complete, ETA 00:12:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664917,795 ops/s
[info] # Warmup Iteration   2: 695505,889 ops/s
[info] # Warmup Iteration   3: 701370,547 ops/s
[info] # Warmup Iteration   4: 701602,006 ops/s
[info] # Warmup Iteration   5: 700001,532 ops/s
[info] Iteration   1: 700591,584 ops/s
[info]                  ·gc.alloc.rate:      7,122 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 698295,780 ops/s
[info]                  ·gc.alloc.rate:      7,099 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 702933,011 ops/s
[info]                  ·gc.alloc.rate:      7,146 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 700747,018 ops/s
[info]                  ·gc.alloc.rate:      7,124 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 698051,612 ops/s
[info]                  ·gc.alloc.rate:      7,096 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   700123,801 ±(99.9%) 7733,592 ops/s [Average]
[info]   (min, avg, max) = (698051,612, 700123,801, 702933,011), stdev = 2008,389
[info]   CI (99.9%): [692390,209, 707857,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7,118 ±(99.9%) 0,079 MB/sec [Average]
[info]   (min, avg, max) = (7,096, 7,118, 7,146), stdev = 0,021
[info]   CI (99.9%): [7,039, 7,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90,95% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27561,073 ops/s
[info] # Warmup Iteration   2: 37687,111 ops/s
[info] # Warmup Iteration   3: 37672,588 ops/s
[info] # Warmup Iteration   4: 38179,352 ops/s
[info] # Warmup Iteration   5: 38094,183 ops/s
[info] Iteration   1: 37974,810 ops/s
[info]                  ·gc.alloc.rate:                   1891,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,384 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83369,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,725 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 38164,548 ops/s
[info]                  ·gc.alloc.rate:                   1901,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83070,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,858 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 38181,784 ops/s
[info]                  ·gc.alloc.rate:                   1902,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83191,990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,574 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37956,180 ops/s
[info]                  ·gc.alloc.rate:                   1891,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83855,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,726 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 38189,485 ops/s
[info]                  ·gc.alloc.rate:                   1902,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83494,617 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,574 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   38093,361 ±(99.9%) 451,524 ops/s [Average]
[info]   (min, avg, max) = (37956,180, 38093,361, 38189,485), stdev = 117,259
[info]   CI (99.9%): [37641,837, 38544,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1897,993 ±(99.9%) 22,509 MB/sec [Average]
[info]   (min, avg, max) = (1891,330, 1897,993, 1902,696), stdev = 5,845
[info]   CI (99.9%): [1875,484, 1920,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78416,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (78416,011, 78416,011, 78416,012), stdev = 0,001
[info]   CI (99.9%): [78416,009, 78416,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2018,526 ±(99.9%) 22,558 MB/sec [Average]
[info]   (min, avg, max) = (2011,384, 2018,526, 2025,924), stdev = 5,858
[info]   CI (99.9%): [1995,968, 2041,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83396,362 ±(99.9%) 1168,999 B/op [Average]
[info]   (min, avg, max) = (83070,756, 83396,362, 83855,145), stdev = 303,585
[info]   CI (99.9%): [82227,363, 84565,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,892 ±(99.9%) 2,759 B/op [Average]
[info]   (min, avg, max) = (0,858, 1,892, 2,574), stdev = 0,716
[info]   CI (99.9%): [≈ 0, 4,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91,15% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 152263,748 ops/s
[info] # Warmup Iteration   2: 163581,941 ops/s
[info] # Warmup Iteration   3: 163222,316 ops/s
[info] # Warmup Iteration   4: 163701,499 ops/s
[info] # Warmup Iteration   5: 164010,613 ops/s
[info] Iteration   1: 162481,231 ops/s
[info]                  ·gc.alloc.rate:                   1216,358 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13021,540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,403 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 162916,932 ops/s
[info]                  ·gc.alloc.rate:                   1219,703 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12986,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,804 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 164074,778 ops/s
[info]                  ·gc.alloc.rate:                   1228,662 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12892,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,399 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 163743,769 ops/s
[info]                  ·gc.alloc.rate:               1226,020 MB/sec
[info]                  ·gc.alloc.rate.norm:          11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6466,329 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 159164,489 ops/s
[info]                  ·gc.alloc.rate:                   1191,495 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,913 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13311,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,412 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   162476,240 ±(99.9%) 7536,813 ops/s [Average]
[info]   (min, avg, max) = (159164,489, 162476,240, 164074,778), stdev = 1957,286
[info]   CI (99.9%): [154939,427, 170013,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1216,447 ±(99.9%) 56,922 MB/sec [Average]
[info]   (min, avg, max) = (1191,495, 1216,447, 1228,662), stdev = 14,782
[info]   CI (99.9%): [1159,525, 1273,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11784,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11784,003, 11784,003, 11784,003), stdev = 0,001
[info]   CI (99.9%): [11784,002, 11784,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,221 ±(99.9%) 1156,922 MB/sec [Average]
[info]   (min, avg, max) = (672,764, 1210,221, 1345,913), stdev = 300,449
[info]   CI (99.9%): [53,299, 2367,144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11735,474 ±(99.9%) 11358,239 B/op [Average]
[info]   (min, avg, max) = (6466,329, 11735,474, 13311,215), stdev = 2949,699
[info]   CI (99.9%): [377,235, 23093,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,404 ±(99.9%) 1,095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,404, 0,804), stdev = 0,284
[info]   CI (99.9%): [≈ 0, 1,499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91,35% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5010325,594 ops/s
[info] # Warmup Iteration   2: 5763261,646 ops/s
[info] # Warmup Iteration   3: 5783814,133 ops/s
[info] # Warmup Iteration   4: 5796817,579 ops/s
[info] # Warmup Iteration   5: 5758386,546 ops/s
[info] Iteration   1: 5753201,597 ops/s
[info]                  ·gc.alloc.rate:                   4240,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070,296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1113,523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 5786981,637 ops/s
[info]                  ·gc.alloc.rate:                   4265,212 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1109,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5776889,008 ops/s
[info]                  ·gc.alloc.rate:                   4257,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4762,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1297,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5786710,401 ops/s
[info]                  ·gc.alloc.rate:                   4265,220 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1111,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5739283,717 ops/s
[info]                  ·gc.alloc.rate:                   4228,951 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1121,168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   5768613,272 ±(99.9%) 82387,882 ops/s [Average]
[info]   (min, avg, max) = (5739283,717, 5768613,272, 5786981,637), stdev = 21395,871
[info]   CI (99.9%): [5686225,390, 5851001,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   4251,357 ±(99.9%) 62,247 MB/sec [Average]
[info]   (min, avg, max) = (4228,951, 4251,357, 4265,220), stdev = 16,165
[info]   CI (99.9%): [4189,110, 4313,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,000, 1160,000, 1160,000), stdev = 0,001
[info]   CI (99.9%): [1160,000, 1160,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4216,799 ±(99.9%) 1175,404 MB/sec [Average]
[info]   (min, avg, max) = (4070,296, 4216,799, 4762,713), stdev = 305,249
[info]   CI (99.9%): [3041,395, 5392,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1150,532 ±(99.9%) 317,356 B/op [Average]
[info]   (min, avg, max) = (1109,177, 1150,532, 1297,737), stdev = 82,416
[info]   CI (99.9%): [833,177, 1467,888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,015, 0,017), stdev = 0,003
[info]   CI (99.9%): [0,003, 0,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   31,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,200, 7,000), stdev = 0,447
[info]   CI (99.9%): [31,000, 31,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91,55% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2384291,887 ops/s
[info] # Warmup Iteration   2: 8373017,559 ops/s
[info] # Warmup Iteration   3: 8592717,420 ops/s
[info] # Warmup Iteration   4: 8527818,188 ops/s
[info] # Warmup Iteration   5: 8595869,181 ops/s
[info] Iteration   1: 8639121,881 ops/s
[info]                  ·gc.alloc.rate:               922,167 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,561 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 8613491,652 ops/s
[info]                  ·gc.alloc.rate:               919,393 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,927 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 8505920,362 ops/s
[info]                  ·gc.alloc.rate:                   907,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,129 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     248,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 8612951,705 ops/s
[info]                  ·gc.alloc.rate:               919,434 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,811 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 8631097,950 ops/s
[info]                  ·gc.alloc.rate:               921,081 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,553 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   8600516,710 ±(99.9%) 208228,877 ops/s [Average]
[info]   (min, avg, max) = (8505920,362, 8600516,710, 8639121,881), stdev = 54076,378
[info]   CI (99.9%): [8392287,833, 8808745,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   917,997 ±(99.9%) 22,172 MB/sec [Average]
[info]   (min, avg, max) = (907,912, 917,997, 922,167), stdev = 5,758
[info]   CI (99.9%): [895,826, 940,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   806,727 ±(99.9%) 1156,800 MB/sec [Average]
[info]   (min, avg, max) = (671,910, 806,727, 1344,129), stdev = 300,417
[info]   CI (99.9%): [≈ 0, 1963,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   147,914 ±(99.9%) 216,989 B/op [Average]
[info]   (min, avg, max) = (122,553, 147,914, 248,718), stdev = 56,351
[info]   CI (99.9%): [≈ 0, 364,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,027 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,75% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3719495,498 ops/s
[info] # Warmup Iteration   2: 5361109,328 ops/s
[info] # Warmup Iteration   3: 5302576,848 ops/s
[info] # Warmup Iteration   4: 5344487,425 ops/s
[info] # Warmup Iteration   5: 5277351,326 ops/s
[info] Iteration   1: 5298390,854 ops/s
[info]                  ·gc.alloc.rate:                   2504,196 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     804,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5344270,962 ops/s
[info]                  ·gc.alloc.rate:                   2526,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     798,523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5329741,816 ops/s
[info]                  ·gc.alloc.rate:                   2519,536 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     801,916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5312712,093 ops/s
[info]                  ·gc.alloc.rate:                   2511,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     603,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5345098,348 ops/s
[info]                  ·gc.alloc.rate:                   2526,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,941 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     801,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5326042,815 ±(99.9%) 78240,128 ops/s [Average]
[info]   (min, avg, max) = (5298390,854, 5326042,815, 5345098,348), stdev = 20318,713
[info]   CI (99.9%): [5247802,686, 5404282,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2517,552 ±(99.9%) 37,173 MB/sec [Average]
[info]   (min, avg, max) = (2504,196, 2517,552, 2526,299), stdev = 9,654
[info]   CI (99.9%): [2480,379, 2554,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2578,360 ±(99.9%) 1162,705 MB/sec [Average]
[info]   (min, avg, max) = (2038,288, 2578,360, 2719,941), stdev = 301,951
[info]   CI (99.9%): [1415,655, 3741,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   761,879 ±(99.9%) 340,293 B/op [Average]
[info]   (min, avg, max) = (603,833, 761,879, 804,095), stdev = 88,373
[info]   CI (99.9%): [421,586, 1102,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,024 B/op [Average]
[info]   (min, avg, max) = (0,012, 0,018, 0,025), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,95% complete, ETA 00:10:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8239350,915 ops/s
[info] # Warmup Iteration   2: 8969297,951 ops/s
[info] # Warmup Iteration   3: 9020808,767 ops/s
[info] # Warmup Iteration   4: 9075229,682 ops/s
[info] # Warmup Iteration   5: 9053899,818 ops/s
[info] Iteration   1: 9068613,579 ops/s
[info]                  ·gc.alloc.rate:                   967,873 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233,512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9158644,180 ops/s
[info]                  ·gc.alloc.rate:               977,682 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115,505 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 9152014,234 ops/s
[info]                  ·gc.alloc.rate:               976,847 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115,579 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 9119571,338 ops/s
[info]                  ·gc.alloc.rate:                   973,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 9039929,882 ops/s
[info]                  ·gc.alloc.rate:               964,869 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117,009 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   9107754,642 ±(99.9%) 200275,242 ops/s [Average]
[info]   (min, avg, max) = (9039929,882, 9107754,642, 9158644,180), stdev = 52010,844
[info]   CI (99.9%): [8907479,400, 9308029,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   972,143 ±(99.9%) 21,582 MB/sec [Average]
[info]   (min, avg, max) = (964,869, 972,143, 977,682), stdev = 5,605
[info]   CI (99.9%): [950,561, 993,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,138 ±(99.9%) 1418,660 MB/sec [Average]
[info]   (min, avg, max) = (672,015, 941,138, 1345,299), stdev = 368,422
[info]   CI (99.9%): [≈ 0, 2359,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   162,716 ±(99.9%) 246,178 B/op [Average]
[info]   (min, avg, max) = (115,505, 162,716, 233,512), stdev = 63,932
[info]   CI (99.9%): [≈ 0, 408,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92,15% complete, ETA 00:10:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4951769,657 ops/s
[info] # Warmup Iteration   2: 6536357,793 ops/s
[info] # Warmup Iteration   3: 6582094,984 ops/s
[info] # Warmup Iteration   4: 6606397,490 ops/s
[info] # Warmup Iteration   5: 6584986,433 ops/s
[info] Iteration   1: 6560078,429 ops/s
[info]                  ·gc.alloc.rate:                   3267,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3373,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     809,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6575498,420 ops/s
[info]                  ·gc.alloc.rate:                   3275,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     809,680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6595084,543 ops/s
[info]                  ·gc.alloc.rate:                   3285,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3391,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     809,296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 6552991,730 ops/s
[info]                  ·gc.alloc.rate:               3264,489 MB/sec
[info]                  ·gc.alloc.rate.norm:          784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3396,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 815,725 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 6603996,274 ops/s
[info]                  ·gc.alloc.rate:                   3289,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     648,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   6577529,879 ±(99.9%) 84351,012 ops/s [Average]
[info]   (min, avg, max) = (6552991,730, 6577529,879, 6603996,274), stdev = 21905,690
[info]   CI (99.9%): [6493178,867, 6661880,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3276,454 ±(99.9%) 41,253 MB/sec [Average]
[info]   (min, avg, max) = (3264,489, 3276,454, 3289,147), stdev = 10,713
[info]   CI (99.9%): [3235,201, 3317,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   784,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (784,000, 784,000, 784,000), stdev = 0,001
[info]   CI (99.9%): [784,000, 784,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3252,934 ±(99.9%) 1147,970 MB/sec [Average]
[info]   (min, avg, max) = (2719,853, 3252,934, 3396,589), stdev = 298,124
[info]   CI (99.9%): [2104,964, 4400,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   778,502 ±(99.9%) 280,455 B/op [Average]
[info]   (min, avg, max) = (648,303, 778,502, 815,725), stdev = 72,833
[info]   CI (99.9%): [498,047, 1058,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,009 ±(99.9%) 0,028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,020), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92,35% complete, ETA 00:10:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4856037,943 ops/s
[info] # Warmup Iteration   2: 5060673,151 ops/s
[info] # Warmup Iteration   3: 5164883,686 ops/s
[info] # Warmup Iteration   4: 5157157,897 ops/s
[info] # Warmup Iteration   5: 5148693,398 ops/s
[info] Iteration   1: 5146742,619 ops/s
[info]                  ·gc.alloc.rate:                   2694,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     825,270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5157730,222 ops/s
[info]                  ·gc.alloc.rate:                   2700,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     825,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5151604,704 ops/s
[info]                  ·gc.alloc.rate:                   2697,041 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     827,816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5118963,438 ops/s
[info]                  ·gc.alloc.rate:                   2680,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     834,529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5136163,366 ops/s
[info]                  ·gc.alloc.rate:                   2688,615 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,856 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     832,655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   5142240,870 ±(99.9%) 58608,332 ops/s [Average]
[info]   (min, avg, max) = (5118963,438, 5142240,870, 5157730,222), stdev = 15220,398
[info]   CI (99.9%): [5083632,538, 5200849,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2692,126 ±(99.9%) 30,770 MB/sec [Average]
[info]   (min, avg, max) = (2680,126, 2692,126, 2700,491), stdev = 7,991
[info]   CI (99.9%): [2661,355, 2722,896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2708,924 ±(99.9%) 28,177 MB/sec [Average]
[info]   (min, avg, max) = (2698,510, 2708,924, 2716,856), stdev = 7,317
[info]   CI (99.9%): [2680,748, 2737,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   829,151 ±(99.9%) 16,279 B/op [Average]
[info]   (min, avg, max) = (825,270, 829,151, 834,529), stdev = 4,228
[info]   CI (99.9%): [812,871, 845,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,015, 0,019), stdev = 0,003
[info]   CI (99.9%): [0,002, 0,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92,56% complete, ETA 00:09:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2753912,845 ops/s
[info] # Warmup Iteration   2: 3330318,366 ops/s
[info] # Warmup Iteration   3: 3365339,455 ops/s
[info] # Warmup Iteration   4: 3384507,979 ops/s
[info] # Warmup Iteration   5: 3393711,403 ops/s
[info] Iteration   1: 3388522,925 ops/s
[info]                  ·gc.alloc.rate:                   809,513 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     313,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3393493,723 ops/s
[info]                  ·gc.alloc.rate:                   810,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311,702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3369797,056 ops/s
[info]                  ·gc.alloc.rate:               804,973 MB/sec
[info]                  ·gc.alloc.rate.norm:          376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 313,899 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 3388270,044 ops/s
[info]                  ·gc.alloc.rate:                   809,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623,750 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3395586,119 ops/s
[info]                  ·gc.alloc.rate:               811,094 MB/sec
[info]                  ·gc.alloc.rate.norm:          376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311,211 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3387133,973 ±(99.9%) 39253,615 ops/s [Average]
[info]   (min, avg, max) = (3369797,056, 3387133,973, 3395586,119), stdev = 10194,039
[info]   CI (99.9%): [3347880,359, 3426387,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   809,151 ±(99.9%) 9,401 MB/sec [Average]
[info]   (min, avg, max) = (804,973, 809,151, 811,094), stdev = 2,441
[info]   CI (99.9%): [799,750, 818,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (376,000, 376,000, 376,000), stdev = 0,001
[info]   CI (99.9%): [376,000, 376,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   806,603 ±(99.9%) 1154,367 MB/sec [Average]
[info]   (min, avg, max) = (671,333, 806,603, 1342,870), stdev = 299,785
[info]   CI (99.9%): [≈ 0, 1960,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   374,792 ±(99.9%) 535,918 B/op [Average]
[info]   (min, avg, max) = (311,211, 374,792, 623,750), stdev = 139,176
[info]   CI (99.9%): [≈ 0, 910,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,029), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92,76% complete, ETA 00:09:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1698515,135 ops/s
[info] # Warmup Iteration   2: 6426063,709 ops/s
[info] # Warmup Iteration   3: 6453771,209 ops/s
[info] # Warmup Iteration   4: 6422159,950 ops/s
[info] # Warmup Iteration   5: 6344341,606 ops/s
[info] Iteration   1: 5471678,499 ops/s
[info]                  ·gc.alloc.rate:                   528,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     193,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,634 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,758 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6484355,462 ops/s
[info]                  ·gc.alloc.rate:      626,206 MB/sec
[info]                  ·gc.alloc.rate.norm: 152,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6478352,838 ops/s
[info]                  ·gc.alloc.rate:                   625,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6468327,840 ops/s
[info]                  ·gc.alloc.rate:               624,698 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 163,703 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 6467430,343 ops/s
[info]                  ·gc.alloc.rate:                   624,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     163,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6274028,996 ±(99.9%) 1727334,548 ops/s [Average]
[info]   (min, avg, max) = (5471678,499, 6274028,996, 6484355,462), stdev = 448583,297
[info]   CI (99.9%): [4546694,448, 8001363,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   605,875 ±(99.9%) 166,903 MB/sec [Average]
[info]   (min, avg, max) = (528,349, 605,875, 626,206), stdev = 43,344
[info]   CI (99.9%): [438,973, 772,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,709 ±(99.9%) 1159,615 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,709, 674,089), stdev = 301,148
[info]   CI (99.9%): [≈ 0, 1698,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   137,020 ±(99.9%) 299,206 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 137,020, 193,902), stdev = 77,703
[info]   CI (99.9%): [≈ 0, 436,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,539 ±(99.9%) 4,510 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,539, 2,634), stdev = 1,171
[info]   CI (99.9%): [≈ 0, 5,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,155 ±(99.9%) 1,299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,155, 0,758), stdev = 0,337
[info]   CI (99.9%): [≈ 0, 1,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92,96% complete, ETA 00:09:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1737114,697 ops/s
[info] # Warmup Iteration   2: 2214774,805 ops/s
[info] # Warmup Iteration   3: 2222218,769 ops/s
[info] # Warmup Iteration   4: 2219911,203 ops/s
[info] # Warmup Iteration   5: 2222747,791 ops/s
[info] Iteration   1: 2222764,874 ops/s
[info]                  ·gc.alloc.rate:                   689,077 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475,429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2225126,550 ops/s
[info]                  ·gc.alloc.rate:                   689,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2224047,667 ops/s
[info]                  ·gc.alloc.rate:                   689,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     475,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2208918,306 ops/s
[info]                  ·gc.alloc.rate:               684,931 MB/sec
[info]                  ·gc.alloc.rate.norm:          488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479,573 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2210640,910 ops/s
[info]                  ·gc.alloc.rate:                   685,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     479,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   2218299,661 ±(99.9%) 30212,860 ops/s [Average]
[info]   (min, avg, max) = (2208918,306, 2218299,661, 2225126,550), stdev = 7846,184
[info]   CI (99.9%): [2188086,801, 2248512,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   687,765 ±(99.9%) 9,316 MB/sec [Average]
[info]   (min, avg, max) = (684,931, 687,765, 689,859), stdev = 2,419
[info]   CI (99.9%): [678,449, 697,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (488,000, 488,000, 488,000), stdev = 0,001
[info]   CI (99.9%): [488,000, 488,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   672,469 ±(99.9%) 2,716 MB/sec [Average]
[info]   (min, avg, max) = (671,326, 672,469, 673,103), stdev = 0,705
[info]   CI (99.9%): [669,754, 675,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   477,153 ±(99.9%) 7,904 B/op [Average]
[info]   (min, avg, max) = (475,429, 477,153, 479,573), stdev = 2,053
[info]   CI (99.9%): [469,249, 485,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,024 ±(99.9%) 0,065 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,024, 0,044), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93,16% complete, ETA 00:09:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8160702,054 ops/s
[info] # Warmup Iteration   2: 8997115,038 ops/s
[info] # Warmup Iteration   3: 9053380,103 ops/s
[info] # Warmup Iteration   4: 8472959,171 ops/s
[info] # Warmup Iteration   5: 9077531,486 ops/s
[info] Iteration   1: 9081060,764 ops/s
[info]                  ·gc.alloc.rate:                   877,024 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9023694,008 ops/s
[info]                  ·gc.alloc.rate:               871,504 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117,351 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 9088369,652 ops/s
[info]                  ·gc.alloc.rate:               877,691 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116,394 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 9074102,644 ops/s
[info]                  ·gc.alloc.rate:                   876,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9073617,998 ops/s
[info]                  ·gc.alloc.rate:               876,231 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116,577 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   9068169,013 ±(99.9%) 98496,517 ops/s [Average]
[info]   (min, avg, max) = (9023694,008, 9068169,013, 9088369,652), stdev = 25579,233
[info]   CI (99.9%): [8969672,496, 9166665,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   875,769 ±(99.9%) 9,444 MB/sec [Average]
[info]   (min, avg, max) = (871,504, 875,769, 877,691), stdev = 2,453
[info]   CI (99.9%): [866,325, 885,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,773 ±(99.9%) 1420,751 MB/sec [Average]
[info]   (min, avg, max) = (672,026, 941,773, 1347,601), stdev = 368,964
[info]   CI (99.9%): [≈ 0, 2362,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   163,406 ±(99.9%) 245,884 B/op [Average]
[info]   (min, avg, max) = (116,394, 163,406, 233,557), stdev = 63,855
[info]   CI (99.9%): [≈ 0, 409,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,011), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93,36% complete, ETA 00:08:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8561021,976 ops/s
[info] # Warmup Iteration   2: 9249922,441 ops/s
[info] # Warmup Iteration   3: 9175531,273 ops/s
[info] # Warmup Iteration   4: 9179174,615 ops/s
[info] # Warmup Iteration   5: 9180780,908 ops/s
[info] Iteration   1: 9193556,724 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9183717,852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9201308,638 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9183983,185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9182893,036 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   9189091,887 ±(99.9%) 31199,046 ops/s [Average]
[info]   (min, avg, max) = (9182893,036, 9189091,887, 9201308,638), stdev = 8102,293
[info]   CI (99.9%): [9157892,842, 9220290,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93,56% complete, ETA 00:08:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2819149,213 ops/s
[info] # Warmup Iteration   2: 3423414,175 ops/s
[info] # Warmup Iteration   3: 3586610,726 ops/s
[info] # Warmup Iteration   4: 3390023,718 ops/s
[info] # Warmup Iteration   5: 3606702,538 ops/s
[info] Iteration   1: 3593333,322 ops/s
[info]                  ·gc.alloc.rate:                   1150,677 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     587,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3602122,499 ops/s
[info]                  ·gc.alloc.rate:                   1153,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     585,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 3432211,356 ops/s
[info]                  ·gc.alloc.rate:               1098,976 MB/sec
[info]                  ·gc.alloc.rate.norm:          504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 307,289 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 3602745,912 ops/s
[info]                  ·gc.alloc.rate:                   1153,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,821 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     585,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3611946,901 ops/s
[info]                  ·gc.alloc.rate:                   1156,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     584,829 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3568471,998 ±(99.9%) 294405,416 ops/s [Average]
[info]   (min, avg, max) = (3432211,356, 3568471,998, 3611946,901), stdev = 76456,152
[info]   CI (99.9%): [3274066,581, 3862877,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1142,697 ±(99.9%) 94,449 MB/sec [Average]
[info]   (min, avg, max) = (1098,976, 1142,697, 1156,508), stdev = 24,528
[info]   CI (99.9%): [1048,248, 1237,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,968 ±(99.9%) 1155,771 MB/sec [Average]
[info]   (min, avg, max) = (670,045, 1206,968, 1341,983), stdev = 300,150
[info]   CI (99.9%): [51,198, 2362,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   530,217 ±(99.9%) 479,885 B/op [Average]
[info]   (min, avg, max) = (307,289, 530,217, 587,578), stdev = 124,625
[info]   CI (99.9%): [50,332, 1010,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,031 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93,76% complete, ETA 00:08:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 439432,227 ops/s
[info] # Warmup Iteration   2: 459568,696 ops/s
[info] # Warmup Iteration   3: 443069,111 ops/s
[info] # Warmup Iteration   4: 452885,349 ops/s
[info] # Warmup Iteration   5: 449382,569 ops/s
[info] Iteration   1: 451743,514 ops/s
[info]                  ·gc.alloc.rate:      218,137 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 452031,975 ops/s
[info]                  ·gc.alloc.rate:                   218,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1781,308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,064 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 452832,004 ops/s
[info]                  ·gc.alloc.rate:      218,695 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 452160,450 ops/s
[info]                  ·gc.alloc.rate:      218,338 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 450768,924 ops/s
[info]                  ·gc.alloc.rate:               217,638 MB/sec
[info]                  ·gc.alloc.rate.norm:          760,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1786,101 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   451907,373 ±(99.9%) 2892,748 ops/s [Average]
[info]   (min, avg, max) = (450768,924, 451907,373, 452832,004), stdev = 751,237
[info]   CI (99.9%): [449014,626, 454800,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   218,216 ±(99.9%) 1,476 MB/sec [Average]
[info]   (min, avg, max) = (217,638, 218,216, 218,695), stdev = 0,383
[info]   CI (99.9%): [216,740, 219,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   760,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,001, 760,001, 760,001), stdev = 0,001
[info]   CI (99.9%): [760,001, 760,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,613 ±(99.9%) 1078,866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,613, 511,588), stdev = 280,178
[info]   CI (99.9%): [≈ 0, 1283,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   713,482 ±(99.9%) 3761,989 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 713,482, 1786,101), stdev = 976,977
[info]   CI (99.9%): [≈ 0, 4475,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,064), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93,96% complete, ETA 00:08:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1304079,275 ops/s
[info] # Warmup Iteration   2: 1672914,432 ops/s
[info] # Warmup Iteration   3: 1685612,082 ops/s
[info] # Warmup Iteration   4: 1679151,005 ops/s
[info] # Warmup Iteration   5: 1674935,694 ops/s
[info] Iteration   1: 1682008,547 ops/s
[info]                  ·gc.alloc.rate:                   2975,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3159,349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1684726,083 ops/s
[info]                  ·gc.alloc.rate:                   2980,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2706,956 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2528,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1685524,771 ops/s
[info]                  ·gc.alloc.rate:                   2981,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2532,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1671046,836 ops/s
[info]                  ·gc.alloc.rate:                   2955,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394,485 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3197,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1693558,335 ops/s
[info]                  ·gc.alloc.rate:                   2995,194 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2526,937 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1683372,914 ±(99.9%) 31282,664 ops/s [Average]
[info]   (min, avg, max) = (1671046,836, 1683372,914, 1693558,335), stdev = 8124,008
[info]   CI (99.9%): [1652090,251, 1714655,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2977,511 ±(99.9%) 54,884 MB/sec [Average]
[info]   (min, avg, max) = (2955,739, 2977,511, 2995,194), stdev = 14,253
[info]   CI (99.9%): [2922,627, 3032,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2784,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2784,000, 2784,000, 2784,000), stdev = 0,001
[info]   CI (99.9%): [2784,000, 2784,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2981,649 ±(99.9%) 1419,703 MB/sec [Average]
[info]   (min, avg, max) = (2706,956, 2981,649, 3394,485), stdev = 368,692
[info]   CI (99.9%): [1561,947, 4401,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2788,944 ±(99.9%) 1369,637 B/op [Average]
[info]   (min, avg, max) = (2526,937, 2788,944, 3197,253), stdev = 355,690
[info]   CI (99.9%): [1419,307, 4158,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,031 ±(99.9%) 0,041 B/op [Average]
[info]   (min, avg, max) = (0,019, 0,031, 0,039), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94,16% complete, ETA 00:07:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318218,727 ops/s
[info] # Warmup Iteration   2: 2430254,523 ops/s
[info] # Warmup Iteration   3: 2435414,381 ops/s
[info] # Warmup Iteration   4: 2300908,398 ops/s
[info] # Warmup Iteration   5: 2433501,841 ops/s
[info] Iteration   1: 2421581,244 ops/s
[info]                  ·gc.alloc.rate:                   676,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     438,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,707 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2436568,991 ops/s
[info]                  ·gc.alloc.rate:               681,153 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 435,423 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 2443716,564 ops/s
[info]                  ·gc.alloc.rate:                   683,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     433,293 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2440043,269 ops/s
[info]                  ·gc.alloc.rate:               682,190 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 433,945 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 2431718,690 ops/s
[info]                  ·gc.alloc.rate:                   679,761 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     434,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2434725,752 ±(99.9%) 33030,845 ops/s [Average]
[info]   (min, avg, max) = (2421581,244, 2434725,752, 2443716,564), stdev = 8578,005
[info]   CI (99.9%): [2401694,907, 2467756,596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   680,640 ±(99.9%) 9,236 MB/sec [Average]
[info]   (min, avg, max) = (676,976, 680,640, 683,120), stdev = 2,398
[info]   CI (99.9%): [671,405, 689,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   673,136 ±(99.9%) 3,500 MB/sec [Average]
[info]   (min, avg, max) = (672,020, 673,136, 674,083), stdev = 0,909
[info]   CI (99.9%): [669,636, 676,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   435,154 ±(99.9%) 7,157 B/op [Average]
[info]   (min, avg, max) = (433,293, 435,154, 438,120), stdev = 1,859
[info]   CI (99.9%): [427,997, 442,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,542 ±(99.9%) 4,488 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,542, 2,626), stdev = 1,166
[info]   CI (99.9%): [≈ 0, 5,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,352 ±(99.9%) 2,917 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,352, 1,707), stdev = 0,758
[info]   CI (99.9%): [≈ 0, 3,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,37% complete, ETA 00:07:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 867872,872 ops/s
[info] # Warmup Iteration   2: 1580082,603 ops/s
[info] # Warmup Iteration   3: 1589238,362 ops/s
[info] # Warmup Iteration   4: 1588307,103 ops/s
[info] # Warmup Iteration   5: 1591003,870 ops/s
[info] Iteration   1: 1533167,948 ops/s
[info]                  ·gc.alloc.rate:                   989,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     690,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1590458,985 ops/s
[info]                  ·gc.alloc.rate:                   1026,730 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1332,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1590144,786 ops/s
[info]                  ·gc.alloc.rate:               1026,509 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 666,844 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1560031,629 ops/s
[info]                  ·gc.alloc.rate:                   1007,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,252 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1360,140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1477989,472 ops/s
[info]                  ·gc.alloc.rate:               954,372 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 718,164 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1550358,564 ±(99.9%) 180789,252 ops/s [Average]
[info]   (min, avg, max) = (1477989,472, 1550358,564, 1590458,985), stdev = 46950,395
[info]   CI (99.9%): [1369569,312, 1731147,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1000,885 ±(99.9%) 116,353 MB/sec [Average]
[info]   (min, avg, max) = (954,372, 1000,885, 1026,730), stdev = 30,216
[info]   CI (99.9%): [884,533, 1117,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1016,000, 1016,000, 1016,000), stdev = 0,001
[info]   CI (99.9%): [1016,000, 1016,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   943,055 ±(99.9%) 1420,897 MB/sec [Average]
[info]   (min, avg, max) = (672,381, 943,055, 1348,252), stdev = 369,002
[info]   CI (99.9%): [≈ 0, 2363,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   953,526 ±(99.9%) 1382,545 B/op [Average]
[info]   (min, avg, max) = (666,844, 953,526, 1360,140), stdev = 359,043
[info]   CI (99.9%): [≈ 0, 2336,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,57% complete, ETA 00:07:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2343576,674 ops/s
[info] # Warmup Iteration   2: 2863434,054 ops/s
[info] # Warmup Iteration   3: 2865773,185 ops/s
[info] # Warmup Iteration   4: 2869157,324 ops/s
[info] # Warmup Iteration   5: 2861986,632 ops/s
[info] Iteration   1: 2863401,365 ops/s
[info]                  ·gc.alloc.rate:                   800,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2875561,638 ops/s
[info]                  ·gc.alloc.rate:                   803,907 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2879779,054 ops/s
[info]                  ·gc.alloc.rate:               805,036 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 367,672 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2818267,098 ops/s
[info]                  ·gc.alloc.rate:                   787,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     750,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2865589,338 ops/s
[info]                  ·gc.alloc.rate:               801,161 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369,120 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2860519,699 ±(99.9%) 94644,219 ops/s [Average]
[info]   (min, avg, max) = (2818267,098, 2860519,699, 2879779,054), stdev = 24578,803
[info]   CI (99.9%): [2765875,480, 2955163,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   799,688 ±(99.9%) 26,373 MB/sec [Average]
[info]   (min, avg, max) = (787,918, 799,688, 805,036), stdev = 6,849
[info]   CI (99.9%): [773,314, 826,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,293 ±(99.9%) 1155,713 MB/sec [Average]
[info]   (min, avg, max) = (672,101, 807,293, 1344,188), stdev = 300,135
[info]   CI (99.9%): [≈ 0, 1963,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   445,310 ±(99.9%) 657,262 B/op [Average]
[info]   (min, avg, max) = (367,672, 445,310, 750,641), stdev = 170,689
[info]   CI (99.9%): [≈ 0, 1102,573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,018, 0,046), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94,77% complete, ETA 00:06:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 892686,972 ops/s
[info] # Warmup Iteration   2: 1279532,116 ops/s
[info] # Warmup Iteration   3: 1287490,455 ops/s
[info] # Warmup Iteration   4: 1283961,497 ops/s
[info] # Warmup Iteration   5: 1286306,260 ops/s
[info] Iteration   1: 1289621,255 ops/s
[info]                  ·gc.alloc.rate:                   865,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     821,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1290346,475 ops/s
[info]                  ·gc.alloc.rate:               865,761 MB/sec
[info]                  ·gc.alloc.rate.norm:          1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1636,440 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1288815,671 ops/s
[info]                  ·gc.alloc.rate:               864,604 MB/sec
[info]                  ·gc.alloc.rate.norm:          1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 818,380 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1287012,273 ops/s
[info]                  ·gc.alloc.rate:                   863,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     819,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1284456,645 ops/s
[info]                  ·gc.alloc.rate:               861,836 MB/sec
[info]                  ·gc.alloc.rate.norm:          1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1642,186 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1288050,464 ±(99.9%) 9095,585 ops/s [Average]
[info]   (min, avg, max) = (1284456,645, 1288050,464, 1290346,475), stdev = 2362,095
[info]   CI (99.9%): [1278954,879, 1297146,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   864,182 ±(99.9%) 6,043 MB/sec [Average]
[info]   (min, avg, max) = (861,836, 864,182, 865,761), stdev = 1,569
[info]   CI (99.9%): [858,139, 870,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1056,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1056,000, 1056,000, 1056,000), stdev = 0,001
[info]   CI (99.9%): [1056,000, 1056,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   939,088 ±(99.9%) 1412,569 MB/sec [Average]
[info]   (min, avg, max) = (670,051, 939,088, 1341,633), stdev = 366,840
[info]   CI (99.9%): [≈ 0, 2351,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1147,680 ±(99.9%) 1728,185 B/op [Average]
[info]   (min, avg, max) = (818,380, 1147,680, 1642,186), stdev = 448,804
[info]   CI (99.9%): [≈ 0, 2875,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,076), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94,97% complete, ETA 00:06:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1004194,699 ops/s
[info] # Warmup Iteration   2: 1215320,284 ops/s
[info] # Warmup Iteration   3: 1226361,443 ops/s
[info] # Warmup Iteration   4: 1232541,297 ops/s
[info] # Warmup Iteration   5: 1225822,540 ops/s
[info] Iteration   1: 1226691,790 ops/s
[info]                  ·gc.alloc.rate:                   1664,718 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,006 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1724,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1231128,424 ops/s
[info]                  ·gc.alloc.rate:                   1670,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2579,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1231536,611 ops/s
[info]                  ·gc.alloc.rate:                   1671,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1721,175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1226166,569 ops/s
[info]                  ·gc.alloc.rate:                   1664,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2596,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1226522,506 ops/s
[info]                  ·gc.alloc.rate:                   1664,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,931 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1732,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1228409,180 ±(99.9%) 10316,813 ops/s [Average]
[info]   (min, avg, max) = (1226166,569, 1228409,180, 1231536,611), stdev = 2679,244
[info]   CI (99.9%): [1218092,367, 1238725,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1667,126 ±(99.9%) 14,359 MB/sec [Average]
[info]   (min, avg, max) = (1664,188, 1667,126, 1671,426), stdev = 3,729
[info]   CI (99.9%): [1652,767, 1681,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2136,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2136,000, 2136,000, 2136,000), stdev = 0,001
[info]   CI (99.9%): [2136,000, 2136,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,322 ±(99.9%) 1420,518 MB/sec [Average]
[info]   (min, avg, max) = (1344,006, 1616,322, 2022,965), stdev = 368,904
[info]   CI (99.9%): [195,804, 3036,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2070,825 ±(99.9%) 1818,062 B/op [Average]
[info]   (min, avg, max) = (1721,175, 2070,825, 2596,495), stdev = 472,145
[info]   CI (99.9%): [252,763, 3888,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,064 ±(99.9%) 0,117 B/op [Average]
[info]   (min, avg, max) = (0,027, 0,064, 0,106), stdev = 0,030
[info]   CI (99.9%): [≈ 0, 0,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95,17% complete, ETA 00:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1325432,411 ops/s
[info] # Warmup Iteration   2: 1920058,192 ops/s
[info] # Warmup Iteration   3: 1912451,545 ops/s
[info] # Warmup Iteration   4: 1929042,662 ops/s
[info] # Warmup Iteration   5: 1940814,547 ops/s
[info] Iteration   1: 1939147,638 ops/s
[info]                  ·gc.alloc.rate:                   1626,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,267 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1634,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1943202,899 ops/s
[info]                  ·gc.alloc.rate:               1629,723 MB/sec
[info]                  ·gc.alloc.rate.norm:          1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1088,196 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1936661,738 ops/s
[info]                  ·gc.alloc.rate:                   1624,143 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1639,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1939657,152 ops/s
[info]                  ·gc.alloc.rate:                   1626,907 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,932 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1092,841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1940461,227 ops/s
[info]                  ·gc.alloc.rate:                   1627,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1093,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1939826,131 ±(99.9%) 9093,596 ops/s [Average]
[info]   (min, avg, max) = (1936661,738, 1939826,131, 1943202,899), stdev = 2361,578
[info]   CI (99.9%): [1930732,535, 1948919,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1626,887 ±(99.9%) 7,722 MB/sec [Average]
[info]   (min, avg, max) = (1624,143, 1626,887, 1629,723), stdev = 2,005
[info]   CI (99.9%): [1619,165, 1634,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1320,000, 1320,000, 1320,000), stdev = 0,001
[info]   CI (99.9%): [1320,000, 1320,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,174 ±(99.9%) 1411,964 MB/sec [Average]
[info]   (min, avg, max) = (1343,529, 1614,174, 2017,427), stdev = 366,682
[info]   CI (99.9%): [202,210, 3026,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1309,908 ±(99.9%) 1150,710 B/op [Average]
[info]   (min, avg, max) = (1088,196, 1309,908, 1639,637), stdev = 298,836
[info]   CI (99.9%): [159,198, 2460,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,027, 0,068), stdev = 0,026
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95,37% complete, ETA 00:06:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180268,951 ops/s
[info] # Warmup Iteration   2: 2888356,628 ops/s
[info] # Warmup Iteration   3: 2882386,737 ops/s
[info] # Warmup Iteration   4: 2909280,851 ops/s
[info] # Warmup Iteration   5: 2901485,133 ops/s
[info] Iteration   1: 2867556,019 ops/s
[info]                  ·gc.alloc.rate:                   743,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,440 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2908894,624 ops/s
[info]                  ·gc.alloc.rate:                   754,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     728,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2909169,164 ops/s
[info]                  ·gc.alloc.rate:               754,155 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 363,954 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2902286,294 ops/s
[info]                  ·gc.alloc.rate:                   752,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     364,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,056 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2903822,261 ops/s
[info]                  ·gc.alloc.rate:               752,698 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,020 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 364,268 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2898345,672 ±(99.9%) 67302,400 ops/s [Average]
[info]   (min, avg, max) = (2867556,019, 2898345,672, 2909169,164), stdev = 17478,220
[info]   CI (99.9%): [2831043,272, 2965648,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   751,349 ±(99.9%) 17,587 MB/sec [Average]
[info]   (min, avg, max) = (743,299, 751,349, 754,155), stdev = 4,567
[info]   CI (99.9%): [733,762, 768,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   807,599 ±(99.9%) 1161,129 MB/sec [Average]
[info]   (min, avg, max) = (672,020, 807,599, 1347,011), stdev = 301,541
[info]   CI (99.9%): [≈ 0, 1968,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   438,288 ±(99.9%) 625,352 B/op [Average]
[info]   (min, avg, max) = (363,954, 438,288, 728,767), stdev = 162,402
[info]   CI (99.9%): [≈ 0, 1063,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,550 ±(99.9%) 4,468 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,550, 2,624), stdev = 1,160
[info]   CI (99.9%): [≈ 0, 5,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,302 ±(99.9%) 2,453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,302, 1,440), stdev = 0,637
[info]   CI (99.9%): [≈ 0, 2,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,57% complete, ETA 00:05:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1716474,415 ops/s
[info] # Warmup Iteration   2: 2913290,872 ops/s
[info] # Warmup Iteration   3: 2973605,132 ops/s
[info] # Warmup Iteration   4: 2973479,026 ops/s
[info] # Warmup Iteration   5: 2975612,232 ops/s
[info] Iteration   1: 2971469,154 ops/s
[info]                  ·gc.alloc.rate:               1404,645 MB/sec
[info]                  ·gc.alloc.rate.norm:          744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 713,410 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2975256,198 ops/s
[info]                  ·gc.alloc.rate:                   1406,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1069,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2973859,041 ops/s
[info]                  ·gc.alloc.rate:                   1405,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     714,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2971431,246 ops/s
[info]                  ·gc.alloc.rate:                   1404,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,224 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     716,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2949284,302 ops/s
[info]                  ·gc.alloc.rate:               1394,072 MB/sec
[info]                  ·gc.alloc.rate.norm:          744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 722,271 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2968259,988 ±(99.9%) 41326,248 ops/s [Average]
[info]   (min, avg, max) = (2949284,302, 2968259,988, 2975256,198), stdev = 10732,295
[info]   CI (99.9%): [2926933,741, 3009586,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1403,138 ±(99.9%) 19,735 MB/sec [Average]
[info]   (min, avg, max) = (1394,072, 1403,138, 1406,486), stdev = 5,125
[info]   CI (99.9%): [1383,403, 1422,873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1485,193 ±(99.9%) 1157,077 MB/sec [Average]
[info]   (min, avg, max) = (1346,891, 1485,193, 2022,707), stdev = 300,489
[info]   CI (99.9%): [328,115, 2642,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   787,349 ±(99.9%) 608,496 B/op [Average]
[info]   (min, avg, max) = (713,410, 787,349, 1069,968), stdev = 158,025
[info]   CI (99.9%): [178,853, 1395,845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,022), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,77% complete, ETA 00:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2304346,244 ops/s
[info] # Warmup Iteration   2: 2966788,449 ops/s
[info] # Warmup Iteration   3: 2984847,172 ops/s
[info] # Warmup Iteration   4: 2984389,561 ops/s
[info] # Warmup Iteration   5: 2984468,993 ops/s
[info] Iteration   1: 2991180,157 ops/s
[info]                  ·gc.alloc.rate:                   775,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     355,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3008877,480 ops/s
[info]                  ·gc.alloc.rate:               780,080 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 351,926 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 2979892,719 ops/s
[info]                  ·gc.alloc.rate:               772,470 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 355,330 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2996453,489 ops/s
[info]                  ·gc.alloc.rate:                   776,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353,009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3001876,177 ops/s
[info]                  ·gc.alloc.rate:               778,080 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,992 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 352,371 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2995656,004 ±(99.9%) 42297,896 ops/s [Average]
[info]   (min, avg, max) = (2979892,719, 2995656,004, 3008877,480), stdev = 10984,629
[info]   CI (99.9%): [2953358,108, 3037953,900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   776,555 ±(99.9%) 11,053 MB/sec [Average]
[info]   (min, avg, max) = (772,470, 776,555, 780,080), stdev = 2,870
[info]   CI (99.9%): [765,502, 787,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672,879 ±(99.9%) 4,162 MB/sec [Average]
[info]   (min, avg, max) = (671,992, 672,879, 674,684), stdev = 1,081
[info]   CI (99.9%): [668,717, 677,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   353,533 ±(99.9%) 5,988 B/op [Average]
[info]   (min, avg, max) = (351,926, 353,533, 355,330), stdev = 1,555
[info]   CI (99.9%): [347,545, 359,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,044), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95,98% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2341964,487 ops/s
[info] # Warmup Iteration   2: 3064210,065 ops/s
[info] # Warmup Iteration   3: 2951004,726 ops/s
[info] # Warmup Iteration   4: 2986240,269 ops/s
[info] # Warmup Iteration   5: 2985773,545 ops/s
[info] Iteration   1: 2992598,239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2986365,561 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2994330,731 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2987727,293 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2986449,677 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2989494,300 ±(99.9%) 14305,357 ops/s [Average]
[info]   (min, avg, max) = (2986365,561, 2989494,300, 2994330,731), stdev = 3715,056
[info]   CI (99.9%): [2975188,943, 3003799,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96,18% complete, ETA 00:05:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2302943,136 ops/s
[info] # Warmup Iteration   2: 2903899,322 ops/s
[info] # Warmup Iteration   3: 2936051,901 ops/s
[info] # Warmup Iteration   4: 2942934,927 ops/s
[info] # Warmup Iteration   5: 2950374,936 ops/s
[info] Iteration   1: 2962137,892 ops/s
[info]                  ·gc.alloc.rate:                   1430,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,738 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     712,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2964328,224 ops/s
[info]                  ·gc.alloc.rate:                   1431,338 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711,955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2953833,041 ops/s
[info]                  ·gc.alloc.rate:                   1426,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1072,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2947060,647 ops/s
[info]                  ·gc.alloc.rate:                   1423,036 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     717,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2947826,199 ops/s
[info]                  ·gc.alloc.rate:                   1423,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     718,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2955037,201 ±(99.9%) 30673,521 ops/s [Average]
[info]   (min, avg, max) = (2947060,647, 2955037,201, 2964328,224), stdev = 7965,816
[info]   CI (99.9%): [2924363,680, 2985710,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1426,838 ±(99.9%) 15,051 MB/sec [Average]
[info]   (min, avg, max) = (1423,036, 1426,838, 1431,338), stdev = 3,909
[info]   CI (99.9%): [1411,787, 1441,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,000, 760,000, 760,000), stdev = 0,001
[info]   CI (99.9%): [760,000, 760,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1476,711 ±(99.9%) 1155,104 MB/sec [Average]
[info]   (min, avg, max) = (1340,738, 1476,711, 2013,316), stdev = 299,977
[info]   CI (99.9%): [321,608, 2631,815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   786,589 ±(99.9%) 615,863 B/op [Average]
[info]   (min, avg, max) = (711,955, 786,589, 1072,646), stdev = 159,938
[info]   CI (99.9%): [170,726, 1402,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,024 ±(99.9%) 0,055 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,024, 0,044), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96,38% complete, ETA 00:04:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7867,160 ops/s
[info] # Warmup Iteration   2: 12161,040 ops/s
[info] # Warmup Iteration   3: 12580,344 ops/s
[info] # Warmup Iteration   4: 13117,324 ops/s
[info] # Warmup Iteration   5: 13673,549 ops/s
[info] Iteration   1: 13710,911 ops/s
[info]                  ·gc.alloc.rate:                   2047,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              235036,514 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231309,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,169 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 13679,463 ops/s
[info]                  ·gc.alloc.rate:                   2042,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              235040,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232122,832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,138 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13771,196 ops/s
[info]                  ·gc.alloc.rate:                   2056,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              235040,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     307898,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,269 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13728,183 ops/s
[info]                  ·gc.alloc.rate:                   2050,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              235031,757 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232249,046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,926 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13784,218 ops/s
[info]                  ·gc.alloc.rate:                   2058,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              235016,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231593,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,469 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   13734,794 ±(99.9%) 166,107 ops/s [Average]
[info]   (min, avg, max) = (13679,463, 13734,794, 13784,218), stdev = 43,138
[info]   CI (99.9%): [13568,687, 13900,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2051,117 ±(99.9%) 24,365 MB/sec [Average]
[info]   (min, avg, max) = (2042,859, 2051,117, 2058,020), stdev = 6,328
[info]   CI (99.9%): [2026,752, 2075,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   235032,872 ±(99.9%) 38,539 B/op [Average]
[info]   (min, avg, max) = (235016,030, 235032,872, 235040,032), stdev = 10,008
[info]   CI (99.9%): [234994,334, 235071,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2156,215 ±(99.9%) 1158,520 MB/sec [Average]
[info]   (min, avg, max) = (2015,229, 2156,215, 2694,329), stdev = 300,864
[info]   CI (99.9%): [997,694, 3314,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   247034,613 ±(99.9%) 131023,217 B/op [Average]
[info]   (min, avg, max) = (231309,152, 247034,613, 307898,868), stdev = 34026,313
[info]   CI (99.9%): [116011,396, 378057,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,120 ±(99.9%) 0,151 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,120, 0,165), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13,794 ±(99.9%) 17,259 B/op [Average]
[info]   (min, avg, max) = (7,169, 13,794, 18,926), stdev = 4,482
[info]   CI (99.9%): [≈ 0, 31,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96,58% complete, ETA 00:04:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8022,653 ops/s
[info] # Warmup Iteration   2: 16690,910 ops/s
[info] # Warmup Iteration   3: 16753,223 ops/s
[info] # Warmup Iteration   4: 16948,935 ops/s
[info] # Warmup Iteration   5: 16773,883 ops/s
[info] Iteration   1: 16851,600 ops/s
[info]                  ·gc.alloc.rate:      237,849 MB/sec
[info]                  ·gc.alloc.rate.norm: 22216,026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16794,730 ops/s
[info]                  ·gc.alloc.rate:               237,067 MB/sec
[info]                  ·gc.alloc.rate.norm:          22216,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47937,756 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 16876,562 ops/s
[info]                  ·gc.alloc.rate:      238,057 MB/sec
[info]                  ·gc.alloc.rate.norm: 22200,697 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 16905,886 ops/s
[info]                  ·gc.alloc.rate:               238,494 MB/sec
[info]                  ·gc.alloc.rate.norm:          22200,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,583 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47620,269 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 17004,199 ops/s
[info]                  ·gc.alloc.rate:      239,836 MB/sec
[info]                  ·gc.alloc.rate.norm: 22200,024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   16886,595 ±(99.9%) 298,066 ops/s [Average]
[info]   (min, avg, max) = (16794,730, 16886,595, 17004,199), stdev = 77,407
[info]   CI (99.9%): [16588,529, 17184,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   238,260 ±(99.9%) 3,933 MB/sec [Average]
[info]   (min, avg, max) = (237,067, 238,260, 239,836), stdev = 1,021
[info]   CI (99.9%): [234,328, 242,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22206,560 ±(99.9%) 33,298 B/op [Average]
[info]   (min, avg, max) = (22200,024, 22206,560, 22216,030), stdev = 8,647
[info]   CI (99.9%): [22173,262, 22239,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,625 ±(99.9%) 1078,929 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,625, 511,583), stdev = 280,195
[info]   CI (99.9%): [≈ 0, 1283,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   19111,605 ±(99.9%) 100770,904 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19111,605, 47937,756), stdev = 26169,884
[info]   CI (99.9%): [≈ 0, 119882,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96,78% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22064,670 ops/s
[info] # Warmup Iteration   2: 30102,201 ops/s
[info] # Warmup Iteration   3: 41633,582 ops/s
[info] # Warmup Iteration   4: 41800,253 ops/s
[info] # Warmup Iteration   5: 42093,546 ops/s
[info] Iteration   1: 42066,627 ops/s
[info]                  ·gc.alloc.rate:                   378,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              14160,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19138,873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 42257,650 ops/s
[info]                  ·gc.alloc.rate:      380,218 MB/sec
[info]                  ·gc.alloc.rate.norm: 14160,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41690,675 ops/s
[info]                  ·gc.alloc.rate:               375,078 MB/sec
[info]                  ·gc.alloc.rate.norm:          14160,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19311,440 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 42004,841 ops/s
[info]                  ·gc.alloc.rate:                   377,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              14160,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19167,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 41018,889 ops/s
[info]                  ·gc.alloc.rate:      369,005 MB/sec
[info]                  ·gc.alloc.rate.norm: 14160,011 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   41807,736 ±(99.9%) 1870,914 ops/s [Average]
[info]   (min, avg, max) = (41018,889, 41807,736, 42257,650), stdev = 485,870
[info]   CI (99.9%): [39936,822, 43678,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   376,135 ±(99.9%) 16,913 MB/sec [Average]
[info]   (min, avg, max) = (369,005, 376,135, 380,218), stdev = 4,392
[info]   CI (99.9%): [359,222, 393,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14160,010 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (14160,010, 14160,010, 14160,011), stdev = 0,001
[info]   CI (99.9%): [14160,007, 14160,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,925 ±(99.9%) 1078,883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,925, 511,587), stdev = 280,183
[info]   CI (99.9%): [≈ 0, 1385,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11523,577 ±(99.9%) 40507,780 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11523,577, 19311,440), stdev = 10519,742
[info]   CI (99.9%): [≈ 0, 52031,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,005), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,056 ±(99.9%) 0,305 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,056, 0,169), stdev = 0,079
[info]   CI (99.9%): [≈ 0, 0,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96,98% complete, ETA 00:04:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1613,107 ops/s
[info] # Warmup Iteration   2: 3701,328 ops/s
[info] # Warmup Iteration   3: 3731,537 ops/s
[info] # Warmup Iteration   4: 3487,747 ops/s
[info] # Warmup Iteration   5: 4252,010 ops/s
[info] Iteration   1: 4314,335 ops/s
[info]                  ·gc.alloc.rate:               1407,193 MB/sec
[info]                  ·gc.alloc.rate.norm:          513104,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,246 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 492704,386 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 4262,692 ops/s
[info]                  ·gc.alloc.rate:               1390,332 MB/sec
[info]                  ·gc.alloc.rate.norm:          513104,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 498958,889 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     6,000 ms
[info] Iteration   3: 4270,951 ops/s
[info]                  ·gc.alloc.rate:               1392,954 MB/sec
[info]                  ·gc.alloc.rate.norm:          513104,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 498515,416 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     7,000 ms
[info] Iteration   4: 4286,967 ops/s
[info]                  ·gc.alloc.rate:                   1398,221 MB/sec
[info]                  ·gc.alloc.rate.norm:              513104,103 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496899,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,642 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4297,000 ops/s
[info]                  ·gc.alloc.rate:                   1401,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              513104,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     496231,639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,872 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   4286,389 ±(99.9%) 79,238 ops/s [Average]
[info]   (min, avg, max) = (4262,692, 4286,389, 4314,335), stdev = 20,578
[info]   CI (99.9%): [4207,151, 4365,627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1398,022 ±(99.9%) 25,864 MB/sec [Average]
[info]   (min, avg, max) = (1390,332, 1398,022, 1407,193), stdev = 6,717
[info]   CI (99.9%): [1372,158, 1423,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   513104,097 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (513104,095, 513104,097, 513104,103), stdev = 0,003
[info]   CI (99.9%): [513104,084, 513104,110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1353,198 ±(99.9%) 6,255 MB/sec [Average]
[info]   (min, avg, max) = (1351,246, 1353,198, 1355,330), stdev = 1,624
[info]   CI (99.9%): [1346,944, 1359,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   496662,030 ±(99.9%) 9552,262 B/op [Average]
[info]   (min, avg, max) = (492704,386, 496662,030, 498958,889), stdev = 2480,692
[info]   CI (99.9%): [487109,768, 506214,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,103 ±(99.9%) 38,280 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,103, 22,872), stdev = 9,941
[info]   CI (99.9%): [≈ 0, 44,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   19,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 3,800, 7,000), stdev = 2,490
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97,18% complete, ETA 00:03:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_435ee987/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 37379,968 ops/s
[info] # Warmup Iteration   2: 68609,227 ops/s
[info] # Warmup Iteration   3: 68086,450 ops/s
[info] # Warmup Iteration   4: 68976,858 ops/s
[info] # Warmup Iteration   5: 69207,112 ops/s
[info] Iteration   1: 69058,171 ops/s
[info]                  ·gc.alloc.rate:                   881,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15362,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,423 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 69457,640 ops/s
[info]                  ·gc.alloc.rate:               887,031 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15275,287 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 69256,084 ops/s
[info]                  ·gc.alloc.rate:                   884,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099,988 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30652,593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,473 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 69058,631 ops/s
[info]                  ·gc.alloc.rate:                   881,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099,949 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15377,597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,474 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 69232,060 ops/s
[info]                  ·gc.alloc.rate:               884,182 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15338,515 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   69212,517 ±(99.9%) 638,177 ops/s [Average]
[info]   (min, avg, max) = (69058,171, 69212,517, 69457,640), stdev = 165,733
[info]   CI (99.9%): [68574,340, 69850,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   883,913 ±(99.9%) 8,076 MB/sec [Average]
[info]   (min, avg, max) = (881,950, 883,913, 887,031), stdev = 2,097
[info]   CI (99.9%): [875,837, 891,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100,006 ±(99.9%) 0,146 B/op [Average]
[info]   (min, avg, max) = (20099,949, 20100,006, 20100,042), stdev = 0,038
[info]   CI (99.9%): [20099,860, 20100,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   809,281 ±(99.9%) 1161,212 MB/sec [Average]
[info]   (min, avg, max) = (674,063, 809,281, 1348,734), stdev = 301,563
[info]   CI (99.9%): [≈ 0, 1970,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18401,237 ±(99.9%) 26372,394 B/op [Average]
[info]   (min, avg, max) = (15275,287, 18401,237, 30652,593), stdev = 6848,827
[info]   CI (99.9%): [≈ 0, 44773,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,474 ±(99.9%) 2,237 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,474, 1,423), stdev = 0,581
[info]   CI (99.9%): [≈ 0, 2,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97,38% complete, ETA 00:03:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83973,219 ops/s
[info] # Warmup Iteration   2: 96649,827 ops/s
[info] # Warmup Iteration   3: 96825,437 ops/s
[info] # Warmup Iteration   4: 96708,619 ops/s
[info] # Warmup Iteration   5: 96309,201 ops/s
[info] Iteration   1: 96735,419 ops/s
[info]                  ·gc.alloc.rate:                   632,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10979,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,506 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 96992,989 ops/s
[info]                  ·gc.alloc.rate:                   634,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10949,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,351 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 97107,111 ops/s
[info]                  ·gc.alloc.rate:      634,747 MB/sec
[info]                  ·gc.alloc.rate.norm: 10288,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 97013,243 ops/s
[info]                  ·gc.alloc.rate:               634,181 MB/sec
[info]                  ·gc.alloc.rate.norm:          10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10914,224 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 96138,769 ops/s
[info]                  ·gc.alloc.rate:                   628,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11013,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,341 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   96797,506 ±(99.9%) 1514,043 ops/s [Average]
[info]   (min, avg, max) = (96138,769, 96797,506, 97107,111), stdev = 393,192
[info]   CI (99.9%): [95283,463, 98311,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   632,731 ±(99.9%) 10,088 MB/sec [Average]
[info]   (min, avg, max) = (628,342, 632,731, 634,747), stdev = 2,620
[info]   CI (99.9%): [622,643, 642,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10288,004, 10288,004, 10288,005), stdev = 0,001
[info]   CI (99.9%): [10288,003, 10288,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   539,014 ±(99.9%) 1160,276 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,014, 674,861), stdev = 301,320
[info]   CI (99.9%): [≈ 0, 1699,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8771,291 ±(99.9%) 18881,391 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8771,291, 11013,423), stdev = 4903,437
[info]   CI (99.9%): [≈ 0, 27652,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,666 ±(99.9%) 5,514 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 3,227), stdev = 1,432
[info]   CI (99.9%): [≈ 0, 6,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,840 ±(99.9%) 89,715 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,840, 52,506), stdev = 23,299
[info]   CI (99.9%): [≈ 0, 100,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97,59% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95793,546 ops/s
[info] # Warmup Iteration   2: 108103,754 ops/s
[info] # Warmup Iteration   3: 107993,884 ops/s
[info] # Warmup Iteration   4: 108213,598 ops/s
[info] # Warmup Iteration   5: 108041,167 ops/s
[info] Iteration   1: 108302,066 ops/s
[info]                  ·gc.alloc.rate:      13,212 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 107910,738 ops/s
[info]                  ·gc.alloc.rate:      13,165 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 108237,286 ops/s
[info]                  ·gc.alloc.rate:      13,204 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 108060,322 ops/s
[info]                  ·gc.alloc.rate:      13,184 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 108093,357 ops/s
[info]                  ·gc.alloc.rate:      13,186 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   108120,754 ±(99.9%) 593,308 ops/s [Average]
[info]   (min, avg, max) = (107910,738, 108120,754, 108302,066), stdev = 154,080
[info]   CI (99.9%): [107527,446, 108714,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   13,190 ±(99.9%) 0,071 MB/sec [Average]
[info]   (min, avg, max) = (13,165, 13,190, 13,212), stdev = 0,018
[info]   CI (99.9%): [13,119, 13,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,004, 192,004, 192,004), stdev = 0,001
[info]   CI (99.9%): [192,003, 192,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97,79% complete, ETA 00:02:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 344464,214 ops/s
[info] # Warmup Iteration   2: 402479,524 ops/s
[info] # Warmup Iteration   3: 407591,953 ops/s
[info] # Warmup Iteration   4: 404202,896 ops/s
[info] # Warmup Iteration   5: 405221,203 ops/s
[info] Iteration   1: 404646,970 ops/s
[info]                  ·gc.alloc.rate:                   2167,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7855,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,243 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 405486,295 ops/s
[info]                  ·gc.alloc.rate:                   2172,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7851,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,162 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 408103,977 ops/s
[info]                  ·gc.alloc.rate:                   2186,290 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7811,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,241 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 407128,519 ops/s
[info]                  ·gc.alloc.rate:                   2181,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10459,393 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,161 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 407496,369 ops/s
[info]                  ·gc.alloc.rate:                   2182,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7851,611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   406572,426 ±(99.9%) 5578,659 ops/s [Average]
[info]   (min, avg, max) = (404646,970, 406572,426, 408103,977), stdev = 1448,760
[info]   CI (99.9%): [400993,767, 412151,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2178,119 ±(99.9%) 29,701 MB/sec [Average]
[info]   (min, avg, max) = (2167,790, 2178,119, 2186,290), stdev = 7,713
[info]   CI (99.9%): [2148,419, 2207,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8432,001, 8432,001, 8432,001), stdev = 0,001
[info]   CI (99.9%): [8432,001, 8432,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2161,230 ±(99.9%) 1172,312 MB/sec [Average]
[info]   (min, avg, max) = (2019,460, 2161,230, 2705,771), stdev = 304,446
[info]   CI (99.9%): [988,918, 3333,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8365,890 ±(99.9%) 4506,947 B/op [Average]
[info]   (min, avg, max) = (7811,641, 8365,890, 10459,393), stdev = 1170,440
[info]   CI (99.9%): [3858,943, 12872,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,177 ±(99.9%) 0,260 B/op [Average]
[info]   (min, avg, max) = (0,080, 0,177, 0,243), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97,99% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 278764,240 ops/s
[info] # Warmup Iteration   2: 470426,507 ops/s
[info] # Warmup Iteration   3: 473458,809 ops/s
[info] # Warmup Iteration   4: 471927,697 ops/s
[info] # Warmup Iteration   5: 473659,765 ops/s
[info] Iteration   1: 473384,336 ops/s
[info]                  ·gc.alloc.rate:                   555,798 MB/sec
[info]                  ·gc.alloc.rate.norm:              1848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2232,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 472863,364 ops/s
[info]                  ·gc.alloc.rate:                   555,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              1848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2234,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,554 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 448180,587 ops/s
[info]                  ·gc.alloc.rate:                   526,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2360,319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,219 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 471853,985 ops/s
[info]                  ·gc.alloc.rate:                   554,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              1848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2241,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 471265,936 ops/s
[info]                  ·gc.alloc.rate:      553,278 MB/sec
[info]                  ·gc.alloc.rate.norm: 1848,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   467509,641 ±(99.9%) 41729,762 ops/s [Average]
[info]   (min, avg, max) = (448180,587, 467509,641, 473384,336), stdev = 10837,087
[info]   CI (99.9%): [425779,880, 509239,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   548,932 ±(99.9%) 48,987 MB/sec [Average]
[info]   (min, avg, max) = (526,243, 548,932, 555,798), stdev = 12,722
[info]   CI (99.9%): [499,944, 597,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1848,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1848,001, 1848,001, 1848,001), stdev = 0,001
[info]   CI (99.9%): [1848,001, 1848,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   537,443 ±(99.9%) 1156,887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,443, 672,154), stdev = 300,440
[info]   CI (99.9%): [≈ 0, 1694,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1813,893 ±(99.9%) 3910,029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1813,893, 2360,319), stdev = 1015,422
[info]   CI (99.9%): [≈ 0, 5723,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,167), stdev = 0,067
[info]   CI (99.9%): [≈ 0, 0,311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,182 ±(99.9%) 0,858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,182, 0,554), stdev = 0,223
[info]   CI (99.9%): [≈ 0, 1,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98,19% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1221374,636 ops/s
[info] # Warmup Iteration   2: 1328233,119 ops/s
[info] # Warmup Iteration   3: 1340394,724 ops/s
[info] # Warmup Iteration   4: 1345806,122 ops/s
[info] # Warmup Iteration   5: 1343505,462 ops/s
[info] Iteration   1: 1346028,262 ops/s
[info]                  ·gc.alloc.rate:                   704,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     788,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,733 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1349642,001 ops/s
[info]                  ·gc.alloc.rate:                   706,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     786,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1346574,818 ops/s
[info]                  ·gc.alloc.rate:               704,951 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 786,314 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1340714,594 ops/s
[info]                  ·gc.alloc.rate:               701,960 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 789,735 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1292547,255 ops/s
[info]                  ·gc.alloc.rate:                   676,618 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,979 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     818,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1335101,386 ±(99.9%) 92432,056 ops/s [Average]
[info]   (min, avg, max) = (1292547,255, 1335101,386, 1349642,001), stdev = 24004,312
[info]   CI (99.9%): [1242669,330, 1427533,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   698,966 ±(99.9%) 48,539 MB/sec [Average]
[info]   (min, avg, max) = (676,618, 698,966, 706,657), stdev = 12,605
[info]   CI (99.9%): [650,427, 747,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,400 ±(99.9%) 4,967 MB/sec [Average]
[info]   (min, avg, max) = (671,979, 673,400, 674,853), stdev = 1,290
[info]   CI (99.9%): [668,433, 678,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   794,057 ±(99.9%) 52,576 B/op [Average]
[info]   (min, avg, max) = (786,314, 794,057, 818,351), stdev = 13,654
[info]   CI (99.9%): [741,481, 846,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,651 ±(99.9%) 5,471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,651, 3,192), stdev = 1,421
[info]   CI (99.9%): [≈ 0, 6,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,761 ±(99.9%) 6,397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,761, 3,733), stdev = 1,661
[info]   CI (99.9%): [≈ 0, 7,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98,39% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87463,588 ops/s
[info] # Warmup Iteration   2: 124579,216 ops/s
[info] # Warmup Iteration   3: 125832,875 ops/s
[info] # Warmup Iteration   4: 126005,370 ops/s
[info] # Warmup Iteration   5: 124895,876 ops/s
[info] Iteration   1: 125129,612 ops/s
[info]                  ·gc.alloc.rate:                   4345,997 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079,297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51309,443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,785 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 124950,540 ops/s
[info]                  ·gc.alloc.rate:                   4339,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4764,602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60014,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,573 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 124934,539 ops/s
[info]                  ·gc.alloc.rate:                   4339,313 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51473,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,787 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 125687,197 ops/s
[info]                  ·gc.alloc.rate:                   4365,492 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59728,696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,043 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 124431,198 ops/s
[info]                  ·gc.alloc.rate:                   4321,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51712,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,263 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   125026,617 ±(99.9%) 1738,944 ops/s [Average]
[info]   (min, avg, max) = (124431,198, 125026,617, 125687,197), stdev = 451,598
[info]   CI (99.9%): [123287,674, 126765,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4342,419 ±(99.9%) 60,912 MB/sec [Average]
[info]   (min, avg, max) = (4321,456, 4342,419, 4365,492), stdev = 15,819
[info]   CI (99.9%): [4281,507, 4403,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54664,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54664,003, 54664,003, 54664,004), stdev = 0,001
[info]   CI (99.9%): [54664,003, 54664,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4357,595 ±(99.9%) 1440,179 MB/sec [Average]
[info]   (min, avg, max) = (4079,297, 4357,595, 4769,960), stdev = 374,010
[info]   CI (99.9%): [2917,415, 5797,774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54847,538 ±(99.9%) 17672,774 B/op [Average]
[info]   (min, avg, max) = (51309,443, 54847,538, 60014,276), stdev = 4589,563
[info]   CI (99.9%): [37174,764, 72520,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,125), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,890 ±(99.9%) 1,831 B/op [Average]
[info]   (min, avg, max) = (0,263, 0,890, 1,573), stdev = 0,475
[info]   CI (99.9%): [≈ 0, 2,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98,59% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 578594,949 ops/s
[info] # Warmup Iteration   2: 618979,373 ops/s
[info] # Warmup Iteration   3: 625106,271 ops/s
[info] # Warmup Iteration   4: 624346,140 ops/s
[info] # Warmup Iteration   5: 624378,419 ops/s
[info] Iteration   1: 627979,832 ops/s
[info]                  ·gc.alloc.rate:                   1831,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5055,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 629031,967 ops/s
[info]                  ·gc.alloc.rate:                   1835,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5053,643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 624624,722 ops/s
[info]                  ·gc.alloc.rate:                   1822,512 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5097,696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,105 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 629648,561 ops/s
[info]                  ·gc.alloc.rate:               1837,117 MB/sec
[info]                  ·gc.alloc.rate.norm:          4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,227 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3374,984 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 627185,915 ops/s
[info]                  ·gc.alloc.rate:                   1829,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5088,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   627694,199 ±(99.9%) 7548,339 ops/s [Average]
[info]   (min, avg, max) = (624624,722, 627694,199, 629648,561), stdev = 1960,280
[info]   CI (99.9%): [620145,861, 635242,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1831,219 ±(99.9%) 21,989 MB/sec [Average]
[info]   (min, avg, max) = (1822,512, 1831,219, 1837,117), stdev = 5,710
[info]   CI (99.9%): [1809,231, 1853,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4592,001, 4592,001, 4592,001), stdev = 0,001
[info]   CI (99.9%): [4592,001, 4592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1887,383 ±(99.9%) 1156,368 MB/sec [Average]
[info]   (min, avg, max) = (1350,227, 1887,383, 2027,087), stdev = 300,305
[info]   CI (99.9%): [731,016, 3043,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4733,969 ±(99.9%) 2926,287 B/op [Average]
[info]   (min, avg, max) = (3374,984, 4733,969, 5097,696), stdev = 759,947
[info]   CI (99.9%): [1807,682, 7660,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,063 ±(99.9%) 0,168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,063, 0,105), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98,79% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 357005,671 ops/s
[info] # Warmup Iteration   2: 443426,101 ops/s
[info] # Warmup Iteration   3: 443507,284 ops/s
[info] # Warmup Iteration   4: 442921,023 ops/s
[info] # Warmup Iteration   5: 442353,540 ops/s
[info] Iteration   1: 443300,000 ops/s
[info]                  ·gc.alloc.rate:                   705,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2395,580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,889 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 444833,060 ops/s
[info]                  ·gc.alloc.rate:                   707,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2387,525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,221 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 444395,026 ops/s
[info]                  ·gc.alloc.rate:               706,951 MB/sec
[info]                  ·gc.alloc.rate.norm:          2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2380,072 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 418717,870 ops/s
[info]                  ·gc.alloc.rate:               666,227 MB/sec
[info]                  ·gc.alloc.rate.norm:          2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2526,194 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 395536,290 ops/s
[info]                  ·gc.alloc.rate:                   629,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2671,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   429356,449 ±(99.9%) 84299,413 ops/s [Average]
[info]   (min, avg, max) = (395536,290, 429356,449, 444833,060), stdev = 21892,290
[info]   CI (99.9%): [345057,036, 513655,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   683,097 ±(99.9%) 134,146 MB/sec [Average]
[info]   (min, avg, max) = (629,249, 683,097, 707,778), stdev = 34,837
[info]   CI (99.9%): [548,952, 817,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2504,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2504,001, 2504,001, 2504,001), stdev = 0,001
[info]   CI (99.9%): [2504,001, 2504,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,013 ±(99.9%) 6,373 MB/sec [Average]
[info]   (min, avg, max) = (671,373, 673,013, 674,855), stdev = 1,655
[info]   CI (99.9%): [666,640, 679,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2472,199 ±(99.9%) 487,886 B/op [Average]
[info]   (min, avg, max) = (2380,072, 2472,199, 2671,626), stdev = 126,703
[info]   CI (99.9%): [1984,313, 2960,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,686 ±(99.9%) 5,732 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,686, 3,349), stdev = 1,489
[info]   CI (99.9%): [≈ 0, 6,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,439 ±(99.9%) 20,346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,439, 11,889), stdev = 5,284
[info]   CI (99.9%): [≈ 0, 22,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98,99% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 514733,944 ops/s
[info] # Warmup Iteration   2: 756917,368 ops/s
[info] # Warmup Iteration   3: 759579,248 ops/s
[info] # Warmup Iteration   4: 759861,222 ops/s
[info] # Warmup Iteration   5: 758184,675 ops/s
[info] Iteration   1: 758781,924 ops/s
[info]                  ·gc.alloc.rate:                   578,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1398,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,561 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 759869,350 ops/s
[info]                  ·gc.alloc.rate:                   579,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1396,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 744904,607 ops/s
[info]                  ·gc.alloc.rate:      568,102 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 750528,625 ops/s
[info]                  ·gc.alloc.rate:               572,297 MB/sec
[info]                  ·gc.alloc.rate.norm:          1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1415,798 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 758858,889 ops/s
[info]                  ·gc.alloc.rate:                   578,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1400,131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   754588,679 ±(99.9%) 25394,462 ops/s [Average]
[info]   (min, avg, max) = (744904,607, 754588,679, 759869,350), stdev = 6594,861
[info]   CI (99.9%): [729194,217, 779983,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   575,387 ±(99.9%) 19,152 MB/sec [Average]
[info]   (min, avg, max) = (568,102, 575,387, 579,390), stdev = 4,974
[info]   CI (99.9%): [556,235, 594,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1200,001, 1200,001, 1200,001), stdev = 0,001
[info]   CI (99.9%): [1200,000, 1200,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,848 ±(99.9%) 1162,064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,848, 675,214), stdev = 301,784
[info]   CI (99.9%): [≈ 0, 1701,911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1122,358 ±(99.9%) 2416,134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1122,358, 1415,798), stdev = 627,462
[info]   CI (99.9%): [≈ 0, 3538,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,271), stdev = 0,114
[info]   CI (99.9%): [≈ 0, 0,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,147 ±(99.9%) 0,908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,147, 0,561), stdev = 0,236
[info]   CI (99.9%): [≈ 0, 1,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2072318,596 ops/s
[info] # Warmup Iteration   2: 2249353,359 ops/s
[info] # Warmup Iteration   3: 2265336,839 ops/s
[info] # Warmup Iteration   4: 2272184,174 ops/s
[info] # Warmup Iteration   5: 2270586,980 ops/s
[info] Iteration   1: 2276253,095 ops/s
[info]                  ·gc.alloc.rate:               1052,870 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 465,165 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2278486,950 ops/s
[info]                  ·gc.alloc.rate:                   1053,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     928,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2278826,250 ops/s
[info]                  ·gc.alloc.rate:               1054,017 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 464,167 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2268796,461 ops/s
[info]                  ·gc.alloc.rate:                   1049,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     932,461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2269490,651 ops/s
[info]                  ·gc.alloc.rate:               1049,625 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,673 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932,640 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   2274370,681 ±(99.9%) 18788,012 ops/s [Average]
[info]   (min, avg, max) = (2268796,461, 2274370,681, 2278826,250), stdev = 4879,187
[info]   CI (99.9%): [2255582,669, 2293158,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1051,995 ±(99.9%) 8,768 MB/sec [Average]
[info]   (min, avg, max) = (1049,480, 1051,995, 1054,017), stdev = 2,277
[info]   CI (99.9%): [1043,227, 1060,763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,609 ±(99.9%) 1417,375 MB/sec [Average]
[info]   (min, avg, max) = (672,033, 1075,609, 1344,673), stdev = 368,088
[info]   CI (99.9%): [≈ 0, 2492,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   744,601 ±(99.9%) 984,031 B/op [Average]
[info]   (min, avg, max) = (464,167, 744,601, 932,640), stdev = 255,550
[info]   CI (99.9%): [≈ 0, 1728,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,043), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99,40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2175741,666 ops/s
[info] # Warmup Iteration   2: 2358993,914 ops/s
[info] # Warmup Iteration   3: 2344876,895 ops/s
[info] # Warmup Iteration   4: 2340885,857 ops/s
[info] # Warmup Iteration   5: 2346311,243 ops/s
[info] Iteration   1: 2350623,278 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2350991,719 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2351957,882 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2347246,373 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2352412,560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2350646,362 ±(99.9%) 7825,260 ops/s [Average]
[info]   (min, avg, max) = (2347246,373, 2350646,362, 2352412,560), stdev = 2032,195
[info]   CI (99.9%): [2342821,102, 2358471,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99,60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 342468,278 ops/s
[info] # Warmup Iteration   2: 416164,915 ops/s
[info] # Warmup Iteration   3: 413399,096 ops/s
[info] # Warmup Iteration   4: 415698,844 ops/s
[info] # Warmup Iteration   5: 408497,462 ops/s
[info] Iteration   1: 417303,051 ops/s
[info]                  ·gc.alloc.rate:               617,204 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,564 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1929,543 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 417990,657 ops/s
[info]                  ·gc.alloc.rate:                   618,265 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2535,882 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,395 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 418670,070 ops/s
[info]                  ·gc.alloc.rate:                   619,256 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2531,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,157 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 418045,190 ops/s
[info]                  ·gc.alloc.rate:               618,330 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2525,348 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 416803,707 ops/s
[info]                  ·gc.alloc.rate:                   616,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2532,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,079 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   417762,535 ±(99.9%) 2780,761 ops/s [Average]
[info]   (min, avg, max) = (416803,707, 417762,535, 418670,070), stdev = 722,155
[info]   CI (99.9%): [414981,774, 420543,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   617,895 ±(99.9%) 4,235 MB/sec [Average]
[info]   (min, avg, max) = (616,418, 617,895, 619,256), stdev = 1,100
[info]   CI (99.9%): [613,660, 622,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2328,001, 2328,001, 2328,001), stdev = 0,001
[info]   CI (99.9%): [2328,001, 2328,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   639,982 ±(99.9%) 276,480 MB/sec [Average]
[info]   (min, avg, max) = (511,564, 639,982, 673,474), stdev = 71,801
[info]   CI (99.9%): [363,502, 916,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2411,085 ±(99.9%) 1036,661 B/op [Average]
[info]   (min, avg, max) = (1929,543, 2411,085, 2535,882), stdev = 269,218
[info]   CI (99.9%): [1374,424, 3447,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,777 ±(99.9%) 6,557 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,777, 3,823), stdev = 1,703
[info]   CI (99.9%): [≈ 0, 7,334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,926 ±(99.9%) 24,690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,926, 14,395), stdev = 6,412
[info]   CI (99.9%): [≈ 0, 27,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99,80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 206879,575 ops/s
[info] # Warmup Iteration   2: 217642,743 ops/s
[info] # Warmup Iteration   3: 215259,952 ops/s
[info] # Warmup Iteration   4: 217413,923 ops/s
[info] # Warmup Iteration   5: 216120,953 ops/s
[info] Iteration   1: 217962,129 ops/s
[info]                  ·gc.alloc.rate:               565,023 MB/sec
[info]                  ·gc.alloc.rate.norm:          4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3694,083 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 218017,615 ops/s
[info]                  ·gc.alloc.rate:                   565,196 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,811 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4871,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,706 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 215110,127 ops/s
[info]                  ·gc.alloc.rate:                   557,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4937,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,305 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 217139,540 ops/s
[info]                  ·gc.alloc.rate:                   562,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4876,536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 218269,314 ops/s
[info]                  ·gc.alloc.rate:      565,873 MB/sec
[info]                  ·gc.alloc.rate.norm: 4080,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   217299,745 ±(99.9%) 4988,868 ops/s [Average]
[info]   (min, avg, max) = (215110,127, 217299,745, 218269,314), stdev = 1295,593
[info]   CI (99.9%): [212310,877, 222288,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   563,325 ±(99.9%) 13,058 MB/sec [Average]
[info]   (min, avg, max) = (557,582, 563,325, 565,873), stdev = 3,391
[info]   CI (99.9%): [550,267, 576,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4080,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4080,002, 4080,002, 4080,002), stdev = 0,001
[info]   CI (99.9%): [4080,002, 4080,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,793 ±(99.9%) 1124,078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,793, 674,811), stdev = 291,920
[info]   CI (99.9%): [≈ 0, 1630,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3675,810 ±(99.9%) 8162,498 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3675,810, 4937,147), stdev = 2119,775
[info]   CI (99.9%): [≈ 0, 11838,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,145), stdev = 1,400
[info]   CI (99.9%): [≈ 0, 6,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,632 ±(99.9%) 38,908 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,632, 22,706), stdev = 10,104
[info]   CI (99.9%): [≈ 0, 43,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # Run complete. Total time: 02:12:37
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    824414,254 ±    41472,592   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      2120,481 ±      105,706  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4048,001 ±        0,001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      2157,865 ±     1180,682  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5      4125,896 ±     2495,318    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,037 ±        0,088  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,071 ±        0,166    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        16,000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5         7,000                     ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1787512,917 ±    25401,306   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1190,238 ±       16,851  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1048,000 ±        0,001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1082,295 ±     1426,899  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       953,532 ±     1263,414    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,033 ±        0,122  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,029 ±        0,107    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5         8,000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5         3,000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   4112771,585 ±    44381,074   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       271,753 ±        3,054  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104,000 ±        0,001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       306,884 ±     1078,742  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       117,640 ±      413,523    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,003 ±        0,028  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,001 ±        0,011    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         3,000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         5,000                     ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    192792,450 ±    11687,503   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1610,091 ±       97,240  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     13144,002 ±        0,001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      1625,842 ±     1423,107  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5     13249,566 ±    11042,235    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,029 ±        0,091  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,237 ±        0,736    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        12,000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5         5,000                     ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    645574,318 ±    15360,977   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1903,206 ±       45,422  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4640,001 ±        0,001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      1885,978 ±     1164,464  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5      4598,474 ±     2849,208    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,042 ±        0,057  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,102 ±        0,138    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        14,000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         6,000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2181543,682 ±    40999,683   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       776,200 ±       14,582  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       560,000 ±        0,001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       809,898 ±     1163,054  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       584,301 ±      838,723    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,021 ±        0,113  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,015 ±        0,082    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         6,000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         3,000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  15713733,527 ±  1988700,778   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       798,703 ±      101,024  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80,000 ±        0,001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       807,323 ±     1155,726  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        81,451 ±      126,092    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,029 ±        0,156  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,003 ±        0,016    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         6,000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         2,000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5   9318586,679 ±  1132594,132   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    352124,097 ±    11166,605   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1149,010 ±       36,901  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      5136,001 ±        0,001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1217,070 ±     1164,672  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      5445,321 ±     5271,053    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,029 ±        0,072  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,130 ±        0,319    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5         9,000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         4,000                     ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   1929197,397 ±    50528,039   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2990,720 ±       78,759  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2440,000 ±        0,001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2981,574 ±     1448,620  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      2433,581 ±     1221,508    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,042 ±        0,057  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,034 ±        0,046    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        22,000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         9,000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5  11020553,743 ±   157795,933   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1344,383 ±       19,444  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192,000 ±        0,001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1345,371 ±        5,355  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       192,143 ±        3,010    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,025 ±        0,105  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,004 ±        0,015    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5        10,000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5         6,000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   2888092,885 ±    29527,811   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      1893,730 ±       19,410  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1032,000 ±        0,001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1898,902 ±     1164,520  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      1034,743 ±      632,752    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,050 ±        0,072  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,027 ±        0,039    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        14,000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         5,000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5  11388536,400 ±   515694,509   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1447,288 ±       65,742  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200,000 ±        0,001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1480,315 ±     1153,488  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       204,553 ±      158,590    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,037 ±        0,036  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,005 ±        0,005    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        11,000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         4,000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    726164,967 ±    11571,056   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1856,522 ±       29,416  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4024,001 ±        0,001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1898,876 ±     1170,326  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4116,637 ±     2555,972    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,037 ±        0,067  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,081 ±        0,145    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        14,000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5         6,000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   2415782,244 ±    51854,838   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2062,822 ±       44,615  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1344,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2022,154 ±       19,551  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1317,531 ±       26,218    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,046 ±        0,105  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,030 ±        0,068    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        15,000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         5,000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  20180331,916 ±   113751,385   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       615,432 ±        3,406  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       538,311 ±     1158,759  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        41,982 ±       90,370    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,546 ±        4,520  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,043 ±        0,353    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         4,000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5         3,000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   6610749,427 ±   993212,523   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1814,481 ±      272,278  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1762,014 ±     1425,255  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       421,235 ±      371,694    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,042 ±        0,113  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,010 ±        0,026    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        13,000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         6,000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  27400516,259 ±   184000,776   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       835,650 ±        5,802  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       807,325 ±     1155,720  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        46,385 ±       66,612    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,033 ±        0,146  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,002 ±        0,008    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         6,000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         3,000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  25830735,211 ±   171975,717   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1310952,690 ±    11900,505   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1979,009 ±       17,937  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2376,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1899,331 ±     1164,830  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2279,876 ±     1387,386    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,042 ±        0,127  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,050 ±        0,152    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        14,000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5         6,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    405638,265 ±    23724,139   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2233,273 ±      130,524  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8664,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2297,310 ±     1417,865  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8924,249 ±     5848,122    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,046 ±        0,036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,178 ±        0,135    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        17,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5         7,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    547809,615 ±     2078,857   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       732,314 ±        2,797  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2104,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       674,956 ±        1,653  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1939,206 ±        5,614    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,017 ±        0,105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,048 ±        0,301    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         5,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         2,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1298670,956 ±   355031,647   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       864,735 ±      236,650  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048,000 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       806,775 ±     1156,863  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       976,627 ±     1323,584    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,015 ±        0,084    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         3,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    125952,269 ±     1346,151   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4354,220 ±       46,189  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54408,003 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4357,675 ±     1431,982  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     54453,595 ±    18022,724    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,067 ±        0,036  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,832 ±        0,447    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        32,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        14,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                        128  thrpt    5    689938,724 ±    16404,509   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      2111,057 ±       50,382  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      4816,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      2160,133 ±     1162,352  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4931,333 ±     2783,620    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,037 ±        0,067  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,085 ±        0,152    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                              128  thrpt    5        16,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                               128  thrpt    5         8,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    420944,009 ±     4275,282   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       652,592 ±        6,740  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      2440,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5       673,030 ±        6,312  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2516,421 ±       14,826    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,706 ±        5,763  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,637 ±       21,541    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5         5,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5         4,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    695942,370 ±     8987,357   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       512,914 ±        6,592  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1160,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       506,992 ±     1124,647  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1146,452 ±     2544,779    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,079 ±        0,595  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,178 ±        1,342    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         3,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   3113954,554 ±    47942,489   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1440,353 ±       22,207  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728,000 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1345,773 ±        6,786  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       680,203 ±        7,850    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,050 ±        0,044  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,025 ±        0,022    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         3,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3337490,127 ±    85806,094   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    450164,195 ±     3116,062   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       647,538 ±        4,584  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       671,675 ±        6,333  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2348,395 ±       23,749    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,780 ±        6,537  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2,732 ±       22,902    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         5,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         4,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                       128  thrpt    5    195114,239 ±     9728,778   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       497,836 ±       24,864  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5      4016,002 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       474,530 ±     1068,733  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3832,078 ±     8599,144    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,647 ±        5,260  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         5,208 ±       42,334    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                              128  thrpt    5        11,000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     27347,012 ±     2173,012   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1675,681 ±      132,949  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     96432,016 ±        0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1751,016 ±     1420,871  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    100756,244 ±    81263,912    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,046 ±        0,132  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,641 ±        7,620    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        13,000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         6,000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     38573,946 ±     1349,735   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       965,386 ±       33,630  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     39384,011 ±        0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       946,817 ±     1428,567  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     38584,886 ±    57672,187    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,012 ±        0,044  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,511 ±        1,796    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7,000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     50165,894 ±      459,857   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       747,387 ±        7,050  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     23448,009 ±        0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       807,828 ±     1165,807  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     25348,343 ±    36652,711    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,668 ±        5,617  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        20,971 ±      176,377    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6,000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     31105,983 ±      165,320   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1647,481 ±        8,842  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     83360,014 ±        0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1622,349 ±     1417,351  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     82095,448 ±    71877,579    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±        0,166  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,687 ±        8,423    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        12,000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     34433,850 ±      307,558   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1922,559 ±       17,011  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     87872,012 ±        0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1886,000 ±     1150,552  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     86206,897 ±    52724,102    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,054 ±        0,091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,474 ±        4,179    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     32877,006 ±     1635,793   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1768,716 ±       87,717  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     84672,013 ±        0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1762,942 ±     1435,275  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     84394,651 ±    68596,797    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,062 ±        0,127  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2,992 ±        6,145    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        13,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5        14,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     36970,601 ±      388,222   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1871,876 ±       19,369  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     79688,011 ±        0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1887,450 ±     1156,493  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     80338,916 ±    48941,224    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1,064 ±        3,750    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        14,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         7,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     37846,517 ±      445,709   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1842,747 ±       21,093  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     76632,011 ±        0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5      1887,460 ±     1164,778  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     78491,804 ±    48445,400    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1,037 ±        2,783    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        14,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5         7,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5     10007,257 ±       68,404   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1288,937 ±        8,791  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    202712,044 ±        0,009    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1341,086 ±        5,615  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    210913,981 ±     1289,871    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±        0,072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4,586 ±       11,290    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        10,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         4,000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     25618,421 ±      429,435   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1957,096 ±       32,277  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    120240,016 ±        0,004    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1887,876 ±     1166,265  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    115960,495 ±    71000,751    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         2,047 ±        5,639    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14,000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         7,000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     49590,976 ±      446,866   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1221,030 ±       10,880  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     38752,009 ±        0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1218,272 ±     1162,929  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     38677,845 ±    37079,681    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,529 ±        2,787    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9,000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     72472,818 ±      494,168   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       936,381 ±        6,441  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336,006 ±        0,002    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941,136 ±     1417,657  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     20441,305 ±    30816,273    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,271 ±        1,556    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     38598,674 ±      373,323   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2577,626 ±       25,085  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    105104,011 ±        0,003    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2581,766 ±     1165,606  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    105288,767 ±    48068,255    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,062 ±        0,057  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,546 ±        2,322    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19,000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         9,000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     36838,986 ±      466,389   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2014,452 ±       24,673  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     86072,012 ±        0,003    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1900,201 ±     1174,229  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     81186,855 ±    50083,086    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,037 ±        0,067  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,602 ±        2,880    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        14,000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         6,000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     52126,942 ±     2424,992   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2002,983 ±       94,237  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     60480,008 ±        0,002    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1889,274 ±     1154,330  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     56968,038 ±    32832,013    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,054 ±        0,091  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,628 ±        2,715    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        14,000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         6,000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     52889,384 ±      684,456   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1940,201 ±       25,558  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     57736,008 ±        0,001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      1888,388 ±     1157,110  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     56201,899 ±    34615,023    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,042 ±        0,057  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1,238 ±        1,682    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        14,000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         6,000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    413046,759 ±    27860,713   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2088,916 ±      140,797  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      7960,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2160,048 ±     1144,267  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      8231,962 ±     4347,172    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,037 ±        0,119  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,143 ±        0,453    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        16,000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5         6,000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1718348,573 ±    10407,888   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       541,524 ±        3,280  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5       506,479 ±     1123,213  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       463,957 ±     1028,918    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,547 ±        4,617  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,502 ±        4,239    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5         6,000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    719901,159 ±     2545,599   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       578,095 ±        2,068  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1264,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       539,753 ±     1161,859  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1180,642 ±     2541,423    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,033 ±        0,209  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,073 ±        0,457    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         1,000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1901862,032 ±    13623,590   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       367,335 ±        2,727  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       306,934 ±     1078,915  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       254,259 ±      893,758    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,008 ±        0,051  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,007 ±        0,043    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         3,000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         5,000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    115489,574 ±     1142,401   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      4192,491 ±       43,029  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57136,004 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      4084,616 ±       14,824  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     55666,202 ±      629,437    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,042 ±        0,098  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,567 ±        1,332    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        30,000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        13,000                     ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                              128  thrpt    5    695043,114 ±     6413,040   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1815,888 ±       16,649  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4112,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1887,391 ±     1161,014  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      4274,861 ±     2651,009    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±        0,098  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,094 ±        0,223    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        14,000                 counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         6,000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    423488,624 ±     4136,387   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5       660,825 ±        6,397  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      2456,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5       673,018 ±        6,406  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2501,339 ±       44,106    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,693 ±        5,698  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,586 ±       21,274    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         5,000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         3,000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1153362,330 ±     6635,470   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       533,495 ±        3,050  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5       506,500 ±     1123,271  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       690,993 ±     1531,893    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,538 ±        4,590  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,733 ±        6,248    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5         5,000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5   1144758,657 ±     9510,931   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       808,747 ±        6,463  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       810,607 ±     1159,999  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1115,166 ±     1606,716    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,034 ±        0,181    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         6,000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         2,000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   1749632,969 ±    19391,598   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       809,303 ±        8,883  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,311 ±     1157,091  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       726,152 ±     1039,692    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±        0,156  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,026 ±        0,140    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         6,000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         3,000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   2652457,685 ±    62495,911   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    577942,389 ±   100411,640   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       681,535 ±      118,458  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1856,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       671,961 ±        5,817  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1833,068 ±      335,249    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,776 ±        6,503  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,085 ±       17,449    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         5,000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                             128  thrpt    5    220656,528 ±     1072,892   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       563,004 ±        2,718  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4016,002 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       506,754 ±     1124,003  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3615,303 ±     8015,084    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,641 ±        5,328  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4,568 ±       37,984    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    158452,031 ±     1701,136   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1902,342 ±       20,442  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     18896,003 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1888,324 ±     1165,185  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     18762,110 ±    11697,794    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,054 ±        0,044  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,538 ±        0,435    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        14,000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5         6,000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    476526,470 ±   140386,173   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       382,697 ±      112,792  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1264,001 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       339,511 ±     1220,604  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1085,380 ±     3902,256    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±        0,287  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,106 ±        0,917    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3,000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         2,000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5    901997,019 ±     9457,537   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       174,211 ±        1,810  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304,000 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204,614 ±     1078,870  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       358,047 ±     1887,879    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,015 ±        0,125  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,025 ±        0,219    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2,000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5    100217,187 ±     1523,921   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4264,712 ±       64,518  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66976,004 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      4356,814 ±     1431,266  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     68419,004 ±    22248,777    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,083 ±        0,057  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,307 ±        0,878    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        32,000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        13,000                     ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                 128  thrpt    5    267701,366 ±    42414,864   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1221,936 ±      193,562  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7184,002 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1210,327 ±     1157,131  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      7143,223 ±     7149,747    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,037 ±        0,105  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,224 ±        0,638    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         9,000                 counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         3,000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    352005,277 ±    14285,226   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1558,553 ±       62,467  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      6968,001 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1614,341 ±     1415,511  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      7213,775 ±     6234,895    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,042 ±        0,080  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,186 ±        0,354    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        12,000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5,000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   2157094,439 ±    45713,603   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1107,431 ±       23,691  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808,000 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1218,048 ±     1165,995  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       889,115 ±      855,942    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±        0,105  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,027 ±        0,076    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         9,000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5,000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   2141150,097 ±    10865,463   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       576,835 ±        2,590  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424,000 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       641,352 ±      279,459  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       471,421 ±      205,321    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,644 ±        5,368  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,473 ±        3,945    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         5,000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2169600,388 ±    34168,911   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     51351,073 ±     1607,932   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2164,258 ±       68,004  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     66336,008 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2155,928 ±     1138,967  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     66057,206 ±    33837,195    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±        0,067  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,404 ±        2,053    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        16,000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         8,000                     ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                128  thrpt    5    166768,426 ±     5035,455   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       888,336 ±       27,062  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      8384,002 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       806,736 ±     1156,830  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      7608,092 ±    10800,709    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,157 ±        0,631    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         6,000                 counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         3,000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    250691,574 ±    12129,682   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2580,358 ±      124,464  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16200,002 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2571,835 ±     1164,684  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     16141,245 ±     7105,945    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,071 ±        0,122  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,444 ±        0,760    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        19,000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         9,000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    372753,272 ±    31749,701   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1786,781 ±      152,387  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7544,001 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1899,628 ±     1168,369  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      8016,325 ±     4811,995    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±        0,127  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,176 ±        0,534    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        14,000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1387586,586 ±   148162,725   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       479,605 ±       51,293  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544,000 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,517 ±     1068,630  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       539,397 ±     1204,839    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,642 ±        5,380  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,719 ±        6,028    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     91640,220 ±     1359,502   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3848,973 ±       57,496  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66104,005 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3812,529 ±     1438,629  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     65494,740 ±    25466,738    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,058 ±        0,067  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,001 ±        1,163    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        28,000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        11,000                     ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                 128  thrpt    5    260381,413 ±    15831,246   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2757,980 ±      169,444  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     16672,002 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2844,353 ±     1141,059  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     17189,466 ±     6534,497    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,042 ±        0,057  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,253 ±        0,358    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        21,000                 counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         9,000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    249658,184 ±     3427,315   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      2115,332 ±       29,294  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     13336,002 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2158,690 ±     1152,238  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     13608,458 ±     7224,516    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,037 ±        0,067  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,236 ±        0,423    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        16,000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         6,000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1364257,352 ±     4073,420   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       797,457 ±        2,484  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920,000 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       810,646 ±     1160,069  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       935,310 ±     1340,147    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±        0,166  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,038 ±        0,192    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6,000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2743623,388 ±     6568,316   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       934,336 ±        2,029  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536,000 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       941,198 ±     1417,992  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       540,000 ±      814,347    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,014 ±        0,060    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7,000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   3049717,073 ±    22959,099   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    362544,311 ±     2857,564   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2966,862 ±       23,204  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880,001 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2992,271 ±     1431,082  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     12989,525 ±     6179,867    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,050 ±        0,091  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,217 ±        0,399    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        22,000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         9,000                     ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                128  thrpt    5     99767,698 ±    10163,815   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       740,415 ±       75,332  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     11680,004 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       672,923 ±        4,121  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10621,743 ±     1168,983    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,194 ±        1,114    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5,000                 counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         2,000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     31179,747 ±      362,336   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1826,391 ±       21,253  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     92192,014 ±        0,002    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1886,867 ±     1161,335  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     95272,727 ±    59276,686    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,052 ±        4,047    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        14,000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5         7,000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5    102553,349 ±    11583,894   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       923,685 ±      104,295  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14176,004 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       941,227 ±     1416,677  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     14535,787 ±    22970,550    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±        0,098  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,328 ±        1,590    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5         7,000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     69508,803 ±      701,257   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1145,423 ±       11,316  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     25936,006 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1082,803 ±     1427,511  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     24524,473 ±    32401,368    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,472 ±        1,818    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    145643,103 ±      794,568   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       938,687 ±        5,250  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10144,003 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941,198 ±     1417,753  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     10171,614 ±    15327,683    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,270 ±        0,949    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     40353,172 ±      678,017   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2107,702 ±       35,094  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     82208,011 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2167,894 ±     1151,611  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     84557,252 ±    44951,251    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±        0,127  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,628 ±        4,973    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        16,000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         6,000                     ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                               128  thrpt    5     74186,324 ±     3668,747   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1334,441 ±       65,750  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     28312,006 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1345,275 ±        5,365  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     28545,521 ±     1381,332    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,528 ±        1,859    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10,000                 counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         4,000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     36127,476 ±     2970,906   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       474,740 ±       38,886  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     20680,011 ±        0,002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       474,572 ±     1068,823  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     20769,416 ±    47282,880    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,699 ±        5,745  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        30,409 ±      249,789    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         7,000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     45674,266 ±      379,117   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       412,541 ±        3,398  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     14216,009 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       474,361 ±     1068,143  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16358,029 ±    36816,599    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±        0,104  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,861 ±        3,599    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     48716,323 ±      421,585   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       428,148 ±        3,712  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     13832,009 ±        0,002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       339,565 ±     1220,904  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10985,761 ±    39504,338    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,635 ±        5,464  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20,540 ±      176,855    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3,000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         5,000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     49273,760 ±      804,425   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       376,681 ±        6,137  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     12032,008 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5       441,865 ±      989,263  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     14134,372 ±    31627,731    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,640 ±        5,361  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5        20,434 ±      171,255    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         4,000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         7,000                     ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                              128  thrpt    5     38448,136 ±      513,151   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       574,547 ±        7,663  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     23520,011 ±        0,003    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       506,762 ±     1124,032  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     20753,049 ±    45969,151    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,646 ±        5,315  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        26,428 ±      217,494    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                 counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     23609,373 ±      163,696   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5       885,655 ±        6,020  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     59040,018 ±        0,005    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5       806,734 ±     1156,604  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     53754,512 ±    76625,813    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,021 ±        0,098  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,389 ±        6,556    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         6,000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         3,000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     22191,623 ±     2916,367   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       628,956 ±       82,603  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     44609,046 ±        8,838    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       674,969 ±        2,442  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     47919,403 ±     6611,764    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,046 ±        0,230  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3,202 ±       16,060    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5    118551,088 ±     1911,443   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       308,517 ±        5,040  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,004 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       306,938 ±     1078,932  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4067,970 ±    14299,490    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,001 ±        0,010  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,015 ±        0,130    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3,000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         6,000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     19137,402 ±      261,995   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1240,295 ±       16,706  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    102008,023 ±        0,008    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1214,446 ±     1165,335  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     99911,001 ±    96210,966    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,049 ±       10,805    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5         9,000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                             128  thrpt    5     18534,821 ±     2118,442   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5       639,022 ±       73,242  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     54260,242 ±       36,327    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       674,134 ±        4,860  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     57281,054 ±     6389,470    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,594 ±        4,844  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        49,413 ±      402,897    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         5,000                 counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         3,000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     64959,595 ±      241,433   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       984,303 ±        3,809  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     23848,007 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       940,324 ±     1416,620  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     22783,724 ±    34339,896    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,404 ±        2,128    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         7,000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         3,000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5     98814,807 ±     7343,009   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1171,761 ±       87,036  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     18664,004 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1218,330 ±     1165,169  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     19424,821 ±    18801,815    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±        0,072  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,466 ±        1,151    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9,000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         3,000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    262252,616 ±     4004,079   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       415,891 ±        6,250  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496,002 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       339,778 ±     1221,957  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2042,954 ±     7349,453    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,554 ±        4,714  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         3,336 ±       28,375    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    270674,050 ±    49561,135   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,002 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     78748,641 ±      858,980   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1227,986 ±       13,494  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     24544,008 ±        0,019    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1206,811 ±     1154,779  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     24131,326 ±    23215,944    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,333 ±        1,342    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         9,000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                            128  thrpt    5     20158,746 ±      155,273   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       388,027 ±        3,046  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     30296,022 ±        0,009    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       441,983 ±      989,828  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     34502,497 ±    77336,410    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,573 ±        4,887  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5        44,807 ±      382,291    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         7,000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     29921,024 ±     2596,407   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       622,334 ±       53,940  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     32736,014 ±        0,002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       538,763 ±     1159,740  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     28442,695 ±    61307,139    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,695 ±        5,803  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        38,027 ±      318,100    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         4,000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         3,000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5     32112,531 ±      141,626   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       420,628 ±        1,898  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20616,013 ±        0,003    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       474,367 ±     1068,146  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     23246,863 ±    52354,904    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,037 ±        0,243  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,836 ±       11,909    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5    135042,941 ±     4111,360   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       527,175 ±       16,071  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      6144,003 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       506,754 ±     1123,998  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5920,458 ±    13149,979    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,647 ±        5,323  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         7,640 ±       62,869    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     25028,853 ±      119,704   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1381,686 ±        6,891  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86880,017 ±        0,002    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1353,821 ±        6,366  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     85128,064 ±      728,780    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,021 ±        0,057  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,308 ±        3,562    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        10,000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         4,000                     ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                 128  thrpt    5     29674,474 ±      223,432   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       566,395 ±        4,343  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30040,015 ±        0,003    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       506,772 ±     1124,055  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     26877,629 ±    59567,169    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,658 ±        5,532  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        34,915 ±      293,438    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         4,000                 counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         5,000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    192885,571 ±    12545,552   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       670,611 ±       43,724  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5472,002 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       673,009 ±        6,221  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      5492,790 ±      350,584    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,704 ±        5,797  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         5,740 ±       47,255    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         5,000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         4,000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    313558,345 ±     2289,657   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       317,156 ±        2,266  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592,001 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204,613 ±     1078,865  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1029,119 ±     5426,249    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,004 ±        0,036  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,021 ±        0,180    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         2,000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    563739,883 ±    31757,366   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       432,666 ±       24,401  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208,001 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       339,570 ±     1220,906  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       944,347 ±     3411,939    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,634 ±        5,449  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,794 ±       15,411    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         3,000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         6,000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    604976,955 ±     2618,559   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    302987,031 ±     1733,866   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       834,736 ±        4,612  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4336,001 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       810,770 ±     1164,852  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4211,826 ±     6056,815    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,021 ±        0,113  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,108 ±        0,589    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         6,000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         3,000                     ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                128  thrpt    5     48918,731 ±      412,855   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       226,754 ±        1,905  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      7296,009 ±        0,002    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       204,624 ±     1078,926  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      6591,909 ±    34757,323    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,006 ±        0,047  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,179 ±        1,530    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         2,000                 counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         3,000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     45301,501 ±      412,398   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      2020,547 ±       18,418  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     70200,009 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2024,358 ±       19,896  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     70332,699 ±      899,087    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,050 ±        0,108  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,735 ±        3,731    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        15,000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         6,000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    333283,849 ±     1738,528   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       345,585 ±        1,798  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632,001 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       339,427 ±     1220,162  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1603,376 ±     5763,020    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,540 ±        4,537  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,548 ±       21,422    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3,000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5    114044,232 ±     1517,360   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1255,022 ±       16,867  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     17320,004 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1218,808 ±     1169,058  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     16823,319 ±    16173,692    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±        0,122  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,460 ±        1,677    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         9,000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    412050,879 ±   133634,111   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       268,094 ±       86,906  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024,001 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       306,960 ±     1079,008  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1174,307 ±     4152,575    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,008 ±        0,065  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,032 ±        0,273    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3,000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     46454,150 ±      474,645   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2479,347 ±       26,208  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     84008,009 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2442,289 ±     1435,960  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     82757,236 ±    48796,636    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,054 ±        0,156  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,834 ±        5,297    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        18,000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5         8,000                     ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                128  thrpt    5     87998,115 ±      489,001   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1609,366 ±        9,009  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     28784,005 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1616,354 ±     1423,189  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     28908,600 ±    25444,796    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±        0,072  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,596 ±        1,284    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                 counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5     87513,738 ±    10979,634   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       535,142 ±       66,884  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      9624,005 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       506,686 ±     1123,803  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      9170,163 ±    20481,648    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,691 ±        5,815  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        12,222 ±      102,860    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         4,000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         5,000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    124780,165 ±     2389,143   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       381,824 ±        7,319  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      4816,003 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       339,420 ±     1220,137  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4284,193 ±    15391,763    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,536 ±        4,532  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         6,757 ±       57,076    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         3,000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5    111246,563 ±      603,033   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       367,538 ±        1,961  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      5200,004 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       339,500 ±     1220,554  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4807,965 ±    17289,641    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±        0,105  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,236 ±        1,481    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         3,000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2,000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    124369,271 ±      770,161   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       380,557 ±        2,414  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4816,003 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       441,852 ±      989,262  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5592,364 ±    12521,191    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,644 ±        5,479  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         8,152 ±       69,346    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         7,000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    118490,685 ±    22171,377   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       269,231 ±       50,378  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      3576,003 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5       306,947 ±     1078,962  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      4063,537 ±    14329,728    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         3,000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5         4,000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5     11287,682 ±      111,806   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1856,609 ±       19,050  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    258856,046 ±        0,048    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1886,914 ±     1165,432  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    263054,306 ±   161827,390    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±        0,134  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         4,643 ±       18,694    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        14,000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     12133,176 ±      195,856   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1876,914 ±       30,184  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    243472,529 ±        2,604    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1763,873 ±     1432,036  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    228730,754 ±   184071,723    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,042 ±        0,080  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         5,401 ±       10,387    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        13,000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         6,000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    208964,676 ±     1476,563   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       543,830 ±        3,885  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096,002 ±        0,001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       507,181 ±     1125,189  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3821,221 ±     8471,863    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,576 ±        4,780  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         4,338 ±       35,970    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4,000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         5,000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      6938,477 ±      161,318   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1842,678 ±       43,587  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    417985,902 ±       15,843    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1899,306 ±     1166,508  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    430964,024 ±   267668,234    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4,708 ±       18,116    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        14,000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5         7,000                     ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                              128  thrpt    5     10694,881 ±     1282,717   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1720,523 ±      206,516  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    253172,108 ±       33,864    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1618,898 ±     1423,022  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    238416,622 ±   212104,094    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3,719 ±       15,668    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        12,000                 counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         7,000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     29057,200 ±     1705,783   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1506,055 ±       88,543  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     81568,015 ±        0,003    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1479,485 ±     1161,817  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     80340,013 ±    68836,054    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,037 ±        0,132  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,041 ±        7,177    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        11,000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         5,000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     34157,703 ±      312,682   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1669,845 ±       15,260  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     76944,013 ±        0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1762,911 ±     1429,926  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     81237,053 ±    65984,474    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,033 ±        0,044  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,534 ±        2,017    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13,000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         6,000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    385945,848 ±     3801,516   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       853,300 ±        8,605  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480,001 ±        0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       942,872 ±     1421,029  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3845,042 ±     5791,555    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±        0,134  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,136 ±        0,546    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7,000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         3,000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    453146,805 ±    12589,303   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     30732,633 ±      529,760   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1617,220 ±       28,081  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     82824,014 ±        0,002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1612,148 ±     1425,228  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     82542,838 ±    72485,622    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,046 ±        0,119  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,344 ±        6,073    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        12,000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                             128  thrpt    5     11833,757 ±      105,761   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       661,771 ±        5,947  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     88016,602 ±        4,859    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       674,046 ±        5,132  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     89649,676 ±     1239,403    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,602 ±        4,782  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        80,290 ±      637,955    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5,000                 counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         3,000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5    112434,939 ±     4989,401   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1831,649 ±       81,608  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     25640,004 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1887,097 ±     1155,724  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     26430,934 ±    16512,483    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,029 ±        0,072  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,408 ±        0,996    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14,000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5         5,000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    555463,774 ±     4180,661   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       575,996 ±        4,127  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632,001 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       641,095 ±      278,885  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1816,616 ±      796,092    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,549 ±        4,547  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,555 ±       12,885    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         5,000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    343778,845 ±     3538,670   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       477,052 ±        4,855  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2184,001 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       507,104 ±     1124,948  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      2322,676 ±     5151,879    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,033 ±        0,209  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,152 ±        0,954    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         4,000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         2,000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    669022,415 ±     4754,076   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       435,265 ±        3,054  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024,001 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       339,591 ±     1220,971  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       799,247 ±     2875,418    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,631 ±        5,424  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,489 ±       12,795    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         3,000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     85995,917 ±      690,040   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3763,499 ±       30,418  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     68880,005 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3673,917 ±     1435,264  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     67237,539 ±    26117,554    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,071 ±        0,156  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,296 ±        2,862    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        27,000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        12,000                     ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                  128  thrpt    5    216737,332 ±     4982,507   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1645,852 ±       37,477  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     11952,002 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1616,315 ±     1413,951  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     11740,485 ±    10332,457    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,242 ±        0,660    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        12,000                 counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5         5,000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    272068,391 ±     3745,237   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1620,705 ±       22,384  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9376,002 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1614,845 ±     1426,328  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9346,002 ±     8338,827    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,169 ±        0,780    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12,000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         5,000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1306905,914 ±    66617,312   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       710,788 ±       36,364  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856,000 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       807,584 ±     1160,831  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       970,635 ±     1358,544    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,547 ±        4,491  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,654 ±        5,365    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         6,000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    942852,453 ±    21838,788   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       742,794 ±       17,212  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240,000 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       810,694 ±     1165,641  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1354,057 ±     1959,038    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,042 ±        0,174    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         6,000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         3,000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1255731,117 ±    31630,798   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       682,936 ±       17,384  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856,000 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       673,392 ±        4,862  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       844,068 ±       23,508    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,654 ±        5,412  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,819 ±        6,769    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1182205,900 ±     5260,797   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     37430,191 ±      758,204   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1961,613 ±       39,708  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     82488,011 ±        0,003    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2019,475 ±       22,607  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     84922,760 ±     1691,260    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,054 ±        0,134  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,280 ±        5,696    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15,000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5         6,000                     ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                 128  thrpt    5    146862,571 ±     1512,756   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1278,677 ±       13,360  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     13704,003 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1344,902 ±        4,242  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     14413,846 ±      148,509    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,223 ±        0,857    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5        10,000                 counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5         4,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    140679,400 ±     2488,454   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1553,133 ±       27,555  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     17376,003 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1614,242 ±     1421,429  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     18070,317 ±    16140,447    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,033 ±        0,108  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,373 ±        1,206    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         5,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    200928,666 ±     2846,796   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1063,181 ±       15,310  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      8328,002 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1082,031 ±     1426,150  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      8480,864 ±    11234,787    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±        0,104  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,196 ±        0,821    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    305502,271 ±     6324,052   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       795,076 ±       16,382  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,337 ±     1155,710  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4158,656 ±     5942,520    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±        0,139  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,108 ±        0,722    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         2,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     79218,178 ±     1324,494   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3342,523 ±       55,803  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     66408,005 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3401,877 ±       12,745  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     67588,041 ±      906,361    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,067 ±        0,119  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,323 ±        2,352    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        25,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        10,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                             128  thrpt    5    159556,145 ±    12618,080   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1799,650 ±      142,025  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17752,003 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1887,335 ±     1160,877  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18639,493 ±    11937,699    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,328 ±        0,894    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        14,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         7,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    190455,832 ±     1557,792   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       662,177 ±        5,418  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5472,002 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,036 ±        6,324  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      5561,734 ±       29,076    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,696 ±        5,817  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,735 ±       47,906    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         3,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    617297,906 ±    12076,969   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       624,371 ±       12,190  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       674,898 ±        2,007  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1720,870 ±       36,751    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,050 ±        0,298  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,127 ±        0,757    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         5,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         2,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    591946,709 ±     9253,056   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       454,325 ±        7,066  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       474,510 ±     1068,651  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1262,676 ±     2839,816    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,643 ±        5,401  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,710 ±       14,371    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    599957,955 ±    37733,314   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    287728,615 ±     1644,626   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       792,681 ±        4,441  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       810,422 ±     1160,372  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4434,360 ±     6372,696    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±        0,156  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,160 ±        0,856    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         6,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                            128  thrpt    5     41410,232 ±     1794,327   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       191,954 ±        8,297  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      7296,010 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       204,607 ±     1078,836  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7843,564 ±    41361,555    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         2,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         3,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5     11994,909 ±      500,533   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1534,019 ±       63,865  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    201280,050 ±        0,112    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1480,033 ±     1154,857  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    194187,522 ±   150892,941    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,058 ±        0,183  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         7,685 ±       24,224    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        11,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         6,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5     13093,544 ±      172,045   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1466,610 ±       18,899  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    176287,915 ±       52,375    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1490,625 ±     1170,793  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    179215,633 ±   141934,507    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,029 ±        0,044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         3,503 ±        5,286    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        11,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    220927,164 ±     1809,530   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1437,432 ±       11,642  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240,002 ±        0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1347,825 ±        4,303  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      9601,702 ±       97,141    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,148 ±        0,572    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        10,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      9080,129 ±      109,465   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1690,755 ±       20,431  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    293056,644 ±        5,140    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1763,076 ±     1428,875  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    305567,015 ±   247110,630    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         4,330 ±       11,600    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        13,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         6,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                        128  thrpt    5     11988,066 ±      580,298   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1416,478 ±       68,562  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    185963,285 ±       28,679    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1481,743 ±     1156,332  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    194302,264 ±   144299,018    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,017 ±        0,036  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2,192 ±        4,719    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5        11,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     26445,350 ±      244,958   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1110,270 ±        9,780  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     66080,016 ±        0,003    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1074,482 ±     1415,982  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     63958,946 ±    84384,354    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±        0,122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,735 ±        7,238    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         8,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     30300,168 ±     4825,388   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1165,739 ±      185,674  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     60552,014 ±        0,004    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1218,283 ±     1164,950  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     62821,956 ±    53475,526    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,029 ±        0,072  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1,486 ±        3,658    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         9,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         3,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    767346,412 ±     3854,563   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1384,629 ±        6,927  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840,001 ±        0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1482,449 ±     1157,989  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3040,583 ±     2373,453    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,058 ±        0,036  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,120 ±        0,073    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        11,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         5,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    783480,845 ±    85828,326   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     27749,199 ±      148,443   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1170,984 ±        6,431  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     66416,016 ±        0,002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1206,771 ±     1154,488  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     68449,404 ±    65526,938    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±        0,057  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,180 ±        3,210    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         9,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                       128  thrpt    5     15744,898 ±      120,901   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       633,341 ±        4,861  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5     63312,028 ±        0,010    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       539,491 ±     1161,303  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     53938,174 ±   116108,508    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,586 ±        4,869  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        58,759 ±      488,117    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         2,000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     31254,341 ±     2585,560   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1696,673 ±      140,310  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     85440,013 ±        0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1750,964 ±     1421,749  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     88411,144 ±    76227,734    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,029 ±        0,072  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,469 ±        3,587    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        13,000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         6,000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     35209,577 ±      276,184   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1607,280 ±       12,378  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     71848,012 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1626,948 ±     1431,500  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     72735,784 ±    64184,030    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,118 ±        5,901    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12,000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         5,000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    396515,699 ±    19176,324   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1031,916 ±       49,876  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       942,899 ±     1419,922  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3752,071 ±     5766,231    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±        0,113  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,084 ±        0,457    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         7,000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     19657,141 ±      803,176   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2023,116 ±       83,474  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    161984,022 ±        0,008    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2036,845 ±        9,409  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    163098,993 ±     7116,433    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,062 ±        0,080  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4,998 ±        6,401    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15,000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                            128  thrpt    5     33502,278 ±      284,377   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1623,042 ±       13,622  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     76248,013 ±        0,003    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1617,964 ±     1424,942  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     76015,439 ±    67073,553    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,565 ±        4,300    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        12,000                 counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     63995,232 ±      250,808   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1552,317 ±        5,798  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     38176,006 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479,462 ±     1153,483  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     36389,675 ±    28529,605    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,614 ±        1,648    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11,000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    149314,212 ±     4351,248   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1265,156 ±       36,949  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     13336,003 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1218,932 ±     1167,773  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     12859,169 ±    12441,684    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,263 ±        1,099    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9,000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1162169,412 ±    10668,418   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1246,454 ±       11,352  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688,000 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1212,581 ±     1159,812  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1642,499 ±     1575,452    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,042 ±        0,113  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,056 ±        0,154    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1015743,606 ±     5253,339   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     70227,556 ±      551,665   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1634,316 ±       12,203  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     36624,006 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1612,602 ±     1420,753  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     36134,727 ±    31776,021    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±        0,105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,840 ±        2,342    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        12,000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         6,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                           128  thrpt    5     29672,476 ±      179,732   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       425,910 ±        2,645  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     22592,014 ±        0,002    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       339,698 ±     1221,599  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     18031,841 ±    64816,839    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,572 ±        4,871  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        30,302 ±      258,169    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         3,000                 counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     18537,436 ±      163,399   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1654,647 ±       14,940  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    140480,024 ±        0,009    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1615,862 ±     1419,338  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    137173,330 ±   120175,647    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,123 ±        7,461    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        12,000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     18901,796 ±      326,490   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1526,899 ±       26,336  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    127144,313 ±        2,488    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1626,449 ±     1428,622  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    135491,316 ±   120237,949    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±        0,044  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2,428 ±        3,679    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12,000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         6,000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    462057,082 ±    31935,227   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1202,671 ±       82,725  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±        0,001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1212,683 ±     1160,950  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4134,585 ±     4011,259    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,099 ±        0,308    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         9,000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     14284,286 ±       97,823   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1971,926 ±       13,306  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    217280,030 ±        0,012    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2036,222 ±       10,504  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    224365,267 ±     2105,419    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,046 ±        0,067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         5,043 ±        7,359    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15,000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                            128  thrpt    5     18309,011 ±      393,560   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1589,203 ±       33,775  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    136605,665 ±       40,145    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1617,444 ±     1415,024  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    138954,484 ±   119777,360    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,495 ±       11,449    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        12,000                 counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     45274,135 ±      279,684   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1407,505 ±        8,650  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     48928,009 ±        0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1344,106 ±        5,519  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     46724,158 ±      246,955    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,021 ±        0,057  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,724 ±        1,970    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        10,000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     54595,271 ±     1051,347   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1448,271 ±       28,245  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     41752,008 ±        0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1490,792 ±     1171,163  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     42970,961 ±    33537,924    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±        0,072  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,841 ±        2,073    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        11,000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1364434,403 ±     7518,864   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1241,408 ±        6,792  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432,000 ±        0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1212,427 ±     1159,487  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1398,841 ±     1340,996    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,046 ±        0,104  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,053 ±        0,121    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1407400,496 ±   332608,856   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5     40679,801 ±     9528,930   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1284,050 ±      300,879  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     49680,011 ±        0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1207,189 ±     1156,235  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     46634,291 ±    43692,001    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±        0,132  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,477 ±        5,468    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5         9,000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                           128  thrpt    5     33787,493 ±     2717,034   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       408,029 ±       32,716  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     19008,012 ±        0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       339,675 ±     1221,460  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     15685,582 ±    56441,801    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,573 ±        4,932  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        26,513 ±      228,284    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         3,000                 counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5     88322,233 ±     1098,537   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1515,156 ±       18,916  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     27000,005 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1480,541 ±     1154,479  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     26394,822 ±    20919,308    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,033 ±        0,122  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,594 ±        2,166    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        11,000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         5,000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    390538,030 ±     8827,844   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       782,089 ±       17,518  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       807,113 ±     1155,342  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3250,840 ±     4615,968    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±        0,104  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,100 ±        0,420    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         6,000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5         3,000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    294489,087 ±     8193,204   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       639,151 ±       17,754  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3416,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       675,120 ±        2,832  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3608,382 ±       95,636    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,037 ±        0,200  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,202 ±        1,081    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         5,000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    570551,156 ±     4842,354   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       719,174 ±        6,269  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       807,787 ±     1155,771  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2229,727 ±     3212,915    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,654 ±        5,407  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,805 ±       14,927    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         6,000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     80484,738 ±     1301,295   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3589,403 ±       58,282  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     70192,005 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3537,056 ±     1178,475  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     69174,028 ±    23360,678    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,100 ±        0,164  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,956 ±        3,243    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26,000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        12,000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    243334,573 ±     7828,032   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1720,492 ±       55,760  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     11128,002 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1615,753 ±     1420,456  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     10443,460 ±     9014,781    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,042 ±        0,160  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,268 ±        1,032    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        12,000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5,000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    753978,454 ±     9297,899   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       590,185 ±        7,321  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       538,732 ±     1159,663  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1124,245 ±     2420,096    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,549 ±        4,504  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,149 ±        9,435    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5         3,000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    532404,236 ±    30001,723   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       546,679 ±       30,842  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       539,986 ±     1162,362  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1599,549 ±     3444,827    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±        0,134  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,098 ±        0,393    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    664244,669 ±     7008,866   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       519,935 ±        5,522  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       506,745 ±     1123,972  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1200,993 ±     2664,839    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,642 ±        5,327  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,517 ±       12,581    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    807011,995 ±     4470,935   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     31523,941 ±      278,764   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1904,851 ±       16,982  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     95104,014 ±        0,003    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1884,474 ±     1169,147  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     94086,008 ±    58358,355    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,050 ±        0,134  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,495 ±        6,703    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        14,000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      8690,825 ±     1162,840   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1337,942 ±      178,923  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    242288,572 ±       31,131    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1345,054 ±     1832,187  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    241802,023 ±   312592,147    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,970 ±       11,946    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5        10,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      8849,319 ±      177,511   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1275,570 ±       25,489  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    226864,048 ±        0,008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1354,008 ±        5,982  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    240819,474 ±     4748,956    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         4,452 ±       18,676    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        10,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    170593,770 ±     1304,409   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1652,678 ±       12,581  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248,002 ±        0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1618,517 ±     1420,164  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     14935,370 ±    13160,571    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,268 ±        1,235    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        12,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      8734,299 ±       88,239   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1588,503 ±       16,118  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    286242,209 ±       18,603    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1491,438 ±     1167,568  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    268861,146 ±   213650,996    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         4,498 ±       12,053    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        11,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5         7,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                       128  thrpt    5      8916,521 ±      361,183   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                        128  thrpt    5      1322,573 ±       53,444  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    233445,916 ±       48,926    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5      1346,356 ±        3,897  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    237663,964 ±     9257,465    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         3,691 ±       14,211    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                             128  thrpt    5        10,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                              128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     21417,574 ±      495,378   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5       971,726 ±       22,407  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     71409,356 ±       11,507    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5       940,261 ±     1416,553  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     69160,613 ±   104983,829    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,012 ±        0,108  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,914 ±        7,873    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5         7,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     24911,653 ±      606,613   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1055,627 ±       25,953  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     66696,017 ±        0,002    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1082,102 ±     1426,200  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     68404,051 ±    90545,492    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         1,048 ±        5,527    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         8,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         3,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    497951,539 ±     5162,645   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1128,854 ±       11,538  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568,001 ±        0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1077,394 ±     1419,404  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3406,668 ±     4502,493    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,037 ±        0,143  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0,119 ±        0,454    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         8,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         2,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    535931,848 ±     4916,451   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     22190,516 ±      225,150   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1022,997 ±       10,587  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     72560,645 ±        5,391    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1072,290 ±     1413,737  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     76101,522 ±   100820,388    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±        0,104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1,772 ±        7,411    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         8,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                      128  thrpt    5     10947,719 ±      418,212   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                       128  thrpt    5       613,913 ±       23,394  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                  128  thrpt    5     88264,645 ±        5,212    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                              128  thrpt    5       539,458 ±     1161,231  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     77672,828 ±   167242,343    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,583 ±        4,799  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        85,292 ±      702,472    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                            128  thrpt    5         4,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     15910,292 ±      231,897   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1525,912 ±       22,190  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    150944,028 ±        0,015    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1480,185 ±     1157,457  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    146405,563 ±   114008,191    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,046 ±        0,164  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4,537 ±       16,284    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        11,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     15507,028 ±      119,125   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1419,094 ±       10,765  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    144032,030 ±       61,619    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1354,763 ±        6,489  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    137502,963 ±      967,577    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,017 ±        0,036  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,691 ±        3,639    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        10,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    277616,043 ±      430,517   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1605,813 ±        2,602  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104,002 ±        0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1616,291 ±     1423,241  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      9163,847 ±     8078,970    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,046 ±        0,067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,260 ±        0,380    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        12,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     13712,196 ±      187,354   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1760,553 ±       23,795  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    202072,033 ±        0,016    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1762,661 ±     1434,765  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    202338,522 ±   165171,979    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,046 ±        0,105  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         5,259 ±       12,029    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        13,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         7,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                           128  thrpt    5     15394,070 ±      358,506   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1452,778 ±       34,127  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    148523,290 ±       46,650    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1479,788 ±     1154,703  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    151312,157 ±   118795,647    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,046 ±        0,143  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         4,682 ±       14,674    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        11,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     28754,556 ±     3886,467   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       992,250 ±      134,071  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     54312,015 ±        0,004    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1074,449 ±     1416,586  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     59139,390 ±    81437,543    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,123 ±        4,326    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         8,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     76356,056 ±     2511,586   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1215,509 ±       40,085  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     25056,006 ±        0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1083,101 ±     1427,461  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     22289,725 ±    28961,917    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,341 ±        1,796    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         8,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    764618,651 ±     8631,552   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1049,350 ±       11,814  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160,001 ±        0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1075,604 ±     1417,400  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      2215,051 ±     2929,951    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,029 ±        0,122  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,060 ±        0,250    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         8,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    890114,728 ±     3976,869   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     79672,774 ±      635,502   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1562,749 ±       12,534  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     30872,005 ±        0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1490,651 ±     1169,551  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     29452,159 ±    23236,036    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,328 ±        1,731    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                          128  thrpt    5     21337,164 ±      106,367   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       471,771 ±        2,470  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     34800,020 ±        0,003    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       474,487 ±     1068,570  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     35000,279 ±    78801,878    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,656 ±        5,416  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        48,383 ±      399,293    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         4,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         7,000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     21358,808 ±      664,946   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       800,220 ±       25,000  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     58967,866 ±        1,326    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       672,850 ±        4,300  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     49585,070 ±     1794,800    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,025 ±        0,143  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,845 ±       10,554    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         5,000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         2,000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     21547,104 ±      522,866   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       603,029 ±       14,614  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     44048,274 ±        2,191    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       539,786 ±     1161,931  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     39478,398 ±    84986,464    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,830 ±        7,651    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4,000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         2,000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5    119614,101 ±      836,543   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       300,352 ±        2,077  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952,004 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       204,628 ±     1078,945  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2696,202 ±    14216,320    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,001 ±        0,008  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,012 ±        0,100    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         2,000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     15823,498 ±     1853,080   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5       999,068 ±      116,483  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     99368,131 ±        0,874    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5       943,069 ±     1422,365  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     93459,728 ±   136002,360    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,017 ±        0,105  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,633 ±       10,252    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         7,000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         3,000                     ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                               128  thrpt    5     18491,055 ±       75,496   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5       595,233 ±        2,298  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     50662,349 ±       40,126    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       641,851 ±      280,459  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     54628,896 ±    23824,690    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,579 ±        4,808  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        49,353 ±      409,720    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         5,000                 counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         6,000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     67467,914 ±      294,068   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1077,820 ±        5,156  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     25144,007 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1074,506 ±     1416,755  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     25072,608 ±    33123,318    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,389 ±        2,049    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         8,000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         3,000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     85708,346 ±    11404,733   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1385,327 ±      184,225  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     25440,005 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1355,014 ±        6,686  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     24907,951 ±     3432,842    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,460 ±        1,225    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        10,000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         5,000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    333557,682 ±     8168,728   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       639,199 ±       15,616  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016,001 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       539,816 ±     1161,998  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2546,629 ±     5482,489    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,572 ±        4,837  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2,690 ±       22,739    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4,000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    389001,058 ±     2562,380   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     80977,871 ±     2256,898   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1302,767 ±       35,617  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     25320,005 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1341,253 ±        4,548  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     26069,018 ±      697,287    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,037 ±        0,105  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,730 ±        2,042    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        10,000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                              128  thrpt    5     17350,299 ±      176,459   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       380,522 ±        4,008  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     34520,026 ±        0,013    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       441,997 ±      989,835  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     40112,115 ±    89811,366    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,569 ±        4,851  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        51,573 ±      440,038    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                 counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         8,000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    138168,419 ±     3642,377   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      2001,612 ±       52,501  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     22800,003 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1754,532 ±     1427,447  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     19989,272 ±    16333,195    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,054 ±        0,091  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,616 ±        1,037    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        13,000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         5,000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    754438,501 ±     4532,070   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       418,002 ±        2,472  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872,001 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       474,277 ±     1067,763  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       989,848 ±     2228,887    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,531 ±        4,519  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,109 ±        9,447    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    413283,302 ±    29895,732   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       411,763 ±       29,580  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1568,001 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,414 ±     1068,291  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1791,690 ±     4035,147    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±        0,280  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,142 ±        1,058    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5    864099,453 ±    19346,230   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       298,664 ±        6,683  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544,000 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       306,945 ±     1078,956  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       561,059 ±     1972,223    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,013 ±        0,109  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,023 ±        0,199    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         3,000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         9,000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     91242,806 ±      868,069   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3911,557 ±       36,960  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     67472,005 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3947,111 ±     1170,375  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     68082,517 ±    20023,726    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,071 ±        0,091  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,221 ±        1,582    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        29,000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        11,000                     ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                128  thrpt    5    242575,167 ±    22913,087   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1532,637 ±      145,134  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9944,002 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1615,682 ±     1420,739  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10519,817 ±     9997,714    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,217 ±        0,593    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                 counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         6,000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    326769,788 ±     4340,015   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1702,580 ±       22,065  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      8200,001 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1750,053 ±     1420,286  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      8426,301 ±     6790,540    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,046 ±        0,088  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,220 ±        0,422    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        13,000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         5,000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1637784,003 ±    11566,571   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       557,742 ±        3,859  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536,000 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       640,752 ±      278,128  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       615,724 ±      265,440    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,552 ±        4,529  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,531 ±        4,362    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         5,000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1704739,673 ±    12775,313   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       996,464 ±        7,260  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       946,946 ±     1426,919  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       874,467 ±     1320,018    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,023 ±        0,097    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         7,000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1584186,356 ±    85772,953   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       539,501 ±       29,141  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536,000 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       506,761 ±     1124,020  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       504,731 ±     1121,897    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,642 ±        5,351  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,633 ±        5,270    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         4,000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1512212,439 ±    32475,176   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     44429,390 ±      453,865   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2060,088 ±       21,517  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     72976,009 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2020,720 ±       22,266  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     71582,272 ±     1524,091    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,058 ±        0,119  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,063 ±        4,195    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15,000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         6,000                     ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                               128  thrpt    5    145039,006 ±     3369,914   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1262,148 ±       29,209  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     13696,003 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1345,074 ±        4,170  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     14596,263 ±      320,882    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±        0,067  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,497 ±        0,723    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5        10,000                 counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5         4,000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     63444,274 ±      389,310   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1266,716 ±        7,580  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     31424,007 ±        0,002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1344,680 ±        3,008  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     33358,173 ±      226,736    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,054 ±        0,122  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1,343 ±        3,022    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        10,000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         3,000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5     91625,654 ±     7337,727   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       961,763 ±       76,855  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     16520,005 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       946,922 ±     1428,137  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     16332,223 ±    25448,952    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,213 ±        1,220    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7,000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    293743,158 ±      974,941   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       955,578 ±        3,263  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120,001 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       941,264 ±     1418,197  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5043,090 ±     7595,616    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,112 ±        0,429    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7,000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     38612,731 ±      236,507   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1814,240 ±       11,001  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     73952,011 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1894,716 ±     1164,694  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     77232,657 ±    47479,368    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,050 ±        0,146  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,035 ±        5,928    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14,000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         6,000                     ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                 128  thrpt    5     52805,773 ±      475,302   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       881,168 ±        7,797  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     26264,008 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       941,696 ±     1420,559  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     28086,456 ±    42597,420    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,017 ±        0,105  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,497 ±        3,118    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         7,000                 counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         3,000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     61557,789 ±     8043,874   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       913,327 ±      119,257  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23352,007 ±        0,002    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       940,242 ±     1414,720  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     23972,053 ±    34993,169    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,008 ±        0,044  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,210 ±        1,106    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7,000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         3,000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5    104013,715 ±     1296,574   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1424,815 ±       17,715  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560,008 ±        0,062    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1354,756 ±        6,425  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20500,000 ±      185,912    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,378 ±        1,580    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        10,000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    306898,582 ±     5318,507   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       978,083 ±       17,279  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016,001 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1075,606 ±     1418,163  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5518,201 ±     7297,921    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,104  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,128 ±        0,537    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    361615,864 ±     1988,766   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     80054,310 ±     1576,759   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1187,457 ±       23,593  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     23344,000 ±        0,081    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1072,663 ±     1414,113  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     21097,992 ±    27930,425    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,329 ±        1,328    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         8,000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         9,000                     ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                128  thrpt    5     11534,803 ±      105,527   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       285,889 ±        2,572  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     39008,618 ±        4,996    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       306,930 ±     1078,901  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     41940,677 ±   147427,672    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,008 ±        0,067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,065 ±        9,168    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                 counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                              128  thrpt    5     29586,264 ±      901,053   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1541,194 ±       47,296  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     81984,014 ±        0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1614,762 ±     1421,901  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     85989,504 ±    77671,910    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,037 ±        0,088  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,990 ±        4,644    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        12,000                 counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                       128  thrpt    5     34083,036 ±      366,986   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1334,126 ±       14,194  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     61608,012 ±        0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1354,230 ±        6,499  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     62536,604 ±      454,704    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,770 ±        3,097    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        10,000                 counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         4,000                     ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                      128  thrpt    5    530248,431 ±    11230,495   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1379,959 ±       29,188  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1345,374 ±        5,721  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3993,431 ±       78,146    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,062 ±        0,239    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        10,000                 counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                           128  thrpt    5     25496,631 ±      877,827   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1938,459 ±       67,161  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    119656,017 ±        0,003    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1899,320 ±     1168,041  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    117306,507 ±    73612,276    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±        0,108  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,048 ±        6,609    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14,000                 counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                            128  thrpt    5     32771,401 ±      437,562   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1479,011 ±       19,487  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     71032,013 ±        0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1480,228 ±     1165,606  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     71094,013 ±    56072,550    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±        0,044  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,399 ±        2,095    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        11,000                 counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                             128  thrpt    5     77707,034 ±      519,659   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1644,809 ±       10,990  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     33312,005 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1614,901 ±     1418,499  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     32703,309 ±    28659,655    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,033 ±        0,108  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,675 ±        2,179    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        12,000                 counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                      128  thrpt    5    179119,993 ±     3155,594   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1357,484 ±       23,821  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     11928,002 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1354,582 ±        6,661  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     11902,668 ±      175,372    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,037 ±        0,105  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,329 ±        0,917    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1450067,647 ±   132473,877   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1201,374 ±      109,830  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1304,000 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1210,308 ±     1158,538  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1307,914 ±     1175,589    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,037 ±        0,143  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,040 ±        0,154    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1508589,724 ±    23598,145   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                          128  thrpt    5    165060,929 ±     1421,345   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1538,680 ±       13,123  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     14672,003 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1625,858 ±     1427,928  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     15504,455 ±    13641,589    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,046 ±        0,119  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,436 ±        1,132    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        12,000                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         6,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                           128  thrpt    5     33751,741 ±      920,395   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       446,014 ±       12,250  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     20800,012 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,471 ±     1068,588  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22156,669 ±    49834,868    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,647 ±        5,554  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        30,209 ±      259,306    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5        12,000                     ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                            128  thrpt    5     45783,342 ±      236,567   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1642,150 ±        8,609  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     56456,009 ±        0,002    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1626,992 ±     1427,048  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     55935,932 ±    49083,719    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,146 ±        3,147    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        12,000                 counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                           128  thrpt    5    777363,087 ±    93863,273   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1517,407 ±      183,411  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3072,001 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1615,884 ±     1421,185  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3278,049 ±     3004,182    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,050 ±        0,122  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,101 ±        0,247    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        12,000                 counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         9,000                     ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                128  thrpt    5     32632,191 ±      256,092   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2374,235 ±       17,997  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    114512,013 ±        0,002    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2308,977 ±     1434,116  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    111389,936 ±    69959,626    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,037 ±        0,088  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,807 ±        4,228    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        17,000                 counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         7,000                     ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                 128  thrpt    5     39747,158 ±      365,571   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1659,724 ±       15,342  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     65720,011 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1615,915 ±     1419,178  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     63984,459 ±    56171,665    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,989 ±        3,475    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        12,000                 counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         6,000                     ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                           128  thrpt    5    410888,684 ±     2777,837   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1142,410 ±        7,797  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      4376,001 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1082,780 ±     1426,747  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4148,934 ±     5481,624    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±        0,143  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,144 ±        0,550    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         8,000                 counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                          128  thrpt    5   1691964,997 ±    41607,526   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       989,008 ±       24,452  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1075,593 ±     1418,420  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1001,109 ±     1326,356    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,023 ±        0,082    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1905548,695 ±    14866,163   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                               128  thrpt    5    268997,627 ±     2196,928   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1741,959 ±       14,308  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     10192,002 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1763,035 ±     1432,713  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10315,651 ±     8389,482    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±        0,036  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,146 ±        0,211    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        13,000                 counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6,000                     ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                128  thrpt    5     51956,423 ±      567,882   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       348,062 ±        3,821  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     10544,008 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       306,912 ±     1078,839  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9311,965 ±    32733,007    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                 counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         6,000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     89829,942 ±     1009,989   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1805,003 ±       20,600  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     31624,005 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1747,164 ±     1413,511  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     30618,729 ±    24932,952    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,510 ±        2,343    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         5,000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5     95523,088 ±      352,269   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1076,429 ±        3,953  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     17736,004 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1081,164 ±     1424,622  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     17815,929 ±    23496,403    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,343 ±        1,322    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    116114,906 ±     1168,504   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1222,860 ±       12,074  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     16576,004 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1206,648 ±     1155,202  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16363,344 ±    15749,766    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,395 ±        1,238    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         9,000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4,000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     44525,903 ±      556,817   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2212,480 ±       27,739  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     78208,010 ±        0,003    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2172,110 ±     1166,103  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     76778,573 ±    41106,535    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,058 ±        0,191  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,061 ±        6,769    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        16,000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         7,000                     ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                               128  thrpt    5     85702,516 ±      411,678   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1487,695 ±        7,126  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     27320,005 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1476,175 ±     1160,884  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     27112,122 ±    21427,780    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±        0,143  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,459 ±        2,636    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        11,000                 counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         5,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    134931,423 ±     8103,100   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       596,684 ±       35,712  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      6960,003 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       642,176 ±      282,048  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      7498,474 ±     3545,964    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Old_Gen                                           128  thrpt    5         0,028 ±        0,240  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Old_Gen.norm                                      128  thrpt    5         0,333 ±        2,865    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,856 ±        7,025  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         9,897 ±       81,169    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         7,000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5        29,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    194024,226 ±     1476,566   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       287,967 ±        2,152  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336,002 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       306,908 ±     1078,824  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2491,811 ±     8759,103    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,004 ±        0,036  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,034 ±        0,292    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3,000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         2,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    736644,682 ±   208099,049   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       913,618 ±      258,276  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952,001 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       938,449 ±     1413,805  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2011,551 ±     3056,098    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,029 ±        0,122  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,062 ±        0,261    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    777097,057 ±     8330,349   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    221917,557 ±     2897,057   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       725,287 ±        9,357  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144,002 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       803,794 ±     1145,536  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      5699,685 ±     8101,941    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,929 ±        7,733  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         6,625 ±       55,141    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         6,000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                              128  thrpt    5     25693,302 ±       90,971   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       143,393 ±        0,506  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      8784,016 ±        0,003    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       102,316 ±      880,968  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      6263,320 ±    53929,074    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         1,000                 counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         1,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    146787,689 ±      626,420   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1807,789 ±        7,824  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19384,003 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1750,898 ±     1417,239  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18775,831 ±    15234,908    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±        0,122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,313 ±        1,305    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        13,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         7,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    203674,001 ±     5794,495   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1077,704 ±       30,495  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8328,002 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1082,460 ±     1425,524  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      8365,221 ±    11020,453    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,129 ±        0,680    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         8,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         4,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    532658,018 ±     5514,911   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1034,221 ±       10,561  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056,001 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       941,029 ±     1417,196  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      2781,918 ±     4205,667    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±        0,143  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,074 ±        0,425    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         2,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     76348,074 ±     1872,077   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3221,489 ±       78,776  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     66408,005 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3265,170 ±     1166,358  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     67287,470 ±    23023,998    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,062 ±        0,080  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,285 ±        1,626    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        24,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         9,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                           128  thrpt    5    142846,264 ±    12913,429   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1608,269 ±      145,266  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     17720,003 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1616,236 ±     1423,735  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17830,791 ±    16123,911    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,371 ±        1,034    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        12,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    212797,062 ±     2440,706   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       728,975 ±        8,267  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      5392,002 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5       807,289 ±     1154,207  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      5972,931 ±     8568,773    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,701 ±        5,768  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5,191 ±       42,715    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    303890,471 ±     3006,310   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       299,652 ±        2,934  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552,001 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       306,935 ±     1078,919  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1590,499 ±     5590,882    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,008 ±        0,072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,043 ±        0,370    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         3,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         2,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1098989,998 ±    10963,291   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       815,563 ±        8,257  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168,000 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       807,297 ±     1156,992  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1156,516 ±     1663,757    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,029 ±        0,156  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,042 ±        0,224    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         6,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1189423,870 ±     8049,491   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    323505,757 ±     4866,587   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5       883,039 ±       13,320  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296,001 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       946,129 ±     1426,227  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4601,600 ±     6919,233    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,033 ±        0,122  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,162 ±        0,589    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         7,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                          128  thrpt    5     49743,920 ±     2818,053   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       154,741 ±        8,792  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4896,008 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       204,626 ±     1078,935  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      6457,278 ±    34047,824    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,001 ±        0,006  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,023 ±        0,199    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         2,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5      5710,085 ±       57,203   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1124,782 ±       11,068  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    310024,075 ±        0,012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1064,563 ±     1402,148  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    293541,558 ±   387886,606    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,104  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         6,886 ±       28,840    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5      6052,408 ±      112,814   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1065,377 ±       19,780  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    277024,071 ±        0,018    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1077,757 ±     1420,871  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    280343,382 ±   370695,189    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,021 ±        0,113  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         5,418 ±       29,453    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         8,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     41667,952 ±      868,937   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       684,091 ±       14,202  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     25840,010 ±        0,002    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       668,066 ±        9,717  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     25235,112 ±      489,982    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         1,099 ±        9,240  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        41,322 ±      347,330    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      5188,813 ±      871,202   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1261,184 ±      211,641  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    382552,080 ±        0,016    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1214,399 ±     1165,898  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    370057,558 ±   374604,126    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         7,829 ±       29,219    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         9,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         5,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                        128  thrpt    5      5502,249 ±       45,751   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1056,392 ±        8,765  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    302160,076 ±        0,012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1064,635 ±     1404,717  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    304473,735 ±   401247,598    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7,131 ±       37,601    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5         8,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     16391,501 ±      193,325   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       918,536 ±       10,454  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     88193,282 ±       48,862    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5       931,670 ±     1402,609  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     89483,648 ±   135077,926    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,201 ±        6,894    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         7,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         2,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     18850,423 ±      142,884   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       981,407 ±        7,519  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     81944,006 ±        0,158    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       942,702 ±     1420,953  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     78700,621 ±   118481,385    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,004 ±        0,036  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,348 ±        2,999    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         7,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         3,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    283978,212 ±    21064,075   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1029,297 ±       76,259  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5704,001 ±        0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1065,440 ±     1403,531  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5918,316 ±     7947,646    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,162 ±        0,740    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         8,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         3,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    331032,039 ±     1549,028   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     16876,729 ±      195,410   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       963,412 ±       11,218  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     89848,003 ±        0,349    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       929,953 ±     1399,989  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     86752,210 ±   130905,985    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±        0,113  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,942 ±       10,564    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         7,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                       128  thrpt    5      8125,094 ±       55,413   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       565,552 ±        3,824  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    109552,875 ±        7,093    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       503,666 ±     1115,529  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     97574,748 ±   215978,860    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1,100 ±        9,336  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       213,138 ±     1809,271    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         7,000                     ms
[info] BitSetBenchmark.readJsoniterScala                                                                 128  thrpt    5    976581,764 ±    73678,186   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5        39,714 ±        2,996  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5        64,000 ±        0,001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.readPlayJson                                                                      128  thrpt    5     84228,894 ±      897,613   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3797,943 ±       39,513  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     70968,005 ±        0,001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5      3811,786 ±     1430,097  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     71233,058 ±    27017,847    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,071 ±        0,072  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         1,323 ±        1,347    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        28,000                 counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        12,000                     ms
[info] BitSetBenchmark.writeJacksonScala                                                                 128  thrpt    5   1156313,297 ±    29674,219   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       664,194 ±       16,921  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       904,000 ±        0,001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5       675,300 ±        2,208  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5       919,152 ±       25,471    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,029 ±        0,134  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,040 ±        0,182    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5,000                 counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5         2,000                     ms
[info] BitSetBenchmark.writeJsoniterScala                                                                128  thrpt    5    759217,042 ±     4588,676   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       204,522 ±        1,259  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       424,001 ±        0,001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       204,598 ±     1078,787  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5       424,275 ±     2237,078    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,011 ±        0,094  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,023 ±        0,195    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         2,000                 counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5         4,000                     ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   1607526,183 ±   106806,785   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        16,342 ±        1,085  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        16,000 ±        0,001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.writePlayJson                                                                     128  thrpt    5     50358,131 ±      412,957   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      2122,224 ±       17,273  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66328,008 ±        0,001    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2171,647 ±     1164,687  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     67868,920 ±    36241,792    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,033 ±        0,091  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         1,041 ±        2,859    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        16,000                 counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5         7,000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    882469,951 ±    11265,478   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2812,313 ±       35,105  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5016,000 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2708,375 ±       28,179  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      4830,634 ±       42,739    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,025 ±        0,067  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,044 ±        0,119    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        20,000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5         8,000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   5789970,400 ±  2122699,560   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       353,174 ±      129,461  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96,000 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       339,446 ±     1220,262  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        90,120 ±      321,333    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,527 ±        4,534  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,133 ±        1,149    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3,000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         6,000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5   1104207,068 ±    25738,436   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1318,942 ±       30,971  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1880,000 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      1218,307 ±     1167,880  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      1736,825 ±     1668,084    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,017 ±        0,104  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0,024 ±        0,150    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         9,000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         4,000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   9037947,175 ±    64052,791   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       413,440 ±        2,974  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72,000 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       441,869 ±      989,277  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        76,972 ±      172,290    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,620 ±        5,299  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,108 ±        0,923    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4,000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         7,000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    377985,504 ±     3991,237   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      2121,147 ±       22,888  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8832,001 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      2171,174 ±     1169,030  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      9039,679 ±     4840,504    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,054 ±        0,122  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,225 ±        0,506    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        16,000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         8,000                     ms
[info] ExtractFieldsBenchmark.readUPickle                                                                N/A  thrpt    5    817679,593 ±    65403,284   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1134,611 ±       90,805  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      2184,001 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1209,980 ±     1157,875  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2323,282 ±     2149,635    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,029 ±        0,091  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,056 ±        0,173    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         9,000                 counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         3,000                     ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      4343,826 ±      280,370   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2051,546 ±      132,593  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    743312,103 ±        0,026    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2035,910 ±        8,623  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5    737805,739 ±    45569,125    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,100 ±        0,365  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5        36,282 ±      131,759    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        15,000                 counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         9,000                     ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5966,240 ±       70,873   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2465,319 ±       28,680  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    650352,071 ±        0,012    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2579,546 ±     1168,556  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    680621,609 ±   312856,799    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,075 ±        0,044  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        19,769 ±       11,655    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        19,000                 counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         9,000                     ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     47496,878 ±     2181,660   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       766,987 ±       35,116  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     25416,009 ±        0,002    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       673,541 ±        4,069  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     22321,890 ±     1002,429    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,017 ±        0,104  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,553 ±        3,454    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         5,000                 counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         3,000                     ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4555,504 ±       47,755   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       837,690 ±        8,721  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    289408,097 ±        0,019    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       808,398 ±     1161,648  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    279268,682 ±   400931,991    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,008 ±        0,072  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         2,875 ±       24,755    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5         6,000                 counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         3,000                     ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      4992,412 ±       90,918   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       611,453 ±       11,136  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    192757,551 ±        3,436    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       674,276 ±        0,899  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    212565,950 ±     3783,432    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,194 ±        1,540  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        61,717 ±      489,531    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         5,000                 counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         3,000                     ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      7010,287 ±      225,606   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       187,327 ±        5,992  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     42056,060 ±        0,009    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       204,613 ±     1078,865  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     45723,644 ±   241087,905    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         2,000                 counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         3,000                     ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      7212,252 ±       45,397   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       140,007 ±        0,871  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     30552,063 ±        0,047    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       102,311 ±      880,930  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     22310,746 ±   192102,249    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         1,000                 counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         2,000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      8958,754 ±      101,179   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2086,478 ±       23,692  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    366557,976 ±       49,101    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2022,851 ±       20,035  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    355380,758 ±     2958,383    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,088 ±        0,152  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        15,515 ±       26,890    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        15,000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5         8,000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     16331,588 ±      248,894   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       414,569 ±        6,376  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     39952,027 ±        0,014    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       474,259 ±     1067,733  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     45674,535 ±   102778,440    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,117 ±        1,004  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        11,213 ±       96,547    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         4,000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         3,000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     27758,420 ±      173,855   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       476,203 ±        2,885  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     27000,015 ±        0,002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       474,537 ±     1068,689  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     26888,111 ±    60557,393    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,668 ±        5,571  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        37,877 ±      315,882    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4,000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         6,000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2695,270 ±       39,399   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1712,202 ±       25,111  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    999760,161 ±        0,037    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1760,483 ±     1427,950  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5   1027720,883 ±   828755,520    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,025 ±        0,143  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        14,632 ±       84,157    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        13,000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         7,000                     ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                N/A  thrpt    5      9169,602 ±       32,376   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1126,012 ±        3,918  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5    193263,660 ±       44,979    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1209,052 ±     1157,390  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    207537,962 ±   198927,407    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,008 ±        0,044  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         1,429 ±        7,533    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         9,000                 counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         4,000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5     10145,065 ±       72,973   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      1953,775 ±       13,339  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    303123,090 ±       80,449    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1897,035 ±     1174,960  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    294383,872 ±   183775,745    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,067 ±        0,067  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        10,337 ±       10,459    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        14,000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5         7,000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     58410,919 ±      345,550   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       546,011 ±        3,268  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712,007 ±        0,001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       506,387 ±     1122,995  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     13643,731 ±    30254,005    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,623 ±        5,210  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        16,749 ±      140,058    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         4,000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5         5,000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     45780,437 ±      309,152   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       681,574 ±        4,490  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431,860 ±        0,189    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       674,654 ±        0,643  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     23194,027 ±      170,385    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,012 ±        0,044  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,430 ±        1,510    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         5,000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         8,000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     84509,655 ±      869,898   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       635,317 ±        6,765  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832,005 ±        0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       539,010 ±     1160,266  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     10035,478 ±    21602,777    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,667 ±        5,605  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5        12,465 ±      104,834    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         4,000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         3,000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5    112233,096 ±      477,045   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0,004 ±        0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      6576,895 ±       34,375   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      2041,877 ±       10,679  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    488623,692 ±        1,333    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      2034,052 ±       12,866  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5    486752,733 ±     5511,336    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,071 ±        0,281  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        16,929 ±       67,191    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        15,000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5         7,000                     ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                               N/A  thrpt    5      4853,527 ±       49,533   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                N/A  thrpt    5       269,196 ±        2,817  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                           N/A  thrpt    5     87296,087 ±        0,014    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306,873 ±     1078,702  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     99694,196 ±   350439,796    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,008 ±        0,071  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         2,693 ±       23,189    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                     N/A  thrpt    5         3,000                 counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                      N/A  thrpt    5         6,000                     ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   6159881,516 ±    87041,876   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3819,886 ±       53,894  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5       976,000 ±        0,001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      3804,721 ±     1429,278  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       972,287 ±      372,533    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,050 ±        0,044  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,013 ±        0,011    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        28,000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        12,000                     ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  47156267,862 ±  1145346,172   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       479,408 ±       11,687  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16,000 ±        0,001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       474,303 ±     1067,822  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        15,857 ±       35,788    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,531 ±        4,528  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,018 ±        0,153    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         4,000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5         7,000                     ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5   9895617,918 ±   101333,873   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3470,554 ±       36,072  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       552,000 ±        0,001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      3535,902 ±     1173,688  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       562,461 ±      190,677    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,054 ±        0,091  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,009 ±        0,015    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        26,000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        10,000                     ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  56217422,420 ±  3821702,861   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  47406178,393 ±   362327,926   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1686,757 ±       13,115  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5        56,000 ±        0,001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1751,695 ±     1423,801  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        58,144 ±       47,015    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,046 ±        0,132  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,002 ±        0,004    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5        13,000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5         5,000                     ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   8925793,940 ±   137815,455   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      4174,124 ±       64,938  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       736,000 ±        0,001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      4212,175 ±     1132,388  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       742,684 ±      197,296    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,071 ±        0,091  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,012 ±        0,016    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        31,000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        13,000                     ms
[info] IntBenchmark.readUPickle                                                                          N/A  thrpt    5  11483410,069 ±   109800,940   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                           N/A  thrpt    5      4844,697 ±       46,442  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                      N/A  thrpt    5       664,000 ±        0,001    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      4764,769 ±       22,810  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5       653,049 ±        8,026    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0,079 ±        0,088  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0,011 ±        0,012    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                N/A  thrpt    5        35,000                 counts
[info] IntBenchmark.readUPickle:·gc.time                                                                 N/A  thrpt    5        15,000                     ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  22970408,417 ±   259618,810   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2101,860 ±       22,452  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       144,000 ±        0,001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2158,725 ±     1169,476  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       147,894 ±       80,027    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,062 ±        0,098  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,004 ±        0,007    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        16,000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         6,000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  63393462,097 ±   955178,188   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      1933,393 ±       28,964  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48,000 ±        0,001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1888,403 ±     1170,208  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        46,885 ±       29,097    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,067 ±        0,143  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,002 ±        0,004    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        14,000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5         5,000                     ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  13985469,883 ±   929278,457   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      2772,351 ±      184,362  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       312,000 ±        0,001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2719,821 ±       11,310  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       306,166 ±       21,566    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,046 ±        0,067  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,005 ±        0,008    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        20,000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         8,000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  47374754,275 ± 12666135,297   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       963,238 ±      257,372  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32,000 ±        0,001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       941,264 ±     1419,093  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        30,953 ±       41,386    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,025 ±        0,132  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,001 ±        0,004    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         7,000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         2,000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  56433790,535 ±   357083,067   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  44803639,920 ±   420656,164   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2277,242 ±       21,089  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        80,000 ±        0,001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2298,988 ±     1420,253  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        80,787 ±       50,616    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,050 ±        0,044  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,002 ±        0,002    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        17,000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5         6,000                     ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2831125,369 ±    90791,136   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2316,855 ±       74,504  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1288,000 ±        0,001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2293,451 ±     1405,506  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      1276,126 ±      816,114    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,050 ±        0,044  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,028 ±        0,025    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        17,000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         6,000                     ms
[info] IntBenchmark.writeUPickle                                                                         N/A  thrpt    5  13130482,814 ±   220635,940   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                          N/A  thrpt    5      2736,342 ±       45,207  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                     N/A  thrpt    5       328,000 ±        0,001    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2843,414 ±     1168,989  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       340,886 ±      142,605    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,054 ±        0,072  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,006 ±        0,009    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                               N/A  thrpt    5        21,000                 counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                N/A  thrpt    5         8,000                     ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5    189874,732 ±      596,218   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      3483,063 ±       10,383  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     28872,002 ±        0,001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      3530,426 ±     1140,701  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     29263,689 ±     9396,544    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,071 ±        0,072  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,587 ±        0,593    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        26,000                 counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        10,000                     ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5     20843,575 ±     1308,413   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1620,418 ±      101,598  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    122352,021 ±        0,007    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1626,532 ±     1434,592  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    123037,444 ±   113131,850    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±        0,044  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,196 ±        3,247    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        12,000                 counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    166846,990 ±     2319,675   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1551,113 ±       21,611  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     14632,003 ±        0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1625,733 ±     1426,062  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     15341,850 ±    13586,062    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,046 ±        0,067  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,432 ±        0,632    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        12,000                 counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         5,000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5    552388,629 ±    51739,369   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1142,724 ±      106,856  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256,001 ±        0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1210,107 ±     1158,107  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3432,678 ±     3082,522    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,046 ±        0,104  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,129 ±        0,295    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         9,000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         4,000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    596571,407 ±     4205,195   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5       582,206 ±        4,218  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5      1536,001 ±        0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5       641,299 ±      279,413  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1691,901 ±      737,028    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,648 ±        5,403  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1,707 ±       14,223    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5         5,000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5         5,000                     ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5     22770,000 ±     2129,615   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       498,006 ±       46,724  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     34424,162 ±        1,227    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       507,049 ±     1124,807  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     35201,535 ±    78457,091    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,104 ±        0,808  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         7,129 ±       55,144    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    448815,915 ±     4703,861   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      3045,633 ±       31,802  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10680,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2983,133 ±     1420,253  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10459,253 ±     4914,307    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,058 ±        0,088  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,204 ±        0,307    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        22,000                 counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5         9,000                     ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    363205,598 ±     8797,456   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       961,843 ±       23,250  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4168,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1081,437 ±     1425,439  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4680,850 ±     6109,200    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±        0,108  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,126 ±        0,464    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                     ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1354439,240 ±     6699,345   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      2643,634 ±       12,657  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3072,000 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2707,558 ±       28,904  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3146,286 ±       35,469    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,037 ±        0,067  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,044 ±        0,078    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        20,000                 counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         8,000                     ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    122528,041 ±     3116,693   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      4433,151 ±      112,400  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56944,003 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      4357,928 ±     1439,473  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     55990,898 ±    19186,113    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,075 ±        0,091  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,962 ±        1,169    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        32,000                 counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        14,000                     ms
[info] ListOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    618672,076 ±    12040,618   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2701,190 ±       52,785  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      6872,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2708,687 ±       27,120  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      6891,201 ±      137,696    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,058 ±        0,119  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,148 ±        0,303    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        20,000                 counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         7,000                     ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    358496,088 ±     2778,114   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       546,667 ±        4,206  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      2400,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       506,654 ±     1123,695  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      2225,070 ±     4938,843    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,693 ±        5,833  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         3,042 ±       25,601    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                 counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    663339,750 ±   165795,630   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       485,511 ±      121,327  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1152,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       506,992 ±     1124,651  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1168,958 ±     2592,269    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,067 ±        0,489  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,154 ±        1,127    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   2198097,105 ±    31229,301   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1016,789 ±       13,771  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728,000 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       941,175 ±     1417,536  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       674,055 ±     1017,575    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,018 ±        0,094    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                 counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2317604,125 ±    12437,072   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                 counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    433792,336 ±     5503,850   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       623,922 ±        7,960  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       537,599 ±     1157,232  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1952,086 ±     4202,159    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,785 ±        6,532  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,859 ±       23,811    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         4,000                 counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] ListOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    197258,918 ±     1212,189   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       503,372 ±        2,846  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4016,002 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       506,630 ±     1123,915  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      4043,571 ±     8966,687    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,644 ±        5,368  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,139 ±       42,834    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                 counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     72075,701 ±    14731,061   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      2427,925 ±      495,246  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     53016,006 ±        0,002    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2434,665 ±     1431,804  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     53055,606 ±    25437,661    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,037 ±        0,036  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,822 ±        0,837    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        18,000                 counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5         8,000                     ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5    103787,054 ±     5981,631   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1863,822 ±      107,464  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28264,004 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1899,479 ±     1170,883  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     28830,106 ±    18311,676    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,046 ±        0,132  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,699 ±        2,032    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        14,000                 counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         6,000                     ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5    109419,409 ±     5762,835   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1676,882 ±       88,452  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24120,004 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1751,360 ±     1420,427  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     25199,178 ±    20570,855    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,042 ±        0,098  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,596 ±        1,397    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        13,000                 counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         5,000                     ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     20733,555 ±     1094,423   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1444,692 ±       76,347  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109661,618 ±       48,199    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1354,398 ±        5,925  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    102823,938 ±     5713,927    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±        0,122  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,211 ±        9,198    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        10,000                 counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         4,000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    177450,125 ±    32021,849   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1312,328 ±      236,768  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     11640,002 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1353,486 ±        6,430  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     12027,372 ±     2292,015    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,042 ±        0,080  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,375 ±        0,766    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5        10,000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         5,000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    558329,465 ±    37897,950   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       615,743 ±       41,566  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736,001 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       538,919 ±     1160,070  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1522,658 ±     3279,889    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,651 ±        5,470  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1,814 ±       15,244    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         4,000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         3,000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    540818,650 ±     5181,034   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         5,498 ±        0,053  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16,001 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     23810,471 ±      124,062   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       454,573 ±        2,496  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     30048,155 ±        1,182    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       372,063 ±     1332,677  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     24612,464 ±    88163,856    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,108 ±        0,888  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         7,166 ±       58,781    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         3,000                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         3,000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2585492,151 ±    70241,646   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3495,870 ±       94,505  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2128,000 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      3529,448 ±     1172,500  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2148,209 ±      696,186    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,062 ±        0,057  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,038 ±        0,034    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        26,000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        18,000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    863997,564 ±    13678,132   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       548,968 ±        8,657  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5      1000,000 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       506,510 ±     1123,307  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5       921,544 ±     2044,138    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,530 ±        4,522  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,964 ±        8,223    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         4,000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5         5,000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    341671,479 ±     1165,358   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       654,733 ±        2,248  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      3016,001 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       674,932 ±        2,018  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      3109,050 ±       16,464    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,058 ±        0,332  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0,269 ±        1,532    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5         5,000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5         2,000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    763833,320 ±   166276,989   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       574,606 ±      124,924  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1184,001 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       641,339 ±      279,414  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1327,782 ±      735,474    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0,645 ±        5,311  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         1,399 ±       11,565    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         5,000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         5,000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   4921864,666 ±   136408,544   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      1576,051 ±       43,726  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       504,000 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5      1615,591 ±     1421,824  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       516,561 ±      452,483    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,037 ±        0,067  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,012 ±        0,022    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        12,000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5         5,000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   9206563,402 ±   595167,303   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       748,737 ±       48,261  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       128,000 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       807,829 ±     1165,954  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       138,082 ±      198,507    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0,650 ±        5,507  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0,111 ±        0,939    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5         6,000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5         4,000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    215370,489 ±     3525,104   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1453,789 ±       23,541  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     10624,002 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1489,378 ±     1169,690  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     10890,473 ±     8736,044    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,029 ±        0,091  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,213 ±        0,667    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5        11,000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5         4,000                     ms
[info] MissingReqFieldBenchmark.readUPickle                                                              N/A  thrpt    5    325067,514 ±     2447,826   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                               N/A  thrpt    5       642,720 ±        4,976  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                          N/A  thrpt    5      3112,001 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       538,967 ±     1160,174  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      2611,298 ±     5621,048    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,663 ±        5,528  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         3,210 ±       26,772    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                    N/A  thrpt    5         4,000                 counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                     N/A  thrpt    5         3,000                     ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5   1029721,787 ±    53511,982   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        57,577 ±        2,983  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5        88,000 ±        0,001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       102,312 ±      880,937  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       159,857 ±     1376,413    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         1,000                 counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         2,000                     ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     70646,757 ±     3868,332   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3280,200 ±      179,985  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     73080,006 ±        0,001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3265,210 ±     1166,911  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     72778,498 ±    27234,385    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,058 ±        0,067  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,299 ±        1,498    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        24,000                 counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        11,000                     ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1182925,775 ±    80595,293   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       679,472 ±       46,253  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       904,000 ±        0,001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       675,280 ±        2,175  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       898,651 ±       62,530    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±        0,113  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,028 ±        0,154    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5,000                 counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2,000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5   1574761,994 ±    14050,467   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       440,243 ±        3,950  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440,000 ±        0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       474,525 ±     1068,655  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       474,429 ±     1067,946    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,645 ±        5,419  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,645 ±        5,419    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         5,000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1560114,193 ±    66961,448   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        15,861 ±        0,681  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        16,000 ±        0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     50723,294 ±      223,939   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2137,102 ±        9,951  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     66312,008 ±        0,001    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2172,213 ±     1159,103  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     67397,926 ±    35816,484    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,037 ±        0,067  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,163 ±        2,080    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        16,000                 counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         8,000                     ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    305422,729 ±    30268,924   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1195,406 ±      118,321  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160,001 ±        0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1210,354 ±     1158,371  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      6217,190 ±     5693,397    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,029 ±        0,108  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,149 ±        0,548    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         9,000                 counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         4,000                     ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     31505,381 ±      766,375   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1719,880 ±       41,732  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85920,014 ±        0,002    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1761,994 ±     1428,356  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     88062,317 ±    72148,005    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,029 ±        0,044  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1,457 ±        2,212    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        13,000                 counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5         5,000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    143667,822 ±      650,335   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1755,522 ±        7,849  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     19232,003 ±        0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1762,786 ±     1429,404  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     19312,355 ±    15675,238    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,046 ±        0,067  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,502 ±        0,734    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        13,000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         7,000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    391906,553 ±     6499,427   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1866,469 ±       31,140  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496,001 ±        0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1888,274 ±     1170,043  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7584,563 ±     4722,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,037 ±        0,088  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,150 ±        0,350    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        14,000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5         5,000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    460495,327 ±    30432,721   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1577,652 ±      104,126  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392,001 ±        0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1481,349 ±     1158,893  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      5072,106 ±     4211,401    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0,029 ±        0,122  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0,100 ±        0,416    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        11,000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         4,000                     ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     22346,063 ±      253,486   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       560,424 ±        6,200  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     39472,019 ±        0,005    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5       539,764 ±     1161,884  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     37976,804 ±    81748,817    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,071 ±        0,524  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4,982 ±       36,909    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         4,000                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5         1,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     89833,196 ±      881,532   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1857,488 ±       18,234  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     32544,005 ±        0,002    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5      1886,989 ±     1155,693  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     33061,481 ±    20260,464    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,021 ±        0,080  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,365 ±        1,403    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        14,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5         7,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5    120597,748 ±    43899,595   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       593,344 ±      215,775  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7744,004 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       539,829 ±     1162,023  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7215,422 ±    15883,232    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,058 ±        0,382  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,770 ±        5,137    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5         4,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5         2,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    204069,357 ±     7198,467   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5       840,198 ±       29,504  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480,002 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       807,341 ±     1158,978  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      6233,571 ±     9067,096    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,021 ±        0,080  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,161 ±        0,620    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5         6,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         3,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     20595,614 ±      761,871   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1178,607 ±       43,561  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     90064,021 ±        0,011    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1082,419 ±     1426,650  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     82627,996 ±   107928,014    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,012 ±        0,072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,956 ±        5,503    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5         8,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5         3,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    150819,779 ±    11301,477   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1517,843 ±      113,497  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     15840,003 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1625,317 ±     1428,094  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5     16945,828 ±    14463,230    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,037 ±        0,067  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,389 ±        0,683    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5        12,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5         5,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    575259,173 ±    14636,511   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       640,341 ±       16,454  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752,001 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       673,404 ±        4,894  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5      1842,539 ±       55,702    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,640 ±        5,380  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1,773 ±       14,898    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         5,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         3,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    606031,305 ±    16772,784   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        12,322 ±        0,338  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32,001 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     23589,782 ±      394,200   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5       483,588 ±        7,968  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     32264,157 ±        1,196    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5       507,094 ±     1124,918  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     33873,824 ±    75126,339    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,083 ±        0,586  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         5,555 ±       39,088    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5         4,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5         3,000                     ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     86406,700 ±      379,656   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1511,227 ±        6,239  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     27528,005 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1480,613 ±     1158,127  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     26966,454 ±    20977,831    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±        0,132  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,455 ±        2,398    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        11,000                 counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         6,000                     ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    154367,590 ±     2937,389   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       651,207 ±       12,319  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6640,003 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       674,905 ±        2,096  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6881,784 ±      135,807    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,050 ±        0,347  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,509 ±        3,533    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                 counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    232839,260 ±    18312,838   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       829,607 ±       65,203  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608,002 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,276 ±     1158,876  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      5449,266 ±     7658,111    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±        0,098  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,141 ±        0,658    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6,000                 counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         3,000                     ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     48626,517 ±      610,846   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      2014,541 ±       25,951  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65208,009 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      2032,191 ±       15,318  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     65780,202 ±     1279,595    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,062 ±        0,057  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,022 ±        1,851    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        15,000                 counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         7,000                     ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                             128  thrpt    5    133793,359 ±     2984,159   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1239,711 ±       27,803  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     14584,003 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1210,212 ±     1156,943  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     14240,448 ±    13654,857    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±        0,091  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,343 ±        1,075    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         9,000                 counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    295822,903 ±    29711,976   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1392,522 ±      139,271  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      7408,001 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1344,185 ±        5,484  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7154,799 ±      731,212    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±        0,098  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,222 ±        0,517    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10,000                 counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         4,000                     ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    570337,905 ±     6528,290   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       458,039 ±        5,339  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1264,001 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       372,073 ±     1332,711  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1026,408 ±     3674,335    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,075 ±        0,521  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,206 ±        1,434    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         3,000                 counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         2,000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    663358,162 ±    75401,057   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       350,691 ±       39,702  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       832,001 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       306,964 ±     1079,022  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       737,341 ±     2594,565    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                 counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    848562,969 ±   239064,555   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                   B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     33495,301 ±      432,051   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1970,169 ±       25,504  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     92576,013 ±        0,002    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2019,416 ±       22,698  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     94891,098 ±     1809,642    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±        0,036  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,173 ±        1,670    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        15,000                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                            128  thrpt    5    153685,892 ±      933,022   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1142,933 ±        6,373  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     11704,003 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1210,199 ±     1158,251  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12393,450 ±    11869,011    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,046 ±        0,132  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,469 ±        1,348    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         9,000                 counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] NestedStructsBenchmark.readCirce                                                                  128  thrpt    5     67912,274 ±    13474,274   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      3087,051 ±      516,167  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     71288,006 ±        0,001    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3092,866 ±     1359,500  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     71579,133 ±    35416,503    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,100 ±        0,193  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         2,273 ±        4,237    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        23,000                 counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                         128  thrpt    5       134,000                     ms
[info] NestedStructsBenchmark.readJacksonScala                                                           128  thrpt    5    142812,896 ±    19969,924   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1835,252 ±      256,297  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     20224,003 ±        0,001    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1899,651 ±     1170,477  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20944,890 ±    13031,426    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,075 ±        0,122  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,831 ±        1,365    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        14,000                 counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] NestedStructsBenchmark.readJsoniterScala                                                          128  thrpt    5    528048,492 ±    38405,915   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1379,604 ±      100,529  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4112,001 ±        0,001    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1480,187 ±     1156,719  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4407,287 ±     3284,794    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±        0,044  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,099 ±        0,125    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        11,000                 counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] NestedStructsBenchmark.readPlayJson                                                               128  thrpt    5     17987,248 ±      990,650   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2291,331 ±      126,680  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    200488,025 ±        0,008    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2307,928 ±     1424,843  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    201787,239 ±   119062,697    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,079 ±        0,250  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         6,889 ±       21,756    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        17,000                 counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5         9,000                     ms
[info] NestedStructsBenchmark.writeCirce                                                                 128  thrpt    5     43442,683 ±     2911,471   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      2456,900 ±      165,225  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     89008,010 ±        0,001    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2433,467 ±     1433,377  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     88264,680 ±    54781,651    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,133 ±        0,231  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         4,805 ±        8,167    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        18,000                 counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         8,000                     ms
[info] NestedStructsBenchmark.writeJacksonScala                                                          128  thrpt    5    257983,415 ±     1641,336   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1199,791 ±        7,761  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      7320,002 ±        0,001    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1217,140 ±     1164,078  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      7427,333 ±     7121,276    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±        0,067  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,102 ±        0,410    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         9,000                 counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4,000                     ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1255594,178 ±    10405,682   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       631,791 ±        5,286  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       792,000 ±        0,001    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       538,965 ±     1160,170  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       675,403 ±     1453,869    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,643 ±        5,315  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,804 ±        6,643    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         2,000                     ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1292516,430 ±    19607,723   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                 counts
[info] NestedStructsBenchmark.writePlayJson                                                              128  thrpt    5     37205,748 ±     2049,948   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1992,379 ±      108,908  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     84280,011 ±        0,002    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1899,061 ±     1171,047  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     80381,110 ±    50595,445    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,058 ±        0,067  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,462 ±        2,775    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        14,000                 counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         8,000                     ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    757141,106 ±    13954,556   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2205,171 ±       40,595  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4584,001 ±        0,001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2159,718 ±     1172,791  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4490,449 ±     2473,424    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,050 ±        0,072  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,104 ±        0,149    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        16,000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         6,000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1706390,053 ±   198760,390   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1214,316 ±      141,165  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1120,000 ±        0,001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1218,020 ±     1164,865  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1123,364 ±     1074,021    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,029 ±        0,108  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,027 ±        0,102    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         9,000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         4,000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   8437801,622 ±   236072,247   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       257,332 ±        7,238  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48,000 ±        0,001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       306,909 ±     1078,827  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        57,464 ±      202,004    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,009 ±        0,056  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,002 ±        0,011    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         3,000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         5,000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    260043,370 ±    26476,894   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1814,759 ±      184,587  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     10984,002 ±        0,001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1762,776 ±     1431,750  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     10648,523 ±     8133,023    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,037 ±        0,132  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,224 ±        0,789    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        13,000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5         6,000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5   1092966,639 ±    47612,804   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1633,171 ±       71,252  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2352,000 ±        0,001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1614,084 ±     1417,096  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2322,953 ±     2001,226    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,025 ±        0,067  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,036 ±        0,096    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        12,000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5         5,000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2759924,024 ±    54345,917   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1136,318 ±       22,424  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       648,000 ±        0,001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1216,662 ±     1164,384  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5       694,264 ±      669,689    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,021 ±        0,080  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,012 ±        0,046    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         9,000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         3,000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   6590739,134 ±    55045,146   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       736,987 ±        6,186  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       176,000 ±        0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       807,813 ±     1156,015  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       192,996 ±      277,650    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,667 ±        5,431  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,159 ±        1,298    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         6,000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         3,000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   6504293,556 ±  1073871,510   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       396,718 ±       65,497  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96,000 ±        0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       441,860 ±      989,264  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       104,894 ±      234,572    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,641 ±        5,388  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,152 ±        1,276    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         4,000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         8,000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    385897,517 ±    26285,502   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2171,331 ±      148,579  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      8856,001 ±        0,001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2171,925 ±     1175,111  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      8855,765 ±     4625,319    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,046 ±        0,067  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,187 ±        0,272    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        16,000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5         7,000                     ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     67002,001 ±     5226,453   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      1916,354 ±      149,395  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     45016,006 ±        0,001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      1888,053 ±     1161,711  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     44405,453 ±    28448,012    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,046 ±        0,104  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         1,072 ±        2,425    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        14,000                 counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5         6,000                     ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    124526,479 ±     2399,019   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1914,749 ±       37,050  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24200,003 ±        0,001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1899,596 ±     1168,292  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     23994,709 ±    14429,439    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,042 ±        0,113  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,526 ±        1,431    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5        14,000                 counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5         5,000                     ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    174611,807 ±     3778,954   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2565,033 ±       55,545  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23120,002 ±        0,001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2571,912 ±     1181,596  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     23188,177 ±    10850,420    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,037 ±        0,067  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,338 ±        0,602    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        19,000                 counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5         7,000                     ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     57201,130 ±      805,032   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3006,450 ±       41,721  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     82720,007 ±        0,002    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3128,989 ±     1433,370  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     86089,420 ±    39339,985    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,062 ±        0,080  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1,718 ±        2,198    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23,000                 counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5         9,000                     ms
[info] SetOfIntsBenchmark.readUPickle                                                                    128  thrpt    5     89209,692 ±      956,205   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1819,137 ±       19,085  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5     32096,005 ±        0,001    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1887,460 ±     1161,102  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     33306,590 ±    20606,596    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,025 ±        0,036  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,441 ±        0,629    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        14,000                 counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5         6,000                     ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    264306,875 ±     4759,024   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1257,461 ±       22,628  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      7488,002 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1209,064 ±     1155,813  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5      7201,316 ±     6902,190    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,029 ±        0,072  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0,174 ±        0,428    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5         9,000                 counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         3,000                     ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    639031,653 ±    12686,214   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       552,193 ±       10,696  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1360,001 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       539,771 ±     1161,898  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1329,056 ±     2861,071    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,079 ±        0,593  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,196 ±        1,472    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4,000                 counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    541661,024 ±    64066,297   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       291,830 ±       34,548  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848,001 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       306,928 ±     1078,894  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       907,185 ±     3191,247    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,002 ±        0,015  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,005 ±        0,043    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         3,000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    700123,801 ±     7733,592   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         7,118 ±        0,079  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16,001 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                 counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     38093,361 ±      451,524   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1897,993 ±       22,509  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     78416,011 ±        0,001    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2018,526 ±       22,558  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     83396,362 ±     1168,999    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,046 ±        0,067  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,892 ±        2,759    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        15,000                 counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5         6,000                     ms
[info] SetOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    162476,240 ±     7536,813   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1216,447 ±       56,922  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     11784,003 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1210,221 ±     1156,922  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11735,474 ±    11358,239    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,042 ±        0,113  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,404 ±        1,095    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5         9,000                 counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5         4,000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             128  thrpt    5   5768613,272 ±    82387,882   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      4251,357 ±       62,247  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5      1160,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      4216,799 ±     1175,404  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1150,532 ±      317,356    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,054 ±        0,044  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,015 ±        0,012    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        31,000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        12,000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       128  thrpt    5   8600516,710 ±   208228,877   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       917,997 ±       22,172  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       168,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       806,727 ±     1156,800  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       147,914 ±      216,989    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,017 ±        0,143  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,003 ±        0,027    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         6,000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5         4,000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      128  thrpt    5   5326042,815 ±    78240,128   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2517,552 ±       37,173  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       744,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2578,360 ±     1162,705  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       761,879 ±      340,293    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,062 ±        0,080  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,018 ±        0,024    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        19,000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         8,000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   9107754,642 ±   200275,242   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       972,143 ±       21,582  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       168,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       941,138 ±     1418,660  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       162,716 ±      246,178    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,012 ±        0,072  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,002 ±        0,012    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7,000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         3,000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          128  thrpt    5   6577529,879 ±    84351,012   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3276,454 ±       41,253  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5       784,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3252,934 ±     1147,970  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       778,502 ±      280,455    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±        0,119  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,009 ±        0,028    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        24,000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        10,000                     ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                           128  thrpt    5   5142240,870 ±    58608,332   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      2692,126 ±       30,770  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5       824,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2708,924 ±       28,177  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       829,151 ±       16,279    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,050 ±        0,044  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,015 ±        0,013    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        20,000                 counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         9,000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            128  thrpt    5   3387133,973 ±    39253,615   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       809,151 ±        9,401  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5       376,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806,603 ±     1154,367  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       374,792 ±      535,918    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±        0,122  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,014 ±        0,056    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6,000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         3,000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      128  thrpt    5   6274028,996 ±  1727334,548   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       605,875 ±      166,903  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       152,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       538,709 ±     1159,615  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       137,020 ±      299,206    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,539 ±        4,510  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,155 ±        1,299    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         4,000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5         3,000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2218299,661 ±    30212,860   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       687,765 ±        9,316  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       488,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       672,469 ±        2,716  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       477,153 ±        7,904    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,033 ±        0,091  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,024 ±        0,065    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5,000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         2,000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   9068169,013 ±    98496,517   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       875,769 ±        9,444  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       152,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       941,773 ±     1420,751  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       163,406 ±      245,884    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,021 ±        0,113  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,004 ±        0,020    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7,000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   9189091,887 ±    31199,046   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         128  thrpt    5   3568471,998 ±   294405,416   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1142,697 ±       94,449  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       504,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1206,968 ±     1155,771  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       530,217 ±      479,885    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,033 ±        0,072  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,015 ±        0,031    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         9,000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         4,000                     ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                          128  thrpt    5    451907,373 ±     2892,748   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       218,216 ±        1,476  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5       760,001 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       204,613 ±     1078,866  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       713,482 ±     3761,989    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,004 ±        0,032  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,013 ±        0,110    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         2,000                 counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          128  thrpt    5   1683372,914 ±    31282,664   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2977,511 ±       54,884  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      2784,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2981,649 ±     1419,703  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2788,944 ±     1369,637    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±        0,044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,031 ±        0,041    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                128  thrpt    5        22,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 128  thrpt    5         8,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    128  thrpt    5   2434725,752 ±    33030,845   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       680,640 ±        9,236  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       440,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       673,136 ±        3,500  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       435,154 ±        7,157    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,542 ±        4,488  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,352 ±        2,917    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         5,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5         4,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   128  thrpt    5   1550358,564 ±   180789,252   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1000,885 ±      116,353  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      1016,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       943,055 ±     1420,897  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       953,526 ±     1382,545    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,021 ±        0,080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,021 ±        0,080    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         7,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         2,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  128  thrpt    5   2860519,699 ±    94644,219   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       799,688 ±       26,373  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       440,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       807,293 ±     1155,713  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       445,310 ±      657,262    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,033 ±        0,146  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,018 ±        0,081    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         2,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       128  thrpt    5   1288050,464 ±     9095,585   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5       864,182 ±        6,043  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      1056,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       939,088 ±     1412,569  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1147,680 ±     1728,185    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±        0,113  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,025 ±        0,138    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         7,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         3,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                        128  thrpt    5   1228409,180 ±    10316,813   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1667,126 ±       14,359  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      2136,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1616,322 ±     1420,518  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2070,825 ±     1818,062    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,050 ±        0,091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,064 ±        0,117    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                              128  thrpt    5        12,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                               128  thrpt    5         4,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         128  thrpt    5   1939826,131 ±     9093,596   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1626,887 ±        7,722  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      1320,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1614,174 ±     1411,964  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1309,908 ±     1150,710    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,033 ±        0,122  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,027 ±        0,099    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                128  thrpt    5         5,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   128  thrpt    5   2898345,672 ±    67302,400   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5       751,349 ±       17,587  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       408,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5       807,599 ±     1161,129  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       438,288 ±      625,352    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,550 ±        4,468  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,302 ±        2,453    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         6,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5         5,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  128  thrpt    5   2968259,988 ±    41326,248   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1403,138 ±       19,735  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       744,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1485,193 ±     1157,077  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       787,349 ±      608,496    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,021 ±        0,080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,011 ±        0,042    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        11,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         4,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 128  thrpt    5   2995656,004 ±    42297,896   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       776,555 ±       11,053  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       408,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       672,879 ±        4,162  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       353,533 ±        5,988    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,021 ±        0,139  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,011 ±        0,073    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         2,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   2989494,300 ±    14305,357   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      128  thrpt    5   2955037,201 ±    30673,521   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1426,838 ±       15,051  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5       760,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1476,711 ±     1155,104  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       786,589 ±      615,863    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,046 ±        0,105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,024 ±        0,055    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        11,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         5,000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     13734,794 ±      166,107   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2051,117 ±       24,365  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    235032,872 ±       38,539    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2156,215 ±     1158,520  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5    247034,613 ±   131023,217    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,120 ±        0,151  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5        13,794 ±       17,259    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        16,000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         7,000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     16886,595 ±      298,066   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       238,260 ±        3,933  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     22206,560 ±       33,298    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       204,625 ±     1078,929  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     19111,605 ±   100770,904    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         2,000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         2,000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     41807,736 ±     1870,914   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       376,135 ±       16,913  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     14160,010 ±        0,003    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       306,925 ±     1078,883  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     11523,577 ±    40507,780    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,001 ±        0,008  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,056 ±        0,305    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         3,000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         6,000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      4286,389 ±       79,238   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1398,022 ±       25,864  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    513104,097 ±        0,013    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1353,198 ±        6,255  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    496662,030 ±     9552,262    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,017 ±        0,105  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         6,103 ±       38,280    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        10,000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        19,000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     69212,517 ±      638,177   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       883,913 ±        8,076  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20100,006 ±        0,146    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       809,281 ±     1161,212  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     18401,237 ±    26372,394    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,021 ±        0,098  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,474 ±        2,237    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         6,000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         3,000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     96797,506 ±     1514,043   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       632,731 ±       10,088  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10288,004 ±        0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       539,014 ±     1160,276  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      8771,291 ±    18881,391    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,666 ±        5,514  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        10,840 ±       89,715    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4,000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         3,000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5    108120,754 ±      593,308   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5        13,190 ±        0,071  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       192,004 ±        0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    406572,426 ±     5578,659   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2178,119 ±       29,701  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      8432,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2161,230 ±     1172,312  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      8365,890 ±     4506,947    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±        0,067  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,177 ±        0,260    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        16,000                 counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5         7,000                     ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    467509,641 ±    41729,762   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       548,932 ±       48,987  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1848,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       537,443 ±     1156,887  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1813,893 ±     3910,029    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,054 ±        0,257  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,182 ±        0,858    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         4,000                 counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         2,000                     ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1335101,386 ±    92432,056   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       698,966 ±       48,539  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824,000 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       673,400 ±        4,967  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       794,057 ±       52,576    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,651 ±        5,471  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,761 ±        6,397    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5,000                 counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         3,000                     ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    125026,617 ±     1738,944   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      4342,419 ±       60,912  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54664,003 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      4357,595 ±     1440,179  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     54847,538 ±    17672,774    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,071 ±        0,146  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,890 ±        1,831    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        32,000                 counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        13,000                     ms
[info] VectorOfBooleansBenchmark.readUPickle                                                             128  thrpt    5    627694,199 ±     7548,339   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1831,219 ±       21,989  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4592,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1887,383 ±     1156,368  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4733,969 ±     2926,287    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±        0,067  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,063 ±        0,168    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        14,000                 counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         6,000                     ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    429356,449 ±    84299,413   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       683,097 ±      134,146  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      2504,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,013 ±        6,373  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      2472,199 ±      487,886    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,686 ±        5,732  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,439 ±       20,346    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                 counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         4,000                     ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    754588,679 ±    25394,462   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       575,387 ±       19,152  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1200,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       539,848 ±     1162,064  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1122,358 ±     2416,134    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,071 ±        0,438  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,147 ±        0,908    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                 counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         2,000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   2274370,681 ±    18788,012   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1051,995 ±        8,768  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728,000 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1075,609 ±     1417,375  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       744,601 ±      984,031    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±        0,132  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,017 ±        0,091    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         8,000                 counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         4,000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   2350646,362 ±     7825,260   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    417762,535 ±     2780,761   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       617,895 ±        4,235  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       639,982 ±      276,480  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2411,085 ±     1036,661    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,777 ±        6,557  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,926 ±       24,690    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         5,000                 counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                            128  thrpt    5    217299,745 ±     4988,868   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       563,325 ±       13,058  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      4080,002 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       506,793 ±     1124,078  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3675,810 ±     8162,498    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,642 ±        5,390  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         4,632 ±       38,908    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] Benchmark result is saved to openjdk11.json
[success] Total time: 8098 s, completed 12 лип. 2018 11:14:53
