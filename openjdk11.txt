[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from build.sbt,version.sbt,release.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.6 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed 6 лип. 2018 12:51:42
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:989:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1075:75: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toFloat(pos: Int): Float = java.lang.Float.parseFloat(new String(buf, 0, mark, pos - mark))
[warn]                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:443:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:451:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:967:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] 5 warnings found
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:8:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]     private static final sun.misc.Unsafe UNSAFE;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:13:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]         sun.misc.Unsafe u = null;
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:16:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             Field f = sun.misc.Unsafe.class.getDeclaredField("theUnsafe");
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/java/com/github/plokhotnyuk/jsoniter_scala/core/UnsafeUtils.java:18:1: sun.misc.Unsafe is internal proprietary API and may be removed in a future release
[warn]             u = (sun.misc.Unsafe) f.get(null);
[info] Done compiling.
[info] Compiling 1 Scala source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.28.2-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.28.2-SNAPSHOT.jar ...
[info] Compiling 59 Scala sources and 1 Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:56: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = d0(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = d0(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           e0(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           e0(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "a"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "l"
[info]         case 1 => "r"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[String,String]): scala.collection.immutable.Map[String,String] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[String, String];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d8(in: JsonReader, default: (Double, Double)): (Double, Double) = if (in.isNextToken('['))
[info]         {
[info]           val _1: Double = in.readDouble();
[info]           val _2: Double = if (in.isNextToken(','))
[info]             in.readDouble()
[info]           else
[info]             in.commaError();
[info]           if (in.isNextToken(']'))
[info]             new (Double, Double)(_1, _2)
[info]           else
[info]             in.arrayEndError()
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d7(in: JsonReader, default: IndexedSeq[(Double, Double)]): IndexedSeq[(Double, Double)] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[(Double, Double)];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: IndexedSeq[IndexedSeq[(Double, Double)]]): IndexedSeq[IndexedSeq[(Double, Double)]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[(Double, Double)]];
[info]             do 
[info]               x.+=(d7(in, IndexedSeq.empty[(Double, Double)]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]]): IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]             do 
[info]               x.+=(d6(in, IndexedSeq.empty[IndexedSeq[(Double, Double)]]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]] = IndexedSeq.empty[IndexedSeq[IndexedSeq[(Double, Double)]]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d5(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _geometries: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 203916432 => if (in.isCharBufEqualsTo(l, "geometries"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometries = d11(in, _geometries)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection(geometries = _geometries)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[IndexedSeq[(Double, Double)]] = IndexedSeq.empty[IndexedSeq[(Double, Double)]];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d6(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Polygon(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d14(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Point): com.github.plokhotnyuk.jsoniter_scala.macros.Point = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: (Double, Double) = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d8(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Point(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d15(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.LineString): com.github.plokhotnyuk.jsoniter_scala.macros.LineString = if (in.isNextToken('{'))
[info]         {
[info]           var _coordinates: IndexedSeq[(Double, Double)] = IndexedSeq.empty[(Double, Double)];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d7(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.LineString(coordinates = _coordinates)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry): com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case -2116761119 => if (in.isCharBufEqualsTo(l, "MultiPolygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d4(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1065891849 => if (in.isCharBufEqualsTo(l, "MultiPoint"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d9(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1950410960 => if (in.isCharBufEqualsTo(l, "GeometryCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d10(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -627102946 => if (in.isCharBufEqualsTo(l, "MultiLineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d12(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1267133722 => if (in.isCharBufEqualsTo(l, "Polygon"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d13(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 77292912 => if (in.isCharBufEqualsTo(l, "Point"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d14(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 1806700869 => if (in.isCharBufEqualsTo(l, "LineString"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d15(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Feature): com.github.plokhotnyuk.jsoniter_scala.macros.Feature = if (in.isNextToken('{'))
[info]         {
[info]           var _properties: scala.collection.immutable.Map[String,String] = Map.empty[String, String];
[info]           var _geometry: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -926053069 => if (in.isCharBufEqualsTo(l, "properties"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _properties = d2(in, _properties)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1846020210 => if (in.isCharBufEqualsTo(l, "geometry"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geometry = d3(in, _geometry)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(2).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Feature(properties = _properties, geometry = _geometry)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d17(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]             do 
[info]               x.+=(d0(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d16(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection = if (in.isNextToken('{'))
[info]         {
[info]           var _features: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON];
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -290659267 => if (in.isCharBufEqualsTo(l, "features"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _features = d17(in, _features)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection(features = _features)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON): com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 685445846 => if (in.isCharBufEqualsTo(l, "Feature"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case -1377727980 => if (in.isCharBufEqualsTo(l, "FeatureCollection"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d16(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[String,String], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e8(x: (Double, Double), out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._1)
[info]         };
[info]         {
[info]           out.writeComma();
[info]           out.writeVal(x._2)
[info]         };
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e7(x: IndexedSeq[(Double, Double)], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e8(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: IndexedSeq[IndexedSeq[(Double, Double)]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e7(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: IndexedSeq[IndexedSeq[IndexedSeq[(Double, Double)]]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e6(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPolygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e5(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiPoint")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Geometry], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("GeometryCollection")
[info]         };
[info]         {
[info]           val v = x.geometries;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geometries");
[info]               e11(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("MultiLineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.Polygon, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Polygon")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e14(x: com.github.plokhotnyuk.jsoniter_scala.macros.Point, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Point")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("coordinates");
[info]           e8(x.coordinates, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e15(x: com.github.plokhotnyuk.jsoniter_scala.macros.LineString, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("LineString")
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Geometry, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPolygon)) => e4(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiPoint)) => e9(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.GeometryCollection)) => e10(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.MultiLineString)) => e12(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Polygon)) => e13(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Point)) => e14(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.LineString)) => e15(x, out)
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Feature, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("Feature")
[info]         };
[info]         {
[info]           val v = x.properties;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("properties");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geometry");
[info]           e3(x.geometry, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e17(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e0(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e16(x: com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("FeatureCollection")
[info]         };
[info]         {
[info]           val v = x.features;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("features");
[info]               e17(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSON, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.Feature)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.FeatureCollection)) => e16(x, out)
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "properties"
[info]         case 1 => "geometry"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "coordinates"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val geoJSONCodec: JsonValueCodec[GeoJSON] = make[GeoJSON](CodecMakerConfig()) // don't define implicit for recursive structures
[info]                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs]): Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(d0(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs): com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs = if (in.isNextToken('{'))
[info]         {
[info]           var _n: Option[com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs] = None;
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 110 => if (in.isCharBufEqualsTo(l, "n"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _n = d1(in, _n)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs(n = _n)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.n;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("n");
[info]               e0(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val nestedStructsCodec: JsonValueCodec[NestedStructs] = make[NestedStructs](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd, 300)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "bd"
[info]         case 2 => "os"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null, 300));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = new scala.collection.mutable.ListBuffer[Boolean]();
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.toList
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Char] = new Array[Char](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Double] = new Array[Double](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Float] = new Array[Float](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Int] = new Array[Int](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Long] = new Array[Long](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[Short] = new Array[Short](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.time.Year]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Year]] {
[info]       def nullValue: Array[java.time.Year] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Year], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Year]): Array[java.time.Year] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Year](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYear(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Year], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.Year] = new Array[java.time.Year](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearArrayCodec: JsonValueCodec[Array[Year]] = make[Array[Year]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'Array[java.time.YearMonth]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.YearMonth]] {
[info]       def nullValue: Array[java.time.YearMonth] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.YearMonth], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.YearMonth]): Array[java.time.YearMonth] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.YearMonth](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readYearMonth(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.YearMonth], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.YearMonth] = new Array[java.time.YearMonth](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val yearMonthArrayCodec: JsonValueCodec[Array[YearMonth]] = make[Array[YearMonth]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             var mi = 0;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>(mi))
[info]                   {
[info]                     mi = i;
[info]                     if (i.>=(x.length))
[info]                       x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                     else
[info]                       ()
[info]                   }
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               {
[info]                 if (mi.>(1).&&(mi.+(1).!=(x.length)))
[info]                   x = java.util.Arrays.copyOf(x, mi.+(1))
[info]                 else
[info]                   ();
[info]                 BitSet.fromBitMaskNoCopy(x)
[info]               }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                  ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "destination_addresses"
[info]         case 1 => "origin_addresses"
[info]         case 2 => "rows"
[info]         case 3 => "status"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "distance"
[info]         case 1 => "duration"
[info]         case 2 => "status"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "text"
[info]         case 1 => "value"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "s"
[info]         case 1 => "i"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](2);
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(2147483647)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 val i = v.>>>(6);
[info]                 if (i.>=(x.length))
[info]                   x = java.util.Arrays.copyOf(x, java.lang.Integer.highestOneBit(i).<<(1))
[info]                 else
[info]                   ();
[info]                 x(i).|=(1L.<<(v.&(63)))
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               BitSet.fromBitMaskNoCopy(x)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig(bitSetValueLimit = Int.MaxValue /*WARNING: don't do this for open-system*/))
[info]                                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:61:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = default;
[info]             if (x.nonEmpty)
[info]               x.clear()
[info]             else
[info]               ();
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:62:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "b"
[info]         case 1 => "s"
[info]         case 2 => "i"
[info]         case 3 => "l"
[info]         case 4 => "bl"
[info]         case 5 => "ch"
[info]         case 6 => "dbl"
[info]         case 7 => "f"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:63:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[info] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:64:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(f1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(f2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(f4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(f3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(f5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(f0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def f0(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "retweeted_status"
[info]         case 18 => "is_quote_status"
[info]         case 19 => "retweet_count"
[info]         case 20 => "favorite_count"
[info]         case 21 => "favorited"
[info]         case 22 => "retweeted"
[info]         case 23 => "possibly_sensitive"
[info]         case 24 => "lang"
[info]       };
[info]       private[this] def f1(i: Int): String = (i: @switch) match {
[info]         case 0 => "screen_name"
[info]         case 1 => "name"
[info]         case 2 => "id"
[info]         case 3 => "id_str"
[info]         case 4 => "indices"
[info]       };
[info]       private[this] def f2(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "expanded_url"
[info]         case 2 => "display_url"
[info]         case 3 => "indices"
[info]       };
[info]       private[this] def f3(i: Int): String = (i: @switch) match {
[info]         case 0 => "id"
[info]         case 1 => "id_str"
[info]         case 2 => "name"
[info]         case 3 => "screen_name"
[info]         case 4 => "location"
[info]         case 5 => "description"
[info]         case 6 => "url"
[info]         case 7 => "entities"
[info]         case 8 => "protected"
[info]         case 9 => "followers_count"
[info]         case 10 => "friends_count"
[info]         case 11 => "listed_count"
[info]         case 12 => "created_at"
[info]         case 13 => "favourites_count"
[info]         case 14 => "utc_offset"
[info]         case 15 => "time_zone"
[info]         case 16 => "geo_enabled"
[info]         case 17 => "verified"
[info]         case 18 => "statuses_count"
[info]         case 19 => "lang"
[info]         case 20 => "contributors_enabled"
[info]         case 21 => "is_translator"
[info]         case 22 => "is_translation_enabled"
[info]         case 23 => "profile_background_color"
[info]         case 24 => "profile_background_image_url"
[info]         case 25 => "profile_background_image_url_https"
[info]         case 26 => "profile_background_tile"
[info]         case 27 => "profile_image_url"
[info]         case 28 => "profile_image_url_https"
[info]         case 29 => "profile_banner_url"
[info]         case 30 => "profile_link_color"
[info]         case 31 => "profile_sidebar_border_color"
[info]         case 32 => "profile_sidebar_fill_color"
[info]         case 33 => "profile_text_color"
[info]         case 34 => "profile_use_background_image"
[info]         case 35 => "has_extended_profile"
[info]         case 36 => "default_profile"
[info]         case 37 => "default_profile_image"
[info]         case 38 => "following"
[info]         case 39 => "follow_request_sent"
[info]         case 40 => "notifications"
[info]         case 41 => "translator_type"
[info]       };
[info]       private[this] def f4(i: Int): String = (i: @switch) match {
[info]         case 0 => "url"
[info]         case 1 => "description"
[info]       };
[info]       private[this] def f5(i: Int): String = (i: @switch) match {
[info]         case 0 => "created_at"
[info]         case 1 => "id"
[info]         case 2 => "id_str"
[info]         case 3 => "text"
[info]         case 4 => "truncated"
[info]         case 5 => "entities"
[info]         case 6 => "source"
[info]         case 7 => "in_reply_to_status_id"
[info]         case 8 => "in_reply_to_status_id_str"
[info]         case 9 => "in_reply_to_user_id"
[info]         case 10 => "in_reply_to_user_id_str"
[info]         case 11 => "in_reply_to_screen_name"
[info]         case 12 => "user"
[info]         case 13 => "geo"
[info]         case 14 => "coordinates"
[info]         case 15 => "place"
[info]         case 16 => "contributors"
[info]         case 17 => "is_quote_status"
[info]         case 18 => "retweet_count"
[info]         case 19 => "favorite_count"
[info]         case 20 => "favorited"
[info]         case 21 => "retweeted"
[info]         case 22 => "possibly_sensitive"
[info]         case 23 => "lang"
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:36:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:45:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:52:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:62:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:79: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:91: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:9:103: dead code following this construct
[warn]   implicit val adtReaderWriter: ReadWriter[AdtBase] = ReadWriter.merge(macroRW[A], macroRW[B], macroRW[C])
[warn]                                                                                                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:10:66: dead code following this construct
[warn]   implicit val anyRefsReaderWriter: ReadWriter[AnyRefs] = macroRW[AnyRefs]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:11:78: dead code following this construct
[warn]   implicit val extractFieldsReaderWriter: ReadWriter[ExtractFields] = macroRW[ExtractFields]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:54: dead code following this construct
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                                                      ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:59: dead code following this construct
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:59: dead code following this construct
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:64: dead code following this construct
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:56: dead code following this construct
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:61: dead code following this construct
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                                                             ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:67: dead code following this construct
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                                                                   ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:66: dead code following this construct
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                                                                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:57: dead code following this construct
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                                                         ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:49: dead code following this construct
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                                                 ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:52: dead code following this construct
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:48: dead code following this construct
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:32:12: dead code following this construct
[warn]     macroRW[DistanceMatrix]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:40:78: dead code following this construct
[warn]   implicit val nestedStructsReaderWriter: ReadWriter[NestedStructs] = macroRW[NestedStructs]
[warn]                                                                              ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:41:84: dead code following this construct
[warn]   implicit val missingReqFieldsReaderWriter: ReadWriter[MissingReqFields] = macroRW[MissingReqFields]
[warn]                                                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:47:72: dead code following this construct
[warn]   implicit val primitivesReaderWriter: ReadWriter[Primitives] = macroRW[Primitives]
[warn]                                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:48: dead code following this construct
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:47: dead code following this construct
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                                               ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:56: dead code following this construct
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:52: dead code following this construct
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                                                    ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:56: dead code following this construct
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                                                        ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:48: dead code following this construct
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                                                ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:59: dead code following this construct
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                                                           ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:59:12: dead code following this construct
[warn]     macroRW[Tweet]
[warn]            ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:16:23: local val v1 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v1: ReadWriter[Point] = macroRW[Point]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:17:23: local val v2 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v2: ReadWriter[MultiPoint] = macroRW[MultiPoint]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:18:23: local val v3 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v3: ReadWriter[LineString] = macroRW[LineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:19:23: local val v4 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v4: ReadWriter[MultiLineString] = macroRW[MultiLineString]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:20:23: local val v5 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v5: ReadWriter[Polygon] = macroRW[Polygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:21:23: local val v6 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v6: ReadWriter[MultiPolygon] = macroRW[MultiPolygon]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:22:23: local val v7 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v7: ReadWriter[GeometryCollection] = macroRW[GeometryCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:23:23: local val v8 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v8: ReadWriter[Geometry] = macroRW[Geometry]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:24:23: local val v9 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v9: ReadWriter[FeatureCollection] = macroRW[FeatureCollection]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:25:23: local val v10 in value geoJsonReaderWriter is never used
[warn]     implicit lazy val v10: ReadWriter[Feature] = macroRW[Feature]
[warn]                       ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:29:18: local val v1 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Value] = macroRW[Value]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:30:18: local val v2 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Elements] = macroRW[Elements]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:31:18: local val v3 in value googleMApsAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[Rows] = macroRW[Rows]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:52:18: local val v1 in value twitterAPIReaderWriter is never used
[warn]     implicit val v1: ReadWriter[Urls] = macroRW[Urls]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:53:18: local val v2 in value twitterAPIReaderWriter is never used
[warn]     implicit val v2: ReadWriter[Url] = macroRW[Url]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:54:18: local val v3 in value twitterAPIReaderWriter is never used
[warn]     implicit val v3: ReadWriter[UserMentions] = macroRW[UserMentions]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:55:18: local val v4 in value twitterAPIReaderWriter is never used
[warn]     implicit val v4: ReadWriter[Entities] = macroRW[Entities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:56:18: local val v5 in value twitterAPIReaderWriter is never used
[warn]     implicit val v5: ReadWriter[UserEntities] = macroRW[UserEntities]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:57:18: local val v6 in value twitterAPIReaderWriter is never used
[warn]     implicit val v6: ReadWriter[User] = macroRW[User]
[warn]                  ^
[warn] /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/UPickleReaderWriters.scala:58:18: local val v7 in value twitterAPIReaderWriter is never used
[warn]     implicit val v7: ReadWriter[RetweetedStatus] = macroRW[RetweetedStatus]
[warn]                  ^
[warn] 63 warnings found
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT.jar ...
[info] Compiling 50 Scala sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
Processing 523 classes from /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Done packaging.
[info] Compiling 694 Java sources to /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/ivan/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.28.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/openjdk-11/bin/java -prof gc -rf json -rff openjdk11.json .*Benchmark.*
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0,00% complete, ETA 01:23:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292039,108 ops/s
[info] # Warmup Iteration   2: 781633,233 ops/s
[info] # Warmup Iteration   3: 783275,300 ops/s
[info] # Warmup Iteration   4: 786828,706 ops/s
[info] # Warmup Iteration   5: 785655,067 ops/s
[info] Iteration   1: 784894,290 ops/s
[info]                  ·gc.alloc.rate:                   2042,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4040,449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 784736,778 ops/s
[info]                  ·gc.alloc.rate:                   2042,391 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2691,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5397,586 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 773191,991 ops/s
[info]                  ·gc.alloc.rate:                   2012,076 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4116,540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 786018,925 ops/s
[info]                  ·gc.alloc.rate:                   2045,668 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4056,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 779193,981 ops/s
[info]                  ·gc.alloc.rate:                   2027,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4097,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   781607,193 ±(99.9%) 20798,995 ops/s [Average]
[info]   (min, avg, max) = (773191,991, 781607,193, 786018,925), stdev = 5401,433
[info]   CI (99.9%): [760808,198, 802406,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2034,059 ±(99.9%) 54,469 MB/sec [Average]
[info]   (min, avg, max) = (2012,076, 2034,059, 2045,668), stdev = 14,145
[info]   CI (99.9%): [1979,590, 2088,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2156,568 ±(99.9%) 1151,441 MB/sec [Average]
[info]   (min, avg, max) = (2014,823, 2156,568, 2691,401), stdev = 299,025
[info]   CI (99.9%): [1005,127, 3308,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4341,767 ±(99.9%) 2275,771 B/op [Average]
[info]   (min, avg, max) = (4040,449, 4341,767, 5397,586), stdev = 591,010
[info]   CI (99.9%): [2065,997, 6617,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,075 ±(99.9%) 0,134 B/op [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,125), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0,20% complete, ETA 02:11:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 776419,141 ops/s
[info] # Warmup Iteration   2: 1919667,621 ops/s
[info] # Warmup Iteration   3: 1909381,690 ops/s
[info] # Warmup Iteration   4: 1937664,118 ops/s
[info] # Warmup Iteration   5: 1925384,274 ops/s
[info] Iteration   1: 1934015,333 ops/s
[info]                  ·gc.alloc.rate:                   1287,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1099,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1927850,581 ops/s
[info]                  ·gc.alloc.rate:                   1283,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1104,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1920313,942 ops/s
[info]                  ·gc.alloc.rate:               1278,594 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1109,425 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1927465,126 ops/s
[info]                  ·gc.alloc.rate:                   1283,473 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1106,325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1927154,129 ops/s
[info]                  ·gc.alloc.rate:                   1283,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1107,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1927359,822 ±(99.9%) 18689,958 ops/s [Average]
[info]   (min, avg, max) = (1920313,942, 1927359,822, 1934015,333), stdev = 4853,723
[info]   CI (99.9%): [1908669,864, 1946049,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1283,292 ±(99.9%) 12,496 MB/sec [Average]
[info]   (min, avg, max) = (1278,594, 1283,292, 1287,751), stdev = 3,245
[info]   CI (99.9%): [1270,797, 1295,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1353,489 ±(99.9%) 6,487 MB/sec [Average]
[info]   (min, avg, max) = (1351,477, 1353,489, 1355,371), stdev = 1,685
[info]   CI (99.9%): [1347,002, 1359,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1105,333 ±(99.9%) 13,939 B/op [Average]
[info]   (min, avg, max) = (1099,861, 1105,333, 1109,425), stdev = 3,620
[info]   CI (99.9%): [1091,395, 1119,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,037 ±(99.9%) 0,085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,051), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0,40% complete, ETA 02:11:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3528467,633 ops/s
[info] # Warmup Iteration   2: 4113430,012 ops/s
[info] # Warmup Iteration   3: 4112339,857 ops/s
[info] # Warmup Iteration   4: 4112327,854 ops/s
[info] # Warmup Iteration   5: 4150597,210 ops/s
[info] Iteration   1: 4122672,566 ops/s
[info]                  ·gc.alloc.rate:               272,410 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 195,291 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 4153125,449 ops/s
[info]                  ·gc.alloc.rate:      274,458 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4142438,314 ops/s
[info]                  ·gc.alloc.rate:               273,710 MB/sec
[info]                  ·gc.alloc.rate.norm:          104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 194,365 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 4142639,505 ops/s
[info]                  ·gc.alloc.rate:      273,737 MB/sec
[info]                  ·gc.alloc.rate.norm: 104,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4139129,084 ops/s
[info]                  ·gc.alloc.rate:                   273,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              104,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     194,521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4140000,983 ±(99.9%) 42452,726 ops/s [Average]
[info]   (min, avg, max) = (4122672,566, 4140000,983, 4153125,449), stdev = 11024,838
[info]   CI (99.9%): [4097548,257, 4182453,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   273,554 ±(99.9%) 2,851 MB/sec [Average]
[info]   (min, avg, max) = (272,410, 273,554, 274,458), stdev = 0,740
[info]   CI (99.9%): [270,703, 276,406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (104,000, 104,000, 104,000), stdev = 0,001
[info]   CI (99.9%): [104,000, 104,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,907 ±(99.9%) 1078,822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,907, 511,534), stdev = 280,167
[info]   CI (99.9%): [≈ 0, 1385,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   116,835 ±(99.9%) 410,695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116,835, 195,291), stdev = 106,656
[info]   CI (99.9%): [≈ 0, 527,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,013), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0,60% complete, ETA 02:11:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63068,749 ops/s
[info] # Warmup Iteration   2: 189270,808 ops/s
[info] # Warmup Iteration   3: 189919,899 ops/s
[info] # Warmup Iteration   4: 190381,303 ops/s
[info] # Warmup Iteration   5: 189517,471 ops/s
[info] Iteration   1: 188371,750 ops/s
[info]                  ·gc.alloc.rate:                   1503,321 MB/sec
[info]                  ·gc.alloc.rate.norm:              12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11298,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,174 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 190399,456 ops/s
[info]                  ·gc.alloc.rate:               1519,618 MB/sec
[info]                  ·gc.alloc.rate.norm:          12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11189,451 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 190531,800 ops/s
[info]                  ·gc.alloc.rate:                   1520,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11186,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,344 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 189591,223 ops/s
[info]                  ·gc.alloc.rate:                   1513,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,610 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16881,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,173 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 189780,128 ops/s
[info]                  ·gc.alloc.rate:               1514,456 MB/sec
[info]                  ·gc.alloc.rate.norm:          12560,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11252,380 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   189734,871 ±(99.9%) 3311,079 ops/s [Average]
[info]   (min, avg, max) = (188371,750, 189734,871, 190531,800), stdev = 859,877
[info]   CI (99.9%): [186423,792, 193045,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1514,146 ±(99.9%) 26,306 MB/sec [Average]
[info]   (min, avg, max) = (1503,321, 1514,146, 1520,324), stdev = 6,832
[info]   CI (99.9%): [1487,840, 1540,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   12560,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12560,002, 12560,002, 12560,002), stdev = 0,001
[info]   CI (99.9%): [12560,002, 12560,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,106 ±(99.9%) 1169,949 MB/sec [Average]
[info]   (min, avg, max) = (1352,284, 1490,106, 2033,610), stdev = 303,832
[info]   CI (99.9%): [320,157, 2660,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12361,596 ±(99.9%) 9731,426 B/op [Average]
[info]   (min, avg, max) = (11186,381, 12361,596, 16881,658), stdev = 2527,221
[info]   CI (99.9%): [2630,170, 22093,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,138 ±(99.9%) 0,555 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,138, 0,344), stdev = 0,144
[info]   CI (99.9%): [≈ 0, 0,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 0,80% complete, ETA 02:10:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213718,591 ops/s
[info] # Warmup Iteration   2: 640682,261 ops/s
[info] # Warmup Iteration   3: 648197,896 ops/s
[info] # Warmup Iteration   4: 648069,917 ops/s
[info] # Warmup Iteration   5: 649892,308 ops/s
[info] Iteration   1: 646850,282 ops/s
[info]                  ·gc.alloc.rate:                   1906,991 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4900,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 649203,270 ops/s
[info]                  ·gc.alloc.rate:                   1914,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4890,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,151 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 647443,434 ops/s
[info]                  ·gc.alloc.rate:                   1908,639 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4909,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 647991,889 ops/s
[info]                  ·gc.alloc.rate:                   1910,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4915,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 646182,353 ops/s
[info]                  ·gc.alloc.rate:                   1905,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              4640,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4936,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   647534,246 ±(99.9%) 4431,899 ops/s [Average]
[info]   (min, avg, max) = (646182,353, 647534,246, 649203,270), stdev = 1150,950
[info]   CI (99.9%): [643102,346, 651966,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1909,100 ±(99.9%) 13,302 MB/sec [Average]
[info]   (min, avg, max) = (1905,186, 1909,100, 1914,177), stdev = 3,454
[info]   CI (99.9%): [1895,798, 1922,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4640,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4640,001, 4640,001, 4640,001), stdev = 0,001
[info]   CI (99.9%): [4640,001, 4640,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2020,381 ±(99.9%) 19,497 MB/sec [Average]
[info]   (min, avg, max) = (2014,237, 2020,381, 2026,747), stdev = 5,063
[info]   CI (99.9%): [2000,884, 2039,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4910,486 ±(99.9%) 66,540 B/op [Average]
[info]   (min, avg, max) = (4890,032, 4910,486, 4936,058), stdev = 17,280
[info]   CI (99.9%): [4843,946, 4977,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,091 ±(99.9%) 0,162 B/op [Average]
[info]   (min, avg, max) = (0,051, 0,091, 0,151), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1,00% complete, ETA 02:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1d4655e3/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 986457,324 ops/s
[info] # Warmup Iteration   2: 2364127,076 ops/s
[info] # Warmup Iteration   3: 2378881,920 ops/s
[info] # Warmup Iteration   4: 2389376,218 ops/s
[info] # Warmup Iteration   5: 2389224,452 ops/s
[info] Iteration   1: 2391297,066 ops/s
[info]                  ·gc.alloc.rate:                   777,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2395515,228 ops/s
[info]                  ·gc.alloc.rate:                   779,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2373404,065 ops/s
[info]                  ·gc.alloc.rate:                   772,036 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     447,441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2359849,213 ops/s
[info]                  ·gc.alloc.rate:                   767,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     900,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2395653,521 ops/s
[info]                  ·gc.alloc.rate:               779,222 MB/sec
[info]                  ·gc.alloc.rate.norm:          512,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 443,958 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2383143,818 ±(99.9%) 61294,260 ops/s [Average]
[info]   (min, avg, max) = (2359849,213, 2383143,818, 2395653,521), stdev = 15917,925
[info]   CI (99.9%): [2321849,558, 2444438,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   775,234 ±(99.9%) 19,890 MB/sec [Average]
[info]   (min, avg, max) = (767,698, 775,234, 779,323), stdev = 5,165
[info]   CI (99.9%): [755,345, 795,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (512,000, 512,000, 512,000), stdev = 0,001
[info]   CI (99.9%): [512,000, 512,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   810,095 ±(99.9%) 1164,105 MB/sec [Average]
[info]   (min, avg, max) = (674,386, 810,095, 1350,891), stdev = 302,314
[info]   CI (99.9%): [≈ 0, 1974,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   535,916 ±(99.9%) 785,786 B/op [Average]
[info]   (min, avg, max) = (443,358, 535,916, 900,949), stdev = 204,066
[info]   CI (99.9%): [≈ 0, 1321,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,027), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1,20% complete, ETA 02:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13228535,612 ops/s
[info] # Warmup Iteration   2: 17603254,049 ops/s
[info] # Warmup Iteration   3: 18201494,413 ops/s
[info] # Warmup Iteration   4: 17576960,521 ops/s
[info] # Warmup Iteration   5: 17876419,308 ops/s
[info] Iteration   1: 18258819,187 ops/s
[info]                  ·gc.alloc.rate:                   928,102 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     116,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18389635,853 ops/s
[info]                  ·gc.alloc.rate:               934,688 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57,582 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 18374995,759 ops/s
[info]                  ·gc.alloc.rate:                   933,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115,144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18329092,901 ops/s
[info]                  ·gc.alloc.rate:               931,687 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57,710 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 17883218,499 ops/s
[info]                  ·gc.alloc.rate:               909,210 MB/sec
[info]                  ·gc.alloc.rate.norm:          80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59,150 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   18247152,440 ±(99.9%) 807588,691 ops/s [Average]
[info]   (min, avg, max) = (17883218,499, 18247152,440, 18389635,853), stdev = 209728,218
[info]   CI (99.9%): [17439563,749, 19054741,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   927,526 ±(99.9%) 40,642 MB/sec [Average]
[info]   (min, avg, max) = (909,210, 927,526, 934,688), stdev = 10,555
[info]   CI (99.9%): [886,884, 968,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,771 ±(99.9%) 1420,487 MB/sec [Average]
[info]   (min, avg, max) = (672,098, 941,771, 1347,518), stdev = 368,896
[info]   CI (99.9%): [≈ 0, 2362,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   81,148 ±(99.9%) 121,306 B/op [Average]
[info]   (min, avg, max) = (57,582, 81,148, 116,153), stdev = 31,503
[info]   CI (99.9%): [≈ 0, 202,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,011), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1,41% complete, ETA 02:09:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13478623,197 ops/s
[info] # Warmup Iteration   2: 8844607,394 ops/s
[info] # Warmup Iteration   3: 8883363,947 ops/s
[info] # Warmup Iteration   4: 8881699,414 ops/s
[info] # Warmup Iteration   5: 8887156,305 ops/s
[info] Iteration   1: 8913701,631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8882273,268 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8912117,594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8889238,557 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8906107,174 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   8900687,645 ±(99.9%) 54441,001 ops/s [Average]
[info]   (min, avg, max) = (8882273,268, 8900687,645, 8913701,631), stdev = 14138,155
[info]   CI (99.9%): [8846246,643, 8955128,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1,61% complete, ETA 02:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111716,438 ops/s
[info] # Warmup Iteration   2: 352122,301 ops/s
[info] # Warmup Iteration   3: 351306,408 ops/s
[info] # Warmup Iteration   4: 351376,737 ops/s
[info] # Warmup Iteration   5: 349166,876 ops/s
[info] Iteration   1: 349388,749 ops/s
[info]                  ·gc.alloc.rate:               1140,114 MB/sec
[info]                  ·gc.alloc.rate.norm:          5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6083,498 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 348921,433 ops/s
[info]                  ·gc.alloc.rate:                   1138,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6096,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,282 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 351514,527 ops/s
[info]                  ·gc.alloc.rate:               1147,078 MB/sec
[info]                  ·gc.alloc.rate.norm:          5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3027,067 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 350620,617 ops/s
[info]                  ·gc.alloc.rate:               1144,196 MB/sec
[info]                  ·gc.alloc.rate.norm:          5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6075,564 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 351290,329 ops/s
[info]                  ·gc.alloc.rate:                   1146,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6067,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   350347,131 ±(99.9%) 4423,359 ops/s [Average]
[info]   (min, avg, max) = (348921,433, 350347,131, 351514,527), stdev = 1148,732
[info]   CI (99.9%): [345923,772, 354770,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1143,264 ±(99.9%) 14,397 MB/sec [Average]
[info]   (min, avg, max) = (1138,638, 1143,264, 1147,078), stdev = 3,739
[info]   CI (99.9%): [1128,866, 1157,661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5136,001, 5136,001, 5136,001), stdev = 0,001
[info]   CI (99.9%): [5136,001, 5136,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1217,143 ±(99.9%) 1164,720 MB/sec [Average]
[info]   (min, avg, max) = (676,067, 1217,143, 1354,092), stdev = 302,474
[info]   CI (99.9%): [52,423, 2381,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5469,956 ±(99.9%) 5258,669 B/op [Average]
[info]   (min, avg, max) = (3027,067, 5469,956, 6096,599), stdev = 1365,660
[info]   CI (99.9%): [211,287, 10728,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,075 ±(99.9%) 0,471 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,282), stdev = 0,122
[info]   CI (99.9%): [≈ 0, 0,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 1,81% complete, ETA 02:09:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1372843,428 ops/s
[info] # Warmup Iteration   2: 1941587,315 ops/s
[info] # Warmup Iteration   3: 1986283,768 ops/s
[info] # Warmup Iteration   4: 1959427,326 ops/s
[info] # Warmup Iteration   5: 2006700,128 ops/s
[info] Iteration   1: 2009102,139 ops/s
[info]                  ·gc.alloc.rate:                   3104,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2644,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2003689,439 ops/s
[info]                  ·gc.alloc.rate:                   3096,156 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3384,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2658,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2010551,955 ops/s
[info]                  ·gc.alloc.rate:                   3106,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2123,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1980143,660 ops/s
[info]                  ·gc.alloc.rate:                   3059,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2699,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2005912,681 ops/s
[info]                  ·gc.alloc.rate:                   3099,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              2432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2133,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   2001879,975 ±(99.9%) 47915,658 ops/s [Average]
[info]   (min, avg, max) = (1980143,660, 2001879,975, 2010551,955), stdev = 12443,544
[info]   CI (99.9%): [1953964,317, 2049795,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   3093,243 ±(99.9%) 73,848 MB/sec [Average]
[info]   (min, avg, max) = (3059,747, 3093,243, 3106,570), stdev = 19,178
[info]   CI (99.9%): [3019,396, 3167,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2432,000, 2432,000, 2432,000), stdev = 0,001
[info]   CI (99.9%): [2432,000, 2432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3117,668 ±(99.9%) 1411,870 MB/sec [Average]
[info]   (min, avg, max) = (2712,880, 3117,668, 3395,670), stdev = 366,658
[info]   CI (99.9%): [1705,797, 4529,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2451,964 ±(99.9%) 1138,505 B/op [Average]
[info]   (min, avg, max) = (2123,797, 2451,964, 2699,005), stdev = 295,666
[info]   CI (99.9%): [1313,459, 3590,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,022, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,046 ±(99.9%) 0,028 B/op [Average]
[info]   (min, avg, max) = (0,033, 0,046, 0,050), stdev = 0,007
[info]   CI (99.9%): [0,017, 0,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2,01% complete, ETA 02:09:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1195150,159 ops/s
[info] # Warmup Iteration   2: 10405643,343 ops/s
[info] # Warmup Iteration   3: 9970161,055 ops/s
[info] # Warmup Iteration   4: 10400094,301 ops/s
[info] # Warmup Iteration   5: 10277046,929 ops/s
[info] Iteration   1: 10381644,714 ops/s
[info]                  ·gc.alloc.rate:               1266,521 MB/sec
[info]                  ·gc.alloc.rate.norm:          192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101,890 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 10319265,090 ops/s
[info]                  ·gc.alloc.rate:                   1258,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     205,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10334991,989 ops/s
[info]                  ·gc.alloc.rate:                   1260,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 10388800,291 ops/s
[info]                  ·gc.alloc.rate:                   1267,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,628 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     203,849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 10368432,304 ops/s
[info]                  ·gc.alloc.rate:                   1264,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              192,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     204,447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   10358626,878 ±(99.9%) 116228,870 ops/s [Average]
[info]   (min, avg, max) = (10319265,090, 10358626,878, 10388800,291), stdev = 30184,268
[info]   CI (99.9%): [10242398,007, 10474855,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1263,662 ±(99.9%) 14,246 MB/sec [Average]
[info]   (min, avg, max) = (1258,944, 1263,662, 1267,409), stdev = 3,700
[info]   CI (99.9%): [1249,416, 1277,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,000, 192,000, 192,000), stdev = 0,001
[info]   CI (99.9%): [192,000, 192,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1210,650 ±(99.9%) 1159,243 MB/sec [Average]
[info]   (min, avg, max) = (672,115, 1210,650, 1346,768), stdev = 301,052
[info]   CI (99.9%): [51,407, 2369,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   183,993 ±(99.9%) 176,740 B/op [Average]
[info]   (min, avg, max) = (101,890, 183,993, 205,027), stdev = 45,899
[info]   CI (99.9%): [7,253, 360,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,009 ±(99.9%) 0,023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,016), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2,21% complete, ETA 02:08:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1368727,298 ops/s
[info] # Warmup Iteration   2: 2901726,895 ops/s
[info] # Warmup Iteration   3: 2851205,936 ops/s
[info] # Warmup Iteration   4: 2839675,715 ops/s
[info] # Warmup Iteration   5: 2869518,509 ops/s
[info] Iteration   1: 2861736,549 ops/s
[info]                  ·gc.alloc.rate:                   1876,422 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1116,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2889061,606 ops/s
[info]                  ·gc.alloc.rate:                   1894,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,923 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1107,467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2895575,846 ops/s
[info]                  ·gc.alloc.rate:                   1898,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1106,092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 2900027,614 ops/s
[info]                  ·gc.alloc.rate:                   1901,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2896120,966 ops/s
[info]                  ·gc.alloc.rate:                   1898,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,729 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1107,528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2888504,516 ±(99.9%) 59580,245 ops/s [Average]
[info]   (min, avg, max) = (2861736,549, 2888504,516, 2900027,614), stdev = 15472,800
[info]   CI (99.9%): [2828924,271, 2948084,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1893,973 ±(99.9%) 39,101 MB/sec [Average]
[info]   (min, avg, max) = (1876,422, 1893,973, 1901,750), stdev = 10,154
[info]   CI (99.9%): [1854,872, 1933,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1032,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1032,000, 1032,000, 1032,000), stdev = 0,001
[info]   CI (99.9%): [1032,000, 1032,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1898,876 ±(99.9%) 1164,262 MB/sec [Average]
[info]   (min, avg, max) = (1358,025, 1898,876, 2037,729), stdev = 302,355
[info]   CI (99.9%): [734,614, 3063,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1034,994 ±(99.9%) 641,794 B/op [Average]
[info]   (min, avg, max) = (736,943, 1034,994, 1116,942), stdev = 166,672
[info]   CI (99.9%): [393,201, 1676,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,031 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,023, 0,034), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2,41% complete, ETA 02:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10322867,545 ops/s
[info] # Warmup Iteration   2: 12117257,654 ops/s
[info] # Warmup Iteration   3: 12324770,294 ops/s
[info] # Warmup Iteration   4: 12375682,340 ops/s
[info] # Warmup Iteration   5: 12378261,922 ops/s
[info] Iteration   1: 12236888,872 ops/s
[info]                  ·gc.alloc.rate:                   1554,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     259,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 12349038,092 ops/s
[info]                  ·gc.alloc.rate:               1569,014 MB/sec
[info]                  ·gc.alloc.rate.norm:          200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171,439 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 12394298,056 ops/s
[info]                  ·gc.alloc.rate:                   1574,908 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,210 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12362997,020 ops/s
[info]                  ·gc.alloc.rate:                   1570,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,449 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     257,364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12367777,554 ops/s
[info]                  ·gc.alloc.rate:                   1571,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              200,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   12342199,919 ±(99.9%) 235315,997 ops/s [Average]
[info]   (min, avg, max) = (12236888,872, 12342199,919, 12394298,056), stdev = 61110,817
[info]   CI (99.9%): [12106883,922, 12577515,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1568,240 ±(99.9%) 29,706 MB/sec [Average]
[info]   (min, avg, max) = (1554,977, 1568,240, 1574,908), stdev = 7,715
[info]   CI (99.9%): [1538,535, 1597,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (200,000, 200,000, 200,000), stdev = 0,001
[info]   CI (99.9%): [200,000, 200,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1615,829 ±(99.9%) 1417,198 MB/sec [Average]
[info]   (min, avg, max) = (1344,950, 1615,829, 2021,449), stdev = 368,042
[info]   CI (99.9%): [198,631, 3033,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   206,189 ±(99.9%) 183,427 B/op [Average]
[info]   (min, avg, max) = (170,957, 206,189, 259,365), stdev = 47,635
[info]   CI (99.9%): [22,762, 389,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,008), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 2,61% complete, ETA 02:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 281965,704 ops/s
[info] # Warmup Iteration   2: 728874,029 ops/s
[info] # Warmup Iteration   3: 726888,935 ops/s
[info] # Warmup Iteration   4: 725565,187 ops/s
[info] # Warmup Iteration   5: 726135,681 ops/s
[info] Iteration   1: 725708,835 ops/s
[info]                  ·gc.alloc.rate:                   1899,466 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4403,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,135 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 729417,364 ops/s
[info]                  ·gc.alloc.rate:                   1909,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4386,123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 723884,258 ops/s
[info]                  ·gc.alloc.rate:                   1894,963 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4424,744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,136 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 727436,845 ops/s
[info]                  ·gc.alloc.rate:               1904,292 MB/sec
[info]                  ·gc.alloc.rate.norm:          4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2937,151 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 722281,974 ops/s
[info]                  ·gc.alloc.rate:                   1890,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4440,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   725745,855 ±(99.9%) 10857,998 ops/s [Average]
[info]   (min, avg, max) = (722281,974, 725745,855, 729417,364), stdev = 2819,788
[info]   CI (99.9%): [714887,857, 736603,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1899,720 ±(99.9%) 28,644 MB/sec [Average]
[info]   (min, avg, max) = (1890,516, 1899,720, 1909,365), stdev = 7,439
[info]   CI (99.9%): [1871,076, 1928,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4120,001, 4120,001, 4120,001), stdev = 0,001
[info]   CI (99.9%): [4120,000, 4120,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1898,628 ±(99.9%) 1164,710 MB/sec [Average]
[info]   (min, avg, max) = (1357,571, 1898,628, 2037,369), stdev = 302,472
[info]   CI (99.9%): [733,918, 3063,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4118,402 ±(99.9%) 2543,949 B/op [Average]
[info]   (min, avg, max) = (2937,151, 4118,402, 4440,037), stdev = 660,656
[info]   CI (99.9%): [1574,453, 6662,351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,108 ±(99.9%) 0,263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,108, 0,180), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 2,81% complete, ETA 02:08:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1477482,665 ops/s
[info] # Warmup Iteration   2: 2390898,974 ops/s
[info] # Warmup Iteration   3: 2450643,246 ops/s
[info] # Warmup Iteration   4: 2450443,899 ops/s
[info] # Warmup Iteration   5: 2444153,455 ops/s
[info] Iteration   1: 2448523,415 ops/s
[info]                  ·gc.alloc.rate:                   2090,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1295,627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2467618,838 ops/s
[info]                  ·gc.alloc.rate:                   2107,387 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1717,352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2466201,468 ops/s
[info]                  ·gc.alloc.rate:                   2105,941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1291,607 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2461233,203 ops/s
[info]                  ·gc.alloc.rate:                   2101,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1295,941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2467346,037 ops/s
[info]                  ·gc.alloc.rate:                   2106,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1294,825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2462184,592 ±(99.9%) 31035,315 ops/s [Average]
[info]   (min, avg, max) = (2448523,415, 2462184,592, 2467618,838), stdev = 8059,773
[info]   CI (99.9%): [2431149,277, 2493219,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2102,529 ±(99.9%) 26,311 MB/sec [Average]
[info]   (min, avg, max) = (2090,953, 2102,529, 2107,387), stdev = 6,833
[info]   CI (99.9%): [2076,218, 2128,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1344,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1344,000, 1344,000, 1344,000), stdev = 0,001
[info]   CI (99.9%): [1344,000, 1344,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2157,695 ±(99.9%) 1152,027 MB/sec [Average]
[info]   (min, avg, max) = (2015,696, 2157,695, 2692,801), stdev = 299,178
[info]   CI (99.9%): [1005,667, 3309,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1379,071 ±(99.9%) 728,207 B/op [Average]
[info]   (min, avg, max) = (1291,607, 1379,071, 1717,352), stdev = 189,113
[info]   CI (99.9%): [650,864, 2107,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,032 ±(99.9%) 0,059 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,032, 0,054), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3,01% complete, ETA 02:07:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2542022,338 ops/s
[info] # Warmup Iteration   2: 18384244,190 ops/s
[info] # Warmup Iteration   3: 20920138,728 ops/s
[info] # Warmup Iteration   4: 21124904,843 ops/s
[info] # Warmup Iteration   5: 20423928,059 ops/s
[info] Iteration   1: 21204778,562 ops/s
[info]                  ·gc.alloc.rate:                   646,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,085 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,194 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 21182258,211 ops/s
[info]                  ·gc.alloc.rate:                   646,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 21176040,462 ops/s
[info]                  ·gc.alloc.rate:               645,823 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50,003 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 21172255,300 ops/s
[info]                  ·gc.alloc.rate:      645,754 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21219099,166 ops/s
[info]                  ·gc.alloc.rate:                   647,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   21190886,340 ±(99.9%) 77753,400 ops/s [Average]
[info]   (min, avg, max) = (21172255,300, 21190886,340, 21219099,166), stdev = 20192,311
[info]   CI (99.9%): [21113132,940, 21268639,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   646,295 ±(99.9%) 2,272 MB/sec [Average]
[info]   (min, avg, max) = (645,754, 646,295, 647,110), stdev = 0,590
[info]   CI (99.9%): [644,023, 648,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,759 ±(99.9%) 1159,722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,759, 674,209), stdev = 301,176
[info]   CI (99.9%): [≈ 0, 1698,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   40,005 ±(99.9%) 86,114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40,005, 50,090), stdev = 22,364
[info]   CI (99.9%): [≈ 0, 126,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,532 ±(99.9%) 4,491 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,532, 2,618), stdev = 1,166
[info]   CI (99.9%): [≈ 0, 5,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,039 ±(99.9%) 0,333 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,039, 0,194), stdev = 0,087
[info]   CI (99.9%): [≈ 0, 0,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3,21% complete, ETA 02:07:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1d4655e3/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3328712,697 ops/s
[info] # Warmup Iteration   2: 7176126,600 ops/s
[info] # Warmup Iteration   3: 7216732,125 ops/s
[info] # Warmup Iteration   4: 7205844,353 ops/s
[info] # Warmup Iteration   5: 7201545,873 ops/s
[info] Iteration   1: 7195083,407 ops/s
[info]                  ·gc.alloc.rate:                   1974,921 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     444,023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 7221943,512 ops/s
[info]                  ·gc.alloc.rate:                   1982,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     443,066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 7180585,192 ops/s
[info]                  ·gc.alloc.rate:                   1970,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     446,002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 7188146,757 ops/s
[info]                  ·gc.alloc.rate:                   1973,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     445,927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 7205669,205 ops/s
[info]                  ·gc.alloc.rate:                   1977,469 MB/sec
[info]                  ·gc.alloc.rate.norm:              432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     296,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   7198285,615 ±(99.9%) 62106,752 ops/s [Average]
[info]   (min, avg, max) = (7180585,192, 7198285,615, 7221943,512), stdev = 16128,926
[info]   CI (99.9%): [7136178,863, 7260392,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1975,777 ±(99.9%) 17,089 MB/sec [Average]
[info]   (min, avg, max) = (1970,910, 1975,777, 1982,450), stdev = 4,438
[info]   CI (99.9%): [1958,688, 1992,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (432,000, 432,000, 432,000), stdev = 0,001
[info]   CI (99.9%): [432,000, 432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1898,588 ±(99.9%) 1163,081 MB/sec [Average]
[info]   (min, avg, max) = (1358,286, 1898,588, 2036,749), stdev = 302,048
[info]   CI (99.9%): [735,507, 3061,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   415,150 ±(99.9%) 254,949 B/op [Average]
[info]   (min, avg, max) = (296,733, 415,150, 446,002), stdev = 66,209
[info]   CI (99.9%): [160,202, 670,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,104), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,020 B/op [Average]
[info]   (min, avg, max) = (0,009, 0,015, 0,023), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 3,41% complete, ETA 02:07:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18697065,930 ops/s
[info] # Warmup Iteration   2: 22824707,003 ops/s
[info] # Warmup Iteration   3: 23382474,985 ops/s
[info] # Warmup Iteration   4: 23602300,042 ops/s
[info] # Warmup Iteration   5: 23506133,277 ops/s
[info] Iteration   1: 23559849,928 ops/s
[info]                  ·gc.alloc.rate:                   718,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,208 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 23633658,724 ops/s
[info]                  ·gc.alloc.rate:                   720,845 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 23605864,536 ops/s
[info]                  ·gc.alloc.rate:               719,797 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44,855 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 23604920,135 ops/s
[info]                  ·gc.alloc.rate:                   719,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 23541870,766 ops/s
[info]                  ·gc.alloc.rate:                   718,065 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   23589232,818 ±(99.9%) 144115,014 ops/s [Average]
[info]   (min, avg, max) = (23541870,766, 23589232,818, 23633658,724), stdev = 37426,212
[info]   CI (99.9%): [23445117,803, 23733347,832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   719,425 ±(99.9%) 4,347 MB/sec [Average]
[info]   (min, avg, max) = (718,065, 719,425, 720,845), stdev = 1,129
[info]   CI (99.9%): [715,078, 723,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,687 ±(99.9%) 1153,289 MB/sec [Average]
[info]   (min, avg, max) = (672,629, 807,687, 1343,455), stdev = 299,506
[info]   CI (99.9%): [≈ 0, 1960,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   53,906 ±(99.9%) 77,276 B/op [Average]
[info]   (min, avg, max) = (44,855, 53,906, 89,805), stdev = 20,068
[info]   CI (99.9%): [≈ 0, 131,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,652 ±(99.9%) 5,305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,652, 3,116), stdev = 1,378
[info]   CI (99.9%): [≈ 0, 5,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,044 ±(99.9%) 0,354 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,044, 0,208), stdev = 0,092
[info]   CI (99.9%): [≈ 0, 0,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 3,61% complete, ETA 02:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20855889,032 ops/s
[info] # Warmup Iteration   2: 25247036,359 ops/s
[info] # Warmup Iteration   3: 25217136,042 ops/s
[info] # Warmup Iteration   4: 25261157,663 ops/s
[info] # Warmup Iteration   5: 25235283,893 ops/s
[info] Iteration   1: 24947347,984 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 25224667,534 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 25260061,787 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 25190485,788 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 25229590,932 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   25170430,805 ±(99.9%) 489514,401 ops/s [Average]
[info]   (min, avg, max) = (24947347,984, 25170430,805, 25260061,787), stdev = 127125,335
[info]   CI (99.9%): [24680916,404, 25659945,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 3,82% complete, ETA 02:06:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 547382,342 ops/s
[info] # Warmup Iteration   2: 1305320,141 ops/s
[info] # Warmup Iteration   3: 1311281,941 ops/s
[info] # Warmup Iteration   4: 1306170,602 ops/s
[info] # Warmup Iteration   5: 1308959,924 ops/s
[info] Iteration   1: 1306597,750 ops/s
[info]                  ·gc.alloc.rate:                   1972,445 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2446,335 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1310622,312 ops/s
[info]                  ·gc.alloc.rate:                   1978,600 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2442,243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1309543,160 ops/s
[info]                  ·gc.alloc.rate:                   1976,874 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2446,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1309531,934 ops/s
[info]                  ·gc.alloc.rate:                   1977,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1631,515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1305265,424 ops/s
[info]                  ·gc.alloc.rate:                   1970,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2457,670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1308312,116 ±(99.9%) 8730,398 ops/s [Average]
[info]   (min, avg, max) = (1305265,424, 1308312,116, 1310622,312), stdev = 2267,257
[info]   CI (99.9%): [1299581,718, 1317042,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1975,038 ±(99.9%) 13,600 MB/sec [Average]
[info]   (min, avg, max) = (1970,232, 1975,038, 1978,600), stdev = 3,532
[info]   CI (99.9%): [1961,439, 1988,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2376,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2376,000, 2376,000, 2376,000), stdev = 0,001
[info]   CI (99.9%): [2376,000, 2376,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1899,123 ±(99.9%) 1165,787 MB/sec [Average]
[info]   (min, avg, max) = (1357,565, 1899,123, 2037,954), stdev = 302,751
[info]   CI (99.9%): [733,336, 3064,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2284,845 ±(99.9%) 1406,514 B/op [Average]
[info]   (min, avg, max) = (1631,515, 2284,845, 2457,670), stdev = 365,267
[info]   CI (99.9%): [878,331, 3691,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,055 ±(99.9%) 0,126 B/op [Average]
[info]   (min, avg, max) = (0,025, 0,055, 0,100), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4,02% complete, ETA 02:06:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 333989,757 ops/s
[info] # Warmup Iteration   2: 379951,283 ops/s
[info] # Warmup Iteration   3: 389059,083 ops/s
[info] # Warmup Iteration   4: 391103,846 ops/s
[info] # Warmup Iteration   5: 388728,709 ops/s
[info] Iteration   1: 390568,663 ops/s
[info]                  ·gc.alloc.rate:                   2150,083 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8136,133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 391046,673 ops/s
[info]                  ·gc.alloc.rate:                   2152,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8142,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,335 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 389942,802 ops/s
[info]                  ·gc.alloc.rate:                   2146,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8175,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 391371,301 ops/s
[info]                  ·gc.alloc.rate:                   2154,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8159,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 390732,197 ops/s
[info]                  ·gc.alloc.rate:                   2150,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              8664,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,177 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8183,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   390732,327 ±(99.9%) 2071,164 ops/s [Average]
[info]   (min, avg, max) = (389942,802, 390732,327, 391371,301), stdev = 537,875
[info]   CI (99.9%): [388661,163, 392803,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2150,860 ±(99.9%) 11,704 MB/sec [Average]
[info]   (min, avg, max) = (2146,446, 2150,860, 2154,507), stdev = 3,040
[info]   CI (99.9%): [2139,156, 2162,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8664,001, 8664,001, 8664,001), stdev = 0,001
[info]   CI (99.9%): [8664,001, 8664,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2025,563 ±(99.9%) 18,470 MB/sec [Average]
[info]   (min, avg, max) = (2019,086, 2025,563, 2031,177), stdev = 4,797
[info]   CI (99.9%): [2007,093, 2044,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8159,294 ±(99.9%) 78,544 B/op [Average]
[info]   (min, avg, max) = (8136,133, 8159,294, 8183,113), stdev = 20,398
[info]   CI (99.9%): [8080,750, 8237,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,184 ±(99.9%) 0,421 B/op [Average]
[info]   (min, avg, max) = (0,084, 0,184, 0,335), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,22% complete, ETA 02:06:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314255,551 ops/s
[info] # Warmup Iteration   2: 546565,312 ops/s
[info] # Warmup Iteration   3: 549959,168 ops/s
[info] # Warmup Iteration   4: 547291,088 ops/s
[info] # Warmup Iteration   5: 543566,131 ops/s
[info] Iteration   1: 546035,095 ops/s
[info]                  ·gc.alloc.rate:                   729,963 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1941,996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 547348,679 ops/s
[info]                  ·gc.alloc.rate:                   731,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1940,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 546806,497 ops/s
[info]                  ·gc.alloc.rate:                   730,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1942,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,060 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 541003,492 ops/s
[info]                  ·gc.alloc.rate:               723,215 MB/sec
[info]                  ·gc.alloc.rate.norm:          2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,409 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1964,921 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 546746,211 ops/s
[info]                  ·gc.alloc.rate:                   730,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              2104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1944,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,180 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   545587,995 ±(99.9%) 10030,869 ops/s [Average]
[info]   (min, avg, max) = (541003,492, 545587,995, 547348,679), stdev = 2604,985
[info]   CI (99.9%): [535557,125, 555618,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   729,302 ±(99.9%) 13,291 MB/sec [Average]
[info]   (min, avg, max) = (723,215, 729,302, 731,593), stdev = 3,452
[info]   CI (99.9%): [716,011, 742,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2104,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2104,001, 2104,001, 2104,001), stdev = 0,001
[info]   CI (99.9%): [2104,001, 2104,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,791 ±(99.9%) 2,550 MB/sec [Average]
[info]   (min, avg, max) = (673,757, 674,791, 675,409), stdev = 0,662
[info]   CI (99.9%): [672,241, 677,341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1946,778 ±(99.9%) 39,419 B/op [Average]
[info]   (min, avg, max) = (1940,367, 1946,778, 1964,921), stdev = 10,237
[info]   CI (99.9%): [1907,359, 1986,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,084 ±(99.9%) 0,263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,084, 0,180), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 4,42% complete, ETA 02:06:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1119508,554 ops/s
[info] # Warmup Iteration   2: 1208511,098 ops/s
[info] # Warmup Iteration   3: 1221391,548 ops/s
[info] # Warmup Iteration   4: 1217409,587 ops/s
[info] # Warmup Iteration   5: 1217633,893 ops/s
[info] Iteration   1: 1219558,268 ops/s
[info]                  ·gc.alloc.rate:                   812,056 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     870,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1222157,836 ops/s
[info]                  ·gc.alloc.rate:                   813,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     866,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1221387,735 ops/s
[info]                  ·gc.alloc.rate:                   813,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1733,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1221309,523 ops/s
[info]                  ·gc.alloc.rate:               813,248 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 866,097 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1219158,923 ops/s
[info]                  ·gc.alloc.rate:               811,797 MB/sec
[info]                  ·gc.alloc.rate.norm:          1048,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 867,612 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   1220714,457 ±(99.9%) 4963,900 ops/s [Average]
[info]   (min, avg, max) = (1219158,923, 1220714,457, 1222157,836), stdev = 1289,109
[info]   CI (99.9%): [1215750,557, 1225678,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   812,800 ±(99.9%) 3,232 MB/sec [Average]
[info]   (min, avg, max) = (811,797, 812,800, 813,774), stdev = 0,839
[info]   CI (99.9%): [809,568, 816,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1048,000, 1048,000, 1048,000), stdev = 0,001
[info]   CI (99.9%): [1048,000, 1048,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,249 ±(99.9%) 1156,758 MB/sec [Average]
[info]   (min, avg, max) = (672,065, 807,249, 1344,629), stdev = 300,406
[info]   CI (99.9%): [≈ 0, 1964,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1040,775 ±(99.9%) 1490,144 B/op [Average]
[info]   (min, avg, max) = (866,097, 1040,775, 1733,027), stdev = 386,986
[info]   CI (99.9%): [≈ 0, 2530,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,032 ±(99.9%) 0,135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,032, 0,080), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 4,62% complete, ETA 02:05:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92684,073 ops/s
[info] # Warmup Iteration   2: 125564,400 ops/s
[info] # Warmup Iteration   3: 125997,031 ops/s
[info] # Warmup Iteration   4: 125426,437 ops/s
[info] # Warmup Iteration   5: 124660,007 ops/s
[info] Iteration   1: 125397,048 ops/s
[info]                  ·gc.alloc.rate:                   4335,053 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4759,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59737,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,784 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 125355,352 ops/s
[info]                  ·gc.alloc.rate:                   4333,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51278,453 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,784 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 125534,773 ops/s
[info]                  ·gc.alloc.rate:                   4339,456 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51222,964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,261 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 125061,186 ops/s
[info]                  ·gc.alloc.rate:                   4323,455 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4770,237 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60030,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,786 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 125652,994 ops/s
[info]                  ·gc.alloc.rate:                   4343,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              54408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51209,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,521 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   125400,271 ±(99.9%) 858,802 ops/s [Average]
[info]   (min, avg, max) = (125061,186, 125400,271, 125652,994), stdev = 223,028
[info]   CI (99.9%): [124541,469, 126259,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4334,967 ±(99.9%) 28,823 MB/sec [Average]
[info]   (min, avg, max) = (4323,455, 4334,967, 4343,302), stdev = 7,485
[info]   CI (99.9%): [4306,144, 4363,790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54408,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54408,003, 54408,003, 54408,004), stdev = 0,001
[info]   CI (99.9%): [54408,003, 54408,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4357,526 ±(99.9%) 1432,241 MB/sec [Average]
[info]   (min, avg, max) = (4084,301, 4357,526, 4770,237), stdev = 371,949
[info]   CI (99.9%): [2925,285, 5789,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54695,798 ±(99.9%) 18241,367 B/op [Average]
[info]   (min, avg, max) = (51209,875, 54695,798, 60030,481), stdev = 4737,225
[info]   CI (99.9%): [36454,431, 72937,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,627 ±(99.9%) 0,902 B/op [Average]
[info]   (min, avg, max) = (0,261, 0,627, 0,786), stdev = 0,234
[info]   CI (99.9%): [≈ 0, 1,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 4,82% complete, ETA 02:05:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 626342,897 ops/s
[info] # Warmup Iteration   2: 678169,234 ops/s
[info] # Warmup Iteration   3: 675752,093 ops/s
[info] # Warmup Iteration   4: 684671,370 ops/s
[info] # Warmup Iteration   5: 683534,266 ops/s
[info] Iteration   1: 681221,437 ops/s
[info]                  ·gc.alloc.rate:                   2084,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4664,380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,144 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 683120,628 ops/s
[info]                  ·gc.alloc.rate:                   2090,457 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6212,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,144 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 676773,855 ops/s
[info]                  ·gc.alloc.rate:                   2070,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4710,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 674838,597 ops/s
[info]                  ·gc.alloc.rate:                   2065,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4731,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 683354,775 ops/s
[info]                  ·gc.alloc.rate:                   2090,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4679,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle":
[info]   679861,859 ±(99.9%) 14843,398 ops/s [Average]
[info]   (min, avg, max) = (674838,597, 679861,859, 683354,775), stdev = 3854,783
[info]   CI (99.9%): [665018,461, 694705,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2080,285 ±(99.9%) 45,079 MB/sec [Average]
[info]   (min, avg, max) = (2065,110, 2080,285, 2090,659), stdev = 11,707
[info]   CI (99.9%): [2035,206, 2125,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4816,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,001, 4816,001, 4816,001), stdev = 0,001
[info]   CI (99.9%): [4816,001, 4816,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2160,246 ±(99.9%) 1154,927 MB/sec [Average]
[info]   (min, avg, max) = (2018,775, 2160,246, 2696,712), stdev = 299,931
[info]   CI (99.9%): [1005,318, 3315,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4999,726 ±(99.9%) 2612,980 B/op [Average]
[info]   (min, avg, max) = (4664,380, 4999,726, 6212,692), stdev = 678,583
[info]   CI (99.9%): [2386,746, 7612,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,096 ±(99.9%) 0,185 B/op [Average]
[info]   (min, avg, max) = (0,048, 0,096, 0,144), stdev = 0,048
[info]   CI (99.9%): [≈ 0, 0,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5,02% complete, ETA 02:05:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346112,997 ops/s
[info] # Warmup Iteration   2: 418162,603 ops/s
[info] # Warmup Iteration   3: 415732,564 ops/s
[info] # Warmup Iteration   4: 415765,669 ops/s
[info] # Warmup Iteration   5: 417086,038 ops/s
[info] Iteration   1: 416060,161 ops/s
[info]                  ·gc.alloc.rate:                   645,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2552,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,707 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 417763,507 ops/s
[info]                  ·gc.alloc.rate:                   647,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2542,170 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,235 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 417400,619 ops/s
[info]                  ·gc.alloc.rate:               647,069 MB/sec
[info]                  ·gc.alloc.rate.norm:          2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2534,218 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 417089,062 ops/s
[info]                  ·gc.alloc.rate:               646,649 MB/sec
[info]                  ·gc.alloc.rate.norm:          2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2536,113 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 417134,243 ops/s
[info]                  ·gc.alloc.rate:               646,633 MB/sec
[info]                  ·gc.alloc.rate.norm:          2440,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2533,387 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   417089,519 ±(99.9%) 2444,948 ops/s [Average]
[info]   (min, avg, max) = (416060,161, 417089,519, 417763,507), stdev = 634,945
[info]   CI (99.9%): [414644,571, 419534,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   646,618 ±(99.9%) 3,770 MB/sec [Average]
[info]   (min, avg, max) = (645,045, 646,618, 647,692), stdev = 0,979
[info]   CI (99.9%): [642,848, 650,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2440,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2440,001, 2440,001, 2440,001), stdev = 0,001
[info]   CI (99.9%): [2440,001, 2440,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,037 ±(99.9%) 6,344 MB/sec [Average]
[info]   (min, avg, max) = (671,381, 673,037, 674,814), stdev = 1,647
[info]   CI (99.9%): [666,693, 679,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2539,700 ±(99.9%) 30,778 B/op [Average]
[info]   (min, avg, max) = (2533,387, 2539,700, 2552,610), stdev = 7,993
[info]   CI (99.9%): [2508,922, 2570,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,684 ±(99.9%) 5,759 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,684, 3,359), stdev = 1,496
[info]   CI (99.9%): [≈ 0, 6,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,589 ±(99.9%) 21,785 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,589, 12,707), stdev = 5,658
[info]   CI (99.9%): [≈ 0, 24,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,22% complete, ETA 02:05:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 482505,524 ops/s
[info] # Warmup Iteration   2: 713176,783 ops/s
[info] # Warmup Iteration   3: 714008,548 ops/s
[info] # Warmup Iteration   4: 715149,660 ops/s
[info] # Warmup Iteration   5: 713153,384 ops/s
[info] Iteration   1: 708002,747 ops/s
[info]                  ·gc.alloc.rate:                   521,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1137,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 713552,099 ops/s
[info]                  ·gc.alloc.rate:                   525,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1486,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,551 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 713722,287 ops/s
[info]                  ·gc.alloc.rate:                   526,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1485,822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 712579,417 ops/s
[info]                  ·gc.alloc.rate:                   525,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1490,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 713712,728 ops/s
[info]                  ·gc.alloc.rate:      525,986 MB/sec
[info]                  ·gc.alloc.rate.norm: 1160,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   712313,856 ±(99.9%) 9457,613 ops/s [Average]
[info]   (min, avg, max) = (708002,747, 712313,856, 713722,287), stdev = 2456,112
[info]   CI (99.9%): [702856,243, 721771,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   525,004 ±(99.9%) 6,990 MB/sec [Average]
[info]   (min, avg, max) = (521,808, 525,004, 526,020), stdev = 1,815
[info]   CI (99.9%): [518,014, 531,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1160,001, 1160,001, 1160,001), stdev = 0,001
[info]   CI (99.9%): [1160,000, 1160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   506,812 ±(99.9%) 1124,145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,812, 674,857), stdev = 291,937
[info]   CI (99.9%): [≈ 0, 1630,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1119,935 ±(99.9%) 2480,503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1119,935, 1490,410), stdev = 644,179
[info]   CI (99.9%): [≈ 0, 3600,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,250), stdev = 0,105
[info]   CI (99.9%): [≈ 0, 0,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,138 ±(99.9%) 0,893 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,138, 0,551), stdev = 0,232
[info]   CI (99.9%): [≈ 0, 1,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5,42% complete, ETA 02:04:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2976158,473 ops/s
[info] # Warmup Iteration   2: 3133249,172 ops/s
[info] # Warmup Iteration   3: 3125940,876 ops/s
[info] # Warmup Iteration   4: 3136358,360 ops/s
[info] # Warmup Iteration   5: 3130280,330 ops/s
[info] Iteration   1: 3126748,168 ops/s
[info]                  ·gc.alloc.rate:                   1446,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676,642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3138862,885 ops/s
[info]                  ·gc.alloc.rate:                   1451,942 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,316 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674,036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3117006,939 ops/s
[info]                  ·gc.alloc.rate:                   1441,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,420 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     679,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3131786,876 ops/s
[info]                  ·gc.alloc.rate:                   1448,703 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     676,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 3133744,818 ops/s
[info]                  ·gc.alloc.rate:                   1449,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     677,099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   3129629,937 ±(99.9%) 31897,457 ops/s [Average]
[info]   (min, avg, max) = (3117006,939, 3129629,937, 3138862,885), stdev = 8283,668
[info]   CI (99.9%): [3097732,480, 3161527,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1447,587 ±(99.9%) 14,933 MB/sec [Average]
[info]   (min, avg, max) = (1441,698, 1447,587, 1451,942), stdev = 3,878
[info]   CI (99.9%): [1432,653, 1462,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345,775 ±(99.9%) 6,500 MB/sec [Average]
[info]   (min, avg, max) = (1344,162, 1345,775, 1348,064), stdev = 1,688
[info]   CI (99.9%): [1339,276, 1352,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   676,802 ±(99.9%) 7,314 B/op [Average]
[info]   (min, avg, max) = (674,036, 676,802, 679,384), stdev = 1,899
[info]   CI (99.9%): [669,488, 684,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,036 B/op [Average]
[info]   (min, avg, max) = (0,010, 0,025, 0,032), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 5,62% complete, ETA 02:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3165916,628 ops/s
[info] # Warmup Iteration   2: 3320667,114 ops/s
[info] # Warmup Iteration   3: 3344789,388 ops/s
[info] # Warmup Iteration   4: 3334288,680 ops/s
[info] # Warmup Iteration   5: 3339358,993 ops/s
[info] Iteration   1: 3329780,103 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3341804,761 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3349922,351 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3340875,530 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3325320,972 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   3337540,743 ±(99.9%) 38127,073 ops/s [Average]
[info]   (min, avg, max) = (3325320,972, 3337540,743, 3349922,351), stdev = 9901,480
[info]   CI (99.9%): [3299413,670, 3375667,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5,82% complete, ETA 02:04:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 381394,886 ops/s
[info] # Warmup Iteration   2: 459035,355 ops/s
[info] # Warmup Iteration   3: 452377,631 ops/s
[info] # Warmup Iteration   4: 451637,717 ops/s
[info] # Warmup Iteration   5: 450292,044 ops/s
[info] Iteration   1: 452165,380 ops/s
[info]                  ·gc.alloc.rate:                   650,374 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2343,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,366 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 453828,020 ops/s
[info]                  ·gc.alloc.rate:                   652,882 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2335,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 452515,373 ops/s
[info]                  ·gc.alloc.rate:               650,884 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2332,975 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 451492,215 ops/s
[info]                  ·gc.alloc.rate:               649,464 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2338,260 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 445136,369 ops/s
[info]                  ·gc.alloc.rate:                   640,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,993 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2369,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,147 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   451027,472 ±(99.9%) 13096,838 ops/s [Average]
[info]   (min, avg, max) = (445136,369, 451027,472, 453828,020), stdev = 3401,207
[info]   CI (99.9%): [437930,634, 464124,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   648,768 ±(99.9%) 18,989 MB/sec [Average]
[info]   (min, avg, max) = (640,235, 648,768, 652,882), stdev = 4,931
[info]   CI (99.9%): [629,779, 667,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   671,673 ±(99.9%) 6,346 MB/sec [Average]
[info]   (min, avg, max) = (669,993, 671,673, 673,538), stdev = 1,648
[info]   CI (99.9%): [665,327, 678,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2344,018 ±(99.9%) 56,501 B/op [Average]
[info]   (min, avg, max) = (2332,975, 2344,018, 2369,232), stdev = 14,673
[info]   CI (99.9%): [2287,517, 2400,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,780 ±(99.9%) 6,586 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,780, 3,840), stdev = 1,710
[info]   CI (99.9%): [≈ 0, 7,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,717 ±(99.9%) 22,924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,717, 13,366), stdev = 5,953
[info]   CI (99.9%): [≈ 0, 25,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 6,02% complete, ETA 02:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187627,729 ops/s
[info] # Warmup Iteration   2: 194508,165 ops/s
[info] # Warmup Iteration   3: 196314,520 ops/s
[info] # Warmup Iteration   4: 196976,543 ops/s
[info] # Warmup Iteration   5: 196509,367 ops/s
[info] Iteration   1: 194273,450 ops/s
[info]                  ·gc.alloc.rate:      495,703 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 196149,557 ops/s
[info]                  ·gc.alloc.rate:               500,501 MB/sec
[info]                  ·gc.alloc.rate.norm:          4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4104,957 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 196308,880 ops/s
[info]                  ·gc.alloc.rate:                   500,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5409,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,983 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 195802,874 ops/s
[info]                  ·gc.alloc.rate:                   499,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5423,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,669 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 195275,929 ops/s
[info]                  ·gc.alloc.rate:      498,216 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle":
[info]   195562,138 ±(99.9%) 3165,542 ops/s [Average]
[info]   (min, avg, max) = (194273,450, 195562,138, 196308,880), stdev = 822,081
[info]   CI (99.9%): [192396,596, 198727,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   498,983 ±(99.9%) 8,073 MB/sec [Average]
[info]   (min, avg, max) = (495,703, 498,983, 500,852), stdev = 2,097
[info]   CI (99.9%): [490,910, 507,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   372,212 ±(99.9%) 1333,279 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,212, 674,783), stdev = 346,248
[info]   CI (99.9%): [≈ 0, 1705,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2987,721 ±(99.9%) 10702,840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2987,721, 5423,743), stdev = 2779,494
[info]   CI (99.9%): [≈ 0, 13690,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,640 ±(99.9%) 5,331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,640, 3,116), stdev = 1,385
[info]   CI (99.9%): [≈ 0, 5,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,130 ±(99.9%) 42,749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,130, 24,983), stdev = 11,102
[info]   CI (99.9%): [≈ 0, 47,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 6,22% complete, ETA 02:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21432,881 ops/s
[info] # Warmup Iteration   2: 26324,202 ops/s
[info] # Warmup Iteration   3: 26520,199 ops/s
[info] # Warmup Iteration   4: 26445,830 ops/s
[info] # Warmup Iteration   5: 26484,104 ops/s
[info] Iteration   1: 26403,842 ops/s
[info]                  ·gc.alloc.rate:                   1652,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80125,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,482 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 26592,367 ops/s
[info]                  ·gc.alloc.rate:                   1663,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119373,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,464 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 26637,730 ops/s
[info]                  ·gc.alloc.rate:                   1666,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79536,560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,230 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 26512,299 ops/s
[info]                  ·gc.alloc.rate:                   1658,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120025,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,707 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 26499,668 ops/s
[info]                  ·gc.alloc.rate:               1657,873 MB/sec
[info]                  ·gc.alloc.rate.norm:          98480,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 80168,236 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   26529,181 ±(99.9%) 347,846 ops/s [Average]
[info]   (min, avg, max) = (26403,842, 26529,181, 26637,730), stdev = 90,335
[info]   CI (99.9%): [26181,335, 26877,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1659,940 ±(99.9%) 21,753 MB/sec [Average]
[info]   (min, avg, max) = (1652,171, 1659,940, 1666,716), stdev = 5,649
[info]   CI (99.9%): [1638,187, 1681,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (98480,015, 98480,016, 98480,017), stdev = 0,001
[info]   CI (99.9%): [98480,014, 98480,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,771 ±(99.9%) 1419,037 MB/sec [Average]
[info]   (min, avg, max) = (1344,238, 1615,771, 2021,925), stdev = 368,519
[info]   CI (99.9%): [196,734, 3034,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   95845,708 ±(99.9%) 83858,851 B/op [Average]
[info]   (min, avg, max) = (79536,560, 95845,708, 120025,357), stdev = 21777,877
[info]   CI (99.9%): [11986,858, 179704,559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,976 ±(99.9%) 5,429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,976, 3,707), stdev = 1,410
[info]   CI (99.9%): [≈ 0, 7,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,43% complete, ETA 02:03:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25738,868 ops/s
[info] # Warmup Iteration   2: 38785,674 ops/s
[info] # Warmup Iteration   3: 38982,861 ops/s
[info] # Warmup Iteration   4: 39023,705 ops/s
[info] # Warmup Iteration   5: 39040,358 ops/s
[info] Iteration   1: 39096,487 ops/s
[info]                  ·gc.alloc.rate:               978,340 MB/sec
[info]                  ·gc.alloc.rate.norm:          39384,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27174,976 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 39044,447 ops/s
[info]                  ·gc.alloc.rate:                   977,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27238,704 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,678 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 39003,041 ops/s
[info]                  ·gc.alloc.rate:                   975,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54561,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,680 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 39174,986 ops/s
[info]                  ·gc.alloc.rate:               980,312 MB/sec
[info]                  ·gc.alloc.rate.norm:          39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27175,789 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 38838,400 ops/s
[info]                  ·gc.alloc.rate:                   971,856 MB/sec
[info]                  ·gc.alloc.rate.norm:              39384,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54874,254 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,687 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   39031,472 ±(99.9%) 483,546 ops/s [Average]
[info]   (min, avg, max) = (38838,400, 39031,472, 39174,986), stdev = 125,575
[info]   CI (99.9%): [38547,926, 39515,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   976,693 ±(99.9%) 12,160 MB/sec [Average]
[info]   (min, avg, max) = (971,856, 976,693, 980,312), stdev = 3,158
[info]   CI (99.9%): [964,532, 988,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39384,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (39384,010, 39384,011, 39384,011), stdev = 0,001
[info]   CI (99.9%): [39384,009, 39384,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,670 ±(99.9%) 1428,545 MB/sec [Average]
[info]   (min, avg, max) = (675,055, 946,670, 1354,099), stdev = 370,989
[info]   CI (99.9%): [≈ 0, 2375,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   38205,052 ±(99.9%) 58046,619 B/op [Average]
[info]   (min, avg, max) = (27174,976, 38205,052, 54874,254), stdev = 15074,523
[info]   CI (99.9%): [≈ 0, 96251,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,009 ±(99.9%) 3,547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,009, 1,687), stdev = 0,921
[info]   CI (99.9%): [≈ 0, 4,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6,63% complete, ETA 02:03:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42872,385 ops/s
[info] # Warmup Iteration   2: 48852,385 ops/s
[info] # Warmup Iteration   3: 49410,979 ops/s
[info] # Warmup Iteration   4: 49522,345 ops/s
[info] # Warmup Iteration   5: 49520,179 ops/s
[info] Iteration   1: 48686,746 ops/s
[info]                  ·gc.alloc.rate:                   725,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21813,930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100,747 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 49612,922 ops/s
[info]                  ·gc.alloc.rate:                   739,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42751,149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,642 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 49546,074 ops/s
[info]                  ·gc.alloc.rate:               738,109 MB/sec
[info]                  ·gc.alloc.rate.norm:          23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21372,304 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 49422,387 ops/s
[info]                  ·gc.alloc.rate:                   736,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21402,973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,663 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 48791,964 ops/s
[info]                  ·gc.alloc.rate:                   726,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              23448,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21679,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   49212,019 ±(99.9%) 1688,287 ops/s [Average]
[info]   (min, avg, max) = (48686,746, 49212,019, 49612,922), stdev = 438,443
[info]   CI (99.9%): [47523,732, 50900,306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   733,124 ±(99.9%) 25,243 MB/sec [Average]
[info]   (min, avg, max) = (725,301, 733,124, 739,134), stdev = 6,556
[info]   CI (99.9%): [707,881, 758,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23448,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (23448,008, 23448,009, 23448,010), stdev = 0,001
[info]   CI (99.9%): [23448,006, 23448,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,838 ±(99.9%) 1161,912 MB/sec [Average]
[info]   (min, avg, max) = (671,999, 807,838, 1347,612), stdev = 301,745
[info]   CI (99.9%): [≈ 0, 1969,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25804,013 ±(99.9%) 36487,023 B/op [Average]
[info]   (min, avg, max) = (21372,304, 25804,013, 42751,149), stdev = 9475,564
[info]   CI (99.9%): [≈ 0, 62291,036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,652 ±(99.9%) 5,305 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,652, 3,116), stdev = 1,378
[info]   CI (99.9%): [≈ 0, 5,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21,079 ±(99.9%) 171,533 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21,079, 100,747), stdev = 44,547
[info]   CI (99.9%): [≈ 0, 192,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6,83% complete, ETA 02:03:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20005,395 ops/s
[info] # Warmup Iteration   2: 31260,241 ops/s
[info] # Warmup Iteration   3: 31494,083 ops/s
[info] # Warmup Iteration   4: 30671,382 ops/s
[info] # Warmup Iteration   5: 31291,523 ops/s
[info] Iteration   1: 31414,729 ops/s
[info]                  ·gc.alloc.rate:                   1663,893 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101730,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,129 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31558,196 ops/s
[info]                  ·gc.alloc.rate:                   1671,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67606,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,038 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31553,035 ops/s
[info]                  ·gc.alloc.rate:                   1671,201 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,845 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101498,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,115 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 31506,938 ops/s
[info]                  ·gc.alloc.rate:               1668,881 MB/sec
[info]                  ·gc.alloc.rate.norm:          83360,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 67813,216 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 31530,572 ops/s
[info]                  ·gc.alloc.rate:                   1669,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              83360,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67792,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   31512,694 ±(99.9%) 224,924 ops/s [Average]
[info]   (min, avg, max) = (31414,729, 31512,694, 31558,196), stdev = 58,412
[info]   CI (99.9%): [31287,770, 31737,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1669,035 ±(99.9%) 11,897 MB/sec [Average]
[info]   (min, avg, max) = (1663,893, 1669,035, 1671,632), stdev = 3,090
[info]   CI (99.9%): [1657,138, 1680,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83360,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (83360,013, 83360,014, 83360,014), stdev = 0,001
[info]   CI (99.9%): [83360,011, 83360,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1627,310 ±(99.9%) 1425,060 MB/sec [Average]
[info]   (min, avg, max) = (1355,716, 1627,310, 2034,845), stdev = 370,084
[info]   CI (99.9%): [202,250, 3052,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   81288,297 ±(99.9%) 71451,605 B/op [Average]
[info]   (min, avg, max) = (67606,126, 81288,297, 101730,760), stdev = 18555,755
[info]   CI (99.9%): [9836,693, 152739,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,664 ±(99.9%) 5,377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,664, 3,129), stdev = 1,396
[info]   CI (99.9%): [≈ 0, 7,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7,03% complete, ETA 02:03:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19599,622 ops/s
[info] # Warmup Iteration   2: 34026,345 ops/s
[info] # Warmup Iteration   3: 34037,223 ops/s
[info] # Warmup Iteration   4: 34380,468 ops/s
[info] # Warmup Iteration   5: 34365,238 ops/s
[info] Iteration   1: 34317,688 ops/s
[info]                  ·gc.alloc.rate:                   1915,726 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92406,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,909 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 34406,562 ops/s
[info]                  ·gc.alloc.rate:                   1920,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92300,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,857 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34389,621 ops/s
[info]                  ·gc.alloc.rate:                   1920,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92513,342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,858 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 34381,348 ops/s
[info]                  ·gc.alloc.rate:                   1919,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92681,946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,953 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 34238,592 ops/s
[info]                  ·gc.alloc.rate:                   1911,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              87872,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62127,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,957 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   34346,762 ±(99.9%) 266,468 ops/s [Average]
[info]   (min, avg, max) = (34238,592, 34346,762, 34406,562), stdev = 69,201
[info]   CI (99.9%): [34080,294, 34613,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1917,493 ±(99.9%) 15,943 MB/sec [Average]
[info]   (min, avg, max) = (1911,023, 1917,493, 1920,960), stdev = 4,140
[info]   CI (99.9%): [1901,550, 1933,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87872,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (87872,012, 87872,012, 87872,013), stdev = 0,001
[info]   CI (99.9%): [87872,010, 87872,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1885,946 ±(99.9%) 1151,305 MB/sec [Average]
[info]   (min, avg, max) = (1351,140, 1885,946, 2024,629), stdev = 298,990
[info]   CI (99.9%): [734,641, 3037,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   86405,874 ±(99.9%) 52263,572 B/op [Average]
[info]   (min, avg, max) = (62127,630, 86405,874, 92681,946), stdev = 13572,684
[info]   CI (99.9%): [34142,301, 138669,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,907 ±(99.9%) 3,663 B/op [Average]
[info]   (min, avg, max) = (0,953, 1,907, 2,858), stdev = 0,951
[info]   CI (99.9%): [≈ 0, 5,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,23% complete, ETA 02:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15957,653 ops/s
[info] # Warmup Iteration   2: 31926,560 ops/s
[info] # Warmup Iteration   3: 32041,585 ops/s
[info] # Warmup Iteration   4: 31995,771 ops/s
[info] # Warmup Iteration   5: 32135,003 ops/s
[info] Iteration   1: 32248,321 ops/s
[info]                  ·gc.alloc.rate:                   1734,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99071,008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,032 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 32269,502 ops/s
[info]                  ·gc.alloc.rate:                   1735,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66082,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,076 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 32270,087 ops/s
[info]                  ·gc.alloc.rate:                   1736,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99237,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,031 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31968,432 ops/s
[info]                  ·gc.alloc.rate:                   1719,856 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,881 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     100230,565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,025 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 32039,190 ops/s
[info]                  ·gc.alloc.rate:                   1723,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              84672,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66718,045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,090 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   32159,106 ±(99.9%) 555,347 ops/s [Average]
[info]   (min, avg, max) = (31968,432, 32159,106, 32270,087), stdev = 144,222
[info]   CI (99.9%): [31603,760, 32714,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1729,915 ±(99.9%) 30,035 MB/sec [Average]
[info]   (min, avg, max) = (1719,856, 1729,915, 1736,168), stdev = 7,800
[info]   CI (99.9%): [1699,881, 1759,950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   84672,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84672,013, 84672,013, 84672,014), stdev = 0,001
[info]   CI (99.9%): [84672,011, 84672,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1762,543 ±(99.9%) 1428,114 MB/sec [Average]
[info]   (min, avg, max) = (1354,799, 1762,543, 2035,881), stdev = 370,877
[info]   CI (99.9%): [334,429, 3190,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   86267,775 ±(99.9%) 69863,796 B/op [Average]
[info]   (min, avg, max) = (66082,218, 86267,775, 100230,565), stdev = 18143,406
[info]   CI (99.9%): [16403,979, 156131,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,104), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,851 ±(99.9%) 6,434 B/op [Average]
[info]   (min, avg, max) = (1,025, 2,851, 5,076), stdev = 1,671
[info]   CI (99.9%): [≈ 0, 9,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7,43% complete, ETA 02:02:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28923,348 ops/s
[info] # Warmup Iteration   2: 37024,682 ops/s
[info] # Warmup Iteration   3: 36885,936 ops/s
[info] # Warmup Iteration   4: 37103,654 ops/s
[info] # Warmup Iteration   5: 37004,087 ops/s
[info] Iteration   1: 37126,353 ops/s
[info]                  ·gc.alloc.rate:               1879,728 MB/sec
[info]                  ·gc.alloc.rate.norm:          79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 85498,926 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 37312,418 ops/s
[info]                  ·gc.alloc.rate:                   1889,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,446 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85185,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,756 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37274,721 ops/s
[info]                  ·gc.alloc.rate:                   1887,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85412,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,758 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 36300,757 ops/s
[info]                  ·gc.alloc.rate:               1838,392 MB/sec
[info]                  ·gc.alloc.rate.norm:          79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 87826,579 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 37295,854 ops/s
[info]                  ·gc.alloc.rate:               1888,106 MB/sec
[info]                  ·gc.alloc.rate.norm:          79688,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 57059,624 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   37062,021 ±(99.9%) 1663,238 ops/s [Average]
[info]   (min, avg, max) = (36300,757, 37062,021, 37312,418), stdev = 431,938
[info]   CI (99.9%): [35398,783, 38725,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1876,654 ±(99.9%) 83,637 MB/sec [Average]
[info]   (min, avg, max) = (1838,392, 1876,654, 1889,127), stdev = 21,720
[info]   CI (99.9%): [1793,017, 1960,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   79688,011 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (79688,011, 79688,011, 79688,011), stdev = 0,001
[info]   CI (99.9%): [79688,011, 79688,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1887,578 ±(99.9%) 1153,053 MB/sec [Average]
[info]   (min, avg, max) = (1351,955, 1887,578, 2026,147), stdev = 299,444
[info]   CI (99.9%): [734,525, 3040,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   80196,598 ±(99.9%) 49974,784 B/op [Average]
[info]   (min, avg, max) = (57059,624, 80196,598, 87826,579), stdev = 12978,293
[info]   CI (99.9%): [30221,814, 130171,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,703 ±(99.9%) 3,705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,703, 1,758), stdev = 0,962
[info]   CI (99.9%): [≈ 0, 4,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 7,63% complete, ETA 02:02:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28773,255 ops/s
[info] # Warmup Iteration   2: 37540,748 ops/s
[info] # Warmup Iteration   3: 37646,585 ops/s
[info] # Warmup Iteration   4: 37713,227 ops/s
[info] # Warmup Iteration   5: 37856,149 ops/s
[info] Iteration   1: 37762,591 ops/s
[info]                  ·gc.alloc.rate:                   1838,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              76632,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84065,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,735 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37649,738 ops/s
[info]                  ·gc.alloc.rate:                   1833,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              76632,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,725 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84429,638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,870 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37848,240 ops/s
[info]                  ·gc.alloc.rate:               1842,829 MB/sec
[info]                  ·gc.alloc.rate.norm:          76632,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56059,956 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 37640,261 ops/s
[info]                  ·gc.alloc.rate:                   1832,831 MB/sec
[info]                  ·gc.alloc.rate.norm:              76632,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84668,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,870 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37712,767 ops/s
[info]                  ·gc.alloc.rate:                   1836,165 MB/sec
[info]                  ·gc.alloc.rate.norm:              76632,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84617,729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,737 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   37722,719 ±(99.9%) 331,076 ops/s [Average]
[info]   (min, avg, max) = (37640,261, 37722,719, 37848,240), stdev = 85,980
[info]   CI (99.9%): [37391,643, 38053,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1836,703 ±(99.9%) 15,920 MB/sec [Average]
[info]   (min, avg, max) = (1832,831, 1836,703, 1842,829), stdev = 4,134
[info]   CI (99.9%): [1820,782, 1852,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   76632,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76632,011, 76632,011, 76632,012), stdev = 0,001
[info]   CI (99.9%): [76632,010, 76632,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1887,447 ±(99.9%) 1161,061 MB/sec [Average]
[info]   (min, avg, max) = (1348,117, 1887,447, 2027,509), stdev = 301,524
[info]   CI (99.9%): [726,385, 3048,508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   78768,290 ±(99.9%) 48889,876 B/op [Average]
[info]   (min, avg, max) = (56059,956, 78768,290, 84668,146), stdev = 12696,546
[info]   CI (99.9%): [29878,415, 127658,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,043 ±(99.9%) 2,796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,043, 1,737), stdev = 0,726
[info]   CI (99.9%): [≈ 0, 3,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7,83% complete, ETA 02:02:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6291,131 ops/s
[info] # Warmup Iteration   2: 9873,292 ops/s
[info] # Warmup Iteration   3: 9997,837 ops/s
[info] # Warmup Iteration   4: 9986,495 ops/s
[info] # Warmup Iteration   5: 10073,730 ops/s
[info] Iteration   1: 10046,772 ops/s
[info]                  ·gc.alloc.rate:                   1294,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              202712,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209923,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,260 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 10078,568 ops/s
[info]                  ·gc.alloc.rate:                   1298,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              202715,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209278,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,501 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 10088,939 ops/s
[info]                  ·gc.alloc.rate:               1299,431 MB/sec
[info]                  ·gc.alloc.rate.norm:          202712,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209050,229 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 10088,755 ops/s
[info]                  ·gc.alloc.rate:               1299,444 MB/sec
[info]                  ·gc.alloc.rate.norm:          202712,040 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 209278,770 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 10078,637 ops/s
[info]                  ·gc.alloc.rate:                   1297,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              202712,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,277 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     209798,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,501 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   10076,334 ±(99.9%) 66,621 ops/s [Average]
[info]   (min, avg, max) = (10046,772, 10076,334, 10088,939), stdev = 17,301
[info]   CI (99.9%): [10009,713, 10142,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1297,794 ±(99.9%) 8,561 MB/sec [Average]
[info]   (min, avg, max) = (1294,023, 1297,794, 1299,444), stdev = 2,223
[info]   CI (99.9%): [1289,233, 1306,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   202712,645 ±(99.9%) 5,196 B/op [Average]
[info]   (min, avg, max) = (202712,040, 202712,645, 202715,059), stdev = 1,349
[info]   CI (99.9%): [202707,450, 202717,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341,027 ±(99.9%) 5,405 MB/sec [Average]
[info]   (min, avg, max) = (1340,060, 1341,027, 1343,277), stdev = 1,404
[info]   CI (99.9%): [1335,622, 1346,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   209465,924 ±(99.9%) 1444,996 B/op [Average]
[info]   (min, avg, max) = (209050,229, 209465,924, 209923,872), stdev = 375,261
[info]   CI (99.9%): [208020,928, 210910,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,252 ±(99.9%) 12,516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,252, 6,501), stdev = 3,250
[info]   CI (99.9%): [≈ 0, 15,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8,03% complete, ETA 02:01:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19406,708 ops/s
[info] # Warmup Iteration   2: 25701,591 ops/s
[info] # Warmup Iteration   3: 25813,636 ops/s
[info] # Warmup Iteration   4: 25734,019 ops/s
[info] # Warmup Iteration   5: 25781,065 ops/s
[info] Iteration   1: 25866,550 ops/s
[info]                  ·gc.alloc.rate:                   2009,688 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122722,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,533 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 25695,972 ops/s
[info]                  ·gc.alloc.rate:                   1996,523 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123718,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,275 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 25847,823 ops/s
[info]                  ·gc.alloc.rate:                   2008,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123193,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 25766,576 ops/s
[info]                  ·gc.alloc.rate:               2002,183 MB/sec
[info]                  ·gc.alloc.rate.norm:          122288,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2026,935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 123799,828 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 25795,847 ops/s
[info]                  ·gc.alloc.rate:                   2004,046 MB/sec
[info]                  ·gc.alloc.rate.norm:              122288,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123823,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,810 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   25794,554 ±(99.9%) 262,041 ops/s [Average]
[info]   (min, avg, max) = (25695,972, 25794,554, 25866,550), stdev = 68,051
[info]   CI (99.9%): [25532,513, 26056,595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2004,148 ±(99.9%) 20,187 MB/sec [Average]
[info]   (min, avg, max) = (1996,523, 2004,148, 2009,688), stdev = 5,243
[info]   CI (99.9%): [1983,960, 2024,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   122288,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (122288,016, 122288,016, 122288,017), stdev = 0,001
[info]   CI (99.9%): [122288,014, 122288,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023,204 ±(99.9%) 19,405 MB/sec [Average]
[info]   (min, avg, max) = (2016,836, 2023,204, 2029,205), stdev = 5,039
[info]   CI (99.9%): [2003,799, 2042,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   123451,593 ±(99.9%) 1854,654 B/op [Average]
[info]   (min, avg, max) = (122722,949, 123451,593, 123823,240), stdev = 481,648
[info]   CI (99.9%): [121596,939, 125306,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,777 ±(99.9%) 5,571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,777, 3,810), stdev = 1,447
[info]   CI (99.9%): [≈ 0, 7,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,23% complete, ETA 02:01:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36685,813 ops/s
[info] # Warmup Iteration   2: 50503,397 ops/s
[info] # Warmup Iteration   3: 50507,287 ops/s
[info] # Warmup Iteration   4: 50561,770 ops/s
[info] # Warmup Iteration   5: 50626,439 ops/s
[info] Iteration   1: 50553,936 ops/s
[info]                  ·gc.alloc.rate:               1244,745 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21037,463 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 50730,973 ops/s
[info]                  ·gc.alloc.rate:               1249,117 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,935 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41972,799 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 50107,828 ops/s
[info]                  ·gc.alloc.rate:                   1233,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42533,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,654 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 50384,930 ops/s
[info]                  ·gc.alloc.rate:                   1240,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42319,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,300 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 50672,575 ops/s
[info]                  ·gc.alloc.rate:               1247,550 MB/sec
[info]                  ·gc.alloc.rate.norm:          38752,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 42120,127 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   50490,048 ±(99.9%) 967,625 ops/s [Average]
[info]   (min, avg, max) = (50107,828, 50490,048, 50730,973), stdev = 251,289
[info]   CI (99.9%): [49522,423, 51457,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1243,166 ±(99.9%) 23,770 MB/sec [Average]
[info]   (min, avg, max) = (1233,721, 1243,166, 1249,117), stdev = 6,173
[info]   CI (99.9%): [1219,396, 1266,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38752,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38752,009, 38752,009, 38752,009), stdev = 0,001
[info]   CI (99.9%): [38752,008, 38752,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,736 ±(99.9%) 1168,849 MB/sec [Average]
[info]   (min, avg, max) = (675,740, 1218,736, 1355,980), stdev = 303,546
[info]   CI (99.9%): [49,888, 2387,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   37996,694 ±(99.9%) 36515,077 B/op [Average]
[info]   (min, avg, max) = (21037,463, 37996,694, 42533,870), stdev = 9482,850
[info]   CI (99.9%): [1481,617, 74511,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,391 ±(99.9%) 2,241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,391, 1,300), stdev = 0,582
[info]   CI (99.9%): [≈ 0, 2,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,43% complete, ETA 02:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67190,076 ops/s
[info] # Warmup Iteration   2: 73365,248 ops/s
[info] # Warmup Iteration   3: 73022,174 ops/s
[info] # Warmup Iteration   4: 73331,260 ops/s
[info] # Warmup Iteration   5: 73500,107 ops/s
[info] Iteration   1: 73615,971 ops/s
[info]                  ·gc.alloc.rate:                   951,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,722 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14382,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,445 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 73654,627 ops/s
[info]                  ·gc.alloc.rate:               951,745 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28739,614 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 72813,204 ops/s
[info]                  ·gc.alloc.rate:               940,705 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14527,361 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 73380,842 ops/s
[info]                  ·gc.alloc.rate:                   948,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28828,697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,893 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 73454,020 ops/s
[info]                  ·gc.alloc.rate:               949,062 MB/sec
[info]                  ·gc.alloc.rate.norm:          20336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14401,007 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   73383,733 ±(99.9%) 1302,648 ops/s [Average]
[info]   (min, avg, max) = (72813,204, 73383,733, 73654,627), stdev = 338,293
[info]   CI (99.9%): [72081,085, 74686,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   948,184 ±(99.9%) 17,030 MB/sec [Average]
[info]   (min, avg, max) = (940,705, 948,184, 951,745), stdev = 4,423
[info]   CI (99.9%): [931,154, 965,215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (20336,006, 20336,006, 20336,006), stdev = 0,001
[info]   CI (99.9%): [20336,005, 20336,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,222 ±(99.9%) 1418,105 MB/sec [Average]
[info]   (min, avg, max) = (672,008, 941,222, 1345,042), stdev = 368,277
[info]   CI (99.9%): [≈ 0, 2359,327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   20175,931 ±(99.9%) 30260,123 B/op [Average]
[info]   (min, avg, max) = (14382,977, 20175,931, 28828,697), stdev = 7858,458
[info]   CI (99.9%): [≈ 0, 50436,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,268 ±(99.9%) 1,537 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,268, 0,893), stdev = 0,399
[info]   CI (99.9%): [≈ 0, 1,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 8,63% complete, ETA 02:01:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20881,156 ops/s
[info] # Warmup Iteration   2: 38177,439 ops/s
[info] # Warmup Iteration   3: 38220,786 ops/s
[info] # Warmup Iteration   4: 38327,697 ops/s
[info] # Warmup Iteration   5: 38644,895 ops/s
[info] Iteration   1: 38752,633 ops/s
[info]                  ·gc.alloc.rate:                   2587,866 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110170,681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,691 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38595,148 ops/s
[info]                  ·gc.alloc.rate:                   2577,462 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110740,969 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,395 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38503,268 ops/s
[info]                  ·gc.alloc.rate:                   2571,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83315,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,553 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 38630,990 ops/s
[info]                  ·gc.alloc.rate:                   2579,992 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110827,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,696 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 38681,178 ops/s
[info]                  ·gc.alloc.rate:                   2582,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              105104,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     110735,870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,388 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   38632,643 ±(99.9%) 359,678 ops/s [Average]
[info]   (min, avg, max) = (38503,268, 38632,643, 38752,633), stdev = 93,407
[info]   CI (99.9%): [38272,965, 38992,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2579,885 ±(99.9%) 23,708 MB/sec [Average]
[info]   (min, avg, max) = (2571,308, 2579,885, 2587,866), stdev = 6,157
[info]   CI (99.9%): [2556,177, 2603,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105104,011 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (105104,011, 105104,011, 105104,012), stdev = 0,001
[info]   CI (99.9%): [105104,008, 105104,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2581,653 ±(99.9%) 1169,768 MB/sec [Average]
[info]   (min, avg, max) = (2038,262, 2581,653, 2721,195), stdev = 303,785
[info]   CI (99.9%): [1411,885, 3751,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   105158,134 ±(99.9%) 47028,903 B/op [Average]
[info]   (min, avg, max) = (83315,397, 105158,134, 110827,753), stdev = 12213,257
[info]   CI (99.9%): [58129,231, 152187,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,544 ±(99.9%) 3,269 B/op [Average]
[info]   (min, avg, max) = (1,691, 2,544, 3,395), stdev = 0,849
[info]   CI (99.9%): [≈ 0, 5,814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8,84% complete, ETA 02:00:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23634,946 ops/s
[info] # Warmup Iteration   2: 37234,986 ops/s
[info] # Warmup Iteration   3: 37659,017 ops/s
[info] # Warmup Iteration   4: 37517,019 ops/s
[info] # Warmup Iteration   5: 37576,941 ops/s
[info] Iteration   1: 37626,055 ops/s
[info]                  ·gc.alloc.rate:                   2057,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,815 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85033,983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,741 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37755,816 ops/s
[info]                  ·gc.alloc.rate:                   2064,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84826,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,735 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37692,682 ops/s
[info]                  ·gc.alloc.rate:                   2061,303 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85035,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,607 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 37482,646 ops/s
[info]                  ·gc.alloc.rate:                   2049,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85570,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,748 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37574,268 ops/s
[info]                  ·gc.alloc.rate:                   2054,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              86072,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85428,366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,744 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   37626,293 ±(99.9%) 406,261 ops/s [Average]
[info]   (min, avg, max) = (37482,646, 37626,293, 37755,816), stdev = 105,505
[info]   CI (99.9%): [37220,033, 38032,554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2057,582 ±(99.9%) 22,342 MB/sec [Average]
[info]   (min, avg, max) = (2049,833, 2057,582, 2064,711), stdev = 5,802
[info]   CI (99.9%): [2035,240, 2079,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86072,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (86072,011, 86072,011, 86072,012), stdev = 0,001
[info]   CI (99.9%): [86072,010, 86072,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2036,220 ±(99.9%) 9,521 MB/sec [Average]
[info]   (min, avg, max) = (2032,815, 2036,220, 2039,068), stdev = 2,473
[info]   CI (99.9%): [2026,698, 2045,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   85179,071 ±(99.9%) 1188,264 B/op [Average]
[info]   (min, avg, max) = (84826,811, 85179,071, 85570,357), stdev = 308,588
[info]   CI (99.9%): [83990,807, 86367,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,046, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,010, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,915 ±(99.9%) 1,490 B/op [Average]
[info]   (min, avg, max) = (1,735, 1,915, 2,607), stdev = 0,387
[info]   CI (99.9%): [0,425, 3,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,04% complete, ETA 02:00:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46760,971 ops/s
[info] # Warmup Iteration   2: 52421,152 ops/s
[info] # Warmup Iteration   3: 52460,309 ops/s
[info] # Warmup Iteration   4: 51850,720 ops/s
[info] # Warmup Iteration   5: 52319,992 ops/s
[info] Iteration   1: 52622,064 ops/s
[info]                  ·gc.alloc.rate:                   2193,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60403,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,490 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 52165,432 ops/s
[info]                  ·gc.alloc.rate:                   2174,471 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61036,633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,884 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 52118,469 ops/s
[info]                  ·gc.alloc.rate:                   2172,175 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701,631 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81589,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,629 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 52255,378 ops/s
[info]                  ·gc.alloc.rate:                   2177,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61129,818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,881 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 52510,174 ops/s
[info]                  ·gc.alloc.rate:                   2188,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              65600,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,371 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60925,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,248 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   52334,303 ±(99.9%) 850,348 ops/s [Average]
[info]   (min, avg, max) = (52118,469, 52334,303, 52622,064), stdev = 220,833
[info]   CI (99.9%): [51483,956, 53184,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   2181,216 ±(99.9%) 35,205 MB/sec [Average]
[info]   (min, avg, max) = (2172,175, 2181,216, 2193,289), stdev = 9,142
[info]   CI (99.9%): [2146,011, 2216,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   65600,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (65600,008, 65600,008, 65600,008), stdev = 0,001
[info]   CI (99.9%): [65600,007, 65600,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2161,242 ±(99.9%) 1163,392 MB/sec [Average]
[info]   (min, avg, max) = (2019,550, 2161,242, 2701,631), stdev = 302,129
[info]   CI (99.9%): [997,850, 3324,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   65017,117 ±(99.9%) 35690,058 B/op [Average]
[info]   (min, avg, max) = (60403,588, 65017,117, 81589,661), stdev = 9268,595
[info]   CI (99.9%): [29327,059, 100707,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,626 ±(99.9%) 2,734 B/op [Average]
[info]   (min, avg, max) = (0,629, 1,626, 2,490), stdev = 0,710
[info]   CI (99.9%): [≈ 0, 4,360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 9,24% complete, ETA 02:00:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44546,470 ops/s
[info] # Warmup Iteration   2: 53070,318 ops/s
[info] # Warmup Iteration   3: 53484,865 ops/s
[info] # Warmup Iteration   4: 53319,283 ops/s
[info] # Warmup Iteration   5: 53415,916 ops/s
[info] Iteration   1: 53358,845 ops/s
[info]                  ·gc.alloc.rate:                   1957,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59510,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,456 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 53653,082 ops/s
[info]                  ·gc.alloc.rate:                   1968,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59285,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,053 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 53549,205 ops/s
[info]                  ·gc.alloc.rate:                   1964,205 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59474,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,447 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 53413,672 ops/s
[info]                  ·gc.alloc.rate:                   1959,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,955 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59724,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,227 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 53379,139 ops/s
[info]                  ·gc.alloc.rate:                   1958,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              57736,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59840,633 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,614 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   53470,789 ±(99.9%) 485,446 ops/s [Average]
[info]   (min, avg, max) = (53358,845, 53470,789, 53653,082), stdev = 126,069
[info]   CI (99.9%): [52985,343, 53956,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1961,530 ±(99.9%) 17,943 MB/sec [Average]
[info]   (min, avg, max) = (1957,417, 1961,530, 1968,397), stdev = 4,660
[info]   CI (99.9%): [1943,587, 1979,474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   57736,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (57736,008, 57736,008, 57736,008), stdev = 0,001
[info]   CI (99.9%): [57736,007, 57736,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   2023,727 ±(99.9%) 18,089 MB/sec [Average]
[info]   (min, avg, max) = (2017,578, 2023,727, 2029,528), stdev = 4,698
[info]   CI (99.9%): [2005,638, 2041,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   59567,049 ±(99.9%) 840,356 B/op [Average]
[info]   (min, avg, max) = (59285,520, 59567,049, 59840,633), stdev = 218,238
[info]   CI (99.9%): [58726,693, 60407,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,067, 0,104), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,959 ±(99.9%) 3,864 B/op [Average]
[info]   (min, avg, max) = (0,614, 1,959, 3,053), stdev = 1,004
[info]   CI (99.9%): [≈ 0, 5,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9,44% complete, ETA 02:00:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 362727,854 ops/s
[info] # Warmup Iteration   2: 423581,574 ops/s
[info] # Warmup Iteration   3: 424701,015 ops/s
[info] # Warmup Iteration   4: 424647,065 ops/s
[info] # Warmup Iteration   5: 423930,001 ops/s
[info] Iteration   1: 424583,680 ops/s
[info]                  ·gc.alloc.rate:                   2147,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7486,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,154 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 427094,866 ops/s
[info]                  ·gc.alloc.rate:                   2160,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7455,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 426223,079 ops/s
[info]                  ·gc.alloc.rate:                   2155,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7479,551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,154 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 426244,609 ops/s
[info]                  ·gc.alloc.rate:                   2155,865 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7491,480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 425724,271 ops/s
[info]                  ·gc.alloc.rate:                   2152,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10017,301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,154 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   425974,101 ±(99.9%) 3543,306 ops/s [Average]
[info]   (min, avg, max) = (424583,680, 425974,101, 427094,866), stdev = 920,185
[info]   CI (99.9%): [422430,795, 429517,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2154,318 ±(99.9%) 18,393 MB/sec [Average]
[info]   (min, avg, max) = (2147,345, 2154,318, 2160,301), stdev = 4,777
[info]   CI (99.9%): [2135,925, 2172,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7960,001, 7960,001, 7960,001), stdev = 0,001
[info]   CI (99.9%): [7960,001, 7960,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2161,221 ±(99.9%) 1179,031 MB/sec [Average]
[info]   (min, avg, max) = (2019,532, 2161,221, 2708,918), stdev = 306,191
[info]   CI (99.9%): [982,190, 3340,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7985,935 ±(99.9%) 4372,997 B/op [Average]
[info]   (min, avg, max) = (7455,129, 7985,935, 10017,301), stdev = 1135,653
[info]   CI (99.9%): [3612,938, 12358,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,123 ±(99.9%) 0,163 B/op [Average]
[info]   (min, avg, max) = (0,077, 0,123, 0,154), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 9,64% complete, ETA 01:59:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 457804,449 ops/s
[info] # Warmup Iteration   2: 1718412,086 ops/s
[info] # Warmup Iteration   3: 1701099,242 ops/s
[info] # Warmup Iteration   4: 1720831,549 ops/s
[info] # Warmup Iteration   5: 1709389,247 ops/s
[info] Iteration   1: 1716412,023 ops/s
[info]                  ·gc.alloc.rate:               540,942 MB/sec
[info]                  ·gc.alloc.rate.norm:          496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 469,078 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1720883,871 ops/s
[info]                  ·gc.alloc.rate:                   542,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     616,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,410 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1721315,513 ops/s
[info]                  ·gc.alloc.rate:               542,445 MB/sec
[info]                  ·gc.alloc.rate.norm:          496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 616,350 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1718554,396 ops/s
[info]                  ·gc.alloc.rate:      541,655 MB/sec
[info]                  ·gc.alloc.rate.norm: 496,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1717395,060 ops/s
[info]                  ·gc.alloc.rate:                   541,172 MB/sec
[info]                  ·gc.alloc.rate.norm:              496,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     616,534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1718912,172 ±(99.9%) 8246,140 ops/s [Average]
[info]   (min, avg, max) = (1716412,023, 1718912,172, 1721315,513), stdev = 2141,496
[info]   CI (99.9%): [1710666,033, 1727158,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   541,703 ±(99.9%) 2,563 MB/sec [Average]
[info]   (min, avg, max) = (540,942, 541,703, 542,445), stdev = 0,666
[info]   CI (99.9%): [539,140, 544,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (496,000, 496,000, 496,000), stdev = 0,001
[info]   CI (99.9%): [496,000, 496,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,487 ±(99.9%) 1123,231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,487, 674,105), stdev = 291,699
[info]   CI (99.9%): [≈ 0, 1629,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   463,703 ±(99.9%) 1027,967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 463,703, 616,550), stdev = 266,960
[info]   CI (99.9%): [≈ 0, 1491,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,531 ±(99.9%) 4,528 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,531, 2,635), stdev = 1,176
[info]   CI (99.9%): [≈ 0, 5,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,486 ±(99.9%) 4,142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,486, 2,410), stdev = 1,076
[info]   CI (99.9%): [≈ 0, 4,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9,84% complete, ETA 01:59:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 517442,897 ops/s
[info] # Warmup Iteration   2: 716186,918 ops/s
[info] # Warmup Iteration   3: 717039,642 ops/s
[info] # Warmup Iteration   4: 717542,773 ops/s
[info] # Warmup Iteration   5: 713941,714 ops/s
[info] Iteration   1: 714164,600 ops/s
[info]                  ·gc.alloc.rate:                   573,574 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1486,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,275 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 710812,223 ops/s
[info]                  ·gc.alloc.rate:                   570,847 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1493,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 719597,705 ops/s
[info]                  ·gc.alloc.rate:      577,862 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 717251,000 ops/s
[info]                  ·gc.alloc.rate:                   576,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1481,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,091 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 717221,636 ops/s
[info]                  ·gc.alloc.rate:               576,062 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1481,465 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   715809,433 ±(99.9%) 13072,501 ops/s [Average]
[info]   (min, avg, max) = (710812,223, 715809,433, 719597,705), stdev = 3394,887
[info]   CI (99.9%): [702736,932, 728881,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   574,906 ±(99.9%) 10,539 MB/sec [Average]
[info]   (min, avg, max) = (570,847, 574,906, 577,862), stdev = 2,737
[info]   CI (99.9%): [564,368, 585,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,844 ±(99.9%) 1162,056 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,844, 675,218), stdev = 301,782
[info]   CI (99.9%): [≈ 0, 1701,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1188,454 ±(99.9%) 2558,307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1188,454, 1493,290), stdev = 664,384
[info]   CI (99.9%): [≈ 0, 3746,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,083 ±(99.9%) 0,440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,275), stdev = 0,114
[info]   CI (99.9%): [≈ 0, 0,522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10,04% complete, ETA 01:59:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1843493,415 ops/s
[info] # Warmup Iteration   2: 1906312,676 ops/s
[info] # Warmup Iteration   3: 1916748,936 ops/s
[info] # Warmup Iteration   4: 1916463,180 ops/s
[info] # Warmup Iteration   5: 1912284,473 ops/s
[info] Iteration   1: 1910672,928 ops/s
[info]                  ·gc.alloc.rate:               369,045 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 421,387 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1917692,764 ops/s
[info]                  ·gc.alloc.rate:                   370,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     419,885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1920543,543 ops/s
[info]                  ·gc.alloc.rate:      370,996 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1908938,484 ops/s
[info]                  ·gc.alloc.rate:               368,703 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 421,777 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1912953,617 ops/s
[info]                  ·gc.alloc.rate:                   369,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,664 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     555,149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,150 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,592 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1914160,267 ±(99.9%) 18677,539 ops/s [Average]
[info]   (min, avg, max) = (1908938,484, 1914160,267, 1920543,543), stdev = 4850,498
[info]   CI (99.9%): [1895482,728, 1932837,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   369,715 ±(99.9%) 3,669 MB/sec [Average]
[info]   (min, avg, max) = (368,703, 369,715, 370,996), stdev = 0,953
[info]   CI (99.9%): [366,045, 373,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,866 ±(99.9%) 989,268 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,866, 674,664), stdev = 256,910
[info]   CI (99.9%): [≈ 0, 1431,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   363,640 ±(99.9%) 814,090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 363,640, 555,149), stdev = 211,417
[info]   CI (99.9%): [≈ 0, 1177,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,636 ±(99.9%) 5,411 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,636, 3,150), stdev = 1,405
[info]   CI (99.9%): [≈ 0, 6,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,524 ±(99.9%) 4,453 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,524, 2,592), stdev = 1,156
[info]   CI (99.9%): [≈ 0, 4,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10,24% complete, ETA 01:58:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74768,068 ops/s
[info] # Warmup Iteration   2: 115334,156 ops/s
[info] # Warmup Iteration   3: 114886,914 ops/s
[info] # Warmup Iteration   4: 115565,534 ops/s
[info] # Warmup Iteration   5: 115767,625 ops/s
[info] Iteration   1: 115403,827 ops/s
[info]                  ·gc.alloc.rate:                   4189,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55621,374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,852 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 115669,970 ops/s
[info]                  ·gc.alloc.rate:                   4199,121 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55556,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,133 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 114735,349 ops/s
[info]                  ·gc.alloc.rate:                   4165,082 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56032,906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,286 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 114557,988 ops/s
[info]                  ·gc.alloc.rate:                   4159,242 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56163,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,858 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 115285,446 ops/s
[info]                  ·gc.alloc.rate:                   4184,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              57136,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55813,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,284 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   115130,516 ±(99.9%) 1799,593 ops/s [Average]
[info]   (min, avg, max) = (114557,988, 115130,516, 115669,970), stdev = 467,349
[info]   CI (99.9%): [113330,923, 116930,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4179,587 ±(99.9%) 64,838 MB/sec [Average]
[info]   (min, avg, max) = (4159,242, 4179,587, 4199,121), stdev = 16,838
[info]   CI (99.9%): [4114,749, 4244,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57136,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (57136,004, 57136,004, 57136,004), stdev = 0,001
[info]   CI (99.9%): [57136,003, 57136,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4084,550 ±(99.9%) 15,637 MB/sec [Average]
[info]   (min, avg, max) = (4078,518, 4084,550, 4088,430), stdev = 4,061
[info]   CI (99.9%): [4068,912, 4100,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   55837,639 ±(99.9%) 1000,968 B/op [Average]
[info]   (min, avg, max) = (55556,936, 55837,639, 56163,256), stdev = 259,948
[info]   CI (99.9%): [54836,672, 56838,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,682 ±(99.9%) 1,464 B/op [Average]
[info]   (min, avg, max) = (0,284, 0,682, 1,133), stdev = 0,380
[info]   CI (99.9%): [≈ 0, 2,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 10,44% complete, ETA 01:58:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 637539,728 ops/s
[info] # Warmup Iteration   2: 693789,559 ops/s
[info] # Warmup Iteration   3: 698660,233 ops/s
[info] # Warmup Iteration   4: 698958,859 ops/s
[info] # Warmup Iteration   5: 699426,146 ops/s
[info] Iteration   1: 698209,942 ops/s
[info]                  ·gc.alloc.rate:                   1824,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4546,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,047 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 700266,928 ops/s
[info]                  ·gc.alloc.rate:                   1829,502 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4539,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 699776,056 ops/s
[info]                  ·gc.alloc.rate:                   1828,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4549,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 698896,638 ops/s
[info]                  ·gc.alloc.rate:                   1826,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3040,464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 701230,006 ops/s
[info]                  ·gc.alloc.rate:                   1831,855 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4550,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle":
[info]   699675,914 ±(99.9%) 4527,935 ops/s [Average]
[info]   (min, avg, max) = (698209,942, 699675,914, 701230,006), stdev = 1175,890
[info]   CI (99.9%): [695147,979, 704203,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1827,967 ±(99.9%) 11,365 MB/sec [Average]
[info]   (min, avg, max) = (1824,270, 1827,967, 1831,855), stdev = 2,952
[info]   CI (99.9%): [1816,602, 1839,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1887,402 ±(99.9%) 1156,454 MB/sec [Average]
[info]   (min, avg, max) = (1350,204, 1887,402, 2027,337), stdev = 300,327
[info]   CI (99.9%): [730,948, 3043,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4245,384 ±(99.9%) 2593,741 B/op [Average]
[info]   (min, avg, max) = (3040,464, 4245,384, 4550,804), stdev = 673,586
[info]   CI (99.9%): [1651,643, 6839,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,042), stdev = 0,009
[info]   CI (99.9%): [0,002, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,084 ±(99.9%) 0,080 B/op [Average]
[info]   (min, avg, max) = (0,047, 0,084, 0,094), stdev = 0,021
[info]   CI (99.9%): [0,004, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 10,64% complete, ETA 01:58:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296642,979 ops/s
[info] # Warmup Iteration   2: 359774,798 ops/s
[info] # Warmup Iteration   3: 357820,264 ops/s
[info] # Warmup Iteration   4: 360596,636 ops/s
[info] # Warmup Iteration   5: 358638,661 ops/s
[info] Iteration   1: 351010,522 ops/s
[info]                  ·gc.alloc.rate:               540,639 MB/sec
[info]                  ·gc.alloc.rate.norm:          2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2293,908 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 360883,279 ops/s
[info]                  ·gc.alloc.rate:                   555,832 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2942,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,696 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 361786,087 ops/s
[info]                  ·gc.alloc.rate:                   557,158 MB/sec
[info]                  ·gc.alloc.rate.norm:              2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2935,459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,272 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 361878,329 ops/s
[info]                  ·gc.alloc.rate:      557,375 MB/sec
[info]                  ·gc.alloc.rate.norm: 2424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 361469,719 ops/s
[info]                  ·gc.alloc.rate:               556,629 MB/sec
[info]                  ·gc.alloc.rate.norm:          2424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,975 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2926,310 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   359405,587 ±(99.9%) 18133,075 ops/s [Average]
[info]   (min, avg, max) = (351010,522, 359405,587, 361878,329), stdev = 4709,102
[info]   CI (99.9%): [341272,513, 377538,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   553,527 ±(99.9%) 27,835 MB/sec [Average]
[info]   (min, avg, max) = (540,639, 553,527, 557,375), stdev = 7,229
[info]   CI (99.9%): [525,691, 581,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2424,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2424,001, 2424,001, 2424,001), stdev = 0,001
[info]   CI (99.9%): [2424,001, 2424,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,628 ±(99.9%) 1123,604 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,628, 674,825), stdev = 291,796
[info]   CI (99.9%): [≈ 0, 1630,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2219,722 ±(99.9%) 4896,245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2219,722, 2942,933), stdev = 1271,539
[info]   CI (99.9%): [≈ 0, 7115,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,686 ±(99.9%) 5,777 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,686, 3,370), stdev = 1,500
[info]   CI (99.9%): [≈ 0, 6,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,994 ±(99.9%) 25,195 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,994, 14,696), stdev = 6,543
[info]   CI (99.9%): [≈ 0, 28,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 10,84% complete, ETA 01:58:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 350480,534 ops/s
[info] # Warmup Iteration   2: 1290651,861 ops/s
[info] # Warmup Iteration   3: 1291878,503 ops/s
[info] # Warmup Iteration   4: 1304392,669 ops/s
[info] # Warmup Iteration   5: 1292180,295 ops/s
[info] Iteration   1: 1300862,952 ops/s
[info]                  ·gc.alloc.rate:                   601,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     815,560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,169 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1306528,687 ops/s
[info]                  ·gc.alloc.rate:      604,294 MB/sec
[info]                  ·gc.alloc.rate.norm: 728,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1308794,242 ops/s
[info]                  ·gc.alloc.rate:               605,343 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 810,625 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1282764,990 ops/s
[info]                  ·gc.alloc.rate:                   593,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,835 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     825,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1304605,645 ops/s
[info]                  ·gc.alloc.rate:                   603,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,698 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     811,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1300711,303 ±(99.9%) 40221,948 ops/s [Average]
[info]   (min, avg, max) = (1282764,990, 1300711,303, 1308794,242), stdev = 10445,512
[info]   CI (99.9%): [1260489,355, 1340933,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   601,636 ±(99.9%) 18,425 MB/sec [Average]
[info]   (min, avg, max) = (593,409, 601,636, 605,343), stdev = 4,785
[info]   CI (99.9%): [583,211, 620,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,739 ±(99.9%) 1159,679 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,739, 674,116), stdev = 301,165
[info]   CI (99.9%): [≈ 0, 1698,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   652,649 ±(99.9%) 1405,057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 652,649, 825,440), stdev = 364,889
[info]   CI (99.9%): [≈ 0, 2057,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,541 ±(99.9%) 4,475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,541, 2,619), stdev = 1,162
[info]   CI (99.9%): [≈ 0, 5,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,654 ±(99.9%) 5,414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,654, 3,169), stdev = 1,406
[info]   CI (99.9%): [≈ 0, 6,068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,04% complete, ETA 01:57:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 859555,768 ops/s
[info] # Warmup Iteration   2: 1151672,153 ops/s
[info] # Warmup Iteration   3: 1149826,849 ops/s
[info] # Warmup Iteration   4: 1148242,404 ops/s
[info] # Warmup Iteration   5: 1146282,989 ops/s
[info] Iteration   1: 1102214,510 ops/s
[info]                  ·gc.alloc.rate:                   778,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1146921,707 ops/s
[info]                  ·gc.alloc.rate:                   810,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     926,825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1151896,716 ops/s
[info]                  ·gc.alloc.rate:               813,843 MB/sec
[info]                  ·gc.alloc.rate.norm:          1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 923,740 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1150773,486 ops/s
[info]                  ·gc.alloc.rate:                   813,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     924,639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1145720,037 ops/s
[info]                  ·gc.alloc.rate:                   809,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1858,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1139505,291 ±(99.9%) 80880,672 ops/s [Average]
[info]   (min, avg, max) = (1102214,510, 1139505,291, 1151896,716), stdev = 21004,454
[info]   CI (99.9%): [1058624,619, 1220385,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   805,090 ±(99.9%) 57,194 MB/sec [Average]
[info]   (min, avg, max) = (778,724, 805,090, 813,843), stdev = 14,853
[info]   CI (99.9%): [747,896, 862,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1112,000, 1112,000, 1112,000), stdev = 0,001
[info]   CI (99.9%): [1112,000, 1112,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   811,141 ±(99.9%) 1165,901 MB/sec [Average]
[info]   (min, avg, max) = (675,380, 811,141, 1352,772), stdev = 302,781
[info]   CI (99.9%): [≈ 0, 1977,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1119,608 ±(99.9%) 1591,683 B/op [Average]
[info]   (min, avg, max) = (923,740, 1119,608, 1858,408), stdev = 413,355
[info]   CI (99.9%): [≈ 0, 2711,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,035 ±(99.9%) 0,094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,035, 0,059), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11,24% complete, ETA 01:57:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1677934,951 ops/s
[info] # Warmup Iteration   2: 1730615,078 ops/s
[info] # Warmup Iteration   3: 1743190,558 ops/s
[info] # Warmup Iteration   4: 1743584,168 ops/s
[info] # Warmup Iteration   5: 1742353,891 ops/s
[info] Iteration   1: 1745617,442 ops/s
[info]                  ·gc.alloc.rate:                   807,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     608,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1753328,384 ops/s
[info]                  ·gc.alloc.rate:                   811,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,870 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     603,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1718837,324 ops/s
[info]                  ·gc.alloc.rate:                   795,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1231,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1749573,868 ops/s
[info]                  ·gc.alloc.rate:               809,304 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 604,587 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1749431,059 ops/s
[info]                  ·gc.alloc.rate:               809,111 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 604,632 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   1743357,616 ±(99.9%) 53815,978 ops/s [Average]
[info]   (min, avg, max) = (1718837,324, 1743357,616, 1753328,384), stdev = 13975,839
[info]   CI (99.9%): [1689541,638, 1797173,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   806,382 ±(99.9%) 24,943 MB/sec [Average]
[info]   (min, avg, max) = (795,037, 806,382, 811,090), stdev = 6,478
[info]   CI (99.9%): [781,438, 831,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,294 ±(99.9%) 1157,004 MB/sec [Average]
[info]   (min, avg, max) = (671,998, 807,294, 1344,788), stdev = 300,470
[info]   CI (99.9%): [≈ 0, 1964,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   730,587 ±(99.9%) 1078,052 B/op [Average]
[info]   (min, avg, max) = (603,939, 730,587, 1231,397), stdev = 279,967
[info]   CI (99.9%): [≈ 0, 1808,640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,026 ±(99.9%) 0,123 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,026, 0,076), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 11,45% complete, ETA 01:57:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2721878,422 ops/s
[info] # Warmup Iteration   2: 2855281,331 ops/s
[info] # Warmup Iteration   3: 2870673,402 ops/s
[info] # Warmup Iteration   4: 2865799,860 ops/s
[info] # Warmup Iteration   5: 2841032,090 ops/s
[info] Iteration   1: 2865564,486 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2872651,884 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2873825,076 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2874324,897 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2857865,496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2868846,368 ±(99.9%) 27271,291 ops/s [Average]
[info]   (min, avg, max) = (2857865,496, 2868846,368, 2874324,897), stdev = 7082,268
[info]   CI (99.9%): [2841575,077, 2896117,659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 11,65% complete, ETA 01:57:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 460298,198 ops/s
[info] # Warmup Iteration   2: 588568,966 ops/s
[info] # Warmup Iteration   3: 593256,132 ops/s
[info] # Warmup Iteration   4: 591872,114 ops/s
[info] # Warmup Iteration   5: 594115,333 ops/s
[info] Iteration   1: 593066,670 ops/s
[info]                  ·gc.alloc.rate:                   699,357 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1787,065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 593553,710 ops/s
[info]                  ·gc.alloc.rate:                   699,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1785,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 594558,206 ops/s
[info]                  ·gc.alloc.rate:               701,078 MB/sec
[info]                  ·gc.alloc.rate.norm:          1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1775,565 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 593570,418 ops/s
[info]                  ·gc.alloc.rate:               699,970 MB/sec
[info]                  ·gc.alloc.rate.norm:          1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,743 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1778,502 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 593662,807 ops/s
[info]                  ·gc.alloc.rate:                   700,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1776,442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   593682,362 ±(99.9%) 2087,572 ops/s [Average]
[info]   (min, avg, max) = (593066,670, 593682,362, 594558,206), stdev = 542,136
[info]   CI (99.9%): [591594,790, 595769,934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   700,068 ±(99.9%) 2,402 MB/sec [Average]
[info]   (min, avg, max) = (699,357, 700,068, 701,078), stdev = 0,624
[info]   CI (99.9%): [697,666, 702,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1856,001, 1856,001, 1856,001), stdev = 0,001
[info]   CI (99.9%): [1856,001, 1856,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   671,642 ±(99.9%) 6,242 MB/sec [Average]
[info]   (min, avg, max) = (669,997, 671,642, 673,395), stdev = 1,621
[info]   CI (99.9%): [665,400, 677,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1780,640 ±(99.9%) 20,566 B/op [Average]
[info]   (min, avg, max) = (1775,565, 1780,640, 1787,065), stdev = 5,341
[info]   CI (99.9%): [1760,075, 1801,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,778 ±(99.9%) 6,475 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,778, 3,785), stdev = 1,681
[info]   CI (99.9%): [≈ 0, 7,252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,064 ±(99.9%) 17,183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,064, 10,046), stdev = 4,462
[info]   CI (99.9%): [≈ 0, 19,247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 11,85% complete, ETA 01:56:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 207331,380 ops/s
[info] # Warmup Iteration   2: 218977,862 ops/s
[info] # Warmup Iteration   3: 217620,419 ops/s
[info] # Warmup Iteration   4: 218799,268 ops/s
[info] # Warmup Iteration   5: 218053,400 ops/s
[info] Iteration   1: 219298,162 ops/s
[info]                  ·gc.alloc.rate:                   559,538 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3671,314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,115 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 219694,805 ops/s
[info]                  ·gc.alloc.rate:                   560,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,862 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4834,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,481 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 219923,374 ops/s
[info]                  ·gc.alloc.rate:                   561,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4828,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,447 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 219798,077 ops/s
[info]                  ·gc.alloc.rate:               560,879 MB/sec
[info]                  ·gc.alloc.rate.norm:          4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4817,311 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 219826,372 ops/s
[info]                  ·gc.alloc.rate:      560,846 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle":
[info]   219708,158 ±(99.9%) 936,611 ops/s [Average]
[info]   (min, avg, max) = (219298,162, 219708,158, 219923,374), stdev = 243,235
[info]   CI (99.9%): [218771,547, 220644,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   560,609 ±(99.9%) 2,406 MB/sec [Average]
[info]   (min, avg, max) = (559,538, 560,609, 561,142), stdev = 0,625
[info]   CI (99.9%): [558,203, 563,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,774 ±(99.9%) 1124,063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,774, 674,862), stdev = 291,915
[info]   CI (99.9%): [≈ 0, 1630,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3630,321 ±(99.9%) 8048,556 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3630,321, 4834,215), stdev = 2090,184
[info]   CI (99.9%): [≈ 0, 11678,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,643 ±(99.9%) 5,371 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,138), stdev = 1,395
[info]   CI (99.9%): [≈ 0, 6,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   4,609 ±(99.9%) 38,477 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,609, 22,481), stdev = 9,992
[info]   CI (99.9%): [≈ 0, 43,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12,05% complete, ETA 01:56:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144023,644 ops/s
[info] # Warmup Iteration   2: 164121,730 ops/s
[info] # Warmup Iteration   3: 163719,600 ops/s
[info] # Warmup Iteration   4: 164009,403 ops/s
[info] # Warmup Iteration   5: 162509,080 ops/s
[info] Iteration   1: 164434,116 ops/s
[info]                  ·gc.alloc.rate:                   1976,347 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19311,344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 165233,774 ops/s
[info]                  ·gc.alloc.rate:                   1986,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,429 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19245,108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,793 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 165245,382 ops/s
[info]                  ·gc.alloc.rate:                   1986,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19275,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,198 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 163372,092 ops/s
[info]                  ·gc.alloc.rate:                   1963,986 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19527,284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,401 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 164500,817 ops/s
[info]                  ·gc.alloc.rate:                   1977,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19417,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,398 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   164557,236 ±(99.9%) 2954,072 ops/s [Average]
[info]   (min, avg, max) = (163372,092, 164557,236, 165245,382), stdev = 767,163
[info]   CI (99.9%): [161603,164, 167511,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1978,105 ±(99.9%) 35,640 MB/sec [Average]
[info]   (min, avg, max) = (1963,986, 1978,105, 1986,614), stdev = 9,256
[info]   CI (99.9%): [1942,465, 2013,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18920,002, 18920,003, 18920,003), stdev = 0,001
[info]   CI (99.9%): [18920,002, 18920,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023,584 ±(99.9%) 18,789 MB/sec [Average]
[info]   (min, avg, max) = (2017,226, 2023,584, 2029,320), stdev = 4,879
[info]   CI (99.9%): [2004,796, 2042,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19355,402 ±(99.9%) 447,305 B/op [Average]
[info]   (min, avg, max) = (19245,108, 19355,402, 19527,284), stdev = 116,164
[info]   CI (99.9%): [18908,097, 19802,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,438 ±(99.9%) 0,835 B/op [Average]
[info]   (min, avg, max) = (0,198, 0,438, 0,793), stdev = 0,217
[info]   CI (99.9%): [≈ 0, 1,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,25% complete, ETA 01:56:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 351604,388 ops/s
[info] # Warmup Iteration   2: 489859,188 ops/s
[info] # Warmup Iteration   3: 489979,540 ops/s
[info] # Warmup Iteration   4: 490583,587 ops/s
[info] # Warmup Iteration   5: 478480,443 ops/s
[info] Iteration   1: 492327,130 ops/s
[info]                  ·gc.alloc.rate:               395,364 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1635,512 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 492046,195 ops/s
[info]                  ·gc.alloc.rate:               395,177 MB/sec
[info]                  ·gc.alloc.rate.norm:          1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,623 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1636,462 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 492210,535 ops/s
[info]                  ·gc.alloc.rate:      395,273 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 489894,879 ops/s
[info]                  ·gc.alloc.rate:                   393,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2166,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,401 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 492285,487 ops/s
[info]                  ·gc.alloc.rate:      395,298 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   491752,845 ±(99.9%) 4020,690 ops/s [Average]
[info]   (min, avg, max) = (489894,879, 491752,845, 492327,130), stdev = 1044,161
[info]   CI (99.9%): [487732,155, 495773,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   394,912 ±(99.9%) 3,159 MB/sec [Average]
[info]   (min, avg, max) = (393,450, 394,912, 395,364), stdev = 0,820
[info]   CI (99.9%): [391,754, 398,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   339,528 ±(99.9%) 1220,638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,528, 674,450), stdev = 316,996
[info]   CI (99.9%): [≈ 0, 1560,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1087,744 ±(99.9%) 3913,549 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1087,744, 2166,745), stdev = 1016,336
[info]   CI (99.9%): [≈ 0, 5001,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,125), stdev = 0,056
[info]   CI (99.9%): [≈ 0, 0,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,080 ±(99.9%) 0,691 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,080, 0,401), stdev = 0,179
[info]   CI (99.9%): [≈ 0, 0,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12,45% complete, ETA 01:56:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 878968,638 ops/s
[info] # Warmup Iteration   2: 911020,858 ops/s
[info] # Warmup Iteration   3: 906952,862 ops/s
[info] # Warmup Iteration   4: 914518,124 ops/s
[info] # Warmup Iteration   5: 911917,654 ops/s
[info] Iteration   1: 908768,243 ops/s
[info]                  ·gc.alloc.rate:               175,525 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 885,951 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 913872,708 ops/s
[info]                  ·gc.alloc.rate:      176,531 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 913176,510 ops/s
[info]                  ·gc.alloc.rate:      176,383 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 908933,939 ops/s
[info]                  ·gc.alloc.rate:               175,571 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 885,782 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 912394,965 ops/s
[info]                  ·gc.alloc.rate:      176,216 MB/sec
[info]                  ·gc.alloc.rate.norm: 304,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   911429,273 ±(99.9%) 9286,271 ops/s [Average]
[info]   (min, avg, max) = (908768,243, 911429,273, 913872,708), stdev = 2411,615
[info]   CI (99.9%): [902143,002, 920715,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   176,045 ±(99.9%) 1,800 MB/sec [Average]
[info]   (min, avg, max) = (175,525, 176,045, 176,531), stdev = 0,468
[info]   CI (99.9%): [174,245, 177,845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,621 ±(99.9%) 1078,908 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,621, 511,571), stdev = 280,189
[info]   CI (99.9%): [≈ 0, 1283,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   354,347 ±(99.9%) 1868,368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 354,347, 885,951), stdev = 485,209
[info]   CI (99.9%): [≈ 0, 2222,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12,65% complete, ETA 01:55:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65822,328 ops/s
[info] # Warmup Iteration   2: 97518,580 ops/s
[info] # Warmup Iteration   3: 98039,115 ops/s
[info] # Warmup Iteration   4: 98120,593 ops/s
[info] # Warmup Iteration   5: 97719,221 ops/s
[info] Iteration   1: 97856,761 ops/s
[info]                  ·gc.alloc.rate:                   4164,335 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,505 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65595,591 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,674 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 98136,326 ops/s
[info]                  ·gc.alloc.rate:                   4176,723 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,258 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65477,242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,669 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 97788,802 ops/s
[info]                  ·gc.alloc.rate:                   4161,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65735,662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,010 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 97724,931 ops/s
[info]                  ·gc.alloc.rate:                   4158,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65823,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,341 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 97912,139 ops/s
[info]                  ·gc.alloc.rate:                   4166,319 MB/sec
[info]                  ·gc.alloc.rate.norm:              66976,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65719,357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,669 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   97883,792 ±(99.9%) 607,522 ops/s [Average]
[info]   (min, avg, max) = (97724,931, 97883,792, 98136,326), stdev = 157,772
[info]   CI (99.9%): [97276,270, 98491,314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4165,463 ±(99.9%) 26,686 MB/sec [Average]
[info]   (min, avg, max) = (4158,751, 4165,463, 4176,723), stdev = 6,930
[info]   CI (99.9%): [4138,776, 4192,149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66976,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66976,004, 66976,004, 66976,005), stdev = 0,001
[info]   CI (99.9%): [66976,004, 66976,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4084,247 ±(99.9%) 14,647 MB/sec [Average]
[info]   (min, avg, max) = (4078,505, 4084,247, 4088,148), stdev = 3,804
[info]   CI (99.9%): [4069,600, 4098,893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65670,296 ±(99.9%) 520,341 B/op [Average]
[info]   (min, avg, max) = (65477,242, 65670,296, 65823,630), stdev = 135,131
[info]   CI (99.9%): [65149,956, 66190,637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,092, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,473 ±(99.9%) 1,955 B/op [Average]
[info]   (min, avg, max) = (0,669, 1,473, 2,010), stdev = 0,508
[info]   CI (99.9%): [≈ 0, 3,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 12,85% complete, ETA 01:55:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250307,908 ops/s
[info] # Warmup Iteration   2: 272774,507 ops/s
[info] # Warmup Iteration   3: 273502,528 ops/s
[info] # Warmup Iteration   4: 272490,131 ops/s
[info] # Warmup Iteration   5: 272282,436 ops/s
[info] Iteration   1: 272664,398 ops/s
[info]                  ·gc.alloc.rate:                   1244,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7758,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,240 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 273040,203 ops/s
[info]                  ·gc.alloc.rate:                   1246,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7748,685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,360 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 272865,562 ops/s
[info]                  ·gc.alloc.rate:                   1245,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,947 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7753,000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 272954,003 ops/s
[info]                  ·gc.alloc.rate:                   1245,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7758,666 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,360 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 272796,296 ops/s
[info]                  ·gc.alloc.rate:               1245,078 MB/sec
[info]                  ·gc.alloc.rate.norm:          7184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3885,437 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle":
[info]   272864,092 ±(99.9%) 556,599 ops/s [Average]
[info]   (min, avg, max) = (272664,398, 272864,092, 273040,203), stdev = 144,547
[info]   CI (99.9%): [272307,493, 273420,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1245,450 ±(99.9%) 2,804 MB/sec [Average]
[info]   (min, avg, max) = (1244,525, 1245,450, 1246,366), stdev = 0,728
[info]   CI (99.9%): [1242,646, 1248,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   7184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7184,001, 7184,001, 7184,001), stdev = 0,001
[info]   CI (99.9%): [7184,001, 7184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,282 ±(99.9%) 1155,693 MB/sec [Average]
[info]   (min, avg, max) = (673,395, 1210,282, 1345,636), stdev = 300,130
[info]   CI (99.9%): [54,589, 2365,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6980,917 ±(99.9%) 6663,275 B/op [Average]
[info]   (min, avg, max) = (3885,437, 6980,917, 7758,800), stdev = 1730,431
[info]   CI (99.9%): [317,642, 13644,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,216 ±(99.9%) 0,603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,216, 0,360), stdev = 0,156
[info]   CI (99.9%): [≈ 0, 0,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13,05% complete, ETA 01:55:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246975,944 ops/s
[info] # Warmup Iteration   2: 300520,249 ops/s
[info] # Warmup Iteration   3: 291732,270 ops/s
[info] # Warmup Iteration   4: 292721,216 ops/s
[info] # Warmup Iteration   5: 293919,449 ops/s
[info] Iteration   1: 294474,913 ops/s
[info]                  ·gc.alloc.rate:                   1303,507 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7177,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,334 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 293730,862 ops/s
[info]                  ·gc.alloc.rate:                   1300,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7195,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,335 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 291361,080 ops/s
[info]                  ·gc.alloc.rate:                   1289,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,712 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7254,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,225 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 292613,068 ops/s
[info]                  ·gc.alloc.rate:                   1295,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7230,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,224 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 293245,616 ops/s
[info]                  ·gc.alloc.rate:               1298,309 MB/sec
[info]                  ·gc.alloc.rate.norm:          6968,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7221,647 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   293085,108 ±(99.9%) 4543,684 ops/s [Average]
[info]   (min, avg, max) = (291361,080, 293085,108, 294474,913), stdev = 1179,980
[info]   CI (99.9%): [288541,424, 297628,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1297,497 ±(99.9%) 20,167 MB/sec [Average]
[info]   (min, avg, max) = (1289,695, 1297,497, 1303,507), stdev = 5,237
[info]   CI (99.9%): [1277,330, 1317,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6968,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6968,001, 6968,001, 6968,002), stdev = 0,001
[info]   CI (99.9%): [6968,001, 6968,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1343,650 ±(99.9%) 4,887 MB/sec [Average]
[info]   (min, avg, max) = (1342,712, 1343,650, 1345,569), stdev = 1,269
[info]   CI (99.9%): [1338,762, 1348,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7215,953 ±(99.9%) 115,330 B/op [Average]
[info]   (min, avg, max) = (7177,760, 7215,953, 7254,440), stdev = 29,951
[info]   CI (99.9%): [7100,623, 7331,283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,223 ±(99.9%) 0,525 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,223, 0,335), stdev = 0,136
[info]   CI (99.9%): [≈ 0, 0,749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,25% complete, ETA 01:55:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1170377,055 ops/s
[info] # Warmup Iteration   2: 1610912,207 ops/s
[info] # Warmup Iteration   3: 1608455,756 ops/s
[info] # Warmup Iteration   4: 1611146,910 ops/s
[info] # Warmup Iteration   5: 1609200,539 ops/s
[info] Iteration   1: 1610749,104 ops/s
[info]                  ·gc.alloc.rate:                   826,907 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     659,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1617832,481 ops/s
[info]                  ·gc.alloc.rate:               830,608 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 656,786 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1616117,130 ops/s
[info]                  ·gc.alloc.rate:               829,664 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 658,402 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1609151,246 ops/s
[info]                  ·gc.alloc.rate:                   826,154 MB/sec
[info]                  ·gc.alloc.rate.norm:              808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1322,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1611810,042 ops/s
[info]                  ·gc.alloc.rate:               827,307 MB/sec
[info]                  ·gc.alloc.rate.norm:          808,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 660,518 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1613132,001 ±(99.9%) 14184,501 ops/s [Average]
[info]   (min, avg, max) = (1609151,246, 1613132,001, 1617832,481), stdev = 3683,670
[info]   CI (99.9%): [1598947,499, 1627316,502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   828,128 ±(99.9%) 7,350 MB/sec [Average]
[info]   (min, avg, max) = (826,154, 828,128, 830,608), stdev = 1,909
[info]   CI (99.9%): [820,779, 835,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (808,000, 808,000, 808,000), stdev = 0,001
[info]   CI (99.9%): [808,000, 808,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   811,026 ±(99.9%) 1165,683 MB/sec [Average]
[info]   (min, avg, max) = (675,055, 811,026, 1352,554), stdev = 302,724
[info]   CI (99.9%): [≈ 0, 1976,709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   791,632 ±(99.9%) 1143,464 B/op [Average]
[info]   (min, avg, max) = (656,786, 791,632, 1322,833), stdev = 296,954
[info]   CI (99.9%): [≈ 0, 1935,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,024 ±(99.9%) 0,129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,024, 0,061), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13,45% complete, ETA 01:54:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2158681,367 ops/s
[info] # Warmup Iteration   2: 2287828,706 ops/s
[info] # Warmup Iteration   3: 2307031,501 ops/s
[info] # Warmup Iteration   4: 2288028,995 ops/s
[info] # Warmup Iteration   5: 2288553,143 ops/s
[info] Iteration   1: 2260512,578 ops/s
[info]                  ·gc.alloc.rate:                   608,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,689 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     469,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,189 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2316737,271 ops/s
[info]                  ·gc.alloc.rate:      624,126 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2310665,470 ops/s
[info]                  ·gc.alloc.rate:                   622,416 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459,593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2312924,025 ops/s
[info]                  ·gc.alloc.rate:               623,147 MB/sec
[info]                  ·gc.alloc.rate.norm:          424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 457,789 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 2306288,957 ops/s
[info]                  ·gc.alloc.rate:                   621,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     459,101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   2301425,660 ±(99.9%) 89264,451 ops/s [Average]
[info]   (min, avg, max) = (2260512,578, 2301425,660, 2316737,271), stdev = 23181,695
[info]   CI (99.9%): [2212161,209, 2390690,112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   619,995 ±(99.9%) 24,070 MB/sec [Average]
[info]   (min, avg, max) = (608,965, 619,995, 624,126), stdev = 6,251
[info]   CI (99.9%): [595,925, 644,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,000, 424,000, 424,000), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   538,984 ±(99.9%) 1160,208 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,984, 674,689), stdev = 301,302
[info]   CI (99.9%): [≈ 0, 1699,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   369,249 ±(99.9%) 795,049 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 369,249, 469,762), stdev = 206,472
[info]   CI (99.9%): [≈ 0, 1164,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,645 ±(99.9%) 5,379 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,645, 3,144), stdev = 1,397
[info]   CI (99.9%): [≈ 0, 6,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,449 ±(99.9%) 3,745 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,449, 2,189), stdev = 0,973
[info]   CI (99.9%): [≈ 0, 4,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13,65% complete, ETA 01:54:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2089485,961 ops/s
[info] # Warmup Iteration   2: 2188682,770 ops/s
[info] # Warmup Iteration   3: 2178793,601 ops/s
[info] # Warmup Iteration   4: 2178165,632 ops/s
[info] # Warmup Iteration   5: 2175226,207 ops/s
[info] Iteration   1: 2184799,072 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2187901,109 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2184407,544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2178557,870 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2182663,526 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2183665,824 ±(99.9%) 13180,770 ops/s [Average]
[info]   (min, avg, max) = (2178557,870, 2183665,824, 2187901,109), stdev = 3423,004
[info]   CI (99.9%): [2170485,054, 2196846,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13,86% complete, ETA 01:54:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38084,364 ops/s
[info] # Warmup Iteration   2: 50511,298 ops/s
[info] # Warmup Iteration   3: 47314,961 ops/s
[info] # Warmup Iteration   4: 51296,776 ops/s
[info] # Warmup Iteration   5: 51203,197 ops/s
[info] Iteration   1: 51436,336 ops/s
[info]                  ·gc.alloc.rate:                   2167,988 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61606,006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,185 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 51328,481 ops/s
[info]                  ·gc.alloc.rate:                   2163,519 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2690,249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82486,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,277 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 51064,364 ops/s
[info]                  ·gc.alloc.rate:                   2152,306 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62329,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,642 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 51420,660 ops/s
[info]                  ·gc.alloc.rate:                   2167,467 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62010,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,274 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 51170,831 ops/s
[info]                  ·gc.alloc.rate:                   2156,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              66336,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,028 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62417,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,921 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   51284,134 ±(99.9%) 623,602 ops/s [Average]
[info]   (min, avg, max) = (51064,364, 51284,134, 51436,336), stdev = 161,947
[info]   CI (99.9%): [50660,533, 51907,736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2161,535 ±(99.9%) 26,704 MB/sec [Average]
[info]   (min, avg, max) = (2152,306, 2161,535, 2167,988), stdev = 6,935
[info]   CI (99.9%): [2134,831, 2188,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66336,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66336,008, 66336,008, 66336,009), stdev = 0,001
[info]   CI (99.9%): [66336,007, 66336,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2156,223 ±(99.9%) 1149,754 MB/sec [Average]
[info]   (min, avg, max) = (2013,403, 2156,223, 2690,249), stdev = 298,587
[info]   CI (99.9%): [1006,469, 3305,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66169,936 ±(99.9%) 35143,281 B/op [Average]
[info]   (min, avg, max) = (61606,006, 66169,936, 82486,154), stdev = 9126,599
[info]   CI (99.9%): [31026,655, 101313,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,104), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,660 ±(99.9%) 3,716 B/op [Average]
[info]   (min, avg, max) = (0,642, 1,660, 3,185), stdev = 0,965
[info]   CI (99.9%): [≈ 0, 5,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 14,06% complete, ETA 01:54:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 140009,408 ops/s
[info] # Warmup Iteration   2: 153847,979 ops/s
[info] # Warmup Iteration   3: 153852,307 ops/s
[info] # Warmup Iteration   4: 153992,647 ops/s
[info] # Warmup Iteration   5: 153955,070 ops/s
[info] Iteration   1: 153823,421 ops/s
[info]                  ·gc.alloc.rate:                   1119,625 MB/sec
[info]                  ·gc.alloc.rate.norm:              11456,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13759,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 154889,995 ops/s
[info]                  ·gc.alloc.rate:                   1127,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              11456,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,216 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13659,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,423 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 155007,533 ops/s
[info]                  ·gc.alloc.rate:               1128,187 MB/sec
[info]                  ·gc.alloc.rate.norm:          11456,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6823,910 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 153967,092 ops/s
[info]                  ·gc.alloc.rate:                   1120,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              11456,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13740,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 154035,272 ops/s
[info]                  ·gc.alloc.rate:                   1121,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              11456,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13747,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,425 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle":
[info]   154344,662 ±(99.9%) 2149,784 ops/s [Average]
[info]   (min, avg, max) = (153823,421, 154344,662, 155007,533), stdev = 558,292
[info]   CI (99.9%): [152194,879, 156494,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1123,408 ±(99.9%) 15,567 MB/sec [Average]
[info]   (min, avg, max) = (1119,625, 1123,408, 1128,187), stdev = 4,043
[info]   CI (99.9%): [1107,841, 1138,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11456,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11456,003, 11456,003, 11456,003), stdev = 0,001
[info]   CI (99.9%): [11456,002, 11456,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,118 ±(99.9%) 1158,301 MB/sec [Average]
[info]   (min, avg, max) = (672,019, 1210,118, 1345,325), stdev = 300,807
[info]   CI (99.9%): [51,817, 2368,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12346,197 ±(99.9%) 11888,113 B/op [Average]
[info]   (min, avg, max) = (6823,910, 12346,197, 13759,749), stdev = 3087,305
[info]   CI (99.9%): [458,084, 24234,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,340 ±(99.9%) 0,732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,340, 0,426), stdev = 0,190
[info]   CI (99.9%): [≈ 0, 1,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14,26% complete, ETA 01:53:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213893,089 ops/s
[info] # Warmup Iteration   2: 238511,456 ops/s
[info] # Warmup Iteration   3: 241873,010 ops/s
[info] # Warmup Iteration   4: 241634,936 ops/s
[info] # Warmup Iteration   5: 241764,399 ops/s
[info] Iteration   1: 242693,507 ops/s
[info]                  ·gc.alloc.rate:                   2497,674 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17486,706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,405 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 241924,731 ops/s
[info]                  ·gc.alloc.rate:                   2490,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17577,822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,406 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 241949,372 ops/s
[info]                  ·gc.alloc.rate:                   2490,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13202,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,406 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 241588,019 ops/s
[info]                  ·gc.alloc.rate:                   2486,725 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17661,780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,271 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 241391,969 ops/s
[info]                  ·gc.alloc.rate:                   2484,267 MB/sec
[info]                  ·gc.alloc.rate.norm:              16200,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17697,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,407 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   241909,520 ±(99.9%) 1913,422 ops/s [Average]
[info]   (min, avg, max) = (241391,969, 241909,520, 242693,507), stdev = 496,910
[info]   CI (99.9%): [239996,097, 243822,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2489,861 ±(99.9%) 19,503 MB/sec [Average]
[info]   (min, avg, max) = (2484,267, 2489,861, 2497,674), stdev = 5,065
[info]   CI (99.9%): [2470,359, 2509,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16200,002, 16200,002, 16200,002), stdev = 0,001
[info]   CI (99.9%): [16200,001, 16200,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2570,533 ±(99.9%) 1164,929 MB/sec [Average]
[info]   (min, avg, max) = (2029,503, 2570,533, 2713,858), stdev = 302,528
[info]   CI (99.9%): [1405,604, 3735,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16725,169 ±(99.9%) 7589,570 B/op [Average]
[info]   (min, avg, max) = (13202,361, 16725,169, 17697,174), stdev = 1970,987
[info]   CI (99.9%): [9135,599, 24314,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,022, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,379 ±(99.9%) 0,232 B/op [Average]
[info]   (min, avg, max) = (0,271, 0,379, 0,407), stdev = 0,060
[info]   CI (99.9%): [0,147, 0,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,46% complete, ETA 01:53:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261571,649 ops/s
[info] # Warmup Iteration   2: 365157,712 ops/s
[info] # Warmup Iteration   3: 369286,830 ops/s
[info] # Warmup Iteration   4: 366938,628 ops/s
[info] # Warmup Iteration   5: 368380,883 ops/s
[info] Iteration   1: 368115,869 ops/s
[info]                  ·gc.alloc.rate:                   1764,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8687,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,267 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 367226,761 ops/s
[info]                  ·gc.alloc.rate:                   1760,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5811,433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,089 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 369109,618 ops/s
[info]                  ·gc.alloc.rate:                   1769,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,597 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8680,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,266 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 368840,907 ops/s
[info]                  ·gc.alloc.rate:                   1768,042 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8691,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 369175,269 ops/s
[info]                  ·gc.alloc.rate:                   1769,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              7544,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,584 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5792,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,266 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   368493,685 ±(99.9%) 3170,844 ops/s [Average]
[info]   (min, avg, max) = (367226,761, 368493,685, 369175,269), stdev = 823,458
[info]   CI (99.9%): [365322,840, 371664,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1766,255 ±(99.9%) 14,866 MB/sec [Average]
[info]   (min, avg, max) = (1760,281, 1766,255, 1769,274), stdev = 3,861
[info]   CI (99.9%): [1751,389, 1781,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7544,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7544,001, 7544,001, 7544,001), stdev = 0,001
[info]   CI (99.9%): [7544,001, 7544,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1763,820 ±(99.9%) 1429,003 MB/sec [Average]
[info]   (min, avg, max) = (1356,012, 1763,820, 2036,985), stdev = 371,108
[info]   CI (99.9%): [334,816, 3192,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7532,647 ±(99.9%) 6083,024 B/op [Average]
[info]   (min, avg, max) = (5792,861, 7532,647, 8691,544), stdev = 1579,742
[info]   CI (99.9%): [1449,623, 13615,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,213 ±(99.9%) 0,305 B/op [Average]
[info]   (min, avg, max) = (0,089, 0,213, 0,267), stdev = 0,079
[info]   CI (99.9%): [≈ 0, 0,519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14,66% complete, ETA 01:53:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1362805,564 ops/s
[info] # Warmup Iteration   2: 1396532,405 ops/s
[info] # Warmup Iteration   3: 1387180,402 ops/s
[info] # Warmup Iteration   4: 1402902,010 ops/s
[info] # Warmup Iteration   5: 1404659,271 ops/s
[info] Iteration   1: 1402315,707 ops/s
[info]                  ·gc.alloc.rate:               484,686 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 574,139 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1407150,645 ops/s
[info]                  ·gc.alloc.rate:               486,345 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 572,210 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 1407595,905 ops/s
[info]                  ·gc.alloc.rate:                   486,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     755,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,513 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1405409,487 ops/s
[info]                  ·gc.alloc.rate:                   485,795 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     756,373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,093 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1407571,299 ops/s
[info]                  ·gc.alloc.rate:      486,488 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1406008,608 ±(99.9%) 8666,565 ops/s [Average]
[info]   (min, avg, max) = (1402315,707, 1406008,608, 1407595,905), stdev = 2250,679
[info]   CI (99.9%): [1397342,043, 1414675,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   485,958 ±(99.9%) 2,947 MB/sec [Average]
[info]   (min, avg, max) = (484,686, 485,958, 486,488), stdev = 0,765
[info]   CI (99.9%): [483,011, 488,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,000), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,783 ±(99.9%) 1069,590 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,783, 675,445), stdev = 277,769
[info]   CI (99.9%): [≈ 0, 1544,373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   531,590 ±(99.9%) 1197,095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 531,590, 756,373), stdev = 310,882
[info]   CI (99.9%): [≈ 0, 1728,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,645 ±(99.9%) 5,375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,645, 3,141), stdev = 1,396
[info]   CI (99.9%): [≈ 0, 6,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,721 ±(99.9%) 6,011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,721, 3,513), stdev = 1,561
[info]   CI (99.9%): [≈ 0, 6,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14,86% complete, ETA 01:52:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52444,125 ops/s
[info] # Warmup Iteration   2: 92904,339 ops/s
[info] # Warmup Iteration   3: 93102,824 ops/s
[info] # Warmup Iteration   4: 92969,318 ops/s
[info] # Warmup Iteration   5: 92848,066 ops/s
[info] Iteration   1: 93007,478 ops/s
[info]                  ·gc.alloc.rate:                   3906,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079,151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69024,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,704 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 92994,517 ops/s
[info]                  ·gc.alloc.rate:                   3906,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,901 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69112,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,705 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 93120,019 ops/s
[info]                  ·gc.alloc.rate:                   3910,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57533,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,055 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 92592,986 ops/s
[info]                  ·gc.alloc.rate:                   3889,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69486,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,061 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 92894,440 ops/s
[info]                  ·gc.alloc.rate:                   3901,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              66104,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69270,072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,058 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   92921,888 ±(99.9%) 772,020 ops/s [Average]
[info]   (min, avg, max) = (92592,986, 92921,888, 93120,019), stdev = 200,491
[info]   CI (99.9%): [92149,869, 93693,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3902,856 ±(99.9%) 31,940 MB/sec [Average]
[info]   (min, avg, max) = (3889,330, 3902,856, 3910,959), stdev = 8,295
[info]   CI (99.9%): [3870,916, 3934,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66104,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66104,004, 66104,004, 66104,005), stdev = 0,001
[info]   CI (99.9%): [66104,004, 66104,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3948,698 ±(99.9%) 1172,790 MB/sec [Average]
[info]   (min, avg, max) = (3403,909, 3948,698, 4088,347), stdev = 304,570
[info]   CI (99.9%): [2775,908, 5121,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66885,543 ±(99.9%) 20141,859 B/op [Average]
[info]   (min, avg, max) = (57533,714, 66885,543, 69486,544), stdev = 5230,777
[info]   CI (99.9%): [46743,684, 87027,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,917 ±(99.9%) 0,746 B/op [Average]
[info]   (min, avg, max) = (0,704, 0,917, 1,061), stdev = 0,194
[info]   CI (99.9%): [0,171, 1,663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   29,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,800, 6,000), stdev = 0,447
[info]   CI (99.9%): [29,000, 29,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 15,06% complete, ETA 01:52:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235102,995 ops/s
[info] # Warmup Iteration   2: 258238,903 ops/s
[info] # Warmup Iteration   3: 261872,978 ops/s
[info] # Warmup Iteration   4: 263008,678 ops/s
[info] # Warmup Iteration   5: 261954,733 ops/s
[info] Iteration   1: 263822,068 ops/s
[info]                  ·gc.alloc.rate:                   2794,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16102,287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,373 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 263807,130 ops/s
[info]                  ·gc.alloc.rate:                   2794,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3381,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20173,636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,248 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 263810,191 ops/s
[info]                  ·gc.alloc.rate:                   2794,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16173,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,373 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 263295,811 ops/s
[info]                  ·gc.alloc.rate:                   2789,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,128 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16229,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,373 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 263408,221 ops/s
[info]                  ·gc.alloc.rate:                   2789,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              16672,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,256 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16237,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle":
[info]   263628,684 ±(99.9%) 984,730 ops/s [Average]
[info]   (min, avg, max) = (263295,811, 263628,684, 263822,068), stdev = 255,731
[info]   CI (99.9%): [262643,954, 264613,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2792,527 ±(99.9%) 10,491 MB/sec [Average]
[info]   (min, avg, max) = (2789,227, 2792,527, 2794,657), stdev = 2,725
[info]   CI (99.9%): [2782,036, 2803,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   16672,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16672,002, 16672,002, 16672,002), stdev = 0,001
[info]   CI (99.9%): [16672,001, 16672,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2844,761 ±(99.9%) 1155,605 MB/sec [Average]
[info]   (min, avg, max) = (2699,159, 2844,761, 3381,463), stdev = 300,107
[info]   CI (99.9%): [1689,156, 4000,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16983,315 ±(99.9%) 6870,570 B/op [Average]
[info]   (min, avg, max) = (16102,287, 16983,315, 20173,636), stdev = 1784,265
[info]   CI (99.9%): [10112,744, 23853,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,298 ±(99.9%) 0,428 B/op [Average]
[info]   (min, avg, max) = (0,124, 0,298, 0,373), stdev = 0,111
[info]   CI (99.9%): [≈ 0, 0,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 15,26% complete, ETA 01:52:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203692,151 ops/s
[info] # Warmup Iteration   2: 248560,791 ops/s
[info] # Warmup Iteration   3: 253446,653 ops/s
[info] # Warmup Iteration   4: 251473,277 ops/s
[info] # Warmup Iteration   5: 252633,009 ops/s
[info] Iteration   1: 249239,383 ops/s
[info]                  ·gc.alloc.rate:                   2112,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12736,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,394 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 251160,070 ops/s
[info]                  ·gc.alloc.rate:                   2128,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2694,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16886,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,522 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 253807,590 ops/s
[info]                  ·gc.alloc.rate:                   2150,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12553,753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,258 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 253950,867 ops/s
[info]                  ·gc.alloc.rate:                   2151,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12568,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,258 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 253484,307 ops/s
[info]                  ·gc.alloc.rate:                   2147,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,866 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12608,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   252328,443 ±(99.9%) 7953,128 ops/s [Average]
[info]   (min, avg, max) = (249239,383, 252328,443, 253950,867), stdev = 2065,402
[info]   CI (99.9%): [244375,315, 260281,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2137,889 ±(99.9%) 66,555 MB/sec [Average]
[info]   (min, avg, max) = (2112,057, 2137,889, 2151,851), stdev = 17,284
[info]   CI (99.9%): [2071,334, 2204,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13336,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13336,002, 13336,002, 13336,002), stdev = 0,001
[info]   CI (99.9%): [13336,001, 13336,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2158,785 ±(99.9%) 1153,809 MB/sec [Average]
[info]   (min, avg, max) = (2017,132, 2158,785, 2694,727), stdev = 299,641
[info]   CI (99.9%): [1004,976, 3312,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13470,662 ±(99.9%) 7357,559 B/op [Average]
[info]   (min, avg, max) = (12553,753, 13470,662, 16886,260), stdev = 1910,735
[info]   CI (99.9%): [6113,103, 20828,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,312 ±(99.9%) 0,578 B/op [Average]
[info]   (min, avg, max) = (0,129, 0,312, 0,522), stdev = 0,150
[info]   CI (99.9%): [≈ 0, 0,890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,46% complete, ETA 01:52:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 871583,688 ops/s
[info] # Warmup Iteration   2: 1149269,637 ops/s
[info] # Warmup Iteration   3: 1182207,050 ops/s
[info] # Warmup Iteration   4: 1176613,328 ops/s
[info] # Warmup Iteration   5: 1178056,804 ops/s
[info] Iteration   1: 1175670,533 ops/s
[info]                  ·gc.alloc.rate:               687,253 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 902,833 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 1175086,529 ops/s
[info]                  ·gc.alloc.rate:                   686,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     904,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1178590,351 ops/s
[info]                  ·gc.alloc.rate:               688,884 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 901,930 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1176156,360 ops/s
[info]                  ·gc.alloc.rate:                   687,538 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     904,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1176234,524 ops/s
[info]                  ·gc.alloc.rate:               687,495 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 904,630 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1176347,659 ±(99.9%) 5140,288 ops/s [Average]
[info]   (min, avg, max) = (1175086,529, 1176347,659, 1178590,351), stdev = 1334,917
[info]   CI (99.9%): [1171207,371, 1181487,948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   687,607 ±(99.9%) 2,936 MB/sec [Average]
[info]   (min, avg, max) = (686,864, 687,607, 688,884), stdev = 0,763
[info]   CI (99.9%): [684,671, 690,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,456 ±(99.9%) 2,569 MB/sec [Average]
[info]   (min, avg, max) = (674,428, 675,456, 676,091), stdev = 0,667
[info]   CI (99.9%): [672,888, 678,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   903,744 ±(99.9%) 4,945 B/op [Average]
[info]   (min, avg, max) = (901,930, 903,744, 904,683), stdev = 1,284
[info]   CI (99.9%): [898,799, 908,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,022 ±(99.9%) 0,140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,084), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15,66% complete, ETA 01:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2723200,762 ops/s
[info] # Warmup Iteration   2: 2811371,652 ops/s
[info] # Warmup Iteration   3: 2869075,299 ops/s
[info] # Warmup Iteration   4: 2874810,855 ops/s
[info] # Warmup Iteration   5: 2843017,774 ops/s
[info] Iteration   1: 2874045,635 ops/s
[info]                  ·gc.alloc.rate:                   978,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736,821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2875374,847 ops/s
[info]                  ·gc.alloc.rate:               979,205 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 367,904 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 2873029,046 ops/s
[info]                  ·gc.alloc.rate:                   978,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736,352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2869534,179 ops/s
[info]                  ·gc.alloc.rate:               977,306 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 368,624 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2868844,894 ops/s
[info]                  ·gc.alloc.rate:                   976,873 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368,710 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2872165,720 ±(99.9%) 10981,224 ops/s [Average]
[info]   (min, avg, max) = (2868844,894, 2872165,720, 2875374,847), stdev = 2851,789
[info]   CI (99.9%): [2861184,496, 2883146,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   978,103 ±(99.9%) 3,778 MB/sec [Average]
[info]   (min, avg, max) = (976,873, 978,103, 979,205), stdev = 0,981
[info]   CI (99.9%): [974,325, 981,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,153 ±(99.9%) 1418,780 MB/sec [Average]
[info]   (min, avg, max) = (671,982, 941,153, 1345,438), stdev = 368,453
[info]   CI (99.9%): [≈ 0, 2359,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   515,682 ±(99.9%) 776,511 B/op [Average]
[info]   (min, avg, max) = (367,904, 515,682, 736,821), stdev = 201,657
[info]   CI (99.9%): [≈ 0, 1292,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15,86% complete, ETA 01:51:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2709347,380 ops/s
[info] # Warmup Iteration   2: 2892202,888 ops/s
[info] # Warmup Iteration   3: 2889729,051 ops/s
[info] # Warmup Iteration   4: 2896685,196 ops/s
[info] # Warmup Iteration   5: 2894280,069 ops/s
[info] Iteration   1: 2894252,044 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2889783,296 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2892843,991 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2882985,924 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2885094,875 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2888992,026 ±(99.9%) 18705,629 ops/s [Average]
[info]   (min, avg, max) = (2882985,924, 2888992,026, 2894252,044), stdev = 4857,792
[info]   CI (99.9%): [2870286,397, 2907697,655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16,06% complete, ETA 01:51:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221618,537 ops/s
[info] # Warmup Iteration   2: 350421,096 ops/s
[info] # Warmup Iteration   3: 349197,606 ops/s
[info] # Warmup Iteration   4: 348295,745 ops/s
[info] # Warmup Iteration   5: 347824,727 ops/s
[info] Iteration   1: 346251,531 ops/s
[info]                  ·gc.alloc.rate:                   2833,494 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15426,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,568 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 347664,303 ops/s
[info]                  ·gc.alloc.rate:                   2844,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12306,989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,283 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 348755,589 ops/s
[info]                  ·gc.alloc.rate:                   2853,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12276,739 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,282 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 348121,963 ops/s
[info]                  ·gc.alloc.rate:                   2848,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12307,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,282 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 346746,457 ops/s
[info]                  ·gc.alloc.rate:                   2837,095 MB/sec
[info]                  ·gc.alloc.rate.norm:              12880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12359,450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,283 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   347507,969 ±(99.9%) 3906,327 ops/s [Average]
[info]   (min, avg, max) = (346251,531, 347507,969, 348755,589), stdev = 1014,461
[info]   CI (99.9%): [343601,642, 351414,295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2843,641 ±(99.9%) 32,127 MB/sec [Average]
[info]   (min, avg, max) = (2833,494, 2843,641, 2853,809), stdev = 8,343
[info]   CI (99.9%): [2811,514, 2875,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12880,001, 12880,001, 12880,001), stdev = 0,001
[info]   CI (99.9%): [12880,001, 12880,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2855,364 ±(99.9%) 1158,648 MB/sec [Average]
[info]   (min, avg, max) = (2718,346, 2855,364, 3393,617), stdev = 300,897
[info]   CI (99.9%): [1696,716, 4014,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12935,371 ±(99.9%) 5362,733 B/op [Average]
[info]   (min, avg, max) = (12276,739, 12935,371, 15426,113), stdev = 1392,685
[info]   CI (99.9%): [7572,638, 18298,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,075, 0,125), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,340 ±(99.9%) 0,491 B/op [Average]
[info]   (min, avg, max) = (0,282, 0,340, 0,568), stdev = 0,128
[info]   CI (99.9%): [≈ 0, 0,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 16,27% complete, ETA 01:51:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 95555,667 ops/s
[info] # Warmup Iteration   2: 100659,074 ops/s
[info] # Warmup Iteration   3: 101184,081 ops/s
[info] # Warmup Iteration   4: 101792,113 ops/s
[info] # Warmup Iteration   5: 101495,978 ops/s
[info] Iteration   1: 102144,636 ops/s
[info]                  ·gc.alloc.rate:                   758,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10396,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,962 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 102270,642 ops/s
[info]                  ·gc.alloc.rate:               759,077 MB/sec
[info]                  ·gc.alloc.rate.norm:          11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10354,028 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 102112,345 ops/s
[info]                  ·gc.alloc.rate:               757,752 MB/sec
[info]                  ·gc.alloc.rate.norm:          11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10369,234 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 101896,581 ops/s
[info]                  ·gc.alloc.rate:                   756,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,130 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10381,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,322 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 101769,240 ops/s
[info]                  ·gc.alloc.rate:                   755,291 MB/sec
[info]                  ·gc.alloc.rate.norm:              11680,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10393,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,644 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle":
[info]   102038,689 ±(99.9%) 777,910 ops/s [Average]
[info]   (min, avg, max) = (101769,240, 102038,689, 102270,642), stdev = 202,021
[info]   CI (99.9%): [101260,779, 102816,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   757,267 ±(99.9%) 5,806 MB/sec [Average]
[info]   (min, avg, max) = (755,291, 757,267, 759,077), stdev = 1,508
[info]   CI (99.9%): [751,460, 763,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11680,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11680,004, 11680,004, 11680,005), stdev = 0,001
[info]   CI (99.9%): [11680,003, 11680,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   672,916 ±(99.9%) 4,134 MB/sec [Average]
[info]   (min, avg, max) = (672,103, 672,916, 674,730), stdev = 1,074
[info]   CI (99.9%): [668,782, 677,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10379,008 ±(99.9%) 68,155 B/op [Average]
[info]   (min, avg, max) = (10354,028, 10379,008, 10396,777), stdev = 17,700
[info]   CI (99.9%): [10310,853, 10447,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,386 ±(99.9%) 1,612 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,386, 0,962), stdev = 0,419
[info]   CI (99.9%): [≈ 0, 1,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16,47% complete, ETA 01:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25024,815 ops/s
[info] # Warmup Iteration   2: 30494,021 ops/s
[info] # Warmup Iteration   3: 30784,365 ops/s
[info] # Warmup Iteration   4: 30899,352 ops/s
[info] # Warmup Iteration   5: 30741,652 ops/s
[info] Iteration   1: 30918,111 ops/s
[info]                  ·gc.alloc.rate:                   1810,972 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102673,914 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,239 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30736,320 ops/s
[info]                  ·gc.alloc.rate:                   1800,438 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68912,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,066 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 30890,781 ops/s
[info]                  ·gc.alloc.rate:                   1809,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102943,632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,060 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 30837,925 ops/s
[info]                  ·gc.alloc.rate:                   1806,522 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103341,472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,125 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30922,433 ops/s
[info]                  ·gc.alloc.rate:               1811,142 MB/sec
[info]                  ·gc.alloc.rate.norm:          92192,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68784,091 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   30861,114 ±(99.9%) 298,270 ops/s [Average]
[info]   (min, avg, max) = (30736,320, 30861,114, 30922,433), stdev = 77,460
[info]   CI (99.9%): [30562,844, 31159,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1807,714 ±(99.9%) 17,211 MB/sec [Average]
[info]   (min, avg, max) = (1800,438, 1807,714, 1811,142), stdev = 4,470
[info]   CI (99.9%): [1790,503, 1824,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92192,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (92192,013, 92192,014, 92192,015), stdev = 0,001
[info]   CI (99.9%): [92192,010, 92192,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1751,897 ±(99.9%) 1417,897 MB/sec [Average]
[info]   (min, avg, max) = (1345,808, 1751,897, 2024,998), stdev = 368,223
[info]   CI (99.9%): [334,001, 3169,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89331,134 ±(99.9%) 72005,974 B/op [Average]
[info]   (min, avg, max) = (68784,091, 89331,134, 103341,472), stdev = 18699,723
[info]   CI (99.9%): [17325,160, 161337,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,698 ±(99.9%) 6,187 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,698, 4,239), stdev = 1,607
[info]   CI (99.9%): [≈ 0, 7,885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 16,67% complete, ETA 01:50:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21236,778 ops/s
[info] # Warmup Iteration   2: 103460,582 ops/s
[info] # Warmup Iteration   3: 103892,924 ops/s
[info] # Warmup Iteration   4: 104382,596 ops/s
[info] # Warmup Iteration   5: 103757,649 ops/s
[info] Iteration   1: 104149,804 ops/s
[info]                  ·gc.alloc.rate:               938,054 MB/sec
[info]                  ·gc.alloc.rate.norm:          14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,063 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10156,309 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 104165,832 ops/s
[info]                  ·gc.alloc.rate:               938,200 MB/sec
[info]                  ·gc.alloc.rate.norm:          14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10154,749 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 104087,745 ops/s
[info]                  ·gc.alloc.rate:                   937,535 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,182 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20324,715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,574 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 104284,384 ops/s
[info]                  ·gc.alloc.rate:               939,336 MB/sec
[info]                  ·gc.alloc.rate.norm:          14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10143,262 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 104194,430 ops/s
[info]                  ·gc.alloc.rate:                   938,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,377 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20308,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,629 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   104176,439 ±(99.9%) 276,768 ops/s [Average]
[info]   (min, avg, max) = (104087,745, 104176,439, 104284,384), stdev = 71,876
[info]   CI (99.9%): [103899,671, 104453,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   938,306 ±(99.9%) 2,539 MB/sec [Average]
[info]   (min, avg, max) = (937,535, 938,306, 939,336), stdev = 0,659
[info]   CI (99.9%): [935,767, 940,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14176,004, 14176,004, 14176,004), stdev = 0,001
[info]   CI (99.9%): [14176,003, 14176,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   940,961 ±(99.9%) 1417,723 MB/sec [Average]
[info]   (min, avg, max) = (672,063, 940,961, 1344,377), stdev = 368,178
[info]   CI (99.9%): [≈ 0, 2358,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   14217,583 ±(99.9%) 21439,616 B/op [Average]
[info]   (min, avg, max) = (10143,262, 14217,583, 20324,715), stdev = 5567,800
[info]   CI (99.9%): [≈ 0, 35657,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,441 ±(99.9%) 2,655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,441, 1,574), stdev = 0,690
[info]   CI (99.9%): [≈ 0, 3,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16,87% complete, ETA 01:50:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47985,453 ops/s
[info] # Warmup Iteration   2: 68729,317 ops/s
[info] # Warmup Iteration   3: 68628,697 ops/s
[info] # Warmup Iteration   4: 68877,972 ops/s
[info] # Warmup Iteration   5: 68454,046 ops/s
[info] Iteration   1: 68139,233 ops/s
[info]                  ·gc.alloc.rate:               1122,908 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,775 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15608,480 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 68792,035 ops/s
[info]                  ·gc.alloc.rate:                   1133,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30937,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,953 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 68318,981 ops/s
[info]                  ·gc.alloc.rate:                   1125,764 MB/sec
[info]                  ·gc.alloc.rate.norm:              25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31181,678 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,480 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 68699,233 ops/s
[info]                  ·gc.alloc.rate:               1132,140 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15511,118 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 68711,537 ops/s
[info]                  ·gc.alloc.rate:               1132,580 MB/sec
[info]                  ·gc.alloc.rate.norm:          25936,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 31032,076 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   68532,204 ±(99.9%) 1101,751 ops/s [Average]
[info]   (min, avg, max) = (68139,233, 68532,204, 68792,035), stdev = 286,121
[info]   CI (99.9%): [67430,453, 69633,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1129,416 ±(99.9%) 18,405 MB/sec [Average]
[info]   (min, avg, max) = (1122,908, 1129,416, 1133,690), stdev = 4,780
[info]   CI (99.9%): [1111,012, 1147,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25936,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25936,006, 25936,006, 25936,006), stdev = 0,001
[info]   CI (99.9%): [25936,005, 25936,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,745 ±(99.9%) 1428,271 MB/sec [Average]
[info]   (min, avg, max) = (675,775, 1082,745, 1355,116), stdev = 370,918
[info]   CI (99.9%): [≈ 0, 2511,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24854,129 ±(99.9%) 32672,869 B/op [Average]
[info]   (min, avg, max) = (15511,118, 24854,129, 31181,678), stdev = 8485,040
[info]   CI (99.9%): [≈ 0, 57526,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,286 ±(99.9%) 1,642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,286, 0,953), stdev = 0,426
[info]   CI (99.9%): [≈ 0, 1,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,07% complete, ETA 01:50:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133458,504 ops/s
[info] # Warmup Iteration   2: 145904,872 ops/s
[info] # Warmup Iteration   3: 145777,226 ops/s
[info] # Warmup Iteration   4: 146185,502 ops/s
[info] # Warmup Iteration   5: 145578,874 ops/s
[info] Iteration   1: 146557,845 ops/s
[info]                  ·gc.alloc.rate:               944,599 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7224,652 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 146317,589 ops/s
[info]                  ·gc.alloc.rate:                   943,025 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14466,922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,672 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 146351,996 ops/s
[info]                  ·gc.alloc.rate:               943,192 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7227,607 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 146140,862 ops/s
[info]                  ·gc.alloc.rate:               941,950 MB/sec
[info]                  ·gc.alloc.rate.norm:          10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14476,079 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 146193,593 ops/s
[info]                  ·gc.alloc.rate:                   942,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7235,367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,448 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   146312,377 ±(99.9%) 624,999 ops/s [Average]
[info]   (min, avg, max) = (146140,862, 146312,377, 146557,845), stdev = 162,310
[info]   CI (99.9%): [145687,379, 146937,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   943,013 ±(99.9%) 3,938 MB/sec [Average]
[info]   (min, avg, max) = (941,950, 943,013, 944,599), stdev = 1,023
[info]   CI (99.9%): [939,076, 946,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10144,003, 10144,003, 10144,003), stdev = 0,001
[info]   CI (99.9%): [10144,002, 10144,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,201 ±(99.9%) 1417,861 MB/sec [Average]
[info]   (min, avg, max) = (672,024, 941,201, 1344,900), stdev = 368,214
[info]   CI (99.9%): [≈ 0, 2359,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10126,125 ±(99.9%) 15274,619 B/op [Average]
[info]   (min, avg, max) = (7224,652, 10126,125, 14476,079), stdev = 3966,770
[info]   CI (99.9%): [≈ 0, 25400,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,224 ±(99.9%) 1,220 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,224, 0,672), stdev = 0,317
[info]   CI (99.9%): [≈ 0, 1,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 17,27% complete, ETA 01:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24605,745 ops/s
[info] # Warmup Iteration   2: 39994,202 ops/s
[info] # Warmup Iteration   3: 40536,119 ops/s
[info] # Warmup Iteration   4: 40629,155 ops/s
[info] # Warmup Iteration   5: 40713,761 ops/s
[info] Iteration   1: 40703,199 ops/s
[info]                  ·gc.alloc.rate:                   2125,229 MB/sec
[info]                  ·gc.alloc.rate.norm:              82192,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104520,189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,415 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 40622,013 ops/s
[info]                  ·gc.alloc.rate:                   2121,508 MB/sec
[info]                  ·gc.alloc.rate.norm:              82192,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,223 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78694,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,420 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 40672,085 ops/s
[info]                  ·gc.alloc.rate:                   2123,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              82192,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,848 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78665,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,611 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 40684,983 ops/s
[info]                  ·gc.alloc.rate:                   2124,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              82192,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78741,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,416 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 40367,930 ops/s
[info]                  ·gc.alloc.rate:                   2107,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              82192,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79415,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,623 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   40610,042 ±(99.9%) 533,926 ops/s [Average]
[info]   (min, avg, max) = (40367,930, 40610,042, 40703,199), stdev = 138,659
[info]   CI (99.9%): [40076,116, 41143,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2120,645 ±(99.9%) 28,513 MB/sec [Average]
[info]   (min, avg, max) = (2107,655, 2120,645, 2125,229), stdev = 7,405
[info]   CI (99.9%): [2092,132, 2149,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82192,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (82192,010, 82192,010, 82192,011), stdev = 0,001
[info]   CI (99.9%): [82192,009, 82192,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2167,743 ±(99.9%) 1151,276 MB/sec [Average]
[info]   (min, avg, max) = (2031,223, 2167,743, 2702,566), stdev = 298,983
[info]   CI (99.9%): [1016,467, 3319,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84007,146 ±(99.9%) 44172,086 B/op [Average]
[info]   (min, avg, max) = (78665,109, 84007,146, 104520,189), stdev = 11471,351
[info]   CI (99.9%): [39835,060, 128179,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,097 ±(99.9%) 1,687 B/op [Average]
[info]   (min, avg, max) = (1,611, 2,097, 2,420), stdev = 0,438
[info]   CI (99.9%): [0,410, 3,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 17,47% complete, ETA 01:49:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66705,445 ops/s
[info] # Warmup Iteration   2: 75163,708 ops/s
[info] # Warmup Iteration   3: 75241,665 ops/s
[info] # Warmup Iteration   4: 75574,029 ops/s
[info] # Warmup Iteration   5: 75106,629 ops/s
[info] Iteration   1: 74135,177 ops/s
[info]                  ·gc.alloc.rate:                   1333,412 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28539,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,326 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 75438,558 ops/s
[info]                  ·gc.alloc.rate:                   1357,074 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28045,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,303 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 75415,079 ops/s
[info]                  ·gc.alloc.rate:               1356,552 MB/sec
[info]                  ·gc.alloc.rate.norm:          28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28068,610 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 75534,454 ops/s
[info]                  ·gc.alloc.rate:                   1358,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28049,928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,867 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 75410,724 ops/s
[info]                  ·gc.alloc.rate:                   1356,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              28312,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28124,592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,869 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle":
[info]   75186,798 ±(99.9%) 2271,887 ops/s [Average]
[info]   (min, avg, max) = (74135,177, 75186,798, 75534,454), stdev = 590,002
[info]   CI (99.9%): [72914,911, 77458,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1352,458 ±(99.9%) 41,167 MB/sec [Average]
[info]   (min, avg, max) = (1333,412, 1352,458, 1358,843), stdev = 10,691
[info]   CI (99.9%): [1311,291, 1393,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28312,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28312,005, 28312,006, 28312,006), stdev = 0,001
[info]   CI (99.9%): [28312,005, 28312,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1345,393 ±(99.9%) 5,468 MB/sec [Average]
[info]   (min, avg, max) = (1344,104, 1345,393, 1347,430), stdev = 1,420
[info]   CI (99.9%): [1339,925, 1350,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28165,440 ±(99.9%) 813,327 B/op [Average]
[info]   (min, avg, max) = (28045,041, 28165,440, 28539,030), stdev = 211,218
[info]   CI (99.9%): [27352,114, 28978,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,873 ±(99.9%) 2,067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,873, 1,326), stdev = 0,537
[info]   CI (99.9%): [≈ 0, 2,940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17,67% complete, ETA 01:49:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29500,416 ops/s
[info] # Warmup Iteration   2: 42853,652 ops/s
[info] # Warmup Iteration   3: 43598,159 ops/s
[info] # Warmup Iteration   4: 42014,023 ops/s
[info] # Warmup Iteration   5: 42223,852 ops/s
[info] Iteration   1: 41765,285 ops/s
[info]                  ·gc.alloc.rate:               548,768 MB/sec
[info]                  ·gc.alloc.rate.norm:          20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19276,309 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 42383,841 ops/s
[info]                  ·gc.alloc.rate:      556,922 MB/sec
[info]                  ·gc.alloc.rate.norm: 20680,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 42251,044 ops/s
[info]                  ·gc.alloc.rate:                   555,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25134,462 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125,412 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 42274,325 ops/s
[info]                  ·gc.alloc.rate:                   555,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              20680,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25120,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,100 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 41012,222 ops/s
[info]                  ·gc.alloc.rate:               538,811 MB/sec
[info]                  ·gc.alloc.rate.norm:          20680,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,986 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25791,360 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   41937,343 ±(99.9%) 2192,483 ops/s [Average]
[info]   (min, avg, max) = (41012,222, 41937,343, 42383,841), stdev = 569,381
[info]   CI (99.9%): [39744,860, 44129,827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   551,024 ±(99.9%) 28,933 MB/sec [Average]
[info]   (min, avg, max) = (538,811, 551,024, 556,922), stdev = 7,514
[info]   CI (99.9%): [522,091, 579,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   20680,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (20680,010, 20680,010, 20680,011), stdev = 0,001
[info]   CI (99.9%): [20680,008, 20680,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,594 ±(99.9%) 1123,565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,594, 674,762), stdev = 291,786
[info]   CI (99.9%): [≈ 0, 1630,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19064,465 ±(99.9%) 42281,165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19064,465, 25791,360), stdev = 10980,284
[info]   CI (99.9%): [≈ 0, 61345,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,690 ±(99.9%) 5,763 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,690, 3,367), stdev = 1,497
[info]   CI (99.9%): [≈ 0, 6,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25,702 ±(99.9%) 214,694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25,702, 125,412), stdev = 55,755
[info]   CI (99.9%): [≈ 0, 240,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17,87% complete, ETA 01:49:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26549,994 ops/s
[info] # Warmup Iteration   2: 45437,553 ops/s
[info] # Warmup Iteration   3: 45447,568 ops/s
[info] # Warmup Iteration   4: 45545,857 ops/s
[info] # Warmup Iteration   5: 45535,283 ops/s
[info] Iteration   1: 45400,353 ops/s
[info]                  ·gc.alloc.rate:               410,067 MB/sec
[info]                  ·gc.alloc.rate.norm:          14216,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17733,339 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 45489,011 ops/s
[info]                  ·gc.alloc.rate:               410,871 MB/sec
[info]                  ·gc.alloc.rate.norm:          14216,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17700,208 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 45528,793 ops/s
[info]                  ·gc.alloc.rate:      411,231 MB/sec
[info]                  ·gc.alloc.rate.norm: 14216,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 45313,821 ops/s
[info]                  ·gc.alloc.rate:                   409,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23422,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,892 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 45444,988 ops/s
[info]                  ·gc.alloc.rate:                   410,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23356,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,163 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   45435,393 ±(99.9%) 320,426 ops/s [Average]
[info]   (min, avg, max) = (45313,821, 45435,393, 45528,793), stdev = 83,214
[info]   CI (99.9%): [45114,967, 45755,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   410,382 ±(99.9%) 2,843 MB/sec [Average]
[info]   (min, avg, max) = (409,323, 410,382, 411,231), stdev = 0,738
[info]   CI (99.9%): [407,539, 413,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (14216,009, 14216,009, 14216,010), stdev = 0,001
[info]   CI (99.9%): [14216,007, 14216,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,362 ±(99.9%) 1068,131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,362, 674,414), stdev = 277,390
[info]   CI (99.9%): [≈ 0, 1542,494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16442,517 ±(99.9%) 37040,725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16442,517, 23422,755), stdev = 9619,359
[info]   CI (99.9%): [≈ 0, 53483,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,011 ±(99.9%) 5,422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,011, 2,892), stdev = 1,408
[info]   CI (99.9%): [≈ 0, 6,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,07% complete, ETA 01:48:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40223,664 ops/s
[info] # Warmup Iteration   2: 48692,161 ops/s
[info] # Warmup Iteration   3: 49199,629 ops/s
[info] # Warmup Iteration   4: 49114,543 ops/s
[info] # Warmup Iteration   5: 49121,752 ops/s
[info] Iteration   1: 49078,653 ops/s
[info]                  ·gc.alloc.rate:               431,278 MB/sec
[info]                  ·gc.alloc.rate.norm:          13832,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16404,359 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 49428,874 ops/s
[info]                  ·gc.alloc.rate:      434,434 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 49286,411 ops/s
[info]                  ·gc.alloc.rate:               433,114 MB/sec
[info]                  ·gc.alloc.rate.norm:          13832,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16335,146 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 49110,700 ops/s
[info]                  ·gc.alloc.rate:                   431,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,802 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21624,305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101,314 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 49353,669 ops/s
[info]                  ·gc.alloc.rate:      433,709 MB/sec
[info]                  ·gc.alloc.rate.norm: 13832,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   49251,662 ±(99.9%) 586,574 ops/s [Average]
[info]   (min, avg, max) = (49078,653, 49251,662, 49428,874), stdev = 152,331
[info]   CI (99.9%): [48665,088, 49838,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   432,835 ±(99.9%) 5,187 MB/sec [Average]
[info]   (min, avg, max) = (431,278, 432,835, 434,434), stdev = 1,347
[info]   CI (99.9%): [427,648, 438,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832,009 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (13832,008, 13832,009, 13832,010), stdev = 0,001
[info]   CI (99.9%): [13832,006, 13832,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,556 ±(99.9%) 1220,885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,556, 674,802), stdev = 317,060
[info]   CI (99.9%): [≈ 0, 1560,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10872,762 ±(99.9%) 39101,852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10872,762, 21624,305), stdev = 10154,627
[info]   CI (99.9%): [≈ 0, 49974,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,632 ±(99.9%) 5,444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,632, 3,162), stdev = 1,414
[info]   CI (99.9%): [≈ 0, 6,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20,263 ±(99.9%) 174,468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20,263, 101,314), stdev = 45,309
[info]   CI (99.9%): [≈ 0, 194,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 18,27% complete, ETA 01:48:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41536,227 ops/s
[info] # Warmup Iteration   2: 47553,669 ops/s
[info] # Warmup Iteration   3: 47845,911 ops/s
[info] # Warmup Iteration   4: 48588,609 ops/s
[info] # Warmup Iteration   5: 48337,622 ops/s
[info] Iteration   1: 48373,852 ops/s
[info]                  ·gc.alloc.rate:               369,790 MB/sec
[info]                  ·gc.alloc.rate.norm:          12032,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16643,719 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 48387,304 ops/s
[info]                  ·gc.alloc.rate:                   369,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16638,905 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,982 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 48634,776 ops/s
[info]                  ·gc.alloc.rate:      371,791 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 48366,800 ops/s
[info]                  ·gc.alloc.rate:                   369,755 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16645,440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,394 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 48516,319 ops/s
[info]                  ·gc.alloc.rate:      370,866 MB/sec
[info]                  ·gc.alloc.rate.norm: 12032,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   48455,810 ±(99.9%) 451,623 ops/s [Average]
[info]   (min, avg, max) = (48366,800, 48455,810, 48634,776), stdev = 117,285
[info]   CI (99.9%): [48004,187, 48907,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   370,420 ±(99.9%) 3,440 MB/sec [Average]
[info]   (min, avg, max) = (369,755, 370,420, 371,791), stdev = 0,893
[info]   CI (99.9%): [366,980, 373,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (12032,008, 12032,009, 12032,009), stdev = 0,001
[info]   CI (99.9%): [12032,007, 12032,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   306,916 ±(99.9%) 1078,854 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,916, 511,531), stdev = 280,175
[info]   CI (99.9%): [≈ 0, 1385,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   9985,613 ±(99.9%) 35100,837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9985,613, 16645,440), stdev = 9115,576
[info]   CI (99.9%): [≈ 0, 45086,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,030), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,275 ±(99.9%) 1,657 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,275, 0,982), stdev = 0,430
[info]   CI (99.9%): [≈ 0, 1,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 18,47% complete, ETA 01:48:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32282,442 ops/s
[info] # Warmup Iteration   2: 39224,139 ops/s
[info] # Warmup Iteration   3: 39085,705 ops/s
[info] # Warmup Iteration   4: 39136,192 ops/s
[info] # Warmup Iteration   5: 39082,433 ops/s
[info] Iteration   1: 39022,450 ops/s
[info]                  ·gc.alloc.rate:                   651,538 MB/sec
[info]                  ·gc.alloc.rate.norm:              26280,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27213,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127,365 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 39351,072 ops/s
[info]                  ·gc.alloc.rate:                   657,115 MB/sec
[info]                  ·gc.alloc.rate.norm:              26280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26988,350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,498 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 39274,551 ops/s
[info]                  ·gc.alloc.rate:               655,750 MB/sec
[info]                  ·gc.alloc.rate.norm:          26280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26958,426 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 38928,446 ops/s
[info]                  ·gc.alloc.rate:               650,030 MB/sec
[info]                  ·gc.alloc.rate.norm:          26280,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,753 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27198,669 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 39182,155 ops/s
[info]                  ·gc.alloc.rate:                   654,173 MB/sec
[info]                  ·gc.alloc.rate.norm:              26280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26997,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,345 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle":
[info]   39151,735 ±(99.9%) 673,359 ops/s [Average]
[info]   (min, avg, max) = (38928,446, 39151,735, 39351,072), stdev = 174,869
[info]   CI (99.9%): [38478,376, 39825,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   653,721 ±(99.9%) 11,265 MB/sec [Average]
[info]   (min, avg, max) = (650,030, 653,721, 657,115), stdev = 2,925
[info]   CI (99.9%): [642,457, 664,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   26280,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (26280,010, 26280,011, 26280,011), stdev = 0,001
[info]   CI (99.9%): [26280,009, 26280,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   673,393 ±(99.9%) 4,922 MB/sec [Average]
[info]   (min, avg, max) = (672,021, 673,393, 674,826), stdev = 1,278
[info]   CI (99.9%): [668,472, 678,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27071,245 ±(99.9%) 478,072 B/op [Average]
[info]   (min, avg, max) = (26958,426, 27071,245, 27213,760), stdev = 124,154
[info]   CI (99.9%): [26593,173, 27549,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,661 ±(99.9%) 5,377 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,661, 3,158), stdev = 1,396
[info]   CI (99.9%): [≈ 0, 6,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   26,641 ±(99.9%) 216,891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26,641, 127,365), stdev = 56,326
[info]   CI (99.9%): [≈ 0, 243,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18,67% complete, ETA 01:47:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20574,601 ops/s
[info] # Warmup Iteration   2: 23570,147 ops/s
[info] # Warmup Iteration   3: 23774,308 ops/s
[info] # Warmup Iteration   4: 23889,898 ops/s
[info] # Warmup Iteration   5: 23822,554 ops/s
[info] Iteration   1: 24016,249 ops/s
[info]                  ·gc.alloc.rate:                   900,535 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44085,325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,728 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 23845,349 ops/s
[info]                  ·gc.alloc.rate:                   894,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44406,967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,748 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 23973,996 ops/s
[info]                  ·gc.alloc.rate:                   899,010 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88252,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,100 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 23953,721 ops/s
[info]                  ·gc.alloc.rate:               898,244 MB/sec
[info]                  ·gc.alloc.rate.norm:          59016,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44157,478 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 23980,635 ops/s
[info]                  ·gc.alloc.rate:                   899,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              59016,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,983 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44107,774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,366 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   23953,990 ±(99.9%) 249,471 ops/s [Average]
[info]   (min, avg, max) = (23845,349, 23953,990, 24016,249), stdev = 64,787
[info]   CI (99.9%): [23704,519, 24203,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   898,182 ±(99.9%) 9,524 MB/sec [Average]
[info]   (min, avg, max) = (894,013, 898,182, 900,535), stdev = 2,473
[info]   CI (99.9%): [888,659, 907,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59016,018 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (59016,017, 59016,018, 59016,020), stdev = 0,001
[info]   CI (99.9%): [59016,013, 59016,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   806,772 ±(99.9%) 1157,234 MB/sec [Average]
[info]   (min, avg, max) = (671,983, 806,772, 1344,376), stdev = 300,530
[info]   CI (99.9%): [≈ 0, 1964,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53001,977 ±(99.9%) 75880,673 B/op [Average]
[info]   (min, avg, max) = (44085,325, 53001,977, 88252,340), stdev = 19705,970
[info]   CI (99.9%): [≈ 0, 128882,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,188 ±(99.9%) 6,004 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,188, 4,100), stdev = 1,559
[info]   CI (99.9%): [≈ 0, 8,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18,88% complete, ETA 01:47:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17072,164 ops/s
[info] # Warmup Iteration   2: 22648,617 ops/s
[info] # Warmup Iteration   3: 22879,348 ops/s
[info] # Warmup Iteration   4: 22770,804 ops/s
[info] # Warmup Iteration   5: 22736,146 ops/s
[info] Iteration   1: 22945,810 ops/s
[info]                  ·gc.alloc.rate:                   650,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              44611,215 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,416 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46258,690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,139 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 23131,278 ops/s
[info]                  ·gc.alloc.rate:               655,594 MB/sec
[info]                  ·gc.alloc.rate.norm:          44608,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 45888,797 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 23184,095 ops/s
[info]                  ·gc.alloc.rate:                   657,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,364 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45849,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,826 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 23086,489 ops/s
[info]                  ·gc.alloc.rate:               654,337 MB/sec
[info]                  ·gc.alloc.rate.norm:          44608,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46044,347 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 23035,630 ops/s
[info]                  ·gc.alloc.rate:                   652,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              44608,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46191,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,422 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   23076,660 ±(99.9%) 352,008 ops/s [Average]
[info]   (min, avg, max) = (22945,810, 23076,660, 23184,095), stdev = 91,415
[info]   CI (99.9%): [22724,652, 23428,669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   654,038 ±(99.9%) 9,919 MB/sec [Average]
[info]   (min, avg, max) = (650,397, 654,038, 657,073), stdev = 2,576
[info]   CI (99.9%): [644,118, 663,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44608,658 ±(99.9%) 5,503 B/op [Average]
[info]   (min, avg, max) = (44608,018, 44608,658, 44611,215), stdev = 1,429
[info]   CI (99.9%): [44603,155, 44614,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,113 ±(99.9%) 2,612 MB/sec [Average]
[info]   (min, avg, max) = (674,416, 675,113, 675,963), stdev = 0,678
[info]   CI (99.9%): [672,502, 677,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   46046,675 ±(99.9%) 693,405 B/op [Average]
[info]   (min, avg, max) = (45849,766, 46046,675, 46258,690), stdev = 180,075
[info]   CI (99.9%): [45353,269, 46740,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,277 ±(99.9%) 11,396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,277, 7,139), stdev = 2,960
[info]   CI (99.9%): [≈ 0, 13,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,08% complete, ETA 01:47:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93054,487 ops/s
[info] # Warmup Iteration   2: 97169,167 ops/s
[info] # Warmup Iteration   3: 97858,421 ops/s
[info] # Warmup Iteration   4: 97212,409 ops/s
[info] # Warmup Iteration   5: 97821,838 ops/s
[info] Iteration   1: 97334,008 ops/s
[info]                  ·gc.alloc.rate:                   253,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,455 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8272,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,883 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 97829,551 ops/s
[info]                  ·gc.alloc.rate:      254,606 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 97587,390 ops/s
[info]                  ·gc.alloc.rate:               253,941 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8250,583 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 97656,581 ops/s
[info]                  ·gc.alloc.rate:      254,170 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 97359,645 ops/s
[info]                  ·gc.alloc.rate:                   253,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8269,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,508 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   97553,435 ±(99.9%) 802,504 ops/s [Average]
[info]   (min, avg, max) = (97334,008, 97553,435, 97829,551), stdev = 208,408
[info]   CI (99.9%): [96750,931, 98355,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   253,874 ±(99.9%) 2,142 MB/sec [Average]
[info]   (min, avg, max) = (253,254, 253,874, 254,606), stdev = 0,556
[info]   CI (99.9%): [251,732, 256,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,004, 4096,004, 4096,005), stdev = 0,001
[info]   CI (99.9%): [4096,003, 4096,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,913 ±(99.9%) 1078,844 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,913, 511,598), stdev = 280,172
[info]   CI (99.9%): [≈ 0, 1385,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4958,434 ±(99.9%) 17429,622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4958,434, 8272,024), stdev = 4526,417
[info]   CI (99.9%): [≈ 0, 22388,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,055), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,278 ±(99.9%) 1,553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,278, 0,883), stdev = 0,403
[info]   CI (99.9%): [≈ 0, 1,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19,28% complete, ETA 01:47:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13036,096 ops/s
[info] # Warmup Iteration   2: 19494,329 ops/s
[info] # Warmup Iteration   3: 19500,511 ops/s
[info] # Warmup Iteration   4: 19453,402 ops/s
[info] # Warmup Iteration   5: 19508,638 ops/s
[info] Iteration   1: 19594,569 ops/s
[info]                  ·gc.alloc.rate:                   1269,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              102008,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108174,524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,016 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19639,843 ops/s
[info]                  ·gc.alloc.rate:               1272,839 MB/sec
[info]                  ·gc.alloc.rate.norm:          102008,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53992,803 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 19725,541 ops/s
[info]                  ·gc.alloc.rate:                   1278,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              102008,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     107674,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,982 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 19558,936 ops/s
[info]                  ·gc.alloc.rate:                   1267,746 MB/sec
[info]                  ·gc.alloc.rate.norm:              102008,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108706,274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,675 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 19640,373 ops/s
[info]                  ·gc.alloc.rate:                   1272,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              102008,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108353,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,668 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   19631,852 ±(99.9%) 240,633 ops/s [Average]
[info]   (min, avg, max) = (19558,936, 19631,852, 19725,541), stdev = 62,492
[info]   CI (99.9%): [19391,220, 19872,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1272,444 ±(99.9%) 16,017 MB/sec [Average]
[info]   (min, avg, max) = (1267,746, 1272,444, 1278,836), stdev = 4,160
[info]   CI (99.9%): [1256,427, 1288,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102008,023 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (102008,021, 102008,023, 102008,026), stdev = 0,002
[info]   CI (99.9%): [102008,015, 102008,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1214,665 ±(99.9%) 1164,465 MB/sec [Average]
[info]   (min, avg, max) = (673,713, 1214,665, 1351,982), stdev = 302,408
[info]   CI (99.9%): [50,201, 2379,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   97380,339 ±(99.9%) 93405,935 B/op [Average]
[info]   (min, avg, max) = (53992,803, 97380,339, 108706,274), stdev = 24257,225
[info]   CI (99.9%): [3974,404, 190786,275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,668 ±(99.9%) 8,604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,668, 5,016), stdev = 2,234
[info]   CI (99.9%): [≈ 0, 11,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 19,48% complete, ETA 01:46:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16592,664 ops/s
[info] # Warmup Iteration   2: 19049,156 ops/s
[info] # Warmup Iteration   3: 19174,754 ops/s
[info] # Warmup Iteration   4: 19140,114 ops/s
[info] # Warmup Iteration   5: 19148,583 ops/s
[info] Iteration   1: 18873,721 ops/s
[info]                  ·gc.alloc.rate:                   650,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              54276,931 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56319,512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 234,503 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19242,945 ops/s
[info]                  ·gc.alloc.rate:                   663,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55245,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,405 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 19199,890 ops/s
[info]                  ·gc.alloc.rate:               661,792 MB/sec
[info]                  ·gc.alloc.rate.norm:          54256,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55199,705 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 19215,944 ops/s
[info]                  ·gc.alloc.rate:                   662,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              54256,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55156,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,410 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 19214,433 ops/s
[info]                  ·gc.alloc.rate:               662,298 MB/sec
[info]                  ·gc.alloc.rate.norm:          54256,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55107,803 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle":
[info]   19149,387 ±(99.9%) 596,403 ops/s [Average]
[info]   (min, avg, max) = (18873,721, 19149,387, 19242,945), stdev = 154,884
[info]   CI (99.9%): [18552,984, 19745,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate":
[info]   660,150 ±(99.9%) 20,142 MB/sec [Average]
[info]   (min, avg, max) = (650,852, 660,150, 663,407), stdev = 5,231
[info]   CI (99.9%): [640,008, 680,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   54260,203 ±(99.9%) 36,007 B/op [Average]
[info]   (min, avg, max) = (54256,021, 54260,203, 54276,931), stdev = 9,351
[info]   CI (99.9%): [54224,197, 54296,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   674,049 ±(99.9%) 4,952 MB/sec [Average]
[info]   (min, avg, max) = (672,696, 674,049, 675,506), stdev = 1,286
[info]   CI (99.9%): [669,097, 679,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   55405,841 ±(99.9%) 1976,539 B/op [Average]
[info]   (min, avg, max) = (55107,803, 55405,841, 56319,512), stdev = 513,301
[info]   CI (99.9%): [53429,302, 57382,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,579 ±(99.9%) 4,807 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,579, 2,812), stdev = 1,248
[info]   CI (99.9%): [≈ 0, 5,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   48,264 ±(99.9%) 400,948 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48,264, 234,503), stdev = 104,125
[info]   CI (99.9%): [≈ 0, 449,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19,68% complete, ETA 01:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50695,239 ops/s
[info] # Warmup Iteration   2: 64104,223 ops/s
[info] # Warmup Iteration   3: 64986,613 ops/s
[info] # Warmup Iteration   4: 65556,936 ops/s
[info] # Warmup Iteration   5: 65755,709 ops/s
[info] Iteration   1: 65743,612 ops/s
[info]                  ·gc.alloc.rate:                   996,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32178,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,498 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 65517,581 ops/s
[info]                  ·gc.alloc.rate:               992,622 MB/sec
[info]                  ·gc.alloc.rate.norm:          23848,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16128,738 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 65814,642 ops/s
[info]                  ·gc.alloc.rate:                   997,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32115,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,493 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 65692,765 ops/s
[info]                  ·gc.alloc.rate:               995,402 MB/sec
[info]                  ·gc.alloc.rate.norm:          23848,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16086,272 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 65612,558 ops/s
[info]                  ·gc.alloc.rate:                   994,080 MB/sec
[info]                  ·gc.alloc.rate.norm:              23848,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32210,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,999 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   65676,232 ±(99.9%) 444,058 ops/s [Average]
[info]   (min, avg, max) = (65517,581, 65676,232, 65814,642), stdev = 115,320
[info]   CI (99.9%): [65232,173, 66120,290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   995,130 ±(99.9%) 7,072 MB/sec [Average]
[info]   (min, avg, max) = (992,622, 995,130, 997,334), stdev = 1,837
[info]   CI (99.9%): [988,058, 1002,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23848,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23848,006, 23848,007, 23848,007), stdev = 0,001
[info]   CI (99.9%): [23848,005, 23848,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,542 ±(99.9%) 1417,180 MB/sec [Average]
[info]   (min, avg, max) = (671,324, 1074,542, 1344,201), stdev = 368,037
[info]   CI (99.9%): [≈ 0, 2491,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   25743,931 ±(99.9%) 33873,703 B/op [Average]
[info]   (min, avg, max) = (16086,272, 25743,931, 32210,782), stdev = 8796,893
[info]   CI (99.9%): [≈ 0, 59617,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,598 ±(99.9%) 2,501 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,598, 1,493), stdev = 0,650
[info]   CI (99.9%): [≈ 0, 3,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19,88% complete, ETA 01:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73205,560 ops/s
[info] # Warmup Iteration   2: 101819,941 ops/s
[info] # Warmup Iteration   3: 101411,583 ops/s
[info] # Warmup Iteration   4: 102016,004 ops/s
[info] # Warmup Iteration   5: 101994,028 ops/s
[info] Iteration   1: 101528,407 ops/s
[info]                  ·gc.alloc.rate:                   1203,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20960,369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,645 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 102081,915 ops/s
[info]                  ·gc.alloc.rate:                   1210,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20859,366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,963 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 101955,578 ops/s
[info]                  ·gc.alloc.rate:               1209,066 MB/sec
[info]                  ·gc.alloc.rate.norm:          18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 20905,913 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 101802,350 ops/s
[info]                  ·gc.alloc.rate:                   1207,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          677,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10472,785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,322 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 101931,736 ops/s
[info]                  ·gc.alloc.rate:                   1208,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              18664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20928,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,321 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   101859,997 ±(99.9%) 809,563 ops/s [Average]
[info]   (min, avg, max) = (101528,407, 101859,997, 102081,915), stdev = 210,241
[info]   CI (99.9%): [101050,434, 102669,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1207,837 ±(99.9%) 9,636 MB/sec [Average]
[info]   (min, avg, max) = (1203,840, 1207,837, 1210,421), stdev = 2,502
[info]   CI (99.9%): [1198,202, 1217,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18664,004, 18664,004, 18664,004), stdev = 0,001
[info]   CI (99.9%): [18664,003, 18664,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,347 ±(99.9%) 1164,381 MB/sec [Average]
[info]   (min, avg, max) = (677,427, 1218,347, 1355,254), stdev = 302,386
[info]   CI (99.9%): [53,966, 2382,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18825,475 ±(99.9%) 17980,354 B/op [Average]
[info]   (min, avg, max) = (10472,785, 18825,475, 20960,369), stdev = 4669,441
[info]   CI (99.9%): [845,121, 36805,829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,450 ±(99.9%) 1,410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,450, 0,963), stdev = 0,366
[info]   CI (99.9%): [≈ 0, 1,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20,08% complete, ETA 01:46:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222032,040 ops/s
[info] # Warmup Iteration   2: 227940,011 ops/s
[info] # Warmup Iteration   3: 229358,221 ops/s
[info] # Warmup Iteration   4: 229339,629 ops/s
[info] # Warmup Iteration   5: 229299,602 ops/s
[info] Iteration   1: 229109,947 ops/s
[info]                  ·gc.alloc.rate:               363,325 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3514,151 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 229560,514 ops/s
[info]                  ·gc.alloc.rate:                   364,047 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3507,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 211807,763 ops/s
[info]                  ·gc.alloc.rate:      335,994 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 228582,156 ops/s
[info]                  ·gc.alloc.rate:               362,538 MB/sec
[info]                  ·gc.alloc.rate.norm:          2496,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3522,482 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 228848,125 ops/s
[info]                  ·gc.alloc.rate:      362,891 MB/sec
[info]                  ·gc.alloc.rate.norm: 2496,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   225581,701 ±(99.9%) 29682,014 ops/s [Average]
[info]   (min, avg, max) = (211807,763, 225581,701, 229560,514), stdev = 7708,325
[info]   CI (99.9%): [195899,687, 255263,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   357,759 ±(99.9%) 46,901 MB/sec [Average]
[info]   (min, avg, max) = (335,994, 357,759, 364,047), stdev = 12,180
[info]   CI (99.9%): [310,858, 404,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2496,002, 2496,002, 2496,002), stdev = 0,001
[info]   CI (99.9%): [2496,001, 2496,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,945 ±(99.9%) 1078,954 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,945, 511,632), stdev = 280,201
[info]   CI (99.9%): [≈ 0, 1385,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2108,807 ±(99.9%) 7412,782 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2108,807, 3522,482), stdev = 1925,076
[info]   CI (99.9%): [≈ 0, 9521,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,007 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,029), stdev = 0,013
[info]   CI (99.9%): [≈ 0, 0,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20,28% complete, ETA 01:45:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 263435,173 ops/s
[info] # Warmup Iteration   2: 278102,523 ops/s
[info] # Warmup Iteration   3: 278989,713 ops/s
[info] # Warmup Iteration   4: 279256,250 ops/s
[info] # Warmup Iteration   5: 278903,284 ops/s
[info] Iteration   1: 279903,949 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 279983,486 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 279550,568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 279365,778 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 278725,686 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   279505,893 ±(99.9%) 1941,518 ops/s [Average]
[info]   (min, avg, max) = (278725,686, 279505,893, 279983,486), stdev = 504,206
[info]   CI (99.9%): [277564,375, 281447,411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 20,48% complete, ETA 01:45:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55502,727 ops/s
[info] # Warmup Iteration   2: 69159,179 ops/s
[info] # Warmup Iteration   3: 68631,423 ops/s
[info] # Warmup Iteration   4: 69158,410 ops/s
[info] # Warmup Iteration   5: 69086,978 ops/s
[info] Iteration   1: 69449,301 ops/s
[info]                  ·gc.alloc.rate:               1082,928 MB/sec
[info]                  ·gc.alloc.rate.norm:          24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15216,006 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 69498,009 ops/s
[info]                  ·gc.alloc.rate:                   1083,751 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30351,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,471 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 69411,754 ops/s
[info]                  ·gc.alloc.rate:                   1082,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,950 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30386,941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,472 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 69517,657 ops/s
[info]                  ·gc.alloc.rate:                   1084,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15178,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,471 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 69564,752 ops/s
[info]                  ·gc.alloc.rate:                   1084,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30351,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,471 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   69488,294 ±(99.9%) 229,276 ops/s [Average]
[info]   (min, avg, max) = (69411,754, 69488,294, 69564,752), stdev = 59,542
[info]   CI (99.9%): [69259,019, 69717,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1083,540 ±(99.9%) 3,542 MB/sec [Average]
[info]   (min, avg, max) = (1082,299, 1083,540, 1084,557), stdev = 0,920
[info]   CI (99.9%): [1079,998, 1087,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24544,006 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (24544,006, 24544,006, 24544,007), stdev = 0,001
[info]   CI (99.9%): [24544,005, 24544,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,625 ±(99.9%) 1412,106 MB/sec [Average]
[info]   (min, avg, max) = (670,450, 1072,625, 1341,164), stdev = 366,720
[info]   CI (99.9%): [≈ 0, 2484,732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24296,824 ±(99.9%) 31987,124 B/op [Average]
[info]   (min, avg, max) = (15178,067, 24296,824, 30386,941), stdev = 8306,954
[info]   CI (99.9%): [≈ 0, 56283,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,377 ±(99.9%) 0,812 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,377, 0,472), stdev = 0,211
[info]   CI (99.9%): [≈ 0, 1,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 20,68% complete, ETA 01:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18776,468 ops/s
[info] # Warmup Iteration   2: 20625,084 ops/s
[info] # Warmup Iteration   3: 20836,922 ops/s
[info] # Warmup Iteration   4: 20830,736 ops/s
[info] # Warmup Iteration   5: 20735,837 ops/s
[info] Iteration   1: 20730,225 ops/s
[info]                  ·gc.alloc.rate:                   358,545 MB/sec
[info]                  ·gc.alloc.rate.norm:              27224,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,479 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38836,148 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,492 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 20832,956 ops/s
[info]                  ·gc.alloc.rate:                   360,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              27224,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38647,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,533 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 20871,241 ops/s
[info]                  ·gc.alloc.rate:      361,002 MB/sec
[info]                  ·gc.alloc.rate.norm: 27224,020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20764,528 ops/s
[info]                  ·gc.alloc.rate:               359,180 MB/sec
[info]                  ·gc.alloc.rate.norm:          27224,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 38772,574 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 20837,863 ops/s
[info]                  ·gc.alloc.rate:      360,387 MB/sec
[info]                  ·gc.alloc.rate.norm: 27224,020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle":
[info]   20807,362 ±(99.9%) 223,294 ops/s [Average]
[info]   (min, avg, max) = (20730,225, 20807,362, 20871,241), stdev = 57,989
[info]   CI (99.9%): [20584,069, 21030,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   359,903 ±(99.9%) 3,877 MB/sec [Average]
[info]   (min, avg, max) = (358,545, 359,903, 361,002), stdev = 1,007
[info]   CI (99.9%): [356,026, 363,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   27224,020 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27224,020, 27224,020, 27224,020), stdev = 0,001
[info]   CI (99.9%): [27224,019, 27224,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,931 ±(99.9%) 1078,907 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,931, 511,632), stdev = 280,189
[info]   CI (99.9%): [≈ 0, 1385,839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   23251,325 ±(99.9%) 81732,100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23251,325, 38836,148), stdev = 21225,567
[info]   CI (99.9%): [≈ 0, 104983,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,020), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,405 ±(99.9%) 2,503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,405, 1,492), stdev = 0,650
[info]   CI (99.9%): [≈ 0, 2,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20,88% complete, ETA 01:45:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21638,140 ops/s
[info] # Warmup Iteration   2: 29275,254 ops/s
[info] # Warmup Iteration   3: 29297,443 ops/s
[info] # Warmup Iteration   4: 29251,483 ops/s
[info] # Warmup Iteration   5: 29227,097 ops/s
[info] Iteration   1: 29243,235 ops/s
[info]                  ·gc.alloc.rate:                   703,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              37856,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36316,027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,397 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182,839 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29210,196 ops/s
[info]                  ·gc.alloc.rate:                   702,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              37856,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36357,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,243 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 29318,231 ops/s
[info]                  ·gc.alloc.rate:               705,161 MB/sec
[info]                  ·gc.alloc.rate.norm:          37856,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36077,651 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 29324,603 ops/s
[info]                  ·gc.alloc.rate:               705,402 MB/sec
[info]                  ·gc.alloc.rate.norm:          37856,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,127 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36070,271 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 29359,366 ops/s
[info]                  ·gc.alloc.rate:               706,113 MB/sec
[info]                  ·gc.alloc.rate.norm:          37856,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35991,576 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   29291,126 ±(99.9%) 238,579 ops/s [Average]
[info]   (min, avg, max) = (29210,196, 29291,126, 29359,366), stdev = 61,958
[info]   CI (99.9%): [29052,546, 29529,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   704,521 ±(99.9%) 5,740 MB/sec [Average]
[info]   (min, avg, max) = (702,568, 704,521, 706,113), stdev = 1,491
[info]   CI (99.9%): [698,781, 710,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   37856,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (37856,014, 37856,015, 37856,015), stdev = 0,001
[info]   CI (99.9%): [37856,013, 37856,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   672,999 ±(99.9%) 6,259 MB/sec [Average]
[info]   (min, avg, max) = (671,336, 672,999, 674,748), stdev = 1,625
[info]   CI (99.9%): [666,740, 679,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   36162,514 ±(99.9%) 627,844 B/op [Average]
[info]   (min, avg, max) = (35991,576, 36162,514, 36357,047), stdev = 163,049
[info]   CI (99.9%): [35534,671, 36790,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,688 ±(99.9%) 5,833 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,688, 3,397), stdev = 1,515
[info]   CI (99.9%): [≈ 0, 6,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   37,016 ±(99.9%) 313,916 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37,016, 182,839), stdev = 81,523
[info]   CI (99.9%): [≈ 0, 350,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,08% complete, ETA 01:44:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22739,619 ops/s
[info] # Warmup Iteration   2: 31877,852 ops/s
[info] # Warmup Iteration   3: 31233,651 ops/s
[info] # Warmup Iteration   4: 31267,358 ops/s
[info] # Warmup Iteration   5: 31920,570 ops/s
[info] Iteration   1: 31787,105 ops/s
[info]                  ·gc.alloc.rate:               416,360 MB/sec
[info]                  ·gc.alloc.rate.norm:          20616,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25328,082 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 31820,782 ops/s
[info]                  ·gc.alloc.rate:               416,825 MB/sec
[info]                  ·gc.alloc.rate.norm:          20616,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25301,026 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 31974,563 ops/s
[info]                  ·gc.alloc.rate:                   418,826 MB/sec
[info]                  ·gc.alloc.rate.norm:              20616,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33198,349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,172 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31961,958 ops/s
[info]                  ·gc.alloc.rate:      418,716 MB/sec
[info]                  ·gc.alloc.rate.norm: 20616,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 31992,132 ops/s
[info]                  ·gc.alloc.rate:                   419,033 MB/sec
[info]                  ·gc.alloc.rate.norm:              20616,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33177,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   31907,308 ±(99.9%) 368,540 ops/s [Average]
[info]   (min, avg, max) = (31787,105, 31907,308, 31992,132), stdev = 95,709
[info]   CI (99.9%): [31538,768, 32275,848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   417,952 ±(99.9%) 4,841 MB/sec [Average]
[info]   (min, avg, max) = (416,360, 417,952, 419,033), stdev = 1,257
[info]   CI (99.9%): [413,111, 422,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20616,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (20616,013, 20616,013, 20616,014), stdev = 0,001
[info]   CI (99.9%): [20616,011, 20616,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,374 ±(99.9%) 1068,186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,374, 674,444), stdev = 277,404
[info]   CI (99.9%): [≈ 0, 1542,560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23401,011 ±(99.9%) 52603,957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23401,011, 33198,349), stdev = 13661,081
[info]   CI (99.9%): [≈ 0, 76004,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,146), stdev = 0,063
[info]   CI (99.9%): [≈ 0, 0,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,844 ±(99.9%) 11,967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,844, 7,172), stdev = 3,108
[info]   CI (99.9%): [≈ 0, 13,811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21,29% complete, ETA 01:44:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120761,171 ops/s
[info] # Warmup Iteration   2: 136819,411 ops/s
[info] # Warmup Iteration   3: 136317,253 ops/s
[info] # Warmup Iteration   4: 136585,958 ops/s
[info] # Warmup Iteration   5: 136699,383 ops/s
[info] Iteration   1: 136902,707 ops/s
[info]                  ·gc.alloc.rate:                   534,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5881,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,560 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 136175,546 ops/s
[info]                  ·gc.alloc.rate:                   531,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7799,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 137158,849 ops/s
[info]                  ·gc.alloc.rate:      535,302 MB/sec
[info]                  ·gc.alloc.rate.norm: 6144,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 137019,171 ops/s
[info]                  ·gc.alloc.rate:                   534,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7750,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,956 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 135526,717 ops/s
[info]                  ·gc.alloc.rate:               529,020 MB/sec
[info]                  ·gc.alloc.rate.norm:          6144,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7812,898 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   136556,598 ±(99.9%) 2655,498 ops/s [Average]
[info]   (min, avg, max) = (135526,717, 136556,598, 137158,849), stdev = 689,624
[info]   CI (99.9%): [133901,100, 139212,095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   533,032 ±(99.9%) 10,323 MB/sec [Average]
[info]   (min, avg, max) = (529,020, 533,032, 535,302), stdev = 2,681
[info]   CI (99.9%): [522,709, 543,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6144,003, 6144,003, 6144,003), stdev = 0,001
[info]   CI (99.9%): [6144,002, 6144,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,764 ±(99.9%) 1124,000 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,764, 674,767), stdev = 291,899
[info]   CI (99.9%): [≈ 0, 1630,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5848,908 ±(99.9%) 12985,431 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5848,908, 7812,898), stdev = 3372,275
[info]   CI (99.9%): [≈ 0, 18834,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,649 ±(99.9%) 5,309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,649, 3,115), stdev = 1,379
[info]   CI (99.9%): [≈ 0, 5,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7,504 ±(99.9%) 61,365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7,504, 36,002), stdev = 15,936
[info]   CI (99.9%): [≈ 0, 68,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21,49% complete, ETA 01:44:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14110,225 ops/s
[info] # Warmup Iteration   2: 24508,066 ops/s
[info] # Warmup Iteration   3: 24128,673 ops/s
[info] # Warmup Iteration   4: 24100,101 ops/s
[info] # Warmup Iteration   5: 23962,851 ops/s
[info] Iteration   1: 24628,025 ops/s
[info]                  ·gc.alloc.rate:                   1359,445 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86370,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,991 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 24627,007 ops/s
[info]                  ·gc.alloc.rate:                   1359,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,967 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86462,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,330 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 24626,166 ops/s
[info]                  ·gc.alloc.rate:               1359,336 MB/sec
[info]                  ·gc.alloc.rate.norm:          86880,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86522,845 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 24580,389 ops/s
[info]                  ·gc.alloc.rate:                   1356,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86745,174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,665 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 24381,089 ops/s
[info]                  ·gc.alloc.rate:                   1345,835 MB/sec
[info]                  ·gc.alloc.rate.norm:              86880,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     87517,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,687 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   24568,535 ±(99.9%) 410,938 ops/s [Average]
[info]   (min, avg, max) = (24381,089, 24568,535, 24628,025), stdev = 106,719
[info]   CI (99.9%): [24157,597, 24979,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1356,220 ±(99.9%) 22,723 MB/sec [Average]
[info]   (min, avg, max) = (1345,835, 1356,220, 1359,500), stdev = 5,901
[info]   CI (99.9%): [1333,497, 1378,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86880,017 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (86880,017, 86880,017, 86880,018), stdev = 0,001
[info]   CI (99.9%): [86880,014, 86880,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1353,754 ±(99.9%) 6,364 MB/sec [Average]
[info]   (min, avg, max) = (1351,470, 1353,754, 1355,710), stdev = 1,653
[info]   CI (99.9%): [1347,391, 1360,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86723,670 ±(99.9%) 1789,602 B/op [Average]
[info]   (min, avg, max) = (86370,345, 86723,670, 87517,486), stdev = 464,754
[info]   CI (99.9%): [84934,068, 88513,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,135 ±(99.9%) 5,851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,135, 3,991), stdev = 1,520
[info]   CI (99.9%): [≈ 0, 7,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 21,69% complete, ETA 01:43:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24313,423 ops/s
[info] # Warmup Iteration   2: 28927,995 ops/s
[info] # Warmup Iteration   3: 29464,815 ops/s
[info] # Warmup Iteration   4: 29480,263 ops/s
[info] # Warmup Iteration   5: 29486,993 ops/s
[info] Iteration   1: 29506,729 ops/s
[info]                  ·gc.alloc.rate:                   563,188 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27285,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,195 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 29431,912 ops/s
[info]                  ·gc.alloc.rate:                   561,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36084,094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170,549 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 29595,537 ops/s
[info]                  ·gc.alloc.rate:                   564,852 MB/sec
[info]                  ·gc.alloc.rate.norm:              30040,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35881,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,321 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 29564,038 ops/s
[info]                  ·gc.alloc.rate:      564,332 MB/sec
[info]                  ·gc.alloc.rate.norm: 30040,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 29558,279 ops/s
[info]                  ·gc.alloc.rate:               564,131 MB/sec
[info]                  ·gc.alloc.rate.norm:          30040,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 35821,470 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle":
[info]   29531,299 ±(99.9%) 246,620 ops/s [Average]
[info]   (min, avg, max) = (29431,912, 29531,299, 29595,537), stdev = 64,046
[info]   CI (99.9%): [29284,679, 29777,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   563,654 ±(99.9%) 4,676 MB/sec [Average]
[info]   (min, avg, max) = (561,768, 563,654, 564,852), stdev = 1,214
[info]   CI (99.9%): [558,978, 568,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   30040,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (30040,014, 30040,014, 30040,015), stdev = 0,001
[info]   CI (99.9%): [30040,012, 30040,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   506,749 ±(99.9%) 1123,973 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,749, 674,796), stdev = 291,892
[info]   CI (99.9%): [≈ 0, 1630,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27014,578 ±(99.9%) 59911,401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27014,578, 36084,094), stdev = 15558,801
[info]   CI (99.9%): [≈ 0, 86925,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,659 ±(99.9%) 5,449 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,659, 3,189), stdev = 1,415
[info]   CI (99.9%): [≈ 0, 6,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   35,213 ±(99.9%) 291,374 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35,213, 170,549), stdev = 75,669
[info]   CI (99.9%): [≈ 0, 326,587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21,89% complete, ETA 01:43:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 162465,760 ops/s
[info] # Warmup Iteration   2: 207389,032 ops/s
[info] # Warmup Iteration   3: 206096,615 ops/s
[info] # Warmup Iteration   4: 205344,698 ops/s
[info] # Warmup Iteration   5: 206870,462 ops/s
[info] Iteration   1: 207284,181 ops/s
[info]                  ·gc.alloc.rate:                   720,630 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5123,368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,555 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 207438,962 ops/s
[info]                  ·gc.alloc.rate:                   721,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5119,812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,316 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 207146,582 ops/s
[info]                  ·gc.alloc.rate:               720,179 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5106,857 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 206329,123 ops/s
[info]                  ·gc.alloc.rate:                   717,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5126,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,159 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 205949,344 ops/s
[info]                  ·gc.alloc.rate:                   716,029 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10261,942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,318 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   206829,638 ±(99.9%) 2513,094 ops/s [Average]
[info]   (min, avg, max) = (205949,344, 206829,638, 207438,962), stdev = 652,643
[info]   CI (99.9%): [204316,544, 209342,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   719,103 ±(99.9%) 8,757 MB/sec [Average]
[info]   (min, avg, max) = (716,029, 719,103, 721,293), stdev = 2,274
[info]   CI (99.9%): [710,346, 727,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   807,324 ±(99.9%) 1152,681 MB/sec [Average]
[info]   (min, avg, max) = (672,103, 807,324, 1342,807), stdev = 299,348
[info]   CI (99.9%): [≈ 0, 1960,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6147,717 ±(99.9%) 8856,226 B/op [Average]
[info]   (min, avg, max) = (5106,857, 6147,717, 10261,942), stdev = 2299,934
[info]   CI (99.9%): [≈ 0, 15003,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,694 ±(99.9%) 5,751 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,694, 3,365), stdev = 1,494
[info]   CI (99.9%): [≈ 0, 6,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,270 ±(99.9%) 43,669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,270, 25,555), stdev = 11,341
[info]   CI (99.9%): [≈ 0, 48,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,09% complete, ETA 01:43:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236969,381 ops/s
[info] # Warmup Iteration   2: 313552,058 ops/s
[info] # Warmup Iteration   3: 309164,368 ops/s
[info] # Warmup Iteration   4: 307920,312 ops/s
[info] # Warmup Iteration   5: 308655,707 ops/s
[info] Iteration   1: 309355,859 ops/s
[info]                  ·gc.alloc.rate:      312,830 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 309779,849 ops/s
[info]                  ·gc.alloc.rate:               313,347 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2599,247 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 310151,624 ops/s
[info]                  ·gc.alloc.rate:      313,681 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 308544,222 ops/s
[info]                  ·gc.alloc.rate:               312,079 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2609,480 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 308960,637 ops/s
[info]                  ·gc.alloc.rate:      312,468 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   309358,438 ±(99.9%) 2456,526 ops/s [Average]
[info]   (min, avg, max) = (308544,222, 309358,438, 310151,624), stdev = 637,952
[info]   CI (99.9%): [306901,912, 311814,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   312,881 ±(99.9%) 2,491 MB/sec [Average]
[info]   (min, avg, max) = (312,079, 312,881, 313,681), stdev = 0,647
[info]   CI (99.9%): [310,390, 315,371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,626 ±(99.9%) 1078,936 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,626, 511,598), stdev = 280,196
[info]   CI (99.9%): [≈ 0, 1283,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1041,745 ±(99.9%) 5492,840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1041,745, 2609,480), stdev = 1426,473
[info]   CI (99.9%): [≈ 0, 6534,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22,29% complete, ETA 01:43:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 548532,130 ops/s
[info] # Warmup Iteration   2: 561628,786 ops/s
[info] # Warmup Iteration   3: 565493,752 ops/s
[info] # Warmup Iteration   4: 568207,790 ops/s
[info] # Warmup Iteration   5: 570901,110 ops/s
[info] Iteration   1: 570688,546 ops/s
[info]                  ·gc.alloc.rate:               438,001 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1410,796 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 575957,594 ops/s
[info]                  ·gc.alloc.rate:               442,096 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1397,992 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 575822,420 ops/s
[info]                  ·gc.alloc.rate:      441,940 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 574852,659 ops/s
[info]                  ·gc.alloc.rate:                   441,243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1847,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,598 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 577079,142 ops/s
[info]                  ·gc.alloc.rate:                   442,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1840,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   574880,072 ±(99.9%) 9521,028 ops/s [Average]
[info]   (min, avg, max) = (570688,546, 574880,072, 577079,142), stdev = 2472,581
[info]   CI (99.9%): [565359,044, 584401,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   441,230 ±(99.9%) 7,299 MB/sec [Average]
[info]   (min, avg, max) = (438,001, 441,230, 442,872), stdev = 1,896
[info]   CI (99.9%): [433,931, 448,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,526 ±(99.9%) 1068,663 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,526, 674,773), stdev = 277,528
[info]   CI (99.9%): [≈ 0, 1543,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1299,294 ±(99.9%) 2922,068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1299,294, 1847,340), stdev = 758,852
[info]   CI (99.9%): [≈ 0, 4221,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,641 ±(99.9%) 5,382 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,641, 3,140), stdev = 1,398
[info]   CI (99.9%): [≈ 0, 6,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,754 ±(99.9%) 14,735 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,754, 8,598), stdev = 3,827
[info]   CI (99.9%): [≈ 0, 16,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22,49% complete, ETA 01:42:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 582748,927 ops/s
[info] # Warmup Iteration   2: 610885,900 ops/s
[info] # Warmup Iteration   3: 609936,102 ops/s
[info] # Warmup Iteration   4: 608189,822 ops/s
[info] # Warmup Iteration   5: 608538,480 ops/s
[info] Iteration   1: 604545,139 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 606764,127 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 609548,344 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 607747,715 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 608015,392 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   607324,143 ±(99.9%) 7110,877 ops/s [Average]
[info]   (min, avg, max) = (604545,139, 607324,143, 609548,344), stdev = 1846,672
[info]   CI (99.9%): [600213,266, 614435,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22,69% complete, ETA 01:42:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 220119,640 ops/s
[info] # Warmup Iteration   2: 333448,862 ops/s
[info] # Warmup Iteration   3: 332701,006 ops/s
[info] # Warmup Iteration   4: 332530,428 ops/s
[info] # Warmup Iteration   5: 331598,707 ops/s
[info] Iteration   1: 332064,905 ops/s
[info]                  ·gc.alloc.rate:                   918,225 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,162 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6399,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 333722,206 ops/s
[info]                  ·gc.alloc.rate:               922,854 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3187,118 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 333149,340 ops/s
[info]                  ·gc.alloc.rate:               921,170 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3192,331 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 332432,075 ops/s
[info]                  ·gc.alloc.rate:                   919,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6401,659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,296 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 332565,118 ops/s
[info]                  ·gc.alloc.rate:               919,508 MB/sec
[info]                  ·gc.alloc.rate.norm:          4352,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3202,683 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   332786,729 ±(99.9%) 2512,176 ops/s [Average]
[info]   (min, avg, max) = (332064,905, 332786,729, 333722,206), stdev = 652,404
[info]   CI (99.9%): [330274,552, 335298,905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   920,206 ±(99.9%) 7,000 MB/sec [Average]
[info]   (min, avg, max) = (918,225, 920,206, 922,854), stdev = 1,818
[info]   CI (99.9%): [913,206, 927,207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4352,001, 4352,001, 4352,001), stdev = 0,001
[info]   CI (99.9%): [4352,001, 4352,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   946,121 ±(99.9%) 1423,889 MB/sec [Average]
[info]   (min, avg, max) = (675,708, 946,121, 1352,225), stdev = 369,780
[info]   CI (99.9%): [≈ 0, 2370,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4476,599 ±(99.9%) 6762,578 B/op [Average]
[info]   (min, avg, max) = (3187,118, 4476,599, 6401,659), stdev = 1756,220
[info]   CI (99.9%): [≈ 0, 11239,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,138 ±(99.9%) 0,740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,138, 0,395), stdev = 0,192
[info]   CI (99.9%): [≈ 0, 0,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 22,89% complete, ETA 01:42:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44509,924 ops/s
[info] # Warmup Iteration   2: 47833,807 ops/s
[info] # Warmup Iteration   3: 47486,637 ops/s
[info] # Warmup Iteration   4: 47963,139 ops/s
[info] # Warmup Iteration   5: 47779,017 ops/s
[info] Iteration   1: 47877,541 ops/s
[info]                  ·gc.alloc.rate:      221,926 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47803,172 ops/s
[info]                  ·gc.alloc.rate:                   221,577 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16841,776 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 47552,616 ops/s
[info]                  ·gc.alloc.rate:      220,425 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47657,754 ops/s
[info]                  ·gc.alloc.rate:               220,928 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16894,775 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 47702,943 ops/s
[info]                  ·gc.alloc.rate:      221,156 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle":
[info]   47718,805 ±(99.9%) 486,739 ops/s [Average]
[info]   (min, avg, max) = (47552,616, 47718,805, 47877,541), stdev = 126,405
[info]   CI (99.9%): [47232,066, 48205,544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   221,202 ±(99.9%) 2,234 MB/sec [Average]
[info]   (min, avg, max) = (220,425, 221,202, 221,926), stdev = 0,580
[info]   CI (99.9%): [218,969, 223,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7296,009, 7296,009, 7296,009), stdev = 0,001
[info]   CI (99.9%): [7296,008, 7296,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,613 ±(99.9%) 1078,863 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,613, 511,585), stdev = 280,177
[info]   CI (99.9%): [≈ 0, 1283,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6747,310 ±(99.9%) 35576,693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6747,310, 16894,775), stdev = 9239,154
[info]   CI (99.9%): [≈ 0, 42324,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,029 ±(99.9%) 0,252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,146), stdev = 0,065
[info]   CI (99.9%): [≈ 0, 0,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23,09% complete, ETA 01:42:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37642,346 ops/s
[info] # Warmup Iteration   2: 44524,947 ops/s
[info] # Warmup Iteration   3: 44719,623 ops/s
[info] # Warmup Iteration   4: 44596,079 ops/s
[info] # Warmup Iteration   5: 43905,573 ops/s
[info] Iteration   1: 44573,626 ops/s
[info]                  ·gc.alloc.rate:                   1988,068 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71214,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,470 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 44761,795 ops/s
[info]                  ·gc.alloc.rate:                   1996,535 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71020,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,732 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 44816,938 ops/s
[info]                  ·gc.alloc.rate:                   1999,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71050,451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,462 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 44671,032 ops/s
[info]                  ·gc.alloc.rate:                   1992,591 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71413,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,200 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 44797,632 ops/s
[info]                  ·gc.alloc.rate:                   1997,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71306,070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,731 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   44724,204 ±(99.9%) 389,398 ops/s [Average]
[info]   (min, avg, max) = (44573,626, 44724,204, 44816,938), stdev = 101,125
[info]   CI (99.9%): [44334,807, 45113,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1994,752 ±(99.9%) 17,057 MB/sec [Average]
[info]   (min, avg, max) = (1988,068, 1994,752, 1999,009), stdev = 4,430
[info]   CI (99.9%): [1977,694, 2011,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70200,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70200,009, 70200,009, 70200,010), stdev = 0,001
[info]   CI (99.9%): [70200,008, 70200,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023,190 ±(99.9%) 19,325 MB/sec [Average]
[info]   (min, avg, max) = (2016,792, 2023,190, 2029,027), stdev = 5,019
[info]   CI (99.9%): [2003,865, 2042,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71200,940 ±(99.9%) 642,829 B/op [Average]
[info]   (min, avg, max) = (71020,631, 71200,940, 71413,280), stdev = 166,941
[info]   CI (99.9%): [70558,111, 71843,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,319 ±(99.9%) 2,366 B/op [Average]
[info]   (min, avg, max) = (0,731, 1,319, 2,200), stdev = 0,614
[info]   CI (99.9%): [≈ 0, 3,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 23,29% complete, ETA 01:41:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 91860,519 ops/s
[info] # Warmup Iteration   2: 332832,243 ops/s
[info] # Warmup Iteration   3: 332029,997 ops/s
[info] # Warmup Iteration   4: 332487,965 ops/s
[info] # Warmup Iteration   5: 328361,356 ops/s
[info] Iteration   1: 330680,214 ops/s
[info]                  ·gc.alloc.rate:      342,881 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 331804,473 ops/s
[info]                  ·gc.alloc.rate:                   344,054 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2426,521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 332849,856 ops/s
[info]                  ·gc.alloc.rate:               345,130 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,527 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2418,839 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 331911,603 ops/s
[info]                  ·gc.alloc.rate:      344,219 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 332254,868 ops/s
[info]                  ·gc.alloc.rate:                   344,490 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3193,136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,782 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   331900,203 ±(99.9%) 3059,562 ops/s [Average]
[info]   (min, avg, max) = (330680,214, 331900,203, 332849,856), stdev = 794,559
[info]   CI (99.9%): [328840,640, 334959,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   344,155 ±(99.9%) 3,164 MB/sec [Average]
[info]   (min, avg, max) = (342,881, 344,155, 345,130), stdev = 0,822
[info]   CI (99.9%): [340,991, 347,318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,420 ±(99.9%) 1220,144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,420, 674,021), stdev = 316,868
[info]   CI (99.9%): [≈ 0, 1559,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1607,699 ±(99.9%) 5779,629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1607,699, 3193,136), stdev = 1500,951
[info]   CI (99.9%): [≈ 0, 7387,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,543 ±(99.9%) 4,640 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,543, 2,698), stdev = 1,205
[info]   CI (99.9%): [≈ 0, 5,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   2,570 ±(99.9%) 21,982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,570, 12,782), stdev = 5,709
[info]   CI (99.9%): [≈ 0, 24,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,49% complete, ETA 01:41:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80977,152 ops/s
[info] # Warmup Iteration   2: 112009,810 ops/s
[info] # Warmup Iteration   3: 113030,064 ops/s
[info] # Warmup Iteration   4: 113524,737 ops/s
[info] # Warmup Iteration   5: 113127,373 ops/s
[info] Iteration   1: 112600,766 ops/s
[info]                  ·gc.alloc.rate:               1239,107 MB/sec
[info]                  ·gc.alloc.rate.norm:          17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9445,247 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 112614,275 ops/s
[info]                  ·gc.alloc.rate:                   1239,263 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18906,596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,582 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 113024,473 ops/s
[info]                  ·gc.alloc.rate:               1243,719 MB/sec
[info]                  ·gc.alloc.rate.norm:          17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18856,745 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 112877,393 ops/s
[info]                  ·gc.alloc.rate:                   1242,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18890,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,580 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 113135,980 ops/s
[info]                  ·gc.alloc.rate:               1245,017 MB/sec
[info]                  ·gc.alloc.rate.norm:          17320,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18865,380 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   112850,577 ±(99.9%) 924,671 ops/s [Average]
[info]   (min, avg, max) = (112600,766, 112850,577, 113135,980), stdev = 240,134
[info]   CI (99.9%): [111925,906, 113775,249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1241,884 ±(99.9%) 10,179 MB/sec [Average]
[info]   (min, avg, max) = (1239,107, 1241,884, 1245,017), stdev = 2,643
[info]   CI (99.9%): [1231,705, 1252,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17320,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17320,004, 17320,004, 17320,004), stdev = 0,001
[info]   CI (99.9%): [17320,003, 17320,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,727 ±(99.9%) 1168,848 MB/sec [Average]
[info]   (min, avg, max) = (675,732, 1218,727, 1356,104), stdev = 303,546
[info]   CI (99.9%): [49,879, 2387,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16992,843 ±(99.9%) 16246,950 B/op [Average]
[info]   (min, avg, max) = (9445,247, 16992,843, 18906,596), stdev = 4219,281
[info]   CI (99.9%): [745,894, 33239,793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,232 ±(99.9%) 1,226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,232, 0,582), stdev = 0,318
[info]   CI (99.9%): [≈ 0, 1,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23,69% complete, ETA 01:41:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 444391,054 ops/s
[info] # Warmup Iteration   2: 458271,771 ops/s
[info] # Warmup Iteration   3: 458956,931 ops/s
[info] # Warmup Iteration   4: 450343,858 ops/s
[info] # Warmup Iteration   5: 458170,087 ops/s
[info] Iteration   1: 458608,513 ops/s
[info]                  ·gc.alloc.rate:      298,384 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 457279,376 ops/s
[info]                  ·gc.alloc.rate:                   297,518 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1760,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 459745,735 ops/s
[info]                  ·gc.alloc.rate:      299,110 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 457301,172 ops/s
[info]                  ·gc.alloc.rate:               297,537 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1760,590 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 457645,265 ops/s
[info]                  ·gc.alloc.rate:      297,714 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   458116,012 ±(99.9%) 4076,994 ops/s [Average]
[info]   (min, avg, max) = (457279,376, 458116,012, 459745,735), stdev = 1058,782
[info]   CI (99.9%): [454039,018, 462193,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   298,053 ±(99.9%) 2,650 MB/sec [Average]
[info]   (min, avg, max) = (297,518, 298,053, 299,110), stdev = 0,688
[info]   CI (99.9%): [295,403, 300,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,001, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,623 ±(99.9%) 1078,919 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,623, 511,562), stdev = 280,192
[info]   CI (99.9%): [≈ 0, 1283,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   704,252 ±(99.9%) 3713,319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 704,252, 1760,671), stdev = 964,337
[info]   CI (99.9%): [≈ 0, 4417,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,071), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23,90% complete, ETA 01:41:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29454,870 ops/s
[info] # Warmup Iteration   2: 45642,140 ops/s
[info] # Warmup Iteration   3: 45633,206 ops/s
[info] # Warmup Iteration   4: 45336,685 ops/s
[info] # Warmup Iteration   5: 45499,202 ops/s
[info] Iteration   1: 45807,558 ops/s
[info]                  ·gc.alloc.rate:                   2444,021 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93234,218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,576 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 45730,340 ops/s
[info]                  ·gc.alloc.rate:                   2440,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93484,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,433 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 45860,092 ops/s
[info]                  ·gc.alloc.rate:                   2446,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69972,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,429 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 45864,789 ops/s
[info]                  ·gc.alloc.rate:                   2445,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93366,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,857 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 45965,083 ops/s
[info]                  ·gc.alloc.rate:                   2451,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              83976,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2041,315 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69916,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,138 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   45845,572 ±(99.9%) 331,168 ops/s [Average]
[info]   (min, avg, max) = (45730,340, 45845,572, 45965,083), stdev = 86,003
[info]   CI (99.9%): [45514,404, 46176,741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2445,739 ±(99.9%) 16,452 MB/sec [Average]
[info]   (min, avg, max) = (2440,084, 2445,739, 2451,804), stdev = 4,272
[info]   CI (99.9%): [2429,288, 2462,191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83976,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (83976,009, 83976,009, 83976,010), stdev = 0,001
[info]   CI (99.9%): [83976,008, 83976,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2445,886 ±(99.9%) 1426,535 MB/sec [Average]
[info]   (min, avg, max) = (2038,820, 2445,886, 2719,441), stdev = 370,467
[info]   CI (99.9%): [1019,351, 3872,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83994,845 ±(99.9%) 49390,899 B/op [Average]
[info]   (min, avg, max) = (69916,470, 83994,845, 93484,903), stdev = 12826,660
[info]   CI (99.9%): [34603,946, 133385,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,067 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,067, 0,104), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,287 ±(99.9%) 3,589 B/op [Average]
[info]   (min, avg, max) = (1,429, 2,287, 3,576), stdev = 0,932
[info]   CI (99.9%): [≈ 0, 5,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 24,10% complete, ETA 01:40:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80372,888 ops/s
[info] # Warmup Iteration   2: 86887,312 ops/s
[info] # Warmup Iteration   3: 87439,458 ops/s
[info] # Warmup Iteration   4: 88119,030 ops/s
[info] # Warmup Iteration   5: 87358,093 ops/s
[info] Iteration   1: 88136,674 ops/s
[info]                  ·gc.alloc.rate:                   1611,837 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24002,931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,115 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 88057,866 ops/s
[info]                  ·gc.alloc.rate:                   1610,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36060,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,744 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 88413,772 ops/s
[info]                  ·gc.alloc.rate:                   1616,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23974,904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,112 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 88565,611 ops/s
[info]                  ·gc.alloc.rate:                   1619,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23956,900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,740 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 88302,933 ops/s
[info]                  ·gc.alloc.rate:                   1614,773 MB/sec
[info]                  ·gc.alloc.rate.norm:              28784,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36091,473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,742 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle":
[info]   88295,371 ±(99.9%) 790,787 ops/s [Average]
[info]   (min, avg, max) = (88057,866, 88295,371, 88565,611), stdev = 205,365
[info]   CI (99.9%): [87504,584, 89086,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1614,765 ±(99.9%) 14,520 MB/sec [Average]
[info]   (min, avg, max) = (1610,484, 1614,765, 1619,790), stdev = 3,771
[info]   CI (99.9%): [1600,245, 1629,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   28784,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28784,005, 28784,005, 28784,005), stdev = 0,001
[info]   CI (99.9%): [28784,004, 28784,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,275 ±(99.9%) 1423,287 MB/sec [Average]
[info]   (min, avg, max) = (1344,108, 1616,275, 2024,720), stdev = 369,623
[info]   CI (99.9%): [192,988, 3039,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   28817,342 ±(99.9%) 25515,272 B/op [Average]
[info]   (min, avg, max) = (23956,900, 28817,342, 36091,473), stdev = 6626,235
[info]   CI (99.9%): [3302,070, 54332,613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,891 ±(99.9%) 0,783 B/op [Average]
[info]   (min, avg, max) = (0,740, 0,891, 1,115), stdev = 0,203
[info]   CI (99.9%): [0,107, 1,674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 24,30% complete, ETA 01:40:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80152,008 ops/s
[info] # Warmup Iteration   2: 96417,437 ops/s
[info] # Warmup Iteration   3: 98399,872 ops/s
[info] # Warmup Iteration   4: 98183,678 ops/s
[info] # Warmup Iteration   5: 97873,351 ops/s
[info] Iteration   1: 98104,603 ops/s
[info]                  ·gc.alloc.rate:                   473,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              7600,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8207,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,702 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 97568,164 ops/s
[info]                  ·gc.alloc.rate:               471,148 MB/sec
[info]                  ·gc.alloc.rate.norm:          7600,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8252,274 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 97080,325 ops/s
[info]                  ·gc.alloc.rate:                   468,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              7600,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,713 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10938,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54,563 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 97316,930 ops/s
[info]                  ·gc.alloc.rate:      469,955 MB/sec
[info]                  ·gc.alloc.rate.norm: 7600,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 97382,274 ops/s
[info]                  ·gc.alloc.rate:                   470,198 MB/sec
[info]                  ·gc.alloc.rate.norm:              7600,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10904,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   97490,459 ±(99.9%) 1482,920 ops/s [Average]
[info]   (min, avg, max) = (97080,325, 97490,459, 98104,603), stdev = 385,110
[info]   CI (99.9%): [96007,539, 98973,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   470,757 ±(99.9%) 7,165 MB/sec [Average]
[info]   (min, avg, max) = (468,766, 470,757, 473,720), stdev = 1,861
[info]   CI (99.9%): [463,592, 477,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7600,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7600,004, 7600,004, 7600,005), stdev = 0,001
[info]   CI (99.9%): [7600,003, 7600,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   474,509 ±(99.9%) 1068,602 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,509, 674,713), stdev = 277,513
[info]   CI (99.9%): [≈ 0, 1543,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7660,712 ±(99.9%) 17285,851 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7660,712, 10938,977), stdev = 4489,081
[info]   CI (99.9%): [≈ 0, 24946,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,694 ±(99.9%) 5,751 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,694, 3,365), stdev = 1,493
[info]   CI (99.9%): [≈ 0, 6,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11,255 ±(99.9%) 93,240 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11,255, 54,563), stdev = 24,214
[info]   CI (99.9%): [≈ 0, 104,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 24,50% complete, ETA 01:40:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32331,383 ops/s
[info] # Warmup Iteration   2: 125067,295 ops/s
[info] # Warmup Iteration   3: 125197,956 ops/s
[info] # Warmup Iteration   4: 124866,558 ops/s
[info] # Warmup Iteration   5: 124758,124 ops/s
[info] Iteration   1: 123658,561 ops/s
[info]                  ·gc.alloc.rate:               378,398 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6510,946 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 125454,368 ops/s
[info]                  ·gc.alloc.rate:      383,905 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 124921,473 ops/s
[info]                  ·gc.alloc.rate:                   382,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6445,132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,225 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 125055,905 ops/s
[info]                  ·gc.alloc.rate:                   382,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8483,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32,859 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 125282,204 ops/s
[info]                  ·gc.alloc.rate:      383,380 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   124874,502 ±(99.9%) 2733,747 ops/s [Average]
[info]   (min, avg, max) = (123658,561, 124874,502, 125454,368), stdev = 709,946
[info]   CI (99.9%): [122140,755, 127608,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   382,118 ±(99.9%) 8,388 MB/sec [Average]
[info]   (min, avg, max) = (378,398, 382,118, 383,905), stdev = 2,178
[info]   CI (99.9%): [373,730, 390,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,004), stdev = 0,001
[info]   CI (99.9%): [4816,003, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,442 ±(99.9%) 1220,269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,442, 674,156), stdev = 316,900
[info]   CI (99.9%): [≈ 0, 1559,711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   4287,930 ±(99.9%) 15399,135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4287,930, 8483,570), stdev = 3999,106
[info]   CI (99.9%): [≈ 0, 19687,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,526 ±(99.9%) 4,489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,526, 2,611), stdev = 1,166
[info]   CI (99.9%): [≈ 0, 5,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   6,617 ±(99.9%) 56,490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,617, 32,859), stdev = 14,670
[info]   CI (99.9%): [≈ 0, 63,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,70% complete, ETA 01:39:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 81543,713 ops/s
[info] # Warmup Iteration   2: 108146,489 ops/s
[info] # Warmup Iteration   3: 108241,476 ops/s
[info] # Warmup Iteration   4: 107920,753 ops/s
[info] # Warmup Iteration   5: 107666,974 ops/s
[info] Iteration   1: 108176,813 ops/s
[info]                  ·gc.alloc.rate:               357,384 MB/sec
[info]                  ·gc.alloc.rate.norm:          5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7442,551 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 108191,140 ops/s
[info]                  ·gc.alloc.rate:      357,443 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 107576,731 ops/s
[info]                  ·gc.alloc.rate:               355,398 MB/sec
[info]                  ·gc.alloc.rate.norm:          5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7484,051 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 107731,309 ops/s
[info]                  ·gc.alloc.rate:      355,943 MB/sec
[info]                  ·gc.alloc.rate.norm: 5200,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 107666,396 ops/s
[info]                  ·gc.alloc.rate:                   355,678 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9858,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,913 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   107868,478 ±(99.9%) 1129,149 ops/s [Average]
[info]   (min, avg, max) = (107576,731, 107868,478, 108191,140), stdev = 293,236
[info]   CI (99.9%): [106739,329, 108997,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   356,369 ±(99.9%) 3,746 MB/sec [Average]
[info]   (min, avg, max) = (355,398, 356,369, 357,443), stdev = 0,973
[info]   CI (99.9%): [352,623, 360,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5200,004, 5200,004, 5200,004), stdev = 0,001
[info]   CI (99.9%): [5200,003, 5200,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   339,465 ±(99.9%) 1220,404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,465, 674,311), stdev = 316,935
[info]   CI (99.9%): [≈ 0, 1559,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4957,005 ±(99.9%) 17826,818 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4957,005, 9858,423), stdev = 4629,568
[info]   CI (99.9%): [≈ 0, 22783,823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,183 ±(99.9%) 1,572 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,183, 0,913), stdev = 0,408
[info]   CI (99.9%): [≈ 0, 1,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24,90% complete, ETA 01:39:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120371,077 ops/s
[info] # Warmup Iteration   2: 125010,525 ops/s
[info] # Warmup Iteration   3: 126602,266 ops/s
[info] # Warmup Iteration   4: 124826,476 ops/s
[info] # Warmup Iteration   5: 126520,968 ops/s
[info] Iteration   1: 126034,711 ops/s
[info]                  ·gc.alloc.rate:                   385,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6388,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,605 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 126634,111 ops/s
[info]                  ·gc.alloc.rate:               387,489 MB/sec
[info]                  ·gc.alloc.rate.norm:          4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,578 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6358,267 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 126397,820 ops/s
[info]                  ·gc.alloc.rate:                   386,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6369,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,259 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 126595,875 ops/s
[info]                  ·gc.alloc.rate:      387,408 MB/sec
[info]                  ·gc.alloc.rate.norm: 4816,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 126450,217 ops/s
[info]                  ·gc.alloc.rate:                   386,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8398,159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39,474 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   126422,547 ±(99.9%) 916,494 ops/s [Average]
[info]   (min, avg, max) = (126034,711, 126422,547, 126634,111), stdev = 238,011
[info]   CI (99.9%): [125506,053, 127339,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   386,831 ±(99.9%) 2,844 MB/sec [Average]
[info]   (min, avg, max) = (385,648, 386,831, 387,489), stdev = 0,738
[info]   CI (99.9%): [383,988, 389,675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4816,003, 4816,003, 4816,003), stdev = 0,001
[info]   CI (99.9%): [4816,003, 4816,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   441,853 ±(99.9%) 989,248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,853, 674,661), stdev = 256,905
[info]   CI (99.9%): [≈ 0, 1431,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5502,867 ±(99.9%) 12317,727 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5502,867, 8398,159), stdev = 3198,875
[info]   CI (99.9%): [≈ 0, 17820,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,648 ±(99.9%) 5,432 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,648, 3,171), stdev = 1,411
[info]   CI (99.9%): [≈ 0, 6,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8,068 ±(99.9%) 67,611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,068, 39,474), stdev = 17,558
[info]   CI (99.9%): [≈ 0, 75,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 25,10% complete, ETA 01:39:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 117830,859 ops/s
[info] # Warmup Iteration   2: 121180,717 ops/s
[info] # Warmup Iteration   3: 123524,094 ops/s
[info] # Warmup Iteration   4: 123420,507 ops/s
[info] # Warmup Iteration   5: 123591,020 ops/s
[info] Iteration   1: 123374,209 ops/s
[info]                  ·gc.alloc.rate:               280,305 MB/sec
[info]                  ·gc.alloc.rate.norm:          3576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6525,772 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 124518,066 ops/s
[info]                  ·gc.alloc.rate:      282,919 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 124033,325 ops/s
[info]                  ·gc.alloc.rate:                   281,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6491,056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,199 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 123694,374 ops/s
[info]                  ·gc.alloc.rate:                   281,071 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6508,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,202 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 123829,119 ops/s
[info]                  ·gc.alloc.rate:      281,310 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576,003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   123889,819 ±(99.9%) 1637,119 ops/s [Average]
[info]   (min, avg, max) = (123374,209, 123889,819, 124518,066), stdev = 425,155
[info]   CI (99.9%): [122252,699, 125526,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   281,481 ±(99.9%) 3,729 MB/sec [Average]
[info]   (min, avg, max) = (280,305, 281,481, 282,919), stdev = 0,968
[info]   CI (99.9%): [277,753, 285,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3576,003, 3576,003, 3576,004), stdev = 0,001
[info]   CI (99.9%): [3576,003, 3576,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   306,927 ±(99.9%) 1078,891 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,927, 511,594), stdev = 280,185
[info]   CI (99.9%): [≈ 0, 1385,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   3905,144 ±(99.9%) 13727,214 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3905,144, 6525,772), stdev = 3564,914
[info]   CI (99.9%): [≈ 0, 17632,358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,033 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,016), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,080 ±(99.9%) 0,423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,080, 0,202), stdev = 0,110
[info]   CI (99.9%): [≈ 0, 0,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25,30% complete, ETA 01:39:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9005,168 ops/s
[info] # Warmup Iteration   2: 12171,039 ops/s
[info] # Warmup Iteration   3: 12174,490 ops/s
[info] # Warmup Iteration   4: 12204,854 ops/s
[info] # Warmup Iteration   5: 12187,626 ops/s
[info] Iteration   1: 12186,177 ops/s
[info]                  ·gc.alloc.rate:                   1988,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              256808,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260466,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,376 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 12223,707 ops/s
[info]                  ·gc.alloc.rate:                   1994,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              256808,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260085,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,360 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 12217,426 ops/s
[info]                  ·gc.alloc.rate:                   1993,454 MB/sec
[info]                  ·gc.alloc.rate.norm:              256808,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     260535,228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,363 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12196,573 ops/s
[info]                  ·gc.alloc.rate:                   1990,134 MB/sec
[info]                  ·gc.alloc.rate.norm:              256808,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261542,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,686 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12220,495 ops/s
[info]                  ·gc.alloc.rate:                   1993,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              256808,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261371,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,361 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   12208,876 ±(99.9%) 63,700 ops/s [Average]
[info]   (min, avg, max) = (12186,177, 12208,876, 12223,707), stdev = 16,543
[info]   CI (99.9%): [12145,175, 12272,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1992,030 ±(99.9%) 10,668 MB/sec [Average]
[info]   (min, avg, max) = (1988,136, 1992,030, 1994,653), stdev = 2,770
[info]   CI (99.9%): [1981,362, 2002,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   256808,036 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (256808,033, 256808,036, 256808,042), stdev = 0,004
[info]   CI (99.9%): [256808,021, 256808,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2022,997 ±(99.9%) 19,695 MB/sec [Average]
[info]   (min, avg, max) = (2016,460, 2022,997, 2029,207), stdev = 5,115
[info]   CI (99.9%): [2003,302, 2042,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   260800,360 ±(99.9%) 2412,304 B/op [Average]
[info]   (min, avg, max) = (260085,614, 260800,360, 261542,358), stdev = 626,468
[info]   CI (99.9%): [258388,057, 263212,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,042), stdev = 0,009
[info]   CI (99.9%): [0,002, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,829 ±(99.9%) 4,614 B/op [Average]
[info]   (min, avg, max) = (2,686, 4,829, 5,376), stdev = 1,198
[info]   CI (99.9%): [0,215, 9,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,50% complete, ETA 01:38:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7272,867 ops/s
[info] # Warmup Iteration   2: 12203,929 ops/s
[info] # Warmup Iteration   3: 12195,792 ops/s
[info] # Warmup Iteration   4: 12197,568 ops/s
[info] # Warmup Iteration   5: 12221,068 ops/s
[info] Iteration   1: 12154,194 ops/s
[info]                  ·gc.alloc.rate:                   1880,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              243458,275 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175395,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,695 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12211,705 ops/s
[info]                  ·gc.alloc.rate:                   1889,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     262079,618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,683 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 12090,396 ops/s
[info]                  ·gc.alloc.rate:                   1870,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     264961,820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,709 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12185,960 ops/s
[info]                  ·gc.alloc.rate:                   1885,351 MB/sec
[info]                  ·gc.alloc.rate.norm:              243472,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263133,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,752 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12197,145 ops/s
[info]                  ·gc.alloc.rate:                   1886,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              243454,901 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     263067,874 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,371 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   12167,880 ±(99.9%) 185,621 ops/s [Average]
[info]   (min, avg, max) = (12090,396, 12167,880, 12211,705), stdev = 48,205
[info]   CI (99.9%): [11982,259, 12353,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1882,302 ±(99.9%) 28,723 MB/sec [Average]
[info]   (min, avg, max) = (1870,311, 1882,302, 1889,089), stdev = 7,459
[info]   CI (99.9%): [1853,578, 1911,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243465,857 ±(99.9%) 32,904 B/op [Average]
[info]   (min, avg, max) = (243454,901, 243465,857, 243472,042), stdev = 8,545
[info]   CI (99.9%): [243432,953, 243498,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,916 ±(99.9%) 1174,060 MB/sec [Average]
[info]   (min, avg, max) = (1354,506, 1899,916, 2038,615), stdev = 304,900
[info]   CI (99.9%): [725,856, 3073,976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   245727,545 ±(99.9%) 151448,728 B/op [Average]
[info]   (min, avg, max) = (175395,188, 245727,545, 264961,820), stdev = 39330,754
[info]   CI (99.9%): [94278,816, 397176,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,842 ±(99.9%) 13,482 B/op [Average]
[info]   (min, avg, max) = (2,683, 4,842, 10,752), stdev = 3,501
[info]   CI (99.9%): [≈ 0, 18,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25,70% complete, ETA 01:38:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 199176,919 ops/s
[info] # Warmup Iteration   2: 208635,175 ops/s
[info] # Warmup Iteration   3: 206722,281 ops/s
[info] # Warmup Iteration   4: 208262,294 ops/s
[info] # Warmup Iteration   5: 207249,151 ops/s
[info] Iteration   1: 208552,531 ops/s
[info]                  ·gc.alloc.rate:               542,744 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,538 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3860,492 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 209025,161 ops/s
[info]                  ·gc.alloc.rate:                   544,051 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5085,987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,019 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 209273,900 ops/s
[info]                  ·gc.alloc.rate:      544,563 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 208834,404 ops/s
[info]                  ·gc.alloc.rate:                   543,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5090,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,471 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 208548,693 ops/s
[info]                  ·gc.alloc.rate:                   542,799 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5087,076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,157 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   208846,938 ±(99.9%) 1202,121 ops/s [Average]
[info]   (min, avg, max) = (208548,693, 208846,938, 209273,900), stdev = 312,187
[info]   CI (99.9%): [207644,817, 210049,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   543,536 ±(99.9%) 3,038 MB/sec [Average]
[info]   (min, avg, max) = (542,744, 543,536, 544,563), stdev = 0,789
[info]   CI (99.9%): [540,498, 546,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,002, 4096,002, 4096,002), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   507,334 ±(99.9%) 1125,591 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 507,334, 675,546), stdev = 292,313
[info]   CI (99.9%): [≈ 0, 1632,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3824,751 ±(99.9%) 8483,559 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3824,751, 5090,199), stdev = 2203,153
[info]   CI (99.9%): [≈ 0, 12308,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,575 ±(99.9%) 4,773 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,575, 2,792), stdev = 1,239
[info]   CI (99.9%): [≈ 0, 5,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,329 ±(99.9%) 35,933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,329, 21,019), stdev = 9,332
[info]   CI (99.9%): [≈ 0, 40,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 25,90% complete, ETA 01:38:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3880,644 ops/s
[info] # Warmup Iteration   2: 6707,369 ops/s
[info] # Warmup Iteration   3: 6782,302 ops/s
[info] # Warmup Iteration   4: 6880,270 ops/s
[info] # Warmup Iteration   5: 6857,498 ops/s
[info] Iteration   1: 6870,103 ops/s
[info]                  ·gc.alloc.rate:                   1824,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              417984,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     465398,092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,768 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6857,643 ops/s
[info]                  ·gc.alloc.rate:               1821,206 MB/sec
[info]                  ·gc.alloc.rate.norm:          417984,064 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311133,593 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 6794,838 ops/s
[info]                  ·gc.alloc.rate:               1804,512 MB/sec
[info]                  ·gc.alloc.rate.norm:          417984,060 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2035,335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 471450,383 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 6859,094 ops/s
[info]                  ·gc.alloc.rate:                   1821,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              417984,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     467358,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6844,375 ops/s
[info]                  ·gc.alloc.rate:               1817,470 MB/sec
[info]                  ·gc.alloc.rate.norm:          417988,674 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1358,613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 312459,106 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   6845,211 ±(99.9%) 113,985 ops/s [Average]
[info]   (min, avg, max) = (6794,838, 6845,211, 6870,103), stdev = 29,602
[info]   CI (99.9%): [6731,225, 6959,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1817,896 ±(99.9%) 30,424 MB/sec [Average]
[info]   (min, avg, max) = (1804,512, 1817,896, 1824,610), stdev = 7,901
[info]   CI (99.9%): [1787,472, 1848,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   417984,983 ±(99.9%) 7,945 B/op [Average]
[info]   (min, avg, max) = (417984,059, 417984,983, 417988,674), stdev = 2,063
[info]   CI (99.9%): [417977,039, 417992,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1763,610 ±(99.9%) 1428,860 MB/sec [Average]
[info]   (min, avg, max) = (1355,646, 1763,610, 2036,869), stdev = 371,070
[info]   CI (99.9%): [334,750, 3192,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   405559,898 ±(99.9%) 329704,259 B/op [Average]
[info]   (min, avg, max) = (311133,593, 405559,898, 471450,383), stdev = 85623,149
[info]   CI (99.9%): [75855,639, 735264,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,774 ±(99.9%) 31,853 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,774, 19,104), stdev = 8,272
[info]   CI (99.9%): [≈ 0, 36,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 26,10% complete, ETA 01:38:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8645,099 ops/s
[info] # Warmup Iteration   2: 11243,746 ops/s
[info] # Warmup Iteration   3: 11375,657 ops/s
[info] # Warmup Iteration   4: 11383,118 ops/s
[info] # Warmup Iteration   5: 11278,387 ops/s
[info] Iteration   1: 11299,471 ops/s
[info]                  ·gc.alloc.rate:                   1817,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              253160,106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,483 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     281302,640 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,799 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11327,581 ops/s
[info]                  ·gc.alloc.rate:                   1822,223 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,431 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     187209,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,892 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11388,438 ops/s
[info]                  ·gc.alloc.rate:                   1831,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,341 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     279632,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,506 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 11380,117 ops/s
[info]                  ·gc.alloc.rate:                   1830,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              253176,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     280314,220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,757 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 11202,094 ops/s
[info]                  ·gc.alloc.rate:               1802,084 MB/sec
[info]                  ·gc.alloc.rate.norm:          253173,954 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 190063,173 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle":
[info]   11319,540 ±(99.9%) 289,936 ops/s [Average]
[info]   (min, avg, max) = (11202,094, 11319,540, 11388,438), stdev = 75,295
[info]   CI (99.9%): [11029,604, 11609,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1820,893 ±(99.9%) 46,646 MB/sec [Average]
[info]   (min, avg, max) = (1802,084, 1820,893, 1831,910), stdev = 12,114
[info]   CI (99.9%): [1774,247, 1867,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   253172,434 ±(99.9%) 26,763 B/op [Average]
[info]   (min, avg, max) = (253160,106, 253172,434, 253176,039), stdev = 6,950
[info]   CI (99.9%): [253145,671, 253199,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1754,033 ±(99.9%) 1419,773 MB/sec [Average]
[info]   (min, avg, max) = (1347,431, 1754,033, 2027,048), stdev = 368,711
[info]   CI (99.9%): [334,260, 3173,806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   243704,386 ±(99.9%) 193624,688 B/op [Average]
[info]   (min, avg, max) = (187209,359, 243704,386, 281302,640), stdev = 50283,717
[info]   CI (99.9%): [50079,698, 437329,074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,191 ±(99.9%) 16,427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,191, 11,506), stdev = 4,266
[info]   CI (99.9%): [≈ 0, 21,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26,31% complete, ETA 01:37:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21270,374 ops/s
[info] # Warmup Iteration   2: 29014,159 ops/s
[info] # Warmup Iteration   3: 29261,150 ops/s
[info] # Warmup Iteration   4: 29247,476 ops/s
[info] # Warmup Iteration   5: 29161,166 ops/s
[info] Iteration   1: 29412,871 ops/s
[info]                  ·gc.alloc.rate:                   1524,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,966 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71858,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,114 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 29407,238 ops/s
[info]                  ·gc.alloc.rate:               1524,104 MB/sec
[info]                  ·gc.alloc.rate.norm:          81568,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 71875,462 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 29282,213 ops/s
[info]                  ·gc.alloc.rate:                   1517,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,290 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108405,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,356 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 29497,436 ops/s
[info]                  ·gc.alloc.rate:                   1528,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,339 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71833,907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,111 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 29360,249 ops/s
[info]                  ·gc.alloc.rate:                   1521,712 MB/sec
[info]                  ·gc.alloc.rate.norm:              81568,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72250,946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,116 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   29392,001 ±(99.9%) 303,480 ops/s [Average]
[info]   (min, avg, max) = (29282,213, 29392,001, 29497,436), stdev = 78,813
[info]   CI (99.9%): [29088,521, 29695,481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1523,230 ±(99.9%) 16,402 MB/sec [Average]
[info]   (min, avg, max) = (1517,126, 1523,230, 1528,780), stdev = 4,259
[info]   CI (99.9%): [1506,829, 1539,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   81568,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (81568,014, 81568,014, 81568,016), stdev = 0,001
[info]   CI (99.9%): [81568,011, 81568,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,297 ±(99.9%) 1155,945 MB/sec [Average]
[info]   (min, avg, max) = (1342,966, 1479,297, 2016,290), stdev = 300,195
[info]   CI (99.9%): [323,352, 2635,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79244,831 ±(99.9%) 62773,979 B/op [Average]
[info]   (min, avg, max) = (71833,907, 79244,831, 108405,481), stdev = 16302,203
[info]   CI (99.9%): [16470,853, 142018,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,339 ±(99.9%) 4,722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,339, 3,356), stdev = 1,226
[info]   CI (99.9%): [≈ 0, 6,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,51% complete, ETA 01:37:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21717,073 ops/s
[info] # Warmup Iteration   2: 31138,555 ops/s
[info] # Warmup Iteration   3: 34334,380 ops/s
[info] # Warmup Iteration   4: 34429,486 ops/s
[info] # Warmup Iteration   5: 34337,309 ops/s
[info] Iteration   1: 34388,700 ops/s
[info]                  ·gc.alloc.rate:                   1681,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92934,758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,905 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 34470,458 ops/s
[info]                  ·gc.alloc.rate:                   1685,211 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61888,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,851 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 34471,836 ops/s
[info]                  ·gc.alloc.rate:                   1685,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,909 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     92903,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,901 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 34440,285 ops/s
[info]                  ·gc.alloc.rate:               1683,719 MB/sec
[info]                  ·gc.alloc.rate.norm:          76944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62033,670 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 34161,075 ops/s
[info]                  ·gc.alloc.rate:                   1669,884 MB/sec
[info]                  ·gc.alloc.rate.norm:              76944,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,257 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93871,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,918 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   34386,471 ±(99.9%) 502,230 ops/s [Average]
[info]   (min, avg, max) = (34161,075, 34386,471, 34471,836), stdev = 130,427
[info]   CI (99.9%): [33884,241, 34888,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1681,044 ±(99.9%) 24,923 MB/sec [Average]
[info]   (min, avg, max) = (1669,884, 1681,044, 1685,344), stdev = 6,472
[info]   CI (99.9%): [1656,122, 1705,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   76944,013 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (76944,012, 76944,013, 76944,014), stdev = 0,001
[info]   CI (99.9%): [76944,010, 76944,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1763,101 ±(99.9%) 1429,448 MB/sec [Average]
[info]   (min, avg, max) = (1355,467, 1763,101, 2037,257), stdev = 371,223
[info]   CI (99.9%): [333,653, 3192,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   80726,371 ±(99.9%) 65980,005 B/op [Average]
[info]   (min, avg, max) = (61888,458, 80726,371, 93871,641), stdev = 17134,798
[info]   CI (99.9%): [14746,366, 146706,376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,715 ±(99.9%) 4,013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,715, 2,851), stdev = 1,042
[info]   CI (99.9%): [≈ 0, 5,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26,71% complete, ETA 01:37:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375885,176 ops/s
[info] # Warmup Iteration   2: 383669,468 ops/s
[info] # Warmup Iteration   3: 381970,162 ops/s
[info] # Warmup Iteration   4: 383224,332 ops/s
[info] # Warmup Iteration   5: 382181,862 ops/s
[info] Iteration   1: 382411,775 ops/s
[info]                  ·gc.alloc.rate:                   845,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5554,055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,514 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 385117,534 ops/s
[info]                  ·gc.alloc.rate:               851,601 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2755,148 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 384823,595 ops/s
[info]                  ·gc.alloc.rate:               850,873 MB/sec
[info]                  ·gc.alloc.rate.norm:          3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2754,356 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 383719,418 ops/s
[info]                  ·gc.alloc.rate:                   848,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2762,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 384279,473 ops/s
[info]                  ·gc.alloc.rate:                   849,527 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5516,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   384070,359 ±(99.9%) 4121,146 ops/s [Average]
[info]   (min, avg, max) = (382411,775, 384070,359, 385117,534), stdev = 1070,249
[info]   CI (99.9%): [379949,213, 388191,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   849,201 ±(99.9%) 9,182 MB/sec [Average]
[info]   (min, avg, max) = (845,517, 849,201, 851,601), stdev = 2,385
[info]   CI (99.9%): [840,019, 858,383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3480,001, 3480,001, 3480,001), stdev = 0,001
[info]   CI (99.9%): [3480,001, 3480,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   943,449 ±(99.9%) 1422,208 MB/sec [Average]
[info]   (min, avg, max) = (673,450, 943,449, 1349,439), stdev = 369,343
[info]   CI (99.9%): [≈ 0, 2365,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3868,444 ±(99.9%) 5859,207 B/op [Average]
[info]   (min, avg, max) = (2754,356, 3868,444, 5554,055), stdev = 1521,617
[info]   CI (99.9%): [≈ 0, 9727,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,154 ±(99.9%) 0,821 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,154, 0,514), stdev = 0,213
[info]   CI (99.9%): [≈ 0, 0,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 26,91% complete, ETA 01:37:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 424896,678 ops/s
[info] # Warmup Iteration   2: 450205,014 ops/s
[info] # Warmup Iteration   3: 453271,386 ops/s
[info] # Warmup Iteration   4: 453173,294 ops/s
[info] # Warmup Iteration   5: 453502,283 ops/s
[info] Iteration   1: 454294,259 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 454991,982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 454601,092 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 453369,556 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 453794,672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   454210,312 ±(99.9%) 2473,415 ops/s [Average]
[info]   (min, avg, max) = (453369,556, 454210,312, 454991,982), stdev = 642,338
[info]   CI (99.9%): [451736,897, 456683,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 27,11% complete, ETA 01:36:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22527,131 ops/s
[info] # Warmup Iteration   2: 30166,443 ops/s
[info] # Warmup Iteration   3: 30279,333 ops/s
[info] # Warmup Iteration   4: 30508,890 ops/s
[info] # Warmup Iteration   5: 30327,616 ops/s
[info] Iteration   1: 30422,666 ops/s
[info]                  ·gc.alloc.rate:                   1601,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103992,717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,307 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 30527,004 ops/s
[info]                  ·gc.alloc.rate:               1606,309 MB/sec
[info]                  ·gc.alloc.rate.norm:          82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69128,954 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 30419,346 ops/s
[info]                  ·gc.alloc.rate:                   1600,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104209,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,308 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30285,614 ops/s
[info]                  ·gc.alloc.rate:               1593,509 MB/sec
[info]                  ·gc.alloc.rate.norm:          82824,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69891,220 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 30421,629 ops/s
[info]                  ·gc.alloc.rate:               1600,661 MB/sec
[info]                  ·gc.alloc.rate.norm:          82824,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69679,922 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   30415,252 ±(99.9%) 330,163 ops/s [Average]
[info]   (min, avg, max) = (30285,614, 30415,252, 30527,004), stdev = 85,742
[info]   CI (99.9%): [30085,089, 30745,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1600,406 ±(99.9%) 17,526 MB/sec [Average]
[info]   (min, avg, max) = (1593,509, 1600,406, 1606,309), stdev = 4,552
[info]   CI (99.9%): [1582,879, 1617,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (82824,013, 82824,014, 82824,015), stdev = 0,001
[info]   CI (99.9%): [82824,012, 82824,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1611,209 ±(99.9%) 1408,900 MB/sec [Average]
[info]   (min, avg, max) = (1340,703, 1611,209, 2013,809), stdev = 365,887
[info]   CI (99.9%): [202,308, 3020,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83380,510 ±(99.9%) 72844,719 B/op [Average]
[info]   (min, avg, max) = (69128,954, 83380,510, 104209,735), stdev = 18917,542
[info]   CI (99.9%): [10535,791, 156225,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,723 ±(99.9%) 9,085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,723, 4,308), stdev = 2,359
[info]   CI (99.9%): [≈ 0, 10,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 27,31% complete, ETA 01:36:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10340,398 ops/s
[info] # Warmup Iteration   2: 11558,220 ops/s
[info] # Warmup Iteration   3: 11636,443 ops/s
[info] # Warmup Iteration   4: 11629,244 ops/s
[info] # Warmup Iteration   5: 11638,253 ops/s
[info] Iteration   1: 11601,370 ops/s
[info]                  ·gc.alloc.rate:                   648,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              88018,907 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,318 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91620,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 384,771 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11653,860 ops/s
[info]                  ·gc.alloc.rate:                   651,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,362 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91211,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,433 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 11681,900 ops/s
[info]                  ·gc.alloc.rate:               653,266 MB/sec
[info]                  ·gc.alloc.rate.norm:          88016,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,308 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 90716,270 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 11651,391 ops/s
[info]                  ·gc.alloc.rate:                   651,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90957,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,811 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 11658,239 ops/s
[info]                  ·gc.alloc.rate:                   651,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              88016,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90820,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,620 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle":
[info]   11649,352 ±(99.9%) 113,333 ops/s [Average]
[info]   (min, avg, max) = (11601,370, 11649,352, 11681,900), stdev = 29,432
[info]   CI (99.9%): [11536,019, 11762,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   651,444 ±(99.9%) 6,312 MB/sec [Average]
[info]   (min, avg, max) = (648,771, 651,444, 653,266), stdev = 1,639
[info]   CI (99.9%): [645,132, 657,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   88016,612 ±(99.9%) 4,941 B/op [Average]
[info]   (min, avg, max) = (88016,035, 88016,612, 88018,907), stdev = 1,283
[info]   CI (99.9%): [88011,671, 88021,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   674,005 ±(99.9%) 4,815 MB/sec [Average]
[info]   (min, avg, max) = (672,661, 674,005, 675,362), stdev = 1,251
[info]   CI (99.9%): [669,189, 678,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   91065,397 ±(99.9%) 1392,263 B/op [Average]
[info]   (min, avg, max) = (90716,270, 91065,397, 91620,514), stdev = 361,566
[info]   CI (99.9%): [89673,135, 92457,660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,592 ±(99.9%) 4,831 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,592, 2,836), stdev = 1,255
[info]   CI (99.9%): [≈ 0, 5,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   80,327 ±(99.9%) 655,451 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80,327, 384,771), stdev = 170,218
[info]   CI (99.9%): [≈ 0, 735,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27,51% complete, ETA 01:36:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98085,984 ops/s
[info] # Warmup Iteration   2: 112968,989 ops/s
[info] # Warmup Iteration   3: 113613,345 ops/s
[info] # Warmup Iteration   4: 113529,050 ops/s
[info] # Warmup Iteration   5: 112963,561 ops/s
[info] Iteration   1: 113336,390 ops/s
[info]                  ·gc.alloc.rate:                   1846,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,953 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28009,634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,867 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 113469,651 ops/s
[info]                  ·gc.alloc.rate:                   1848,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28004,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,289 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 113354,602 ops/s
[info]                  ·gc.alloc.rate:                   1846,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,963 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28089,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,867 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 113604,500 ops/s
[info]                  ·gc.alloc.rate:               1850,894 MB/sec
[info]                  ·gc.alloc.rate.norm:          25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 18705,950 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 113082,246 ops/s
[info]                  ·gc.alloc.rate:                   1841,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,288 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28219,376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,579 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   113369,478 ±(99.9%) 743,404 ops/s [Average]
[info]   (min, avg, max) = (113082,246, 113369,478, 113604,500), stdev = 193,060
[info]   CI (99.9%): [112626,074, 114112,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1846,872 ±(99.9%) 12,684 MB/sec [Average]
[info]   (min, avg, max) = (1841,985, 1846,872, 1850,894), stdev = 3,294
[info]   CI (99.9%): [1834,188, 1859,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25640,004, 25640,004, 25640,004), stdev = 0,001
[info]   CI (99.9%): [25640,003, 25640,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887,318 ±(99.9%) 1155,986 MB/sec [Average]
[info]   (min, avg, max) = (1350,340, 1887,318, 2027,288), stdev = 300,206
[info]   CI (99.9%): [731,332, 3043,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   26205,682 ±(99.9%) 16147,205 B/op [Average]
[info]   (min, avg, max) = (18705,950, 26205,682, 28219,376), stdev = 4193,378
[info]   CI (99.9%): [10058,477, 42352,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,520 ±(99.9%) 1,452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,520, 0,867), stdev = 0,377
[info]   CI (99.9%): [≈ 0, 1,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 27,71% complete, ETA 01:36:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136012,650 ops/s
[info] # Warmup Iteration   2: 522975,113 ops/s
[info] # Warmup Iteration   3: 522714,947 ops/s
[info] # Warmup Iteration   4: 523312,127 ops/s
[info] # Warmup Iteration   5: 522180,120 ops/s
[info] Iteration   1: 523385,478 ops/s
[info]                  ·gc.alloc.rate:               542,711 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1538,286 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 523344,650 ops/s
[info]                  ·gc.alloc.rate:                   542,645 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2027,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,843 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 522410,732 ops/s
[info]                  ·gc.alloc.rate:                   541,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2030,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 522939,281 ops/s
[info]                  ·gc.alloc.rate:      542,315 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 521928,641 ops/s
[info]                  ·gc.alloc.rate:               541,118 MB/sec
[info]                  ·gc.alloc.rate.norm:          1632,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2028,691 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   522801,757 ±(99.9%) 2412,120 ops/s [Average]
[info]   (min, avg, max) = (521928,641, 522801,757, 523385,478), stdev = 626,420
[info]   CI (99.9%): [520389,637, 525213,876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   542,094 ±(99.9%) 2,623 MB/sec [Average]
[info]   (min, avg, max) = (541,118, 542,094, 542,711), stdev = 0,681
[info]   CI (99.9%): [539,471, 544,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1632,001, 1632,001, 1632,001), stdev = 0,001
[info]   CI (99.9%): [1632,001, 1632,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,472 ±(99.9%) 1123,209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,472, 674,101), stdev = 291,694
[info]   CI (99.9%): [≈ 0, 1629,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1525,038 ±(99.9%) 3383,179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1525,038, 2030,856), stdev = 878,601
[info]   CI (99.9%): [≈ 0, 4908,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,526 ±(99.9%) 4,482 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,526, 2,608), stdev = 1,164
[info]   CI (99.9%): [≈ 0, 5,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,581 ±(99.9%) 13,479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,581, 7,843), stdev = 3,501
[info]   CI (99.9%): [≈ 0, 15,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27,91% complete, ETA 01:35:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 233503,657 ops/s
[info] # Warmup Iteration   2: 328457,253 ops/s
[info] # Warmup Iteration   3: 330538,510 ops/s
[info] # Warmup Iteration   4: 327461,464 ops/s
[info] # Warmup Iteration   5: 329546,230 ops/s
[info] Iteration   1: 329328,214 ops/s
[info]                  ·gc.alloc.rate:                   456,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2444,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,199 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 331323,530 ops/s
[info]                  ·gc.alloc.rate:      459,806 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 330712,352 ops/s
[info]                  ·gc.alloc.rate:                   458,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3209,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,396 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 330288,697 ops/s
[info]                  ·gc.alloc.rate:                   458,348 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3213,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 329782,390 ops/s
[info]                  ·gc.alloc.rate:      457,625 MB/sec
[info]                  ·gc.alloc.rate.norm: 2184,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   330287,036 ±(99.9%) 3000,801 ops/s [Average]
[info]   (min, avg, max) = (329328,214, 330287,036, 331323,530), stdev = 779,298
[info]   CI (99.9%): [327286,235, 333287,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   458,321 ±(99.9%) 4,211 MB/sec [Average]
[info]   (min, avg, max) = (456,974, 458,321, 459,806), stdev = 1,094
[info]   CI (99.9%): [454,109, 462,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2184,001, 2184,001, 2184,001), stdev = 0,001
[info]   CI (99.9%): [2184,001, 2184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   372,062 ±(99.9%) 1332,661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,062, 674,442), stdev = 346,088
[info]   CI (99.9%): [≈ 0, 1704,723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1773,614 ±(99.9%) 6349,956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1773,614, 3213,677), stdev = 1649,063
[info]   CI (99.9%): [≈ 0, 8123,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,139 ±(99.9%) 0,639 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,139, 0,396), stdev = 0,166
[info]   CI (99.9%): [≈ 0, 0,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28,11% complete, ETA 01:35:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 626341,971 ops/s
[info] # Warmup Iteration   2: 661843,692 ops/s
[info] # Warmup Iteration   3: 670507,227 ops/s
[info] # Warmup Iteration   4: 674405,262 ops/s
[info] # Warmup Iteration   5: 674873,103 ops/s
[info] Iteration   1: 673525,206 ops/s
[info]                  ·gc.alloc.rate:               438,167 MB/sec
[info]                  ·gc.alloc.rate.norm:          1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1195,434 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 674059,728 ops/s
[info]                  ·gc.alloc.rate:                   438,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1194,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 674483,491 ops/s
[info]                  ·gc.alloc.rate:      438,788 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 673710,356 ops/s
[info]                  ·gc.alloc.rate:                   438,349 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1577,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,231 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 672604,175 ops/s
[info]                  ·gc.alloc.rate:                   437,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1580,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,146 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   673676,591 ±(99.9%) 2703,700 ops/s [Average]
[info]   (min, avg, max) = (672604,175, 673676,591, 674483,491), stdev = 702,142
[info]   CI (99.9%): [670972,891, 676380,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   438,298 ±(99.9%) 1,796 MB/sec [Average]
[info]   (min, avg, max) = (437,580, 438,298, 438,788), stdev = 0,466
[info]   CI (99.9%): [436,502, 440,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1024,001, 1024,001, 1024,001), stdev = 0,001
[info]   CI (99.9%): [1024,001, 1024,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,797 ±(99.9%) 1069,596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,797, 675,441), stdev = 277,771
[info]   CI (99.9%): [≈ 0, 1544,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1109,659 ±(99.9%) 2500,523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1109,659, 1580,460), stdev = 649,378
[info]   CI (99.9%): [≈ 0, 3610,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,636 ±(99.9%) 5,296 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,636, 3,095), stdev = 1,375
[info]   CI (99.9%): [≈ 0, 5,931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,485 ±(99.9%) 12,371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,485, 7,231), stdev = 3,213
[info]   CI (99.9%): [≈ 0, 13,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28,31% complete, ETA 01:35:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57327,933 ops/s
[info] # Warmup Iteration   2: 85225,259 ops/s
[info] # Warmup Iteration   3: 85231,806 ops/s
[info] # Warmup Iteration   4: 85252,058 ops/s
[info] # Warmup Iteration   5: 85405,738 ops/s
[info] Iteration   1: 85238,965 ops/s
[info]                  ·gc.alloc.rate:               3730,494 MB/sec
[info]                  ·gc.alloc.rate.norm:          68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      3395,647 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 62697,370 B/op
[info]                  ·gc.count:                    5,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 85193,845 ops/s
[info]                  ·gc.alloc.rate:                   3728,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75372,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,538 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 85711,401 ops/s
[info]                  ·gc.alloc.rate:                   3750,816 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62487,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,382 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 85460,565 ops/s
[info]                  ·gc.alloc.rate:                   3740,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75222,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,150 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 85361,132 ops/s
[info]                  ·gc.alloc.rate:                   3735,532 MB/sec
[info]                  ·gc.alloc.rate.norm:              68880,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62817,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,919 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   85393,182 ±(99.9%) 794,645 ops/s [Average]
[info]   (min, avg, max) = (85193,845, 85393,182, 85711,401), stdev = 206,367
[info]   CI (99.9%): [84598,537, 86187,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3737,115 ±(99.9%) 34,200 MB/sec [Average]
[info]   (min, avg, max) = (3728,605, 3737,115, 3750,816), stdev = 8,882
[info]   CI (99.9%): [3702,915, 3771,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68880,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (68880,005, 68880,005, 68880,005), stdev = 0,001
[info]   CI (99.9%): [68880,004, 68880,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3673,930 ±(99.9%) 1435,487 MB/sec [Average]
[info]   (min, avg, max) = (3395,647, 3673,930, 4084,518), stdev = 372,791
[info]   CI (99.9%): [2238,442, 5109,417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67719,333 ±(99.9%) 26642,178 B/op [Average]
[info]   (min, avg, max) = (62487,458, 67719,333, 75372,053), stdev = 6918,889
[info]   CI (99.9%): [41077,155, 94361,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,998 ±(99.9%) 3,067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,998, 1,919), stdev = 0,797
[info]   CI (99.9%): [≈ 0, 4,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 28,51% complete, ETA 01:34:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203677,755 ops/s
[info] # Warmup Iteration   2: 220043,230 ops/s
[info] # Warmup Iteration   3: 220398,518 ops/s
[info] # Warmup Iteration   4: 221947,821 ops/s
[info] # Warmup Iteration   5: 221164,960 ops/s
[info] Iteration   1: 221791,655 ops/s
[info]                  ·gc.alloc.rate:                   1684,139 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14307,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 222319,957 ops/s
[info]                  ·gc.alloc.rate:                   1688,255 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9525,907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,442 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 222300,414 ops/s
[info]                  ·gc.alloc.rate:                   1688,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14307,724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 222789,276 ops/s
[info]                  ·gc.alloc.rate:                   1691,916 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,936 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9529,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,294 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 222552,982 ops/s
[info]                  ·gc.alloc.rate:                   1689,766 MB/sec
[info]                  ·gc.alloc.rate.norm:              11952,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14324,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,147 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle":
[info]   222350,857 ±(99.9%) 1426,911 ops/s [Average]
[info]   (min, avg, max) = (221791,655, 222350,857, 222789,276), stdev = 370,564
[info]   CI (99.9%): [220923,945, 223777,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1688,449 ±(99.9%) 10,967 MB/sec [Average]
[info]   (min, avg, max) = (1684,139, 1688,449, 1691,916), stdev = 2,848
[info]   CI (99.9%): [1677,482, 1699,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   11952,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11952,002, 11952,002, 11952,002), stdev = 0,001
[info]   CI (99.9%): [11952,001, 11952,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1751,343 ±(99.9%) 1420,510 MB/sec [Average]
[info]   (min, avg, max) = (1345,562, 1751,343, 2025,242), stdev = 368,902
[info]   CI (99.9%): [330,833, 3171,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12399,061 ±(99.9%) 10093,914 B/op [Average]
[info]   (min, avg, max) = (9525,907, 12399,061, 14324,886), stdev = 2621,357
[info]   CI (99.9%): [2305,147, 22492,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,295 ±(99.9%) 0,401 B/op [Average]
[info]   (min, avg, max) = (0,147, 0,295, 0,442), stdev = 0,104
[info]   CI (99.9%): [≈ 0, 0,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28,71% complete, ETA 01:34:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213049,375 ops/s
[info] # Warmup Iteration   2: 261947,156 ops/s
[info] # Warmup Iteration   3: 262178,340 ops/s
[info] # Warmup Iteration   4: 263432,764 ops/s
[info] # Warmup Iteration   5: 261005,203 ops/s
[info] Iteration   1: 263566,020 ops/s
[info]                  ·gc.alloc.rate:                   1570,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12027,864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,373 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 263430,225 ops/s
[info]                  ·gc.alloc.rate:               1569,339 MB/sec
[info]                  ·gc.alloc.rate.norm:          9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8026,755 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 263872,851 ops/s
[info]                  ·gc.alloc.rate:                   1571,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8021,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 259591,493 ops/s
[info]                  ·gc.alloc.rate:                   1546,566 MB/sec
[info]                  ·gc.alloc.rate.norm:              9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12244,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,252 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 263969,938 ops/s
[info]                  ·gc.alloc.rate:               1572,967 MB/sec
[info]                  ·gc.alloc.rate.norm:          9376,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8042,202 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   262886,105 ±(99.9%) 7142,186 ops/s [Average]
[info]   (min, avg, max) = (259591,493, 262886,105, 263969,938), stdev = 1854,803
[info]   CI (99.9%): [255743,919, 270028,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1566,180 ±(99.9%) 42,572 MB/sec [Average]
[info]   (min, avg, max) = (1546,566, 1566,180, 1572,967), stdev = 11,056
[info]   CI (99.9%): [1523,608, 1608,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9376,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9376,002, 9376,002, 9376,002), stdev = 0,001
[info]   CI (99.9%): [9376,001, 9376,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,288 ±(99.9%) 1415,599 MB/sec [Average]
[info]   (min, avg, max) = (1343,504, 1614,288, 2019,714), stdev = 367,627
[info]   CI (99.9%): [198,689, 3029,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9672,517 ±(99.9%) 8665,101 B/op [Average]
[info]   (min, avg, max) = (8021,320, 9672,517, 12244,445), stdev = 2250,299
[info]   CI (99.9%): [1007,416, 18337,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,200 ±(99.9%) 0,726 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,200, 0,373), stdev = 0,189
[info]   CI (99.9%): [≈ 0, 0,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 28,92% complete, ETA 01:34:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 346010,161 ops/s
[info] # Warmup Iteration   2: 1283730,962 ops/s
[info] # Warmup Iteration   3: 1283430,693 ops/s
[info] # Warmup Iteration   4: 1287173,830 ops/s
[info] # Warmup Iteration   5: 1282421,865 ops/s
[info] Iteration   1: 1285777,050 ops/s
[info]                  ·gc.alloc.rate:                   699,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,758 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     824,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,268 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1292272,532 ops/s
[info]                  ·gc.alloc.rate:               702,903 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 820,657 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1291449,873 ops/s
[info]                  ·gc.alloc.rate:               702,379 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 819,124 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1290672,781 ops/s
[info]                  ·gc.alloc.rate:               702,046 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 819,619 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1289211,736 ops/s
[info]                  ·gc.alloc.rate:                   701,111 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     820,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   1289876,795 ±(99.9%) 9835,726 ops/s [Average]
[info]   (min, avg, max) = (1285777,050, 1289876,795, 1292272,532), stdev = 2554,307
[info]   CI (99.9%): [1280041,068, 1299712,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   701,552 ±(99.9%) 5,417 MB/sec [Average]
[info]   (min, avg, max) = (699,323, 701,552, 702,903), stdev = 1,407
[info]   CI (99.9%): [696,135, 706,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   672,804 ±(99.9%) 3,578 MB/sec [Average]
[info]   (min, avg, max) = (672,055, 672,804, 673,880), stdev = 0,929
[info]   CI (99.9%): [669,227, 676,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   820,927 ±(99.9%) 8,500 B/op [Average]
[info]   (min, avg, max) = (819,124, 820,927, 824,708), stdev = 2,207
[info]   CI (99.9%): [812,426, 829,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,542 ±(99.9%) 4,581 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,542, 2,670), stdev = 1,190
[info]   CI (99.9%): [≈ 0, 5,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,664 ±(99.9%) 5,607 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,664, 3,268), stdev = 1,456
[info]   CI (99.9%): [≈ 0, 6,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,12% complete, ETA 01:34:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 691537,875 ops/s
[info] # Warmup Iteration   2: 911094,804 ops/s
[info] # Warmup Iteration   3: 913899,869 ops/s
[info] # Warmup Iteration   4: 913865,326 ops/s
[info] # Warmup Iteration   5: 910512,018 ops/s
[info] Iteration   1: 910985,576 ops/s
[info]                  ·gc.alloc.rate:               717,735 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1165,156 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 903072,900 ops/s
[info]                  ·gc.alloc.rate:                   711,482 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1176,524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 911331,574 ops/s
[info]                  ·gc.alloc.rate:                   717,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1165,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 908453,961 ops/s
[info]                  ·gc.alloc.rate:               715,755 MB/sec
[info]                  ·gc.alloc.rate.norm:          1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1171,268 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 910062,991 ops/s
[info]                  ·gc.alloc.rate:                   716,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,990 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1169,216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   908781,400 ±(99.9%) 13015,296 ops/s [Average]
[info]   (min, avg, max) = (903072,900, 908781,400, 911331,574), stdev = 3380,031
[info]   CI (99.9%): [895766,105, 921796,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   715,970 ±(99.9%) 10,219 MB/sec [Average]
[info]   (min, avg, max) = (711,482, 715,970, 717,965), stdev = 2,654
[info]   CI (99.9%): [705,751, 726,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1240,000, 1240,000, 1240,000), stdev = 0,001
[info]   CI (99.9%): [1240,000, 1240,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,316 ±(99.9%) 2,724 MB/sec [Average]
[info]   (min, avg, max) = (674,413, 675,316, 676,082), stdev = 0,707
[info]   CI (99.9%): [672,592, 678,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1169,603 ±(99.9%) 17,718 B/op [Average]
[info]   (min, avg, max) = (1165,156, 1169,603, 1176,524), stdev = 4,601
[info]   CI (99.9%): [1151,885, 1187,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,036 ±(99.9%) 0,139 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,036, 0,073), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29,32% complete, ETA 01:33:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1171795,807 ops/s
[info] # Warmup Iteration   2: 1246218,868 ops/s
[info] # Warmup Iteration   3: 1243573,370 ops/s
[info] # Warmup Iteration   4: 1244464,699 ops/s
[info] # Warmup Iteration   5: 1246018,893 ops/s
[info] Iteration   1: 1247391,154 ops/s
[info]                  ·gc.alloc.rate:                   678,375 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     851,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,988 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1252300,476 ops/s
[info]                  ·gc.alloc.rate:                   681,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     848,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1253823,667 ops/s
[info]                  ·gc.alloc.rate:               681,940 MB/sec
[info]                  ·gc.alloc.rate.norm:          856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 844,473 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1247059,676 ops/s
[info]                  ·gc.alloc.rate:                   678,281 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     849,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1249931,246 ops/s
[info]                  ·gc.alloc.rate:                   679,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              856,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     846,276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1250101,244 ±(99.9%) 11441,934 ops/s [Average]
[info]   (min, avg, max) = (1247059,676, 1250101,244, 1253823,667), stdev = 2971,434
[info]   CI (99.9%): [1238659,310, 1261543,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   679,885 ±(99.9%) 6,254 MB/sec [Average]
[info]   (min, avg, max) = (678,281, 679,885, 681,940), stdev = 1,624
[info]   CI (99.9%): [673,630, 686,139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (856,000, 856,000, 856,000), stdev = 0,001
[info]   CI (99.9%): [856,000, 856,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,395 ±(99.9%) 4,788 MB/sec [Average]
[info]   (min, avg, max) = (672,014, 673,395, 674,741), stdev = 1,243
[info]   CI (99.9%): [668,607, 678,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   847,833 ±(99.9%) 10,112 B/op [Average]
[info]   (min, avg, max) = (844,473, 847,833, 851,347), stdev = 2,626
[info]   CI (99.9%): [837,722, 857,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,657 ±(99.9%) 5,390 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,657, 3,161), stdev = 1,400
[info]   CI (99.9%): [≈ 0, 6,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,829 ±(99.9%) 6,802 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,829, 3,988), stdev = 1,766
[info]   CI (99.9%): [≈ 0, 7,631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29,52% complete, ETA 01:33:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1139387,964 ops/s
[info] # Warmup Iteration   2: 1187307,338 ops/s
[info] # Warmup Iteration   3: 1183993,081 ops/s
[info] # Warmup Iteration   4: 1184282,847 ops/s
[info] # Warmup Iteration   5: 1182853,068 ops/s
[info] Iteration   1: 1185834,168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1183838,185 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1183954,505 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1183246,690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1172063,333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1181787,376 ±(99.9%) 21262,861 ops/s [Average]
[info]   (min, avg, max) = (1172063,333, 1181787,376, 1185834,168), stdev = 5521,898
[info]   CI (99.9%): [1160524,515, 1203050,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29,72% complete, ETA 01:33:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27469,252 ops/s
[info] # Warmup Iteration   2: 37654,499 ops/s
[info] # Warmup Iteration   3: 37884,268 ops/s
[info] # Warmup Iteration   4: 38054,774 ops/s
[info] # Warmup Iteration   5: 38003,912 ops/s
[info] Iteration   1: 38039,135 ops/s
[info]                  ·gc.alloc.rate:                   1993,931 MB/sec
[info]                  ·gc.alloc.rate.norm:              82488,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83235,629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,723 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37730,575 ops/s
[info]                  ·gc.alloc.rate:                   1977,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              82488,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84091,133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,605 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 37892,308 ops/s
[info]                  ·gc.alloc.rate:               1985,906 MB/sec
[info]                  ·gc.alloc.rate.norm:          82488,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2019,232 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83872,247 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 37971,330 ops/s
[info]                  ·gc.alloc.rate:                   1990,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              82488,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83893,259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,588 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 38015,808 ops/s
[info]                  ·gc.alloc.rate:                   1991,856 MB/sec
[info]                  ·gc.alloc.rate.norm:              82488,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,055 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83904,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,862 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   37929,831 ±(99.9%) 480,067 ops/s [Average]
[info]   (min, avg, max) = (37730,575, 37929,831, 38039,135), stdev = 124,672
[info]   CI (99.9%): [37449,764, 38409,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1987,804 ±(99.9%) 25,484 MB/sec [Average]
[info]   (min, avg, max) = (1977,208, 1987,804, 1993,931), stdev = 6,618
[info]   CI (99.9%): [1962,320, 2013,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82488,012 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (82488,012, 82488,012, 82488,012), stdev = 0,001
[info]   CI (99.9%): [82488,011, 82488,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2019,389 ±(99.9%) 22,336 MB/sec [Average]
[info]   (min, avg, max) = (2012,003, 2019,389, 2026,055), stdev = 5,801
[info]   CI (99.9%): [1997,053, 2041,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   83799,310 ±(99.9%) 1259,669 B/op [Average]
[info]   (min, avg, max) = (83235,629, 83799,310, 84091,133), stdev = 327,132
[info]   CI (99.9%): [82539,641, 85058,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,556 ±(99.9%) 4,347 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,556, 2,605), stdev = 1,129
[info]   CI (99.9%): [≈ 0, 5,902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 29,92% complete, ETA 01:33:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129590,727 ops/s
[info] # Warmup Iteration   2: 139338,954 ops/s
[info] # Warmup Iteration   3: 139830,167 ops/s
[info] # Warmup Iteration   4: 140516,856 ops/s
[info] # Warmup Iteration   5: 140449,164 ops/s
[info] Iteration   1: 140903,499 ops/s
[info]                  ·gc.alloc.rate:                   1501,800 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15013,775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,465 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 139724,508 ops/s
[info]                  ·gc.alloc.rate:                   1489,313 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15141,729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 139425,040 ops/s
[info]                  ·gc.alloc.rate:                   1485,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,692 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22790,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,470 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 139002,955 ops/s
[info]                  ·gc.alloc.rate:                   1481,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15256,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 140555,309 ops/s
[info]                  ·gc.alloc.rate:                   1497,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              16776,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15103,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,466 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle":
[info]   139922,262 ±(99.9%) 3041,178 ops/s [Average]
[info]   (min, avg, max) = (139002,955, 139922,262, 140903,499), stdev = 789,784
[info]   CI (99.9%): [136881,085, 142963,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1491,354 ±(99.9%) 32,191 MB/sec [Average]
[info]   (min, avg, max) = (1481,715, 1491,354, 1501,800), stdev = 8,360
[info]   CI (99.9%): [1459,164, 1523,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   16776,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16776,003, 16776,003, 16776,003), stdev = 0,001
[info]   CI (99.9%): [16776,003, 16776,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1480,634 ±(99.9%) 1158,236 MB/sec [Average]
[info]   (min, avg, max) = (1344,044, 1480,634, 2018,692), stdev = 300,790
[info]   CI (99.9%): [322,398, 2638,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   16661,321 ±(99.9%) 13197,900 B/op [Average]
[info]   (min, avg, max) = (15013,775, 16661,321, 22790,554), stdev = 3427,453
[info]   CI (99.9%): [3463,421, 29859,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,374 ±(99.9%) 0,489 B/op [Average]
[info]   (min, avg, max) = (0,234, 0,374, 0,470), stdev = 0,127
[info]   CI (99.9%): [≈ 0, 0,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 30,12% complete, ETA 01:32:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109591,378 ops/s
[info] # Warmup Iteration   2: 143929,205 ops/s
[info] # Warmup Iteration   3: 143956,731 ops/s
[info] # Warmup Iteration   4: 143950,011 ops/s
[info] # Warmup Iteration   5: 144108,538 ops/s
[info] Iteration   1: 144785,013 ops/s
[info]                  ·gc.alloc.rate:                   1975,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21910,954 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,453 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 144023,430 ops/s
[info]                  ·gc.alloc.rate:                   1964,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22062,489 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,682 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 144214,474 ops/s
[info]                  ·gc.alloc.rate:                   1967,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,124 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22069,469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,454 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 143828,033 ops/s
[info]                  ·gc.alloc.rate:                   1962,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22169,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,456 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 143225,323 ops/s
[info]                  ·gc.alloc.rate:                   1953,887 MB/sec
[info]                  ·gc.alloc.rate.norm:              21472,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22291,517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,457 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   144015,254 ±(99.9%) 2187,870 ops/s [Average]
[info]   (min, avg, max) = (143225,323, 144015,254, 144785,013), stdev = 568,183
[info]   CI (99.9%): [141827,385, 146203,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1964,749 ±(99.9%) 29,719 MB/sec [Average]
[info]   (min, avg, max) = (1953,887, 1964,749, 1975,132), stdev = 7,718
[info]   CI (99.9%): [1935,030, 1994,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   21472,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (21472,003, 21472,003, 21472,003), stdev = 0,001
[info]   CI (99.9%): [21472,002, 21472,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2022,240 ±(99.9%) 20,165 MB/sec [Average]
[info]   (min, avg, max) = (2015,509, 2022,240, 2028,460), stdev = 5,237
[info]   CI (99.9%): [2002,075, 2042,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22100,733 ±(99.9%) 543,020 B/op [Average]
[info]   (min, avg, max) = (21910,954, 22100,733, 22291,517), stdev = 141,021
[info]   CI (99.9%): [21557,712, 22643,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,046, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,010, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,500 ±(99.9%) 0,392 B/op [Average]
[info]   (min, avg, max) = (0,453, 0,500, 0,682), stdev = 0,102
[info]   CI (99.9%): [0,109, 0,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,32% complete, ETA 01:32:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143643,154 ops/s
[info] # Warmup Iteration   2: 208664,431 ops/s
[info] # Warmup Iteration   3: 209253,468 ops/s
[info] # Warmup Iteration   4: 209311,111 ops/s
[info] # Warmup Iteration   5: 209436,753 ops/s
[info] Iteration   1: 207785,885 ops/s
[info]                  ·gc.alloc.rate:               1099,544 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5118,734 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 208540,579 ops/s
[info]                  ·gc.alloc.rate:               1103,551 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10205,535 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 208205,400 ops/s
[info]                  ·gc.alloc.rate:               1101,606 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5113,371 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 207483,971 ops/s
[info]                  ·gc.alloc.rate:               1097,886 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10267,030 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 206822,528 ops/s
[info]                  ·gc.alloc.rate:                   1094,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10310,173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,317 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   207767,673 ±(99.9%) 2556,481 ops/s [Average]
[info]   (min, avg, max) = (206822,528, 207767,673, 208540,579), stdev = 663,910
[info]   CI (99.9%): [205211,192, 210324,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1099,358 ±(99.9%) 13,804 MB/sec [Average]
[info]   (min, avg, max) = (1094,204, 1099,358, 1103,551), stdev = 3,585
[info]   CI (99.9%): [1085,555, 1113,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8328,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8328,002, 8328,002, 8328,002), stdev = 0,001
[info]   CI (99.9%): [8328,002, 8328,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,540 ±(99.9%) 1428,684 MB/sec [Average]
[info]   (min, avg, max) = (675,825, 1082,540, 1354,638), stdev = 371,025
[info]   CI (99.9%): [≈ 0, 2511,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8202,969 ±(99.9%) 10851,892 B/op [Average]
[info]   (min, avg, max) = (5113,371, 8202,969, 10310,173), stdev = 2818,202
[info]   CI (99.9%): [≈ 0, 19054,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,008 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,008, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,063 ±(99.9%) 0,546 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,063, 0,317), stdev = 0,142
[info]   CI (99.9%): [≈ 0, 0,609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30,52% complete, ETA 01:32:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290429,118 ops/s
[info] # Warmup Iteration   2: 303887,756 ops/s
[info] # Warmup Iteration   3: 303375,300 ops/s
[info] # Warmup Iteration   4: 303264,777 ops/s
[info] # Warmup Iteration   5: 303106,262 ops/s
[info] Iteration   1: 303291,060 ops/s
[info]                  ·gc.alloc.rate:                   789,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3501,614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 303930,965 ops/s
[info]                  ·gc.alloc.rate:               790,989 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3484,042 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 303747,094 ops/s
[info]                  ·gc.alloc.rate:                   790,458 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3485,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,108 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 303675,173 ops/s
[info]                  ·gc.alloc.rate:                   790,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,242 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6966,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,324 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 303511,559 ops/s
[info]                  ·gc.alloc.rate:               789,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3485,351 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   303631,170 ±(99.9%) 933,798 ops/s [Average]
[info]   (min, avg, max) = (303291,060, 303631,170, 303930,965), stdev = 242,504
[info]   CI (99.9%): [302697,372, 304564,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   790,172 ±(99.9%) 2,506 MB/sec [Average]
[info]   (min, avg, max) = (789,283, 790,172, 790,989), stdev = 0,651
[info]   CI (99.9%): [787,666, 792,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,315 ±(99.9%) 1155,782 MB/sec [Average]
[info]   (min, avg, max) = (672,060, 807,315, 1344,242), stdev = 300,153
[info]   CI (99.9%): [≈ 0, 1963,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4184,737 ±(99.9%) 5988,666 B/op [Average]
[info]   (min, avg, max) = (3484,042, 4184,737, 6966,801), stdev = 1555,237
[info]   CI (99.9%): [≈ 0, 10173,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,151 ±(99.9%) 0,630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,151, 0,324), stdev = 0,164
[info]   CI (99.9%): [≈ 0, 0,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30,72% complete, ETA 01:32:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43415,397 ops/s
[info] # Warmup Iteration   2: 78310,500 ops/s
[info] # Warmup Iteration   3: 78885,685 ops/s
[info] # Warmup Iteration   4: 79489,890 ops/s
[info] # Warmup Iteration   5: 79440,560 ops/s
[info] Iteration   1: 79246,873 ops/s
[info]                  ·gc.alloc.rate:                   3343,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67453,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,240 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 79217,200 ops/s
[info]                  ·gc.alloc.rate:                   3342,483 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67544,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,241 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 78963,914 ops/s
[info]                  ·gc.alloc.rate:                   3331,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67827,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,660 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 79229,441 ops/s
[info]                  ·gc.alloc.rate:                   3343,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67613,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,827 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 79420,868 ops/s
[info]                  ·gc.alloc.rate:                   3350,812 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,427 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67490,390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,237 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   79215,659 ±(99.9%) 628,767 ops/s [Average]
[info]   (min, avg, max) = (78963,914, 79215,659, 79420,868), stdev = 163,289
[info]   CI (99.9%): [78586,893, 79844,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3342,353 ±(99.9%) 26,248 MB/sec [Average]
[info]   (min, avg, max) = (3331,762, 3342,353, 3350,812), stdev = 6,817
[info]   CI (99.9%): [3316,105, 3368,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66408,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66408,005, 66408,005, 66408,006), stdev = 0,001
[info]   CI (99.9%): [66408,005, 66408,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3401,622 ±(99.9%) 14,150 MB/sec [Average]
[info]   (min, avg, max) = (3396,225, 3401,622, 3405,427), stdev = 3,675
[info]   CI (99.9%): [3387,472, 3415,772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67585,815 ±(99.9%) 570,168 B/op [Average]
[info]   (min, avg, max) = (67453,340, 67585,815, 67827,793), stdev = 148,071
[info]   CI (99.9%): [67015,648, 68155,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,241 ±(99.9%) 1,133 B/op [Average]
[info]   (min, avg, max) = (0,827, 1,241, 1,660), stdev = 0,294
[info]   CI (99.9%): [0,107, 2,374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 30,92% complete, ETA 01:31:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144344,961 ops/s
[info] # Warmup Iteration   2: 161270,734 ops/s
[info] # Warmup Iteration   3: 163106,541 ops/s
[info] # Warmup Iteration   4: 163254,686 ops/s
[info] # Warmup Iteration   5: 161938,473 ops/s
[info] Iteration   1: 162812,526 ops/s
[info]                  ·gc.alloc.rate:               1836,288 MB/sec
[info]                  ·gc.alloc.rate.norm:          17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2016,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19497,250 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 163394,188 ops/s
[info]                  ·gc.alloc.rate:                   1842,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19446,827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,601 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 163318,373 ops/s
[info]                  ·gc.alloc.rate:                   1842,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19494,269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,602 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 163412,000 ops/s
[info]                  ·gc.alloc.rate:                   1843,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13003,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,601 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 163239,817 ops/s
[info]                  ·gc.alloc.rate:                   1840,976 MB/sec
[info]                  ·gc.alloc.rate.norm:              17752,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19548,655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,401 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle":
[info]   163235,381 ±(99.9%) 947,383 ops/s [Average]
[info]   (min, avg, max) = (162812,526, 163235,381, 163412,000), stdev = 246,032
[info]   CI (99.9%): [162287,997, 164182,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1841,120 ±(99.9%) 10,951 MB/sec [Average]
[info]   (min, avg, max) = (1836,288, 1841,120, 1843,244), stdev = 2,844
[info]   CI (99.9%): [1830,169, 1852,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17752,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17752,002, 17752,003, 17752,003), stdev = 0,001
[info]   CI (99.9%): [17752,002, 17752,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1887,228 ±(99.9%) 1156,128 MB/sec [Average]
[info]   (min, avg, max) = (1350,186, 1887,228, 2027,298), stdev = 300,243
[info]   CI (99.9%): [731,101, 3043,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   18198,087 ±(99.9%) 11182,740 B/op [Average]
[info]   (min, avg, max) = (13003,436, 18198,087, 19548,655), stdev = 2904,122
[info]   CI (99.9%): [7015,347, 29380,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,441 ±(99.9%) 1,007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,441, 0,602), stdev = 0,261
[info]   CI (99.9%): [≈ 0, 1,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31,12% complete, ETA 01:31:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161551,251 ops/s
[info] # Warmup Iteration   2: 196374,509 ops/s
[info] # Warmup Iteration   3: 190689,842 ops/s
[info] # Warmup Iteration   4: 189638,456 ops/s
[info] # Warmup Iteration   5: 190055,094 ops/s
[info] Iteration   1: 191206,452 ops/s
[info]                  ·gc.alloc.rate:                   664,759 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,720 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5553,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,649 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 191092,748 ops/s
[info]                  ·gc.alloc.rate:                   664,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5557,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,343 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 191268,151 ops/s
[info]                  ·gc.alloc.rate:               665,118 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5530,273 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 184494,180 ops/s
[info]                  ·gc.alloc.rate:                   641,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5733,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,355 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 190957,021 ops/s
[info]                  ·gc.alloc.rate:               663,917 MB/sec
[info]                  ·gc.alloc.rate.norm:          5472,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5533,991 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   189803,710 ±(99.9%) 11438,280 ops/s [Average]
[info]   (min, avg, max) = (184494,180, 189803,710, 191268,151), stdev = 2970,485
[info]   CI (99.9%): [178365,430, 201241,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   659,945 ±(99.9%) 39,689 MB/sec [Average]
[info]   (min, avg, max) = (641,525, 659,945, 665,118), stdev = 10,307
[info]   CI (99.9%): [620,257, 699,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5472,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5472,002, 5472,002, 5472,002), stdev = 0,001
[info]   CI (99.9%): [5472,002, 5472,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,066 ±(99.9%) 6,016 MB/sec [Average]
[info]   (min, avg, max) = (671,438, 673,066, 674,767), stdev = 1,562
[info]   CI (99.9%): [667,051, 679,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5581,857 ±(99.9%) 330,072 B/op [Average]
[info]   (min, avg, max) = (5530,273, 5581,857, 5733,712), stdev = 85,719
[info]   CI (99.9%): [5251,785, 5911,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,688 ±(99.9%) 5,749 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,688, 3,359), stdev = 1,493
[info]   CI (99.9%): [≈ 0, 6,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,669 ±(99.9%) 47,318 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,669, 27,649), stdev = 12,288
[info]   CI (99.9%): [≈ 0, 52,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,33% complete, ETA 01:31:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429014,286 ops/s
[info] # Warmup Iteration   2: 618804,922 ops/s
[info] # Warmup Iteration   3: 619340,248 ops/s
[info] # Warmup Iteration   4: 621047,499 ops/s
[info] # Warmup Iteration   5: 618772,217 ops/s
[info] Iteration   1: 619958,226 ops/s
[info]                  ·gc.alloc.rate:                   627,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1712,097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,423 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 621897,909 ops/s
[info]                  ·gc.alloc.rate:                   629,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1706,938 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,105 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 620753,279 ops/s
[info]                  ·gc.alloc.rate:               627,874 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1711,712 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 620007,958 ops/s
[info]                  ·gc.alloc.rate:               627,180 MB/sec
[info]                  ·gc.alloc.rate.norm:          1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1713,768 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 619482,725 ops/s
[info]                  ·gc.alloc.rate:                   626,535 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1716,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,106 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   620420,019 ±(99.9%) 3631,051 ops/s [Average]
[info]   (min, avg, max) = (619482,725, 620420,019, 621897,909), stdev = 942,972
[info]   CI (99.9%): [616788,968, 624051,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   627,553 ±(99.9%) 3,770 MB/sec [Average]
[info]   (min, avg, max) = (626,535, 627,553, 629,084), stdev = 0,979
[info]   CI (99.9%): [623,782, 631,323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1592,001, 1592,001, 1592,001), stdev = 0,001
[info]   CI (99.9%): [1592,001, 1592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,967 ±(99.9%) 2,039 MB/sec [Average]
[info]   (min, avg, max) = (674,397, 674,967, 675,696), stdev = 0,529
[info]   CI (99.9%): [672,928, 677,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1712,287 ±(99.9%) 13,966 B/op [Average]
[info]   (min, avg, max) = (1706,938, 1712,287, 1716,918), stdev = 3,627
[info]   CI (99.9%): [1698,321, 1726,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,167), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,127 ±(99.9%) 0,669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,127, 0,423), stdev = 0,174
[info]   CI (99.9%): [≈ 0, 0,795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31,53% complete, ETA 01:30:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 566433,494 ops/s
[info] # Warmup Iteration   2: 579722,862 ops/s
[info] # Warmup Iteration   3: 590180,752 ops/s
[info] # Warmup Iteration   4: 590090,484 ops/s
[info] # Warmup Iteration   5: 589520,998 ops/s
[info] Iteration   1: 583161,454 ops/s
[info]                  ·gc.alloc.rate:               447,486 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1380,796 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 585030,095 ops/s
[info]                  ·gc.alloc.rate:               448,980 MB/sec
[info]                  ·gc.alloc.rate.norm:          1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1376,314 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 592645,928 ops/s
[info]                  ·gc.alloc.rate:      454,898 MB/sec
[info]                  ·gc.alloc.rate.norm: 1208,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 590327,599 ops/s
[info]                  ·gc.alloc.rate:                   453,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1799,016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,348 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 593395,566 ops/s
[info]                  ·gc.alloc.rate:                   455,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1789,726 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   588912,128 ±(99.9%) 17665,442 ops/s [Average]
[info]   (min, avg, max) = (583161,454, 588912,128, 593395,566), stdev = 4587,659
[info]   CI (99.9%): [571246,686, 606577,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   451,966 ±(99.9%) 13,674 MB/sec [Average]
[info]   (min, avg, max) = (447,486, 451,966, 455,370), stdev = 3,551
[info]   CI (99.9%): [438,292, 465,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1208,001, 1208,001, 1208,001), stdev = 0,001
[info]   CI (99.9%): [1208,001, 1208,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,493 ±(99.9%) 1068,622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,493, 674,777), stdev = 277,518
[info]   CI (99.9%): [≈ 0, 1543,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1269,170 ±(99.9%) 2846,905 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1269,170, 1799,016), stdev = 739,332
[info]   CI (99.9%): [≈ 0, 4116,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,639 ±(99.9%) 5,366 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,639, 3,131), stdev = 1,394
[info]   CI (99.9%): [≈ 0, 6,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,703 ±(99.9%) 14,307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,703, 8,348), stdev = 3,716
[info]   CI (99.9%): [≈ 0, 16,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 31,73% complete, ETA 01:30:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 593435,733 ops/s
[info] # Warmup Iteration   2: 621593,481 ops/s
[info] # Warmup Iteration   3: 621510,563 ops/s
[info] # Warmup Iteration   4: 622467,095 ops/s
[info] # Warmup Iteration   5: 621462,798 ops/s
[info] Iteration   1: 622342,911 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 621685,187 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 623236,898 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 621491,817 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 622427,415 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   622236,846 ±(99.9%) 2658,804 ops/s [Average]
[info]   (min, avg, max) = (621491,817, 622236,846, 623236,898), stdev = 690,483
[info]   CI (99.9%): [619578,041, 624895,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 31,93% complete, ETA 01:30:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 219519,039 ops/s
[info] # Warmup Iteration   2: 338644,423 ops/s
[info] # Warmup Iteration   3: 342328,498 ops/s
[info] # Warmup Iteration   4: 337293,712 ops/s
[info] # Warmup Iteration   5: 339666,500 ops/s
[info] Iteration   1: 339850,435 ops/s
[info]                  ·gc.alloc.rate:                   936,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,266 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6253,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,386 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 340380,895 ops/s
[info]                  ·gc.alloc.rate:               937,802 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3124,924 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 335775,257 ops/s
[info]                  ·gc.alloc.rate:               925,052 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3167,587 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 339211,534 ops/s
[info]                  ·gc.alloc.rate:                   934,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6274,123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,193 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 339262,682 ops/s
[info]                  ·gc.alloc.rate:               934,602 MB/sec
[info]                  ·gc.alloc.rate.norm:          4336,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3139,671 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   338896,160 ±(99.9%) 6965,546 ops/s [Average]
[info]   (min, avg, max) = (335775,257, 338896,160, 340380,895), stdev = 1808,930
[info]   CI (99.9%): [331930,614, 345861,707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   933,668 ±(99.9%) 19,246 MB/sec [Average]
[info]   (min, avg, max) = (925,052, 933,668, 937,802), stdev = 4,998
[info]   CI (99.9%): [914,422, 952,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4336,001, 4336,001, 4336,001), stdev = 0,001
[info]   CI (99.9%): [4336,001, 4336,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   946,199 ±(99.9%) 1424,005 MB/sec [Average]
[info]   (min, avg, max) = (675,780, 946,199, 1352,342), stdev = 369,810
[info]   CI (99.9%): [≈ 0, 2370,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4391,891 ±(99.9%) 6579,773 B/op [Average]
[info]   (min, avg, max) = (3124,924, 4391,891, 6274,123), stdev = 1708,746
[info]   CI (99.9%): [≈ 0, 10971,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,116 ±(99.9%) 0,664 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,116, 0,386), stdev = 0,172
[info]   CI (99.9%): [≈ 0, 0,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 32,13% complete, ETA 01:30:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44779,188 ops/s
[info] # Warmup Iteration   2: 48042,056 ops/s
[info] # Warmup Iteration   3: 47179,582 ops/s
[info] # Warmup Iteration   4: 48114,470 ops/s
[info] # Warmup Iteration   5: 47844,905 ops/s
[info] Iteration   1: 48022,093 ops/s
[info]                  ·gc.alloc.rate:      222,609 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47980,437 ops/s
[info]                  ·gc.alloc.rate:               222,422 MB/sec
[info]                  ·gc.alloc.rate.norm:          7296,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16781,062 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 48056,533 ops/s
[info]                  ·gc.alloc.rate:      222,769 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47890,250 ops/s
[info]                  ·gc.alloc.rate:                   222,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              7296,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16812,592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,831 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 48117,918 ops/s
[info]                  ·gc.alloc.rate:      223,040 MB/sec
[info]                  ·gc.alloc.rate.norm: 7296,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle":
[info]   48013,446 ±(99.9%) 328,506 ops/s [Average]
[info]   (min, avg, max) = (47890,250, 48013,446, 48117,918), stdev = 85,312
[info]   CI (99.9%): [47684,941, 48341,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   222,571 ±(99.9%) 1,482 MB/sec [Average]
[info]   (min, avg, max) = (222,014, 222,571, 223,040), stdev = 0,385
[info]   CI (99.9%): [221,089, 224,052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   7296,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7296,008, 7296,009, 7296,009), stdev = 0,001
[info]   CI (99.9%): [7296,007, 7296,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,635 ±(99.9%) 1078,984 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,635, 511,600), stdev = 280,209
[info]   CI (99.9%): [≈ 0, 1283,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6718,731 ±(99.9%) 35425,954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6718,731, 16812,592), stdev = 9200,008
[info]   CI (99.9%): [≈ 0, 42144,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,025), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,166 ±(99.9%) 1,432 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,166, 0,831), stdev = 0,372
[info]   CI (99.9%): [≈ 0, 1,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32,33% complete, ETA 01:29:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9361,775 ops/s
[info] # Warmup Iteration   2: 12319,338 ops/s
[info] # Warmup Iteration   3: 12359,502 ops/s
[info] # Warmup Iteration   4: 12361,217 ops/s
[info] # Warmup Iteration   5: 12192,221 ops/s
[info] Iteration   1: 12347,258 ops/s
[info]                  ·gc.alloc.rate:                   1563,048 MB/sec
[info]                  ·gc.alloc.rate.norm:              199232,059 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,878 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171168,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,960 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12355,121 ops/s
[info]                  ·gc.alloc.rate:                   1563,993 MB/sec
[info]                  ·gc.alloc.rate.norm:              199232,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     256883,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,303 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 12353,467 ops/s
[info]                  ·gc.alloc.rate:               1563,704 MB/sec
[info]                  ·gc.alloc.rate.norm:          199232,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 171410,821 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 12242,285 ops/s
[info]                  ·gc.alloc.rate:                   1549,750 MB/sec
[info]                  ·gc.alloc.rate.norm:              199232,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173135,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,676 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 12190,175 ops/s
[info]                  ·gc.alloc.rate:                   1542,981 MB/sec
[info]                  ·gc.alloc.rate.norm:              199232,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     261133,521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,375 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   12297,661 ±(99.9%) 295,118 ops/s [Average]
[info]   (min, avg, max) = (12190,175, 12297,661, 12355,121), stdev = 76,641
[info]   CI (99.9%): [12002,544, 12592,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1556,695 ±(99.9%) 37,485 MB/sec [Average]
[info]   (min, avg, max) = (1542,981, 1556,695, 1563,993), stdev = 9,735
[info]   CI (99.9%): [1519,211, 1594,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   199232,041 ±(99.9%) 0,041 B/op [Average]
[info]   (min, avg, max) = (199232,033, 199232,041, 199232,059), stdev = 0,011
[info]   CI (99.9%): [199232,000, 199232,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1614,785 ±(99.9%) 1422,569 MB/sec [Average]
[info]   (min, avg, max) = (1342,878, 1614,785, 2022,386), stdev = 369,437
[info]   CI (99.9%): [192,216, 3037,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   206746,355 ±(99.9%) 183822,804 B/op [Average]
[info]   (min, avg, max) = (171168,358, 206746,355, 261133,521), stdev = 47738,198
[info]   CI (99.9%): [22923,551, 390569,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,263 ±(99.9%) 11,660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,263, 7,960), stdev = 3,028
[info]   CI (99.9%): [≈ 0, 15,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,53% complete, ETA 01:29:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7774,072 ops/s
[info] # Warmup Iteration   2: 12522,861 ops/s
[info] # Warmup Iteration   3: 12504,061 ops/s
[info] # Warmup Iteration   4: 12516,140 ops/s
[info] # Warmup Iteration   5: 12462,715 ops/s
[info] Iteration   1: 12559,175 ops/s
[info]                  ·gc.alloc.rate:                   1488,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              186528,233 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,890 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     169531,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,609 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 12573,401 ops/s
[info]                  ·gc.alloc.rate:               1490,289 MB/sec
[info]                  ·gc.alloc.rate.norm:          186536,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 169509,781 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 12557,602 ops/s
[info]                  ·gc.alloc.rate:                   1488,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              186536,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     254797,289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,827 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 12540,121 ops/s
[info]                  ·gc.alloc.rate:               1486,363 MB/sec
[info]                  ·gc.alloc.rate.norm:          186536,041 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,470 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 170234,776 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 12578,187 ops/s
[info]                  ·gc.alloc.rate:               1490,484 MB/sec
[info]                  ·gc.alloc.rate.norm:          186510,128 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 169803,974 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   12561,697 ±(99.9%) 57,682 ops/s [Average]
[info]   (min, avg, max) = (12540,121, 12561,697, 12578,187), stdev = 14,980
[info]   CI (99.9%): [12504,015, 12619,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1488,786 ±(99.9%) 6,487 MB/sec [Average]
[info]   (min, avg, max) = (1486,363, 1488,786, 1490,484), stdev = 1,685
[info]   CI (99.9%): [1482,299, 1495,272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186529,293 ±(99.9%) 43,257 B/op [Average]
[info]   (min, avg, max) = (186510,128, 186529,293, 186536,041), stdev = 11,234
[info]   CI (99.9%): [186486,036, 186572,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,697 ±(99.9%) 1167,122 MB/sec [Average]
[info]   (min, avg, max) = (1352,890, 1490,697, 2032,887), stdev = 303,098
[info]   CI (99.9%): [323,576, 2657,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   186775,514 ±(99.9%) 146426,324 B/op [Average]
[info]   (min, avg, max) = (169509,781, 186775,514, 254797,289), stdev = 38026,451
[info]   CI (99.9%): [40349,190, 333201,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,087 ±(99.9%) 13,098 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,087, 7,827), stdev = 3,402
[info]   CI (99.9%): [≈ 0, 15,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32,73% complete, ETA 01:29:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204602,774 ops/s
[info] # Warmup Iteration   2: 220402,340 ops/s
[info] # Warmup Iteration   3: 222091,961 ops/s
[info] # Warmup Iteration   4: 222627,542 ops/s
[info] # Warmup Iteration   5: 219513,026 ops/s
[info] Iteration   1: 222466,112 ops/s
[info]                  ·gc.alloc.rate:                   1447,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9528,396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,295 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 219793,053 ops/s
[info]                  ·gc.alloc.rate:                   1430,005 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9644,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,298 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 222029,243 ops/s
[info]                  ·gc.alloc.rate:               1444,473 MB/sec
[info]                  ·gc.alloc.rate.norm:          10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9551,868 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 222495,906 ops/s
[info]                  ·gc.alloc.rate:                   1447,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,896 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9541,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,883 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 222528,098 ops/s
[info]                  ·gc.alloc.rate:               1447,579 MB/sec
[info]                  ·gc.alloc.rate.norm:          10240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9544,501 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   221862,482 ±(99.9%) 4523,067 ops/s [Average]
[info]   (min, avg, max) = (219793,053, 221862,482, 222528,098), stdev = 1174,626
[info]   CI (99.9%): [217339,415, 226385,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1443,422 ±(99.9%) 29,336 MB/sec [Average]
[info]   (min, avg, max) = (1430,005, 1443,422, 1447,695), stdev = 7,618
[info]   CI (99.9%): [1414,086, 1472,758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10240,002, 10240,002, 10240,002), stdev = 0,001
[info]   CI (99.9%): [10240,002, 10240,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1347,827 ±(99.9%) 4,530 MB/sec [Average]
[info]   (min, avg, max) = (1346,778, 1347,827, 1349,260), stdev = 1,176
[info]   CI (99.9%): [1343,297, 1352,357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9562,018 ±(99.9%) 179,818 B/op [Average]
[info]   (min, avg, max) = (9528,396, 9562,018, 9644,161), stdev = 46,698
[info]   CI (99.9%): [9382,200, 9741,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,125), stdev = 0,051
[info]   CI (99.9%): [≈ 0, 0,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,295 ±(99.9%) 1,389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,295, 0,883), stdev = 0,361
[info]   CI (99.9%): [≈ 0, 1,684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32,93% complete, ETA 01:29:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5884,888 ops/s
[info] # Warmup Iteration   2: 9180,321 ops/s
[info] # Warmup Iteration   3: 9288,171 ops/s
[info] # Warmup Iteration   4: 9279,171 ops/s
[info] # Warmup Iteration   5: 9271,056 ops/s
[info] Iteration   1: 9280,784 ops/s
[info]                  ·gc.alloc.rate:                   1667,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              282816,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344404,635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,060 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 9321,484 ops/s
[info]                  ·gc.alloc.rate:                   1675,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              282816,202 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     228880,420 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,515 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9309,141 ops/s
[info]                  ·gc.alloc.rate:                   1672,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              282817,475 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344044,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,039 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9311,312 ops/s
[info]                  ·gc.alloc.rate:               1673,239 MB/sec
[info]                  ·gc.alloc.rate.norm:          282816,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229439,327 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 9293,160 ops/s
[info]                  ·gc.alloc.rate:                   1670,094 MB/sec
[info]                  ·gc.alloc.rate.norm:              282816,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     345050,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,575 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   9303,176 ±(99.9%) 62,051 ops/s [Average]
[info]   (min, avg, max) = (9280,784, 9303,176, 9321,484), stdev = 16,114
[info]   CI (99.9%): [9241,125, 9365,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1671,708 ±(99.9%) 11,327 MB/sec [Average]
[info]   (min, avg, max) = (1667,529, 1671,708, 1675,089), stdev = 2,942
[info]   CI (99.9%): [1660,380, 1683,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   282816,362 ±(99.9%) 2,411 B/op [Average]
[info]   (min, avg, max) = (282816,044, 282816,362, 282817,475), stdev = 0,626
[info]   CI (99.9%): [282813,950, 282818,773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1763,207 ±(99.9%) 1429,531 MB/sec [Average]
[info]   (min, avg, max) = (1355,633, 1763,207, 2037,605), stdev = 371,245
[info]   CI (99.9%): [333,676, 3192,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   298364,003 ±(99.9%) 243267,417 B/op [Average]
[info]   (min, avg, max) = (228880,420, 298364,003, 345050,988), stdev = 63175,776
[info]   CI (99.9%): [55096,586, 541631,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,638 ±(99.9%) 15,481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,638, 10,575), stdev = 4,020
[info]   CI (99.9%): [≈ 0, 21,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 33,13% complete, ETA 01:28:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9357,310 ops/s
[info] # Warmup Iteration   2: 11710,352 ops/s
[info] # Warmup Iteration   3: 11667,553 ops/s
[info] # Warmup Iteration   4: 11646,221 ops/s
[info] # Warmup Iteration   5: 11756,554 ops/s
[info] Iteration   1: 11701,220 ops/s
[info]                  ·gc.alloc.rate:                   1458,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              196197,184 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     271438,298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,599 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 11768,686 ops/s
[info]                  ·gc.alloc.rate:                   1467,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              196208,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180033,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,351 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 11758,982 ops/s
[info]                  ·gc.alloc.rate:                   1465,788 MB/sec
[info]                  ·gc.alloc.rate.norm:              196208,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180260,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,786 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 11759,581 ops/s
[info]                  ·gc.alloc.rate:               1466,115 MB/sec
[info]                  ·gc.alloc.rate.norm:          196208,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 180423,176 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 11731,002 ops/s
[info]                  ·gc.alloc.rate:               1462,177 MB/sec
[info]                  ·gc.alloc.rate.norm:          196197,171 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 181032,380 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle":
[info]   11743,894 ±(99.9%) 106,776 ops/s [Average]
[info]   (min, avg, max) = (11701,220, 11743,894, 11768,686), stdev = 27,729
[info]   CI (99.9%): [11637,119, 11850,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1463,980 ±(99.9%) 13,475 MB/sec [Average]
[info]   (min, avg, max) = (1458,689, 1463,980, 1467,129), stdev = 3,499
[info]   CI (99.9%): [1450,504, 1477,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   196203,694 ±(99.9%) 22,905 B/op [Average]
[info]   (min, avg, max) = (196197,171, 196203,694, 196208,044), stdev = 5,948
[info]   CI (99.9%): [196180,789, 196226,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1481,650 ±(99.9%) 1154,743 MB/sec [Average]
[info]   (min, avg, max) = (1346,184, 1481,650, 2018,093), stdev = 299,883
[info]   CI (99.9%): [326,908, 2636,393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   198637,476 ±(99.9%) 156715,750 B/op [Average]
[info]   (min, avg, max) = (180033,310, 198637,476, 271438,298), stdev = 40698,582
[info]   CI (99.9%): [41921,727, 355353,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,347 ±(99.9%) 13,995 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,347, 8,351), stdev = 3,634
[info]   CI (99.9%): [≈ 0, 17,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33,33% complete, ETA 01:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20756,191 ops/s
[info] # Warmup Iteration   2: 26465,266 ops/s
[info] # Warmup Iteration   3: 26462,712 ops/s
[info] # Warmup Iteration   4: 26626,031 ops/s
[info] # Warmup Iteration   5: 26641,071 ops/s
[info] Iteration   1: 26559,352 ops/s
[info]                  ·gc.alloc.rate:                   1115,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,419 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79609,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,700 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 26595,427 ops/s
[info]                  ·gc.alloc.rate:               1116,548 MB/sec
[info]                  ·gc.alloc.rate.norm:          66080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,357 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39732,524 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 26647,145 ops/s
[info]                  ·gc.alloc.rate:                   1118,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79310,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,918 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 26648,871 ops/s
[info]                  ·gc.alloc.rate:                   1118,990 MB/sec
[info]                  ·gc.alloc.rate.norm:              66080,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,925 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79304,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,688 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 26531,706 ops/s
[info]                  ·gc.alloc.rate:               1113,981 MB/sec
[info]                  ·gc.alloc.rate.norm:          66080,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 39867,857 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   26596,500 ±(99.9%) 200,890 ops/s [Average]
[info]   (min, avg, max) = (26531,706, 26596,500, 26648,871), stdev = 52,170
[info]   CI (99.9%): [26395,611, 26797,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1116,670 ±(99.9%) 8,449 MB/sec [Average]
[info]   (min, avg, max) = (1113,981, 1116,670, 1118,990), stdev = 2,194
[info]   CI (99.9%): [1108,221, 1125,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   66080,016 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (66080,015, 66080,016, 66080,017), stdev = 0,001
[info]   CI (99.9%): [66080,013, 66080,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1074,499 ±(99.9%) 1415,806 MB/sec [Average]
[info]   (min, avg, max) = (671,357, 1074,499, 1343,419), stdev = 367,680
[info]   CI (99.9%): [≈ 0, 2490,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   63564,735 ±(99.9%) 83537,275 B/op [Average]
[info]   (min, avg, max) = (39732,524, 63564,735, 79609,207), stdev = 21694,365
[info]   CI (99.9%): [≈ 0, 147102,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,461 ±(99.9%) 8,862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,461, 4,918), stdev = 2,302
[info]   CI (99.9%): [≈ 0, 11,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,53% complete, ETA 01:28:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22153,289 ops/s
[info] # Warmup Iteration   2: 30723,112 ops/s
[info] # Warmup Iteration   3: 30930,337 ops/s
[info] # Warmup Iteration   4: 30881,621 ops/s
[info] # Warmup Iteration   5: 30871,235 ops/s
[info] Iteration   1: 30944,656 ops/s
[info]                  ·gc.alloc.rate:                   1190,444 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68737,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30651,542 ops/s
[info]                  ·gc.alloc.rate:                   1179,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69462,731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,069 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 30966,809 ops/s
[info]                  ·gc.alloc.rate:               1191,324 MB/sec
[info]                  ·gc.alloc.rate.norm:          60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34412,007 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 30811,276 ops/s
[info]                  ·gc.alloc.rate:                   1185,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,452 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69184,922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,126 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30848,247 ops/s
[info]                  ·gc.alloc.rate:                   1186,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              60552,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,314 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69155,178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   30844,506 ±(99.9%) 484,559 ops/s [Average]
[info]   (min, avg, max) = (30651,542, 30844,506, 30966,809), stdev = 125,838
[info]   CI (99.9%): [30359,947, 31329,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1186,629 ±(99.9%) 18,551 MB/sec [Average]
[info]   (min, avg, max) = (1179,224, 1186,629, 1191,324), stdev = 4,818
[info]   CI (99.9%): [1168,077, 1205,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552,013 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (60552,013, 60552,013, 60552,013), stdev = 0,001
[info]   CI (99.9%): [60552,013, 60552,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,185 ±(99.9%) 1164,880 MB/sec [Average]
[info]   (min, avg, max) = (677,035, 1218,185, 1355,314), stdev = 302,516
[info]   CI (99.9%): [53,305, 2383,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62190,452 ±(99.9%) 59803,515 B/op [Average]
[info]   (min, avg, max) = (34412,007, 62190,452, 69462,731), stdev = 15530,783
[info]   CI (99.9%): [2386,937, 121993,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,275 ±(99.9%) 3,416 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,275, 2,126), stdev = 0,887
[info]   CI (99.9%): [≈ 0, 4,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33,73% complete, ETA 01:28:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 742865,081 ops/s
[info] # Warmup Iteration   2: 794857,441 ops/s
[info] # Warmup Iteration   3: 796145,534 ops/s
[info] # Warmup Iteration   4: 805561,906 ops/s
[info] # Warmup Iteration   5: 800255,287 ops/s
[info] Iteration   1: 803164,898 ops/s
[info]                  ·gc.alloc.rate:                   1449,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,736 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2639,241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 804198,646 ops/s
[info]                  ·gc.alloc.rate:                   1451,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2636,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 804293,366 ops/s
[info]                  ·gc.alloc.rate:                   1451,252 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,463 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2636,892 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 803956,554 ops/s
[info]                  ·gc.alloc.rate:                   1450,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2639,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 800104,358 ops/s
[info]                  ·gc.alloc.rate:                   1443,610 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2654,746 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   803143,564 ±(99.9%) 6761,534 ops/s [Average]
[info]   (min, avg, max) = (800104,358, 803143,564, 804293,366), stdev = 1755,949
[info]   CI (99.9%): [796382,030, 809905,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1449,200 ±(99.9%) 12,452 MB/sec [Average]
[info]   (min, avg, max) = (1443,610, 1449,200, 1451,252), stdev = 3,234
[info]   CI (99.9%): [1436,748, 1461,651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2840,001, 2840,001, 2840,001), stdev = 0,001
[info]   CI (99.9%): [2840,000, 2840,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1347,783 ±(99.9%) 4,342 MB/sec [Average]
[info]   (min, avg, max) = (1346,736, 1347,783, 1349,442), stdev = 1,128
[info]   CI (99.9%): [1343,441, 1352,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2641,267 ±(99.9%) 29,555 B/op [Average]
[info]   (min, avg, max) = (2636,044, 2641,267, 2654,746), stdev = 7,675
[info]   CI (99.9%): [2611,712, 2670,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,106 ±(99.9%) 0,086 B/op [Average]
[info]   (min, avg, max) = (0,082, 0,106, 0,122), stdev = 0,022
[info]   CI (99.9%): [0,020, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 33,94% complete, ETA 01:27:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 721508,244 ops/s
[info] # Warmup Iteration   2: 803256,054 ops/s
[info] # Warmup Iteration   3: 790256,803 ops/s
[info] # Warmup Iteration   4: 790418,766 ops/s
[info] # Warmup Iteration   5: 790732,226 ops/s
[info] Iteration   1: 792629,605 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 793690,939 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 787671,298 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 788733,609 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 791759,166 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   790896,923 ±(99.9%) 9936,743 ops/s [Average]
[info]   (min, avg, max) = (787671,298, 790896,923, 793690,939), stdev = 2580,541
[info]   CI (99.9%): [780960,180, 800833,666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34,14% complete, ETA 01:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21882,934 ops/s
[info] # Warmup Iteration   2: 28230,143 ops/s
[info] # Warmup Iteration   3: 28285,113 ops/s
[info] # Warmup Iteration   4: 28502,015 ops/s
[info] # Warmup Iteration   5: 28560,004 ops/s
[info] Iteration   1: 28609,292 ops/s
[info]                  ·gc.alloc.rate:               1206,776 MB/sec
[info]                  ·gc.alloc.rate.norm:          66392,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 36862,855 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 28615,135 ops/s
[info]                  ·gc.alloc.rate:                   1207,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              66392,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73715,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,145 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 28536,262 ops/s
[info]                  ·gc.alloc.rate:               1203,708 MB/sec
[info]                  ·gc.alloc.rate.norm:          66392,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1339,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 73909,088 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 28511,943 ops/s
[info]                  ·gc.alloc.rate:                   1202,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              66392,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74010,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,149 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 28532,503 ops/s
[info]                  ·gc.alloc.rate:                   1203,464 MB/sec
[info]                  ·gc.alloc.rate.norm:              66392,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,289 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74050,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,444 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   28561,027 ±(99.9%) 183,597 ops/s [Average]
[info]   (min, avg, max) = (28511,943, 28561,027, 28615,135), stdev = 47,680
[info]   CI (99.9%): [28377,430, 28744,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1204,743 ±(99.9%) 7,692 MB/sec [Average]
[info]   (min, avg, max) = (1202,752, 1204,743, 1207,014), stdev = 1,998
[info]   CI (99.9%): [1197,050, 1212,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66392,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (66392,014, 66392,015, 66392,015), stdev = 0,001
[info]   CI (99.9%): [66392,013, 66392,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,649 ±(99.9%) 1155,101 MB/sec [Average]
[info]   (min, avg, max) = (670,038, 1206,649, 1342,289), stdev = 299,976
[info]   CI (99.9%): [51,549, 2361,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   66509,724 ±(99.9%) 63819,073 B/op [Average]
[info]   (min, avg, max) = (36862,855, 66509,724, 74050,628), stdev = 16573,611
[info]   CI (99.9%): [2690,650, 130328,797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,148 ±(99.9%) 5,415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,148, 3,444), stdev = 1,406
[info]   CI (99.9%): [≈ 0, 6,562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 34,34% complete, ETA 01:27:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14427,317 ops/s
[info] # Warmup Iteration   2: 16002,573 ops/s
[info] # Warmup Iteration   3: 15964,122 ops/s
[info] # Warmup Iteration   4: 15996,890 ops/s
[info] # Warmup Iteration   5: 15881,784 ops/s
[info] Iteration   1: 15913,163 ops/s
[info]                  ·gc.alloc.rate:      609,107 MB/sec
[info]                  ·gc.alloc.rate.norm: 60240,026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15855,368 ops/s
[info]                  ·gc.alloc.rate:                   606,864 MB/sec
[info]                  ·gc.alloc.rate.norm:              60240,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67040,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281,525 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 16029,480 ops/s
[info]                  ·gc.alloc.rate:                   613,512 MB/sec
[info]                  ·gc.alloc.rate.norm:              60240,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,358 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66312,590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,175 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 15987,935 ops/s
[info]                  ·gc.alloc.rate:               611,905 MB/sec
[info]                  ·gc.alloc.rate.norm:          60240,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66285,896 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 16028,033 ops/s
[info]                  ·gc.alloc.rate:                   613,403 MB/sec
[info]                  ·gc.alloc.rate.norm:              60240,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,324 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66124,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,044 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle":
[info]   15962,796 ±(99.9%) 294,132 ops/s [Average]
[info]   (min, avg, max) = (15855,368, 15962,796, 16029,480), stdev = 76,385
[info]   CI (99.9%): [15668,663, 16256,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   610,958 ±(99.9%) 11,158 MB/sec [Average]
[info]   (min, avg, max) = (606,864, 610,958, 613,512), stdev = 2,898
[info]   CI (99.9%): [599,800, 622,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   60240,027 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (60240,025, 60240,027, 60240,032), stdev = 0,003
[info]   CI (99.9%): [60240,016, 60240,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   539,474 ±(99.9%) 1161,264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,474, 675,369), stdev = 301,577
[info]   CI (99.9%): [≈ 0, 1700,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   53152,647 ±(99.9%) 114423,173 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 53152,647, 67040,105), stdev = 29715,335
[info]   CI (99.9%): [≈ 0, 167575,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,588 ±(99.9%) 4,841 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,588, 2,836), stdev = 1,257
[info]   CI (99.9%): [≈ 0, 5,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   58,349 ±(99.9%) 480,577 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 58,349, 281,525), stdev = 124,804
[info]   CI (99.9%): [≈ 0, 538,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 3,000), stdev = 1,304
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34,54% complete, ETA 01:26:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26284,649 ops/s
[info] # Warmup Iteration   2: 33091,854 ops/s
[info] # Warmup Iteration   3: 33088,357 ops/s
[info] # Warmup Iteration   4: 33114,953 ops/s
[info] # Warmup Iteration   5: 33348,946 ops/s
[info] Iteration   1: 33214,357 ops/s
[info]                  ·gc.alloc.rate:                   1651,665 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63691,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,945 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33180,270 ops/s
[info]                  ·gc.alloc.rate:                   1650,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,839 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95666,881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,975 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 33314,296 ops/s
[info]                  ·gc.alloc.rate:               1656,707 MB/sec
[info]                  ·gc.alloc.rate.norm:          78272,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,050 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63594,877 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 33400,128 ops/s
[info]                  ·gc.alloc.rate:                   1661,180 MB/sec
[info]                  ·gc.alloc.rate.norm:              78272,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95287,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,962 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33431,290 ops/s
[info]                  ·gc.alloc.rate:               1662,424 MB/sec
[info]                  ·gc.alloc.rate.norm:          78272,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63560,513 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   33308,068 ±(99.9%) 425,368 ops/s [Average]
[info]   (min, avg, max) = (33180,270, 33308,068, 33431,290), stdev = 110,467
[info]   CI (99.9%): [32882,701, 33733,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1656,420 ±(99.9%) 21,184 MB/sec [Average]
[info]   (min, avg, max) = (1650,122, 1656,420, 1662,424), stdev = 5,501
[info]   CI (99.9%): [1635,236, 1677,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   78272,013 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (78272,012, 78272,013, 78272,014), stdev = 0,001
[info]   CI (99.9%): [78272,010, 78272,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,833 ±(99.9%) 1419,259 MB/sec [Average]
[info]   (min, avg, max) = (1343,995, 1615,833, 2022,313), stdev = 368,577
[info]   CI (99.9%): [196,574, 3035,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   76360,376 ±(99.9%) 67201,408 B/op [Average]
[info]   (min, avg, max) = (63560,513, 76360,376, 95666,881), stdev = 17451,992
[info]   CI (99.9%): [9158,969, 143561,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,576 ±(99.9%) 6,353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,576, 3,945), stdev = 1,650
[info]   CI (99.9%): [≈ 0, 7,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,74% complete, ETA 01:26:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23111,443 ops/s
[info] # Warmup Iteration   2: 35644,399 ops/s
[info] # Warmup Iteration   3: 36134,079 ops/s
[info] # Warmup Iteration   4: 36044,600 ops/s
[info] # Warmup Iteration   5: 35719,106 ops/s
[info] Iteration   1: 35814,056 ops/s
[info]                  ·gc.alloc.rate:                   1635,011 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89240,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,915 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 35711,632 ops/s
[info]                  ·gc.alloc.rate:                   1630,390 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,927 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59708,947 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,917 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 35542,398 ops/s
[info]                  ·gc.alloc.rate:                   1622,181 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60051,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,843 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 35789,476 ops/s
[info]                  ·gc.alloc.rate:                   1633,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     89517,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,915 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 35719,152 ops/s
[info]                  ·gc.alloc.rate:                   1630,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              71848,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1358,247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59842,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,834 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   35715,343 ±(99.9%) 409,231 ops/s [Average]
[info]   (min, avg, max) = (35542,398, 35715,343, 35814,056), stdev = 106,276
[info]   CI (99.9%): [35306,112, 36124,574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1630,447 ±(99.9%) 19,374 MB/sec [Average]
[info]   (min, avg, max) = (1622,181, 1630,447, 1635,011), stdev = 5,031
[info]   CI (99.9%): [1611,073, 1649,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71848,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (71848,011, 71848,012, 71848,012), stdev = 0,001
[info]   CI (99.9%): [71848,010, 71848,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1627,110 ±(99.9%) 1427,715 MB/sec [Average]
[info]   (min, avg, max) = (1354,927, 1627,110, 2035,733), stdev = 370,773
[info]   CI (99.9%): [199,395, 3054,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   71672,095 ±(99.9%) 62244,183 B/op [Average]
[info]   (min, avg, max) = (59708,947, 71672,095, 89517,229), stdev = 16164,617
[info]   CI (99.9%): [9427,912, 133916,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,029, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,285 ±(99.9%) 1,947 B/op [Average]
[info]   (min, avg, max) = (0,915, 1,285, 1,843), stdev = 0,506
[info]   CI (99.9%): [≈ 0, 3,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34,94% complete, ETA 01:26:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371458,022 ops/s
[info] # Warmup Iteration   2: 390819,931 ops/s
[info] # Warmup Iteration   3: 391150,995 ops/s
[info] # Warmup Iteration   4: 392601,736 ops/s
[info] # Warmup Iteration   5: 392609,995 ops/s
[info] Iteration   1: 393890,774 ops/s
[info]                  ·gc.alloc.rate:                   1025,038 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2693,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 394486,364 ops/s
[info]                  ·gc.alloc.rate:                   1026,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5374,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,166 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 394040,864 ops/s
[info]                  ·gc.alloc.rate:               1025,444 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2689,721 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 393285,779 ops/s
[info]                  ·gc.alloc.rate:                   1023,584 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,918 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5389,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 392575,153 ops/s
[info]                  ·gc.alloc.rate:               1021,546 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2699,769 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   393655,787 ±(99.9%) 2854,439 ops/s [Average]
[info]   (min, avg, max) = (392575,153, 393655,787, 394486,364), stdev = 741,289
[info]   CI (99.9%): [390801,348, 396510,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1024,463 ±(99.9%) 7,602 MB/sec [Average]
[info]   (min, avg, max) = (1021,546, 1024,463, 1026,702), stdev = 1,974
[info]   CI (99.9%): [1016,861, 1032,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   942,956 ±(99.9%) 1420,208 MB/sec [Average]
[info]   (min, avg, max) = (673,325, 942,956, 1347,045), stdev = 368,824
[info]   CI (99.9%): [≈ 0, 2363,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3769,415 ±(99.9%) 5668,281 B/op [Average]
[info]   (min, avg, max) = (2689,721, 3769,415, 5389,862), stdev = 1472,035
[info]   CI (99.9%): [≈ 0, 9437,696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,083 ±(99.9%) 0,320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,083, 0,167), stdev = 0,083
[info]   CI (99.9%): [≈ 0, 0,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35,14% complete, ETA 01:26:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12037,725 ops/s
[info] # Warmup Iteration   2: 19861,608 ops/s
[info] # Warmup Iteration   3: 20014,824 ops/s
[info] # Warmup Iteration   4: 19861,731 ops/s
[info] # Warmup Iteration   5: 19682,501 ops/s
[info] Iteration   1: 19898,023 ops/s
[info]                  ·gc.alloc.rate:                   2047,943 MB/sec
[info]                  ·gc.alloc.rate.norm:              162015,205 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160845,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,293 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 20154,198 ops/s
[info]                  ·gc.alloc.rate:                   2074,595 MB/sec
[info]                  ·gc.alloc.rate.norm:              162016,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,547 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     158966,577 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,251 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 20148,754 ops/s
[info]                  ·gc.alloc.rate:                   2074,199 MB/sec
[info]                  ·gc.alloc.rate.norm:              162016,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159117,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,252 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20105,292 ops/s
[info]                  ·gc.alloc.rate:                   2069,683 MB/sec
[info]                  ·gc.alloc.rate.norm:              162016,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159554,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,259 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 20121,619 ops/s
[info]                  ·gc.alloc.rate:                   2070,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              162016,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159584,035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,628 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   20085,577 ±(99.9%) 410,976 ops/s [Average]
[info]   (min, avg, max) = (19898,023, 20085,577, 20154,198), stdev = 106,729
[info]   CI (99.9%): [19674,602, 20496,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2067,480 ±(99.9%) 42,816 MB/sec [Average]
[info]   (min, avg, max) = (2047,943, 2067,480, 2074,595), stdev = 11,119
[info]   CI (99.9%): [2024,664, 2110,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162015,858 ±(99.9%) 1,405 B/op [Average]
[info]   (min, avg, max) = (162015,205, 162015,858, 162016,022), stdev = 0,365
[info]   CI (99.9%): [162014,453, 162017,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2036,786 ±(99.9%) 9,927 MB/sec [Average]
[info]   (min, avg, max) = (2033,154, 2036,786, 2039,892), stdev = 2,578
[info]   CI (99.9%): [2026,859, 2046,713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   159613,678 ±(99.9%) 2846,316 B/op [Average]
[info]   (min, avg, max) = (158966,577, 159613,678, 160845,226), stdev = 739,179
[info]   CI (99.9%): [156767,362, 162459,994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,042), stdev = 0,009
[info]   CI (99.9%): [0,002, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,937 ±(99.9%) 2,817 B/op [Average]
[info]   (min, avg, max) = (1,628, 2,937, 3,293), stdev = 0,732
[info]   CI (99.9%): [0,119, 5,754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 35,34% complete, ETA 01:25:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27993,767 ops/s
[info] # Warmup Iteration   2: 33509,057 ops/s
[info] # Warmup Iteration   3: 33590,944 ops/s
[info] # Warmup Iteration   4: 33681,353 ops/s
[info] # Warmup Iteration   5: 33390,557 ops/s
[info] Iteration   1: 33585,401 ops/s
[info]                  ·gc.alloc.rate:               1627,021 MB/sec
[info]                  ·gc.alloc.rate.norm:          76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63066,256 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 33553,886 ops/s
[info]                  ·gc.alloc.rate:                   1625,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,929 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94744,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,953 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33702,054 ops/s
[info]                  ·gc.alloc.rate:                   1632,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62959,976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,944 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33668,937 ops/s
[info]                  ·gc.alloc.rate:                   1631,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63082,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,973 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 33464,516 ops/s
[info]                  ·gc.alloc.rate:                   1621,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              76248,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95325,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,979 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle":
[info]   33594,958 ±(99.9%) 363,961 ops/s [Average]
[info]   (min, avg, max) = (33464,516, 33594,958, 33702,054), stdev = 94,519
[info]   CI (99.9%): [33230,998, 33958,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1627,583 ±(99.9%) 17,428 MB/sec [Average]
[info]   (min, avg, max) = (1621,385, 1627,583, 1632,655), stdev = 4,526
[info]   CI (99.9%): [1610,155, 1645,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   76248,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (76248,012, 76248,013, 76248,013), stdev = 0,001
[info]   CI (99.9%): [76248,010, 76248,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1618,087 ±(99.9%) 1425,093 MB/sec [Average]
[info]   (min, avg, max) = (1345,742, 1618,087, 2027,052), stdev = 370,092
[info]   CI (99.9%): [192,994, 3043,180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   75835,530 ±(99.9%) 67492,568 B/op [Average]
[info]   (min, avg, max) = (62959,976, 75835,530, 95325,091), stdev = 17527,605
[info]   CI (99.9%): [8342,963, 143328,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,170 ±(99.9%) 3,138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,170, 1,953), stdev = 0,815
[info]   CI (99.9%): [≈ 0, 4,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35,54% complete, ETA 01:25:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47588,933 ops/s
[info] # Warmup Iteration   2: 60505,390 ops/s
[info] # Warmup Iteration   3: 61070,404 ops/s
[info] # Warmup Iteration   4: 61265,399 ops/s
[info] # Warmup Iteration   5: 61217,019 ops/s
[info] Iteration   1: 61100,555 ops/s
[info]                  ·gc.alloc.rate:                   1481,753 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34592,764 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 61128,219 ops/s
[info]                  ·gc.alloc.rate:                   1482,711 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34577,487 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,536 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 61530,760 ops/s
[info]                  ·gc.alloc.rate:                   1492,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34385,128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,597 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 61143,178 ops/s
[info]                  ·gc.alloc.rate:               1483,153 MB/sec
[info]                  ·gc.alloc.rate.norm:          38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,596 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34635,329 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 61283,725 ops/s
[info]                  ·gc.alloc.rate:                   1486,015 MB/sec
[info]                  ·gc.alloc.rate.norm:              38176,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51910,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,535 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   61237,287 ±(99.9%) 688,100 ops/s [Average]
[info]   (min, avg, max) = (61100,555, 61237,287, 61530,760), stdev = 178,697
[info]   CI (99.9%): [60549,187, 61925,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1485,238 ±(99.9%) 16,897 MB/sec [Average]
[info]   (min, avg, max) = (1481,753, 1485,238, 1492,556), stdev = 4,388
[info]   CI (99.9%): [1468,340, 1502,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   38176,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (38176,007, 38176,007, 38176,007), stdev = 0,001
[info]   CI (99.9%): [38176,006, 38176,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,240 ±(99.9%) 1165,401 MB/sec [Average]
[info]   (min, avg, max) = (1342,674, 1479,240, 2020,634), stdev = 302,651
[info]   CI (99.9%): [313,839, 2644,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   38020,234 ±(99.9%) 29902,064 B/op [Average]
[info]   (min, avg, max) = (34385,128, 38020,234, 51910,465), stdev = 7765,471
[info]   CI (99.9%): [8118,170, 67922,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,748 ±(99.9%) 2,340 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,748, 1,597), stdev = 0,608
[info]   CI (99.9%): [≈ 0, 3,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,74% complete, ETA 01:25:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85360,877 ops/s
[info] # Warmup Iteration   2: 113274,242 ops/s
[info] # Warmup Iteration   3: 113609,098 ops/s
[info] # Warmup Iteration   4: 113826,059 ops/s
[info] # Warmup Iteration   5: 112409,617 ops/s
[info] Iteration   1: 113502,536 ops/s
[info]                  ·gc.alloc.rate:                   1183,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              16408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18749,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,866 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 113411,581 ops/s
[info]                  ·gc.alloc.rate:                   1182,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              16408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18775,581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,578 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 112685,777 ops/s
[info]                  ·gc.alloc.rate:               1174,711 MB/sec
[info]                  ·gc.alloc.rate.norm:          16408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 9456,646 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 113161,438 ops/s
[info]                  ·gc.alloc.rate:                   1179,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              16408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18838,220 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,868 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 113533,830 ops/s
[info]                  ·gc.alloc.rate:                   1183,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              16408,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,326 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18790,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,577 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   113259,032 ±(99.9%) 1356,260 ops/s [Average]
[info]   (min, avg, max) = (112685,777, 113259,032, 113533,830), stdev = 352,216
[info]   CI (99.9%): [111902,772, 114615,293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1180,727 ±(99.9%) 14,156 MB/sec [Average]
[info]   (min, avg, max) = (1174,711, 1180,727, 1183,479), stdev = 3,676
[info]   CI (99.9%): [1166,571, 1194,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   16408,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16408,004, 16408,004, 16408,004), stdev = 0,001
[info]   CI (99.9%): [16408,003, 16408,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,399 ±(99.9%) 1165,332 MB/sec [Average]
[info]   (min, avg, max) = (677,037, 1218,399, 1355,326), stdev = 302,633
[info]   CI (99.9%): [53,067, 2383,731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16922,024 ±(99.9%) 16070,272 B/op [Average]
[info]   (min, avg, max) = (9456,646, 16922,024, 18838,220), stdev = 4173,399
[info]   CI (99.9%): [851,752, 32992,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,578 ±(99.9%) 1,363 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,578, 0,868), stdev = 0,354
[info]   CI (99.9%): [≈ 0, 1,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35,94% complete, ETA 01:25:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1117930,269 ops/s
[info] # Warmup Iteration   2: 1177507,735 ops/s
[info] # Warmup Iteration   3: 1184999,418 ops/s
[info] # Warmup Iteration   4: 1185214,624 ops/s
[info] # Warmup Iteration   5: 1190919,692 ops/s
[info] Iteration   1: 1194376,495 ops/s
[info]                  ·gc.alloc.rate:                   1280,834 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1774,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1191468,685 ops/s
[info]                  ·gc.alloc.rate:                   1277,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1779,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1186934,378 ops/s
[info]                  ·gc.alloc.rate:                   1272,928 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1785,897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1189587,848 ops/s
[info]                  ·gc.alloc.rate:                   1275,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,577 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1782,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1191718,378 ops/s
[info]                  ·gc.alloc.rate:                   1278,008 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1781,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1190817,157 ±(99.9%) 10631,674 ops/s [Average]
[info]   (min, avg, max) = (1186934,378, 1190817,157, 1194376,495), stdev = 2761,012
[info]   CI (99.9%): [1180185,483, 1201448,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1277,119 ±(99.9%) 11,261 MB/sec [Average]
[info]   (min, avg, max) = (1272,928, 1277,119, 1280,834), stdev = 2,925
[info]   CI (99.9%): [1265,857, 1288,380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1688,000, 1688,000, 1688,000), stdev = 0,001
[info]   CI (99.9%): [1688,000, 1688,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1347,371 ±(99.9%) 3,129 MB/sec [Average]
[info]   (min, avg, max) = (1346,752, 1347,371, 1348,703), stdev = 0,813
[info]   CI (99.9%): [1344,242, 1350,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1780,862 ±(99.9%) 15,733 B/op [Average]
[info]   (min, avg, max) = (1774,953, 1780,862, 1785,897), stdev = 4,086
[info]   CI (99.9%): [1765,129, 1796,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,066 ±(99.9%) 0,121 B/op [Average]
[info]   (min, avg, max) = (0,027, 0,066, 0,110), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36,14% complete, ETA 01:24:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1206699,547 ops/s
[info] # Warmup Iteration   2: 1261707,002 ops/s
[info] # Warmup Iteration   3: 1260229,611 ops/s
[info] # Warmup Iteration   4: 1258873,478 ops/s
[info] # Warmup Iteration   5: 1258775,012 ops/s
[info] Iteration   1: 1262149,349 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1263610,401 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1262013,242 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1258814,614 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1260500,036 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1261417,528 ±(99.9%) 7025,734 ops/s [Average]
[info]   (min, avg, max) = (1258814,614, 1261417,528, 1263610,401), stdev = 1824,561
[info]   CI (99.9%): [1254391,795, 1268443,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36,35% complete, ETA 01:24:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56136,004 ops/s
[info] # Warmup Iteration   2: 70827,798 ops/s
[info] # Warmup Iteration   3: 70839,695 ops/s
[info] # Warmup Iteration   4: 71740,492 ops/s
[info] # Warmup Iteration   5: 70952,130 ops/s
[info] Iteration   1: 71084,864 ops/s
[info]                  ·gc.alloc.rate:                   1652,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29671,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,383 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 71387,366 ops/s
[info]                  ·gc.alloc.rate:                   1659,318 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,541 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44349,670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,918 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 70766,588 ops/s
[info]                  ·gc.alloc.rate:                   1644,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              36584,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29878,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 71146,012 ops/s
[info]                  ·gc.alloc.rate:               1653,793 MB/sec
[info]                  ·gc.alloc.rate.norm:          36584,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2018,294 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44647,217 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 71224,068 ops/s
[info]                  ·gc.alloc.rate:               1655,275 MB/sec
[info]                  ·gc.alloc.rate.norm:          36584,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,572 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 29783,321 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   71121,780 ±(99.9%) 880,422 ops/s [Average]
[info]   (min, avg, max) = (70766,588, 71121,780, 71387,366), stdev = 228,643
[info]   CI (99.9%): [70241,358, 72002,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1653,110 ±(99.9%) 20,393 MB/sec [Average]
[info]   (min, avg, max) = (1644,875, 1653,110, 1659,318), stdev = 5,296
[info]   CI (99.9%): [1632,716, 1673,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36584,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (36584,006, 36584,006, 36584,006), stdev = 0,001
[info]   CI (99.9%): [36584,005, 36584,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1612,180 ±(99.9%) 1415,745 MB/sec [Average]
[info]   (min, avg, max) = (1340,091, 1612,180, 2018,294), stdev = 367,664
[info]   CI (99.9%): [196,435, 3027,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   35666,128 ±(99.9%) 31050,765 B/op [Average]
[info]   (min, avg, max) = (29671,532, 35666,128, 44647,217), stdev = 8063,785
[info]   CI (99.9%): [4615,363, 66716,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,553 ±(99.9%) 2,311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,553, 1,383), stdev = 0,600
[info]   CI (99.9%): [≈ 0, 2,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 36,55% complete, ETA 01:24:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28789,203 ops/s
[info] # Warmup Iteration   2: 30889,887 ops/s
[info] # Warmup Iteration   3: 31080,903 ops/s
[info] # Warmup Iteration   4: 31045,301 ops/s
[info] # Warmup Iteration   5: 30973,392 ops/s
[info] Iteration   1: 30963,227 ops/s
[info]                  ·gc.alloc.rate:                   383,946 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26001,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 31043,248 ops/s
[info]                  ·gc.alloc.rate:                   384,996 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,552 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25936,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,688 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31054,583 ops/s
[info]                  ·gc.alloc.rate:               385,177 MB/sec
[info]                  ·gc.alloc.rate.norm:          19520,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25928,277 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 30903,479 ops/s
[info]                  ·gc.alloc.rate:      383,267 MB/sec
[info]                  ·gc.alloc.rate.norm: 19520,013 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 30949,652 ops/s
[info]                  ·gc.alloc.rate:                   383,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              19520,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34347,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145,651 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle":
[info]   30982,838 ±(99.9%) 247,915 ops/s [Average]
[info]   (min, avg, max) = (30903,479, 30982,838, 31054,583), stdev = 64,383
[info]   CI (99.9%): [30734,923, 31230,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   384,231 ±(99.9%) 3,165 MB/sec [Average]
[info]   (min, avg, max) = (383,267, 384,231, 385,177), stdev = 0,822
[info]   CI (99.9%): [381,067, 387,396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   19520,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (19520,013, 19520,014, 19520,014), stdev = 0,001
[info]   CI (99.9%): [19520,011, 19520,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,981 ±(99.9%) 989,795 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,981, 675,282), stdev = 257,047
[info]   CI (99.9%): [≈ 0, 1431,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22442,838 ±(99.9%) 50295,517 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22442,838, 34347,334), stdev = 13061,586
[info]   CI (99.9%): [≈ 0, 72738,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,575 ±(99.9%) 4,925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,575, 2,864), stdev = 1,279
[info]   CI (99.9%): [≈ 0, 5,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   29,270 ±(99.9%) 250,522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 29,270, 145,651), stdev = 65,060
[info]   CI (99.9%): [≈ 0, 279,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,140
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 36,75% complete, ETA 01:24:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14174,552 ops/s
[info] # Warmup Iteration   2: 18310,208 ops/s
[info] # Warmup Iteration   3: 18315,577 ops/s
[info] # Warmup Iteration   4: 18299,417 ops/s
[info] # Warmup Iteration   5: 18401,592 ops/s
[info] Iteration   1: 18357,550 ops/s
[info]                  ·gc.alloc.rate:                   1638,512 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     115233,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,138 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 18570,748 ops/s
[info]                  ·gc.alloc.rate:                   1657,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              140479,141 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170942,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,293 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18622,130 ops/s
[info]                  ·gc.alloc.rate:                   1662,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113774,943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,759 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 18563,929 ops/s
[info]                  ·gc.alloc.rate:                   1657,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     171449,630 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,765 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 18553,113 ops/s
[info]                  ·gc.alloc.rate:                   1655,923 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114537,024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,532 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   18533,494 ±(99.9%) 392,273 ops/s [Average]
[info]   (min, avg, max) = (18357,550, 18533,494, 18622,130), stdev = 101,872
[info]   CI (99.9%): [18141,221, 18925,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1654,278 ±(99.9%) 35,111 MB/sec [Average]
[info]   (min, avg, max) = (1638,512, 1654,278, 1662,109), stdev = 9,118
[info]   CI (99.9%): [1619,167, 1689,389] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140479,847 ±(99.9%) 1,520 B/op [Average]
[info]   (min, avg, max) = (140479,141, 140479,847, 140480,028), stdev = 0,395
[info]   CI (99.9%): [140478,327, 140481,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,991 ±(99.9%) 1419,581 MB/sec [Average]
[info]   (min, avg, max) = (1344,041, 1615,991, 2022,432), stdev = 368,661
[info]   CI (99.9%): [196,410, 3035,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   137187,473 ±(99.9%) 119563,682 B/op [Average]
[info]   (min, avg, max) = (113774,943, 137187,473, 171449,630), stdev = 31050,308
[info]   CI (99.9%): [17623,791, 256751,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,083), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,897 ±(99.9%) 8,969 B/op [Average]
[info]   (min, avg, max) = (1,759, 3,897, 7,138), stdev = 2,329
[info]   CI (99.9%): [≈ 0, 12,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36,95% complete, ETA 01:23:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11987,266 ops/s
[info] # Warmup Iteration   2: 18678,752 ops/s
[info] # Warmup Iteration   3: 18676,786 ops/s
[info] # Warmup Iteration   4: 18717,252 ops/s
[info] # Warmup Iteration   5: 18735,340 ops/s
[info] Iteration   1: 18796,454 ops/s
[info]                  ·gc.alloc.rate:                   1518,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              127144,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113279,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,486 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18707,762 ops/s
[info]                  ·gc.alloc.rate:                   1511,109 MB/sec
[info]                  ·gc.alloc.rate.norm:              127119,888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     170923,884 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,751 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18789,604 ops/s
[info]                  ·gc.alloc.rate:               1517,504 MB/sec
[info]                  ·gc.alloc.rate.norm:          127112,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,465 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 113539,010 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 18742,023 ops/s
[info]                  ·gc.alloc.rate:                   1513,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              127112,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,575 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113913,636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,496 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18743,776 ops/s
[info]                  ·gc.alloc.rate:                   1513,647 MB/sec
[info]                  ·gc.alloc.rate.norm:              127112,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,930 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113951,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,748 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   18755,924 ±(99.9%) 141,971 ops/s [Average]
[info]   (min, avg, max) = (18707,762, 18755,924, 18796,454), stdev = 36,869
[info]   CI (99.9%): [18613,953, 18897,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1514,848 ±(99.9%) 11,408 MB/sec [Average]
[info]   (min, avg, max) = (1511,109, 1514,848, 1518,228), stdev = 2,963
[info]   CI (99.9%): [1503,440, 1526,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127119,996 ±(99.9%) 53,366 B/op [Average]
[info]   (min, avg, max) = (127112,022, 127119,996, 127144,027), stdev = 13,859
[info]   CI (99.9%): [127066,630, 127173,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,692 ±(99.9%) 1164,832 MB/sec [Average]
[info]   (min, avg, max) = (1352,674, 1490,692, 2031,818), stdev = 302,503
[info]   CI (99.9%): [325,860, 2655,525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   125121,508 ±(99.9%) 98598,859 B/op [Average]
[info]   (min, avg, max) = (113279,673, 125121,508, 170923,884), stdev = 25605,810
[info]   CI (99.9%): [26522,649, 223720,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,096 ±(99.9%) 5,622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,096, 3,496), stdev = 1,460
[info]   CI (99.9%): [≈ 0, 7,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,15% complete, ETA 01:23:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442063,783 ops/s
[info] # Warmup Iteration   2: 458518,373 ops/s
[info] # Warmup Iteration   3: 458160,315 ops/s
[info] # Warmup Iteration   4: 462427,854 ops/s
[info] # Warmup Iteration   5: 460497,087 ops/s
[info] Iteration   1: 462360,404 ops/s
[info]                  ·gc.alloc.rate:                   1203,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4584,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 462966,815 ops/s
[info]                  ·gc.alloc.rate:               1205,017 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2289,551 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 462183,112 ops/s
[info]                  ·gc.alloc.rate:                   1202,860 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,951 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4586,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 462197,600 ops/s
[info]                  ·gc.alloc.rate:               1202,935 MB/sec
[info]                  ·gc.alloc.rate.norm:          4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4587,567 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 463197,286 ops/s
[info]                  ·gc.alloc.rate:                   1205,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4581,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   462581,043 ±(99.9%) 1808,814 ops/s [Average]
[info]   (min, avg, max) = (462183,112, 462581,043, 463197,286), stdev = 469,743
[info]   CI (99.9%): [460772,230, 464389,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1203,838 ±(99.9%) 4,320 MB/sec [Average]
[info]   (min, avg, max) = (1202,860, 1203,838, 1205,091), stdev = 1,122
[info]   CI (99.9%): [1199,519, 1208,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,507 ±(99.9%) 1160,099 MB/sec [Average]
[info]   (min, avg, max) = (673,571, 1212,507, 1347,792), stdev = 301,274
[info]   CI (99.9%): [52,407, 2372,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4125,945 ±(99.9%) 3952,987 B/op [Average]
[info]   (min, avg, max) = (2289,551, 4125,945, 4587,567), stdev = 1026,578
[info]   CI (99.9%): [172,958, 8078,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,071 ±(99.9%) 0,273 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,142), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37,35% complete, ETA 01:23:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8576,986 ops/s
[info] # Warmup Iteration   2: 13477,067 ops/s
[info] # Warmup Iteration   3: 13538,230 ops/s
[info] # Warmup Iteration   4: 13478,912 ops/s
[info] # Warmup Iteration   5: 13516,848 ops/s
[info] Iteration   1: 13586,425 ops/s
[info]                  ·gc.alloc.rate:                   1875,774 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156950,738 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,411 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 13572,065 ops/s
[info]                  ·gc.alloc.rate:                   1873,956 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,844 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235862,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,242 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13489,661 ops/s
[info]                  ·gc.alloc.rate:                   1862,537 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237623,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,857 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13506,355 ops/s
[info]                  ·gc.alloc.rate:                   1864,993 MB/sec
[info]                  ·gc.alloc.rate.norm:              217320,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237462,492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,425 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 13532,544 ops/s
[info]                  ·gc.alloc.rate:               1868,011 MB/sec
[info]                  ·gc.alloc.rate.norm:          217320,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1358,374 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 158030,071 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   13537,410 ±(99.9%) 159,599 ops/s [Average]
[info]   (min, avg, max) = (13489,661, 13537,410, 13586,425), stdev = 41,447
[info]   CI (99.9%): [13377,812, 13697,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1869,054 ±(99.9%) 21,888 MB/sec [Average]
[info]   (min, avg, max) = (1862,537, 1869,054, 1875,774), stdev = 5,684
[info]   CI (99.9%): [1847,167, 1890,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320,032 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (217320,030, 217320,032, 217320,038), stdev = 0,003
[info]   CI (99.9%): [217320,019, 217320,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1764,265 ±(99.9%) 1433,234 MB/sec [Average]
[info]   (min, avg, max) = (1354,703, 1764,265, 2037,852), stdev = 372,206
[info]   CI (99.9%): [331,031, 3197,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   205185,835 ±(99.9%) 167683,568 B/op [Average]
[info]   (min, avg, max) = (156950,738, 205185,835, 237623,860), stdev = 43546,890
[info]   CI (99.9%): [37502,267, 372869,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   3,387 ±(99.9%) 10,610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,387, 7,242), stdev = 2,755
[info]   CI (99.9%): [≈ 0, 13,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 37,55% complete, ETA 01:22:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15549,659 ops/s
[info] # Warmup Iteration   2: 18898,294 ops/s
[info] # Warmup Iteration   3: 18647,208 ops/s
[info] # Warmup Iteration   4: 19058,550 ops/s
[info] # Warmup Iteration   5: 19018,566 ops/s
[info] Iteration   1: 18925,823 ops/s
[info]                  ·gc.alloc.rate:                   1581,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              131503,330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167857,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,193 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18957,023 ops/s
[info]                  ·gc.alloc.rate:                   1583,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111786,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,728 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 19029,317 ops/s
[info]                  ·gc.alloc.rate:                   1589,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     111446,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,443 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 18997,591 ops/s
[info]                  ·gc.alloc.rate:                   1587,057 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     167635,315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,449 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 18908,686 ops/s
[info]                  ·gc.alloc.rate:                   1579,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              131480,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,661 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112436,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,465 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle":
[info]   18963,688 ±(99.9%) 192,146 ops/s [Average]
[info]   (min, avg, max) = (18908,686, 18963,688, 19029,317), stdev = 49,900
[info]   CI (99.9%): [18771,542, 19155,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1584,192 ±(99.9%) 15,954 MB/sec [Average]
[info]   (min, avg, max) = (1579,424, 1584,192, 1589,590), stdev = 4,143
[info]   CI (99.9%): [1568,239, 1600,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   131484,683 ±(99.9%) 40,138 B/op [Average]
[info]   (min, avg, max) = (131480,021, 131484,683, 131503,330), stdev = 10,424
[info]   CI (99.9%): [131444,545, 131524,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1617,276 ±(99.9%) 1419,121 MB/sec [Average]
[info]   (min, avg, max) = (1346,367, 1617,276, 2023,477), stdev = 368,541
[info]   CI (99.9%): [198,155, 3036,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   134232,433 ±(99.9%) 117814,623 B/op [Average]
[info]   (min, avg, max) = (111446,320, 134232,433, 167857,460), stdev = 30596,083
[info]   CI (99.9%): [16417,811, 252047,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,456 ±(99.9%) 4,717 B/op [Average]
[info]   (min, avg, max) = (1,728, 3,456, 5,193), stdev = 1,225
[info]   CI (99.9%): [≈ 0, 8,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37,75% complete, ETA 01:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33556,323 ops/s
[info] # Warmup Iteration   2: 45369,663 ops/s
[info] # Warmup Iteration   3: 45074,839 ops/s
[info] # Warmup Iteration   4: 45603,790 ops/s
[info] # Warmup Iteration   5: 45380,773 ops/s
[info] Iteration   1: 45371,085 ops/s
[info]                  ·gc.alloc.rate:                   1410,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46580,786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,166 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 45473,512 ops/s
[info]                  ·gc.alloc.rate:               1413,800 MB/sec
[info]                  ·gc.alloc.rate.norm:          48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46479,392 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 45516,766 ops/s
[info]                  ·gc.alloc.rate:               1414,914 MB/sec
[info]                  ·gc.alloc.rate.norm:          48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46455,461 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 45298,495 ops/s
[info]                  ·gc.alloc.rate:                   1408,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46725,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,446 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 45315,327 ops/s
[info]                  ·gc.alloc.rate:                   1408,651 MB/sec
[info]                  ·gc.alloc.rate.norm:              48928,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,468 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70144,124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,723 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   45395,037 ±(99.9%) 371,463 ops/s [Average]
[info]   (min, avg, max) = (45298,495, 45395,037, 45516,766), stdev = 96,468
[info]   CI (99.9%): [45023,574, 45766,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1411,231 ±(99.9%) 11,540 MB/sec [Average]
[info]   (min, avg, max) = (1408,308, 1411,231, 1414,914), stdev = 2,997
[info]   CI (99.9%): [1399,690, 1422,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   48928,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (48928,009, 48928,009, 48928,010), stdev = 0,001
[info]   CI (99.9%): [48928,008, 48928,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1478,730 ±(99.9%) 1163,985 MB/sec [Average]
[info]   (min, avg, max) = (1342,816, 1478,730, 2019,468), stdev = 302,283
[info]   CI (99.9%): [314,744, 2642,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51277,005 ±(99.9%) 40614,958 B/op [Average]
[info]   (min, avg, max) = (46455,461, 51277,005, 70144,124), stdev = 10547,575
[info]   CI (99.9%): [10662,048, 91891,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,867 ±(99.9%) 3,626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,867, 2,166), stdev = 0,942
[info]   CI (99.9%): [≈ 0, 4,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37,95% complete, ETA 01:22:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38772,058 ops/s
[info] # Warmup Iteration   2: 53468,302 ops/s
[info] # Warmup Iteration   3: 53749,501 ops/s
[info] # Warmup Iteration   4: 53626,271 ops/s
[info] # Warmup Iteration   5: 53782,403 ops/s
[info] Iteration   1: 53570,123 ops/s
[info]                  ·gc.alloc.rate:                   1421,074 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,764 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39745,028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,612 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 53864,917 ops/s
[info]                  ·gc.alloc.rate:                   1428,848 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39569,273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,608 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 53489,552 ops/s
[info]                  ·gc.alloc.rate:                   1418,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39863,252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,225 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 53716,462 ops/s
[info]                  ·gc.alloc.rate:                   1424,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,095 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39734,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,610 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 53173,223 ops/s
[info]                  ·gc.alloc.rate:                   1410,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              41752,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40159,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,616 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   53562,855 ±(99.9%) 1004,265 ops/s [Average]
[info]   (min, avg, max) = (53173,223, 53562,855, 53864,917), stdev = 260,804
[info]   CI (99.9%): [52558,591, 54567,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1420,841 ±(99.9%) 26,795 MB/sec [Average]
[info]   (min, avg, max) = (1410,399, 1420,841, 1428,848), stdev = 6,959
[info]   CI (99.9%): [1394,046, 1447,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (41752,008, 41752,008, 41752,008), stdev = 0,001
[info]   CI (99.9%): [41752,007, 41752,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,875 ±(99.9%) 5,944 MB/sec [Average]
[info]   (min, avg, max) = (1352,764, 1354,875, 1356,620), stdev = 1,544
[info]   CI (99.9%): [1348,931, 1360,819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39814,431 ±(99.9%) 846,018 B/op [Average]
[info]   (min, avg, max) = (39569,273, 39814,431, 40159,992), stdev = 219,708
[info]   CI (99.9%): [38968,413, 40660,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,025, 0,042), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,734 ±(99.9%) 1,056 B/op [Average]
[info]   (min, avg, max) = (0,608, 0,734, 1,225), stdev = 0,274
[info]   CI (99.9%): [≈ 0, 1,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38,15% complete, ETA 01:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1282861,966 ops/s
[info] # Warmup Iteration   2: 1353442,921 ops/s
[info] # Warmup Iteration   3: 1359981,817 ops/s
[info] # Warmup Iteration   4: 1351762,341 ops/s
[info] # Warmup Iteration   5: 1363566,282 ops/s
[info] Iteration   1: 1360567,664 ops/s
[info]                  ·gc.alloc.rate:                   1237,873 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1557,988 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1357845,196 ops/s
[info]                  ·gc.alloc.rate:                   1235,350 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1561,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1365112,282 ops/s
[info]                  ·gc.alloc.rate:                   1242,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1552,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1361250,302 ops/s
[info]                  ·gc.alloc.rate:                   1238,831 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1557,080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1363695,450 ops/s
[info]                  ·gc.alloc.rate:               1240,609 MB/sec
[info]                  ·gc.alloc.rate.norm:          1432,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 778,413 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1361694,179 ±(99.9%) 10886,031 ops/s [Average]
[info]   (min, avg, max) = (1357845,196, 1361694,179, 1365112,282), stdev = 2827,068
[info]   CI (99.9%): [1350808,148, 1372580,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1238,938 ±(99.9%) 9,883 MB/sec [Average]
[info]   (min, avg, max) = (1235,350, 1238,938, 1242,026), stdev = 2,567
[info]   CI (99.9%): [1229,055, 1248,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1432,000, 1432,000, 1432,000), stdev = 0,001
[info]   CI (99.9%): [1432,000, 1432,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1212,339 ±(99.9%) 1158,008 MB/sec [Average]
[info]   (min, avg, max) = (674,376, 1212,339, 1347,038), stdev = 300,731
[info]   CI (99.9%): [54,332, 2370,347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1401,472 ±(99.9%) 1341,230 B/op [Average]
[info]   (min, avg, max) = (778,413, 1401,472, 1561,096), stdev = 348,313
[info]   CI (99.9%): [60,242, 2742,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,058 ±(99.9%) 0,124 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,072), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38,35% complete, ETA 01:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1414038,411 ops/s
[info] # Warmup Iteration   2: 1451097,658 ops/s
[info] # Warmup Iteration   3: 1444536,776 ops/s
[info] # Warmup Iteration   4: 1470998,933 ops/s
[info] # Warmup Iteration   5: 1470036,738 ops/s
[info] Iteration   1: 1470248,411 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1473117,521 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1470728,761 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1469825,208 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1469673,330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1470718,646 ±(99.9%) 5400,087 ops/s [Average]
[info]   (min, avg, max) = (1469673,330, 1470718,646, 1473117,521), stdev = 1402,385
[info]   CI (99.9%): [1465318,559, 1476118,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 38,55% complete, ETA 01:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33248,322 ops/s
[info] # Warmup Iteration   2: 42106,806 ops/s
[info] # Warmup Iteration   3: 41882,949 ops/s
[info] # Warmup Iteration   4: 42075,919 ops/s
[info] # Warmup Iteration   5: 42185,431 ops/s
[info] Iteration   1: 42198,023 ops/s
[info]                  ·gc.alloc.rate:                   1276,836 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49983,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,329 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 42268,154 ops/s
[info]                  ·gc.alloc.rate:               1279,007 MB/sec
[info]                  ·gc.alloc.rate.norm:          47632,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49905,025 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 42250,340 ops/s
[info]                  ·gc.alloc.rate:                   1278,544 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,825 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49952,279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,326 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 42278,006 ops/s
[info]                  ·gc.alloc.rate:                   1279,476 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49965,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,775 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42290,642 ops/s
[info]                  ·gc.alloc.rate:                   1279,686 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50000,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,775 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   42257,033 ±(99.9%) 139,105 ops/s [Average]
[info]   (min, avg, max) = (42198,023, 42257,033, 42290,642), stdev = 36,125
[info]   CI (99.9%): [42117,928, 42396,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1278,710 ±(99.9%) 4,377 MB/sec [Average]
[info]   (min, avg, max) = (1276,836, 1278,710, 1279,686), stdev = 1,137
[info]   CI (99.9%): [1274,333, 1283,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47632,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (47632,010, 47632,010, 47632,010), stdev = 0,001
[info]   CI (99.9%): [47632,008, 47632,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1341,240 ±(99.9%) 5,674 MB/sec [Average]
[info]   (min, avg, max) = (1339,859, 1341,240, 1343,323), stdev = 1,474
[info]   CI (99.9%): [1335,566, 1346,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   49961,254 ±(99.9%) 139,985 B/op [Average]
[info]   (min, avg, max) = (49905,025, 49961,254, 50000,657), stdev = 36,354
[info]   CI (99.9%): [49821,270, 50101,239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,241 ±(99.9%) 4,009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,241, 2,329), stdev = 1,041
[info]   CI (99.9%): [≈ 0, 5,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 38,76% complete, ETA 01:21:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31039,085 ops/s
[info] # Warmup Iteration   2: 33323,754 ops/s
[info] # Warmup Iteration   3: 33922,047 ops/s
[info] # Warmup Iteration   4: 33727,072 ops/s
[info] # Warmup Iteration   5: 33904,790 ops/s
[info] Iteration   1: 33904,622 ops/s
[info]                  ·gc.alloc.rate:                   475,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23746,244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,484 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33725,615 ops/s
[info]                  ·gc.alloc.rate:                   473,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,487 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23872,247 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,155 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 33878,763 ops/s
[info]                  ·gc.alloc.rate:                   475,248 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31376,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 131,447 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 33962,618 ops/s
[info]                  ·gc.alloc.rate:      476,477 MB/sec
[info]                  ·gc.alloc.rate.norm: 22080,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 33923,952 ops/s
[info]                  ·gc.alloc.rate:                   475,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              22080,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31333,984 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,897 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle":
[info]   33879,114 ±(99.9%) 350,789 ops/s [Average]
[info]   (min, avg, max) = (33725,615, 33879,114, 33962,618), stdev = 91,099
[info]   CI (99.9%): [33528,325, 34229,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   475,253 ±(99.9%) 4,971 MB/sec [Average]
[info]   (min, avg, max) = (473,087, 475,253, 476,477), stdev = 1,291
[info]   CI (99.9%): [470,282, 480,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   22080,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (22080,012, 22080,012, 22080,013), stdev = 0,001
[info]   CI (99.9%): [22080,010, 22080,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,721 ±(99.9%) 1069,442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,721, 675,345), stdev = 277,731
[info]   CI (99.9%): [≈ 0, 1544,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22065,798 ±(99.9%) 49670,895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22065,798, 31376,518), stdev = 12899,374
[info]   CI (99.9%): [≈ 0, 71736,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,581 ±(99.9%) 4,840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,581, 2,829), stdev = 1,257
[info]   CI (99.9%): [≈ 0, 5,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   26,997 ±(99.9%) 224,884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26,997, 131,447), stdev = 58,402
[info]   CI (99.9%): [≈ 0, 251,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38,96% complete, ETA 01:21:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 78269,765 ops/s
[info] # Warmup Iteration   2: 88472,363 ops/s
[info] # Warmup Iteration   3: 88730,837 ops/s
[info] # Warmup Iteration   4: 89080,593 ops/s
[info] # Warmup Iteration   5: 88781,184 ops/s
[info] Iteration   1: 89119,455 ops/s
[info]                  ·gc.alloc.rate:               1528,867 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,245 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23739,568 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 88871,023 ops/s
[info]                  ·gc.alloc.rate:                   1524,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35720,501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,369 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 89133,266 ops/s
[info]                  ·gc.alloc.rate:                   1529,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23765,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,103 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 89031,090 ops/s
[info]                  ·gc.alloc.rate:               1527,406 MB/sec
[info]                  ·gc.alloc.rate.norm:          27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23809,863 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 88941,835 ops/s
[info]                  ·gc.alloc.rate:                   1525,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35797,130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,105 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   89019,334 ±(99.9%) 435,417 ops/s [Average]
[info]   (min, avg, max) = (88871,023, 89019,334, 89133,266), stdev = 113,077
[info]   CI (99.9%): [88583,916, 89454,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   1527,127 ±(99.9%) 7,501 MB/sec [Average]
[info]   (min, avg, max) = (1524,604, 1527,127, 1529,050), stdev = 1,948
[info]   CI (99.9%): [1519,626, 1534,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27000,005, 27000,005, 27000,005), stdev = 0,001
[info]   CI (99.9%): [27000,004, 27000,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,379 ±(99.9%) 1422,039 MB/sec [Average]
[info]   (min, avg, max) = (1344,245, 1615,379, 2022,814), stdev = 369,299
[info]   CI (99.9%): [193,340, 3037,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28566,514 ±(99.9%) 25282,351 B/op [Average]
[info]   (min, avg, max) = (23739,568, 28566,514, 35797,130), stdev = 6565,746
[info]   CI (99.9%): [3284,164, 53848,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,515 ±(99.9%) 2,148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,515, 1,105), stdev = 0,558
[info]   CI (99.9%): [≈ 0, 2,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 39,16% complete, ETA 01:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111533,195 ops/s
[info] # Warmup Iteration   2: 372308,832 ops/s
[info] # Warmup Iteration   3: 392562,801 ops/s
[info] # Warmup Iteration   4: 391297,112 ops/s
[info] # Warmup Iteration   5: 389188,723 ops/s
[info] Iteration   1: 393618,340 ops/s
[info]                  ·gc.alloc.rate:               788,188 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2695,554 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 392152,206 ops/s
[info]                  ·gc.alloc.rate:                   785,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2700,304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,167 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 392672,858 ops/s
[info]                  ·gc.alloc.rate:               786,467 MB/sec
[info]                  ·gc.alloc.rate.norm:          3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2696,721 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 392007,710 ops/s
[info]                  ·gc.alloc.rate:                   785,102 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2698,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,084 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 391658,962 ops/s
[info]                  ·gc.alloc.rate:                   784,294 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5401,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,251 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   392422,015 ±(99.9%) 2933,075 ops/s [Average]
[info]   (min, avg, max) = (391658,962, 392422,015, 393618,340), stdev = 761,710
[info]   CI (99.9%): [389488,940, 395355,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   785,868 ±(99.9%) 5,822 MB/sec [Average]
[info]   (min, avg, max) = (784,294, 785,868, 788,188), stdev = 1,512
[info]   CI (99.9%): [780,046, 791,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3152,001, 3152,001, 3152,001), stdev = 0,001
[info]   CI (99.9%): [3152,001, 3152,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   807,176 ±(99.9%) 1155,725 MB/sec [Average]
[info]   (min, avg, max) = (672,133, 807,176, 1344,078), stdev = 300,138
[info]   CI (99.9%): [≈ 0, 1962,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   3238,551 ±(99.9%) 4656,389 B/op [Average]
[info]   (min, avg, max) = (2695,554, 3238,551, 5401,719), stdev = 1209,249
[info]   CI (99.9%): [≈ 0, 7894,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,100 ±(99.9%) 0,420 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,100, 0,251), stdev = 0,109
[info]   CI (99.9%): [≈ 0, 0,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,36% complete, ETA 01:20:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188077,421 ops/s
[info] # Warmup Iteration   2: 254757,117 ops/s
[info] # Warmup Iteration   3: 255392,781 ops/s
[info] # Warmup Iteration   4: 255431,989 ops/s
[info] # Warmup Iteration   5: 254777,473 ops/s
[info] Iteration   1: 254760,556 ops/s
[info]                  ·gc.alloc.rate:                   552,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4166,405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,029 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 256306,766 ops/s
[info]                  ·gc.alloc.rate:      556,313 MB/sec
[info]                  ·gc.alloc.rate.norm: 3416,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 255959,106 ops/s
[info]                  ·gc.alloc.rate:                   555,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4146,860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 255203,572 ops/s
[info]                  ·gc.alloc.rate:               553,881 MB/sec
[info]                  ·gc.alloc.rate.norm:          3416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4165,613 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 254212,324 ops/s
[info]                  ·gc.alloc.rate:                   551,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              3416,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4181,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   255288,465 ±(99.9%) 3295,996 ops/s [Average]
[info]   (min, avg, max) = (254212,324, 255288,465, 256306,766), stdev = 855,960
[info]   CI (99.9%): [251992,468, 258584,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   554,075 ±(99.9%) 7,160 MB/sec [Average]
[info]   (min, avg, max) = (551,739, 554,075, 556,313), stdev = 1,859
[info]   CI (99.9%): [546,915, 561,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3416,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3416,002, 3416,002, 3416,002), stdev = 0,001
[info]   CI (99.9%): [3416,001, 3416,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,917 ±(99.9%) 1162,215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,917, 675,425), stdev = 301,823
[info]   CI (99.9%): [≈ 0, 1702,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3332,106 ±(99.9%) 7172,766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3332,106, 4181,652), stdev = 1862,745
[info]   CI (99.9%): [≈ 0, 10504,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,272 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,167), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,257 ±(99.9%) 1,679 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,257, 1,029), stdev = 0,436
[info]   CI (99.9%): [≈ 0, 1,936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39,56% complete, ETA 01:20:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497528,768 ops/s
[info] # Warmup Iteration   2: 524178,640 ops/s
[info] # Warmup Iteration   3: 519260,081 ops/s
[info] # Warmup Iteration   4: 519138,510 ops/s
[info] # Warmup Iteration   5: 519446,457 ops/s
[info] Iteration   1: 520920,787 ops/s
[info]                  ·gc.alloc.rate:                   656,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2038,629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,481 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 522447,614 ops/s
[info]                  ·gc.alloc.rate:                   658,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,841 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2032,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,125 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 521561,346 ops/s
[info]                  ·gc.alloc.rate:               657,454 MB/sec
[info]                  ·gc.alloc.rate.norm:          1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2030,063 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 520851,364 ops/s
[info]                  ·gc.alloc.rate:                   656,590 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2032,861 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 521613,674 ops/s
[info]                  ·gc.alloc.rate:                   657,449 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,984 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2027,863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   521478,957 ±(99.9%) 2487,066 ops/s [Average]
[info]   (min, avg, max) = (520851,364, 521478,957, 522447,614), stdev = 645,883
[info]   CI (99.9%): [518991,891, 523966,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   657,338 ±(99.9%) 3,219 MB/sec [Average]
[info]   (min, avg, max) = (656,579, 657,338, 658,617), stdev = 0,836
[info]   CI (99.9%): [654,119, 660,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1984,001, 1984,001, 1984,001), stdev = 0,001
[info]   CI (99.9%): [1984,001, 1984,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,392 ±(99.9%) 4,923 MB/sec [Average]
[info]   (min, avg, max) = (671,984, 673,392, 674,841), stdev = 1,279
[info]   CI (99.9%): [668,469, 678,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2032,458 ±(99.9%) 15,555 B/op [Average]
[info]   (min, avg, max) = (2027,863, 2032,458, 2038,629), stdev = 4,040
[info]   CI (99.9%): [2016,904, 2048,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,644 ±(99.9%) 5,367 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,644, 3,138), stdev = 1,394
[info]   CI (99.9%): [≈ 0, 6,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,946 ±(99.9%) 16,219 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,946, 9,481), stdev = 4,212
[info]   CI (99.9%): [≈ 0, 18,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39,76% complete, ETA 01:20:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52459,921 ops/s
[info] # Warmup Iteration   2: 80555,228 ops/s
[info] # Warmup Iteration   3: 80681,450 ops/s
[info] # Warmup Iteration   4: 80818,091 ops/s
[info] # Warmup Iteration   5: 80999,616 ops/s
[info] Iteration   1: 80637,836 ops/s
[info]                  ·gc.alloc.rate:                   3597,400 MB/sec
[info]                  ·gc.alloc.rate.norm:              70224,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394,165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66256,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,219 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 80911,864 ops/s
[info]                  ·gc.alloc.rate:                   3610,494 MB/sec
[info]                  ·gc.alloc.rate.norm:              70224,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66123,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,025 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 80706,733 ops/s
[info]                  ·gc.alloc.rate:                   3600,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              70224,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79612,540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,436 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 80577,926 ops/s
[info]                  ·gc.alloc.rate:                   3595,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              70224,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66484,147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,626 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 80423,981 ops/s
[info]                  ·gc.alloc.rate:                   3587,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              70224,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,370 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66637,500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,222 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   80651,668 ±(99.9%) 689,374 ops/s [Average]
[info]   (min, avg, max) = (80423,981, 80651,668, 80911,864), stdev = 179,028
[info]   CI (99.9%): [79962,293, 81341,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3598,346 ±(99.9%) 32,174 MB/sec [Average]
[info]   (min, avg, max) = (3587,597, 3598,346, 3610,494), stdev = 8,356
[info]   CI (99.9%): [3566,172, 3630,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70224,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70224,005, 70224,005, 70224,005), stdev = 0,001
[info]   CI (99.9%): [70224,004, 70224,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3536,874 ±(99.9%) 1174,150 MB/sec [Average]
[info]   (min, avg, max) = (3394,165, 3536,874, 4082,287), stdev = 304,923
[info]   CI (99.9%): [2362,724, 4711,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   69022,809 ±(99.9%) 22808,057 B/op [Average]
[info]   (min, avg, max) = (66123,146, 69022,809, 79612,540), stdev = 5923,180
[info]   CI (99.9%): [46214,752, 91830,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,125), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,705 ±(99.9%) 2,030 B/op [Average]
[info]   (min, avg, max) = (1,219, 1,705, 2,436), stdev = 0,527
[info]   CI (99.9%): [≈ 0, 3,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39,96% complete, ETA 01:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 178311,206 ops/s
[info] # Warmup Iteration   2: 235276,992 ops/s
[info] # Warmup Iteration   3: 236575,780 ops/s
[info] # Warmup Iteration   4: 237848,180 ops/s
[info] # Warmup Iteration   5: 237583,592 ops/s
[info] Iteration   1: 236554,597 ops/s
[info]                  ·gc.alloc.rate:                   1672,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8935,141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,277 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 237875,866 ops/s
[info]                  ·gc.alloc.rate:                   1682,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,934 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13337,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,413 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 237097,930 ops/s
[info]                  ·gc.alloc.rate:                   1676,233 MB/sec
[info]                  ·gc.alloc.rate.norm:              11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8931,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,276 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 236960,052 ops/s
[info]                  ·gc.alloc.rate:                   1675,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13425,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,415 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 236987,562 ops/s
[info]                  ·gc.alloc.rate:                   1675,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              11128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8962,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   237095,201 ±(99.9%) 1858,260 ops/s [Average]
[info]   (min, avg, max) = (236554,597, 237095,201, 237875,866), stdev = 482,584
[info]   CI (99.9%): [235236,942, 238953,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1676,336 ±(99.9%) 13,407 MB/sec [Average]
[info]   (min, avg, max) = (1672,470, 1676,336, 1682,001), stdev = 3,482
[info]   CI (99.9%): [1662,929, 1689,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11128,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11128,002, 11128,002, 11128,002), stdev = 0,001
[info]   CI (99.9%): [11128,001, 11128,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,994 ±(99.9%) 1419,010 MB/sec [Average]
[info]   (min, avg, max) = (1342,897, 1614,994, 2021,396), stdev = 368,512
[info]   CI (99.9%): [195,984, 3034,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10718,251 ±(99.9%) 9361,426 B/op [Average]
[info]   (min, avg, max) = (8931,539, 10718,251, 13425,075), stdev = 2431,133
[info]   CI (99.9%): [1356,825, 20079,678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,304 ±(99.9%) 0,444 B/op [Average]
[info]   (min, avg, max) = (0,138, 0,304, 0,415), stdev = 0,115
[info]   CI (99.9%): [≈ 0, 0,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 40,16% complete, ETA 01:19:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 190785,222 ops/s
[info] # Warmup Iteration   2: 793914,966 ops/s
[info] # Warmup Iteration   3: 752044,396 ops/s
[info] # Warmup Iteration   4: 755865,264 ops/s
[info] # Warmup Iteration   5: 750667,829 ops/s
[info] Iteration   1: 756999,800 ops/s
[info]                  ·gc.alloc.rate:      592,570 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 749931,138 ops/s
[info]                  ·gc.alloc.rate:                   587,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1414,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,566 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 753269,347 ops/s
[info]                  ·gc.alloc.rate:                   589,622 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1408,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,043 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 754977,219 ops/s
[info]                  ·gc.alloc.rate:                   591,019 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,793 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1402,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,087 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 748147,311 ops/s
[info]                  ·gc.alloc.rate:               585,551 MB/sec
[info]                  ·gc.alloc.rate.norm:          1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,662 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1415,283 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   752664,963 ±(99.9%) 13935,075 ops/s [Average]
[info]   (min, avg, max) = (748147,311, 752664,963, 756999,800), stdev = 3618,895
[info]   CI (99.9%): [738729,888, 766600,038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   589,155 ±(99.9%) 11,049 MB/sec [Average]
[info]   (min, avg, max) = (585,551, 589,155, 592,570), stdev = 2,869
[info]   CI (99.9%): [578,106, 600,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,000, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   538,711 ±(99.9%) 1159,618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,711, 674,057), stdev = 301,149
[info]   CI (99.9%): [≈ 0, 1698,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1128,164 ±(99.9%) 2428,542 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1128,164, 1415,283), stdev = 630,685
[info]   CI (99.9%): [≈ 0, 3556,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,543 ±(99.9%) 4,541 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,543, 2,652), stdev = 1,179
[info]   CI (99.9%): [≈ 0, 5,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,139 ±(99.9%) 9,531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,139, 5,566), stdev = 2,475
[info]   CI (99.9%): [≈ 0, 10,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,36% complete, ETA 01:19:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411684,502 ops/s
[info] # Warmup Iteration   2: 536169,439 ops/s
[info] # Warmup Iteration   3: 532889,587 ops/s
[info] # Warmup Iteration   4: 533074,105 ops/s
[info] # Warmup Iteration   5: 535343,018 ops/s
[info] Iteration   1: 536805,612 ops/s
[info]                  ·gc.alloc.rate:                   551,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1977,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,305 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 533309,245 ops/s
[info]                  ·gc.alloc.rate:      547,625 MB/sec
[info]                  ·gc.alloc.rate.norm: 1616,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 537491,060 ops/s
[info]                  ·gc.alloc.rate:                   551,822 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1974,743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 533012,622 ops/s
[info]                  ·gc.alloc.rate:               547,289 MB/sec
[info]                  ·gc.alloc.rate.norm:          1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1993,322 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 537312,506 ops/s
[info]                  ·gc.alloc.rate:                   551,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1977,363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   535586,209 ±(99.9%) 8589,486 ops/s [Average]
[info]   (min, avg, max) = (533012,622, 535586,209, 537491,060), stdev = 2230,662
[info]   CI (99.9%): [526996,723, 544175,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   549,902 ±(99.9%) 8,651 MB/sec [Average]
[info]   (min, avg, max) = (547,289, 549,902, 551,822), stdev = 2,247
[info]   CI (99.9%): [541,251, 558,552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1616,001, 1616,001, 1616,001), stdev = 0,001
[info]   CI (99.9%): [1616,001, 1616,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,749 ±(99.9%) 1161,852 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,749, 675,076), stdev = 301,729
[info]   CI (99.9%): [≈ 0, 1701,601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1584,546 ±(99.9%) 3410,974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1584,546, 1993,322), stdev = 885,819
[info]   CI (99.9%): [≈ 0, 4995,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,098 ±(99.9%) 0,487 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,098, 0,305), stdev = 0,127
[info]   CI (99.9%): [≈ 0, 0,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40,56% complete, ETA 01:18:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 681253,441 ops/s
[info] # Warmup Iteration   2: 705472,825 ops/s
[info] # Warmup Iteration   3: 653014,065 ops/s
[info] # Warmup Iteration   4: 657107,688 ops/s
[info] # Warmup Iteration   5: 652453,494 ops/s
[info] Iteration   1: 652753,572 ops/s
[info]                  ·gc.alloc.rate:                   510,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1233,432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,019 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 660431,511 ops/s
[info]                  ·gc.alloc.rate:      517,003 MB/sec
[info]                  ·gc.alloc.rate.norm: 1232,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 659114,911 ops/s
[info]                  ·gc.alloc.rate:                   515,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1611,192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,439 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 659677,099 ops/s
[info]                  ·gc.alloc.rate:                   516,405 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1609,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 659292,311 ops/s
[info]                  ·gc.alloc.rate:                   516,244 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1605,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   658253,881 ±(99.9%) 11999,056 ops/s [Average]
[info]   (min, avg, max) = (652753,572, 658253,881, 660431,511), stdev = 3116,117
[info]   CI (99.9%): [646254,825, 670252,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   515,286 ±(99.9%) 9,532 MB/sec [Average]
[info]   (min, avg, max) = (510,919, 515,286, 517,003), stdev = 2,475
[info]   CI (99.9%): [505,754, 524,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1232,001, 1232,001, 1232,001), stdev = 0,001
[info]   CI (99.9%): [1232,001, 1232,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,776 ±(99.9%) 1124,068 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,776, 674,780), stdev = 291,917
[info]   CI (99.9%): [≈ 0, 1630,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1212,092 ±(99.9%) 2683,230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1212,092, 1611,192), stdev = 696,826
[info]   CI (99.9%): [≈ 0, 3895,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,639 ±(99.9%) 5,330 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,639, 3,115), stdev = 1,384
[info]   CI (99.9%): [≈ 0, 5,969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,527 ±(99.9%) 12,728 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,527, 7,439), stdev = 3,306
[info]   CI (99.9%): [≈ 0, 14,255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 40,76% complete, ETA 01:18:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 739019,551 ops/s
[info] # Warmup Iteration   2: 781426,428 ops/s
[info] # Warmup Iteration   3: 775829,520 ops/s
[info] # Warmup Iteration   4: 776158,568 ops/s
[info] # Warmup Iteration   5: 775560,398 ops/s
[info] Iteration   1: 777345,749 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 779370,755 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 776954,343 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 775311,397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 776909,514 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   777178,351 ±(99.9%) 5594,255 ops/s [Average]
[info]   (min, avg, max) = (775311,397, 777178,351, 779370,755), stdev = 1452,810
[info]   CI (99.9%): [771584,097, 782772,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40,96% complete, ETA 01:18:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23307,680 ops/s
[info] # Warmup Iteration   2: 30682,662 ops/s
[info] # Warmup Iteration   3: 30947,877 ops/s
[info] # Warmup Iteration   4: 31128,670 ops/s
[info] # Warmup Iteration   5: 31192,587 ops/s
[info] Iteration   1: 31263,517 ops/s
[info]                  ·gc.alloc.rate:                   1888,705 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101276,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,096 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31143,371 ops/s
[info]                  ·gc.alloc.rate:                   1881,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101800,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,156 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31108,093 ops/s
[info]                  ·gc.alloc.rate:                   1879,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102114,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,159 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31120,234 ops/s
[info]                  ·gc.alloc.rate:                   1880,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102270,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,053 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 31082,332 ops/s
[info]                  ·gc.alloc.rate:                   1877,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              95088,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68367,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   31143,509 ±(99.9%) 271,877 ops/s [Average]
[info]   (min, avg, max) = (31082,332, 31143,509, 31263,517), stdev = 70,606
[info]   CI (99.9%): [30871,632, 31415,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1881,573 ±(99.9%) 16,355 MB/sec [Average]
[info]   (min, avg, max) = (1877,744, 1881,573, 1888,705), stdev = 4,247
[info]   CI (99.9%): [1865,217, 1897,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   95088,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (95088,013, 95088,014, 95088,015), stdev = 0,001
[info]   CI (99.9%): [95088,010, 95088,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1883,370 ±(99.9%) 1148,065 MB/sec [Average]
[info]   (min, avg, max) = (1350,074, 1883,370, 2022,406), stdev = 298,149
[info]   CI (99.9%): [735,305, 3031,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   95165,768 ±(99.9%) 57704,793 B/op [Average]
[info]   (min, avg, max) = (68367,061, 95165,768, 102270,520), stdev = 14985,751
[info]   CI (99.9%): [37460,975, 152870,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,104 ±(99.9%) 4,052 B/op [Average]
[info]   (min, avg, max) = (1,053, 2,104, 3,159), stdev = 1,052
[info]   CI (99.9%): [≈ 0, 6,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41,16% complete, ETA 01:18:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5778,468 ops/s
[info] # Warmup Iteration   2: 8704,628 ops/s
[info] # Warmup Iteration   3: 8771,623 ops/s
[info] # Warmup Iteration   4: 8847,181 ops/s
[info] # Warmup Iteration   5: 8775,801 ops/s
[info] Iteration   1: 8847,537 ops/s
[info]                  ·gc.alloc.rate:                   1362,065 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,093 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239099,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,405 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8836,382 ops/s
[info]                  ·gc.alloc.rate:                   1360,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,123 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358898,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,415 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8877,793 ops/s
[info]                  ·gc.alloc.rate:                   1366,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296,086 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,368 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238350,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,690 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8858,349 ops/s
[info]                  ·gc.alloc.rate:                   1363,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     239038,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,698 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8839,075 ops/s
[info]                  ·gc.alloc.rate:               1360,942 MB/sec
[info]                  ·gc.alloc.rate.norm:          242296,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,865 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 239789,716 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8851,827 ±(99.9%) 64,902 ops/s [Average]
[info]   (min, avg, max) = (8836,382, 8851,827, 8877,793), stdev = 16,855
[info]   CI (99.9%): [8786,925, 8916,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1362,795 ±(99.9%) 9,716 MB/sec [Average]
[info]   (min, avg, max) = (1360,431, 1362,795, 1366,624), stdev = 2,523
[info]   CI (99.9%): [1353,080, 1372,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296,055 ±(99.9%) 0,067 B/op [Average]
[info]   (min, avg, max) = (242296,046, 242296,055, 242296,086), stdev = 0,017
[info]   CI (99.9%): [242295,988, 242296,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1479,206 ±(99.9%) 1153,611 MB/sec [Average]
[info]   (min, avg, max) = (1344,093, 1479,206, 2015,123), stdev = 299,589
[info]   CI (99.9%): [325,595, 2632,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   263035,227 ±(99.9%) 206361,625 B/op [Average]
[info]   (min, avg, max) = (238350,299, 263035,227, 358898,212), stdev = 53591,459
[info]   CI (99.9%): [56673,601, 469396,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,442 ±(99.9%) 11,942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,442, 7,415), stdev = 3,101
[info]   CI (99.9%): [≈ 0, 16,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,37% complete, ETA 01:17:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5422,806 ops/s
[info] # Warmup Iteration   2: 9111,175 ops/s
[info] # Warmup Iteration   3: 9244,471 ops/s
[info] # Warmup Iteration   4: 9247,984 ops/s
[info] # Warmup Iteration   5: 9252,271 ops/s
[info] Iteration   1: 9267,068 ops/s
[info]                  ·gc.alloc.rate:                   1335,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229623,439 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,535 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9279,565 ops/s
[info]                  ·gc.alloc.rate:                   1337,549 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229552,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 9302,513 ops/s
[info]                  ·gc.alloc.rate:                   1340,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,323 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     229154,143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,522 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9285,581 ops/s
[info]                  ·gc.alloc.rate:               1338,344 MB/sec
[info]                  ·gc.alloc.rate.norm:          226824,044 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 229742,911 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 9195,828 ops/s
[info]                  ·gc.alloc.rate:                   1325,619 MB/sec
[info]                  ·gc.alloc.rate.norm:              226824,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232136,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,124 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   9266,111 ±(99.9%) 159,066 ops/s [Average]
[info]   (min, avg, max) = (9195,828, 9266,111, 9302,513), stdev = 41,309
[info]   CI (99.9%): [9107,045, 9425,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1335,502 ±(99.9%) 22,407 MB/sec [Average]
[info]   (min, avg, max) = (1325,619, 1335,502, 1340,552), stdev = 5,819
[info]   CI (99.9%): [1313,095, 1357,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226824,045 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (226824,044, 226824,045, 226824,048), stdev = 0,002
[info]   CI (99.9%): [226824,038, 226824,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,425 ±(99.9%) 6,994 MB/sec [Average]
[info]   (min, avg, max) = (1351,928, 1354,425, 1356,667), stdev = 1,816
[info]   CI (99.9%): [1347,430, 1361,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   230041,931 ±(99.9%) 4588,606 B/op [Average]
[info]   (min, avg, max) = (229154,143, 230041,931, 232136,648), stdev = 1191,646
[info]   CI (99.9%): [225453,325, 234630,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4,248 ±(99.9%) 11,433 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,248, 7,124), stdev = 2,969
[info]   CI (99.9%): [≈ 0, 15,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 41,57% complete, ETA 01:17:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161028,234 ops/s
[info] # Warmup Iteration   2: 171852,479 ops/s
[info] # Warmup Iteration   3: 172100,087 ops/s
[info] # Warmup Iteration   4: 171918,532 ops/s
[info] # Warmup Iteration   5: 172051,122 ops/s
[info] Iteration   1: 172078,587 ops/s
[info]                  ·gc.alloc.rate:                   1666,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18477,727 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,381 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 172528,955 ops/s
[info]                  ·gc.alloc.rate:                   1671,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12293,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,570 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 172246,386 ops/s
[info]                  ·gc.alloc.rate:                   1668,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,593 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18490,033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,380 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 171722,080 ops/s
[info]                  ·gc.alloc.rate:               1663,815 MB/sec
[info]                  ·gc.alloc.rate.norm:          15248,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12373,893 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 171890,806 ops/s
[info]                  ·gc.alloc.rate:                   1665,157 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18564,912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,762 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   172093,363 ±(99.9%) 1205,835 ops/s [Average]
[info]   (min, avg, max) = (171722,080, 172093,363, 172528,955), stdev = 313,151
[info]   CI (99.9%): [170887,528, 173299,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1667,257 ±(99.9%) 11,764 MB/sec [Average]
[info]   (min, avg, max) = (1663,815, 1667,257, 1671,579), stdev = 3,055
[info]   CI (99.9%): [1655,493, 1679,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (15248,002, 15248,002, 15248,003), stdev = 0,001
[info]   CI (99.9%): [15248,002, 15248,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1753,779 ±(99.9%) 1423,103 MB/sec [Average]
[info]   (min, avg, max) = (1347,681, 1753,779, 2027,380), stdev = 369,575
[info]   CI (99.9%): [330,676, 3176,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16040,000 ±(99.9%) 13029,387 B/op [Average]
[info]   (min, avg, max) = (12293,436, 16040,000, 18564,912), stdev = 3383,690
[info]   CI (99.9%): [3010,613, 29069,387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,031
[info]   CI (99.9%): [≈ 0, 0,165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,419 ±(99.9%) 1,088 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,419, 0,762), stdev = 0,282
[info]   CI (99.9%): [≈ 0, 1,506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41,77% complete, ETA 01:17:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5045,977 ops/s
[info] # Warmup Iteration   2: 8305,127 ops/s
[info] # Warmup Iteration   3: 8407,006 ops/s
[info] # Warmup Iteration   4: 8403,048 ops/s
[info] # Warmup Iteration   5: 8428,008 ops/s
[info] Iteration   1: 8463,977 ops/s
[info]                  ·gc.alloc.rate:                   1539,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              286240,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     377579,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,741 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8496,775 ops/s
[info]                  ·gc.alloc.rate:                   1545,317 MB/sec
[info]                  ·gc.alloc.rate.norm:              286240,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     250947,592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,856 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8443,915 ops/s
[info]                  ·gc.alloc.rate:                   1535,724 MB/sec
[info]                  ·gc.alloc.rate.norm:              286243,328 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     252708,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,639 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8437,630 ops/s
[info]                  ·gc.alloc.rate:               1534,634 MB/sec
[info]                  ·gc.alloc.rate.norm:          286240,048 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 253074,563 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 8344,442 ops/s
[info]                  ·gc.alloc.rate:                   1517,443 MB/sec
[info]                  ·gc.alloc.rate.norm:              286240,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     384029,811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,926 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   8437,348 ±(99.9%) 218,806 ops/s [Average]
[info]   (min, avg, max) = (8344,442, 8437,348, 8496,775), stdev = 56,823
[info]   CI (99.9%): [8218,542, 8656,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1534,488 ±(99.9%) 40,051 MB/sec [Average]
[info]   (min, avg, max) = (1517,443, 1534,488, 1545,317), stdev = 10,401
[info]   CI (99.9%): [1494,437, 1574,539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286240,704 ±(99.9%) 5,649 B/op [Average]
[info]   (min, avg, max) = (286240,048, 286240,704, 286243,328), stdev = 1,467
[info]   CI (99.9%): [286235,056, 286246,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1626,757 ±(99.9%) 1428,678 MB/sec [Average]
[info]   (min, avg, max) = (1354,785, 1626,757, 2035,855), stdev = 371,023
[info]   CI (99.9%): [198,079, 3055,436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   303667,907 ±(99.9%) 271305,542 B/op [Average]
[info]   (min, avg, max) = (250947,592, 303667,907, 384029,811), stdev = 70457,188
[info]   CI (99.9%): [32362,365, 574973,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5,432 ±(99.9%) 17,017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,432, 11,639), stdev = 4,419
[info]   CI (99.9%): [≈ 0, 22,449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 41,97% complete, ETA 01:17:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6919,496 ops/s
[info] # Warmup Iteration   2: 8891,495 ops/s
[info] # Warmup Iteration   3: 8879,130 ops/s
[info] # Warmup Iteration   4: 8940,962 ops/s
[info] # Warmup Iteration   5: 8931,313 ops/s
[info] Iteration   1: 8864,077 ops/s
[info]                  ·gc.alloc.rate:               1332,000 MB/sec
[info]                  ·gc.alloc.rate.norm:          236504,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,517 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 238904,074 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 8959,658 ops/s
[info]                  ·gc.alloc.rate:                   1346,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              236504,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236403,460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,969 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 8947,269 ops/s
[info]                  ·gc.alloc.rate:                   1344,605 MB/sec
[info]                  ·gc.alloc.rate.norm:              236525,259 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236837,585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,661 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8934,269 ops/s
[info]                  ·gc.alloc.rate:                   1342,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              236528,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237358,090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,333 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8928,977 ops/s
[info]                  ·gc.alloc.rate:                   1341,765 MB/sec
[info]                  ·gc.alloc.rate.norm:              236528,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237752,368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,338 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle":
[info]   8926,850 ±(99.9%) 142,698 ops/s [Average]
[info]   (min, avg, max) = (8864,077, 8926,850, 8959,658), stdev = 37,058
[info]   CI (99.9%): [8784,151, 9069,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1341,492 ±(99.9%) 21,505 MB/sec [Average]
[info]   (min, avg, max) = (1332,000, 1341,492, 1346,314), stdev = 5,585
[info]   CI (99.9%): [1319,987, 1362,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   236517,888 ±(99.9%) 48,855 B/op [Average]
[info]   (min, avg, max) = (236504,046, 236517,888, 236528,046), stdev = 12,688
[info]   CI (99.9%): [236469,033, 236566,744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1346,768 ±(99.9%) 5,116 MB/sec [Average]
[info]   (min, avg, max) = (1345,517, 1346,768, 1348,710), stdev = 1,329
[info]   CI (99.9%): [1341,652, 1351,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   237451,115 ±(99.9%) 3695,664 B/op [Average]
[info]   (min, avg, max) = (236403,460, 237451,115, 238904,074), stdev = 959,752
[info]   CI (99.9%): [233755,451, 241146,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,860 ±(99.9%) 16,066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,860, 10,969), stdev = 4,172
[info]   CI (99.9%): [≈ 0, 21,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42,17% complete, ETA 01:16:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16231,729 ops/s
[info] # Warmup Iteration   2: 21030,135 ops/s
[info] # Warmup Iteration   3: 20962,997 ops/s
[info] # Warmup Iteration   4: 21103,350 ops/s
[info] # Warmup Iteration   5: 21120,635 ops/s
[info] Iteration   1: 21067,577 ops/s
[info]                  ·gc.alloc.rate:               955,985 MB/sec
[info]                  ·gc.alloc.rate.norm:          71416,448 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50209,434 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   2: 21156,219 ops/s
[info]                  ·gc.alloc.rate:                   959,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     99946,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,097 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 21123,188 ops/s
[info]                  ·gc.alloc.rate:               958,369 MB/sec
[info]                  ·gc.alloc.rate.norm:          71408,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50026,723 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 20737,226 ops/s
[info]                  ·gc.alloc.rate:                   940,950 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,883 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101910,486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,580 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 21046,249 ops/s
[info]                  ·gc.alloc.rate:                   954,784 MB/sec
[info]                  ·gc.alloc.rate.norm:              71408,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50207,325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,113 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   21026,092 ±(99.9%) 644,138 ops/s [Average]
[info]   (min, avg, max) = (20737,226, 21026,092, 21156,219), stdev = 167,281
[info]   CI (99.9%): [20381,953, 21670,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   953,995 ±(99.9%) 29,111 MB/sec [Average]
[info]   (min, avg, max) = (940,950, 953,995, 959,888), stdev = 7,560
[info]   CI (99.9%): [924,884, 983,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71409,705 ±(99.9%) 14,514 B/op [Average]
[info]   (min, avg, max) = (71408,019, 71409,705, 71416,448), stdev = 3,769
[info]   CI (99.9%): [71395,192, 71424,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   940,246 ±(99.9%) 1416,441 MB/sec [Average]
[info]   (min, avg, max) = (671,313, 940,246, 1343,516), stdev = 367,845
[info]   CI (99.9%): [≈ 0, 2356,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   70460,187 ±(99.9%) 107134,946 B/op [Average]
[info]   (min, avg, max) = (50026,723, 70460,187, 101910,486), stdev = 27822,605
[info]   CI (99.9%): [≈ 0, 177595,133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,558 ±(99.9%) 5,978 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,558, 3,113), stdev = 1,553
[info]   CI (99.9%): [≈ 0, 7,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 3,000), stdev = 1,225
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,37% complete, ETA 01:16:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17042,554 ops/s
[info] # Warmup Iteration   2: 23995,573 ops/s
[info] # Warmup Iteration   3: 23943,265 ops/s
[info] # Warmup Iteration   4: 24041,810 ops/s
[info] # Warmup Iteration   5: 23939,290 ops/s
[info] Iteration   1: 23951,391 ops/s
[info]                  ·gc.alloc.rate:               1014,914 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,331 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44380,001 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 24002,875 ops/s
[info]                  ·gc.alloc.rate:                   1017,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88658,806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,094 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 24022,250 ops/s
[info]                  ·gc.alloc.rate:               1017,990 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44316,170 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 23951,231 ops/s
[info]                  ·gc.alloc.rate:                   1014,993 MB/sec
[info]                  ·gc.alloc.rate.norm:              66696,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     88938,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,103 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23970,452 ops/s
[info]                  ·gc.alloc.rate:               1015,653 MB/sec
[info]                  ·gc.alloc.rate.norm:          66696,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44456,019 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   23979,640 ±(99.9%) 122,450 ops/s [Average]
[info]   (min, avg, max) = (23951,231, 23979,640, 24022,250), stdev = 31,800
[info]   CI (99.9%): [23857,189, 24102,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1016,142 ±(99.9%) 5,281 MB/sec [Average]
[info]   (min, avg, max) = (1014,914, 1016,142, 1017,990), stdev = 1,371
[info]   CI (99.9%): [1010,861, 1021,424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696,018 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (66696,017, 66696,018, 66696,018), stdev = 0,001
[info]   CI (99.9%): [66696,015, 66696,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,863 ±(99.9%) 1426,929 MB/sec [Average]
[info]   (min, avg, max) = (675,331, 946,863, 1353,488), stdev = 370,569
[info]   CI (99.9%): [≈ 0, 2373,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   62149,956 ±(99.9%) 93675,393 B/op [Average]
[info]   (min, avg, max) = (44316,170, 62149,956, 88938,783), stdev = 24327,202
[info]   CI (99.9%): [≈ 0, 155825,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,640 ±(99.9%) 8,645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,640, 4,103), stdev = 2,245
[info]   CI (99.9%): [≈ 0, 10,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42,57% complete, ETA 01:16:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 468440,774 ops/s
[info] # Warmup Iteration   2: 498812,054 ops/s
[info] # Warmup Iteration   3: 501315,722 ops/s
[info] # Warmup Iteration   4: 483126,773 ops/s
[info] # Warmup Iteration   5: 475044,442 ops/s
[info] Iteration   1: 473781,390 ops/s
[info]                  ·gc.alloc.rate:                   1074,033 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4476,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,277 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 476144,919 ops/s
[info]                  ·gc.alloc.rate:               1079,417 MB/sec
[info]                  ·gc.alloc.rate.norm:          3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2225,935 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 475466,602 ops/s
[info]                  ·gc.alloc.rate:                   1077,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4458,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,276 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 475518,256 ops/s
[info]                  ·gc.alloc.rate:                   1078,072 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4457,691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 473278,628 ops/s
[info]                  ·gc.alloc.rate:               1072,857 MB/sec
[info]                  ·gc.alloc.rate.norm:          3568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2240,594 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   474837,959 ±(99.9%) 4760,644 ops/s [Average]
[info]   (min, avg, max) = (473278,628, 474837,959, 476144,919), stdev = 1236,324
[info]   CI (99.9%): [470077,315, 479598,603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1076,436 ±(99.9%) 10,894 MB/sec [Average]
[info]   (min, avg, max) = (1072,857, 1076,436, 1079,417), stdev = 2,829
[info]   CI (99.9%): [1065,543, 1087,330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3568,001, 3568,001, 3568,001), stdev = 0,001
[info]   CI (99.9%): [3568,001, 3568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1077,631 ±(99.9%) 1420,355 MB/sec [Average]
[info]   (min, avg, max) = (673,405, 1077,631, 1347,441), stdev = 368,862
[info]   CI (99.9%): [≈ 0, 2497,987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3571,730 ±(99.9%) 4705,027 B/op [Average]
[info]   (min, avg, max) = (2225,935, 3571,730, 4476,281), stdev = 1221,881
[info]   CI (99.9%): [≈ 0, 8276,757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,138 ±(99.9%) 0,532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,138, 0,277), stdev = 0,138
[info]   CI (99.9%): [≈ 0, 0,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 42,77% complete, ETA 01:16:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 517949,517 ops/s
[info] # Warmup Iteration   2: 544231,698 ops/s
[info] # Warmup Iteration   3: 542699,059 ops/s
[info] # Warmup Iteration   4: 541718,337 ops/s
[info] # Warmup Iteration   5: 541093,760 ops/s
[info] Iteration   1: 541928,136 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 544032,114 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 543653,903 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 542833,946 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 541956,652 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   542880,950 ±(99.9%) 3696,932 ops/s [Average]
[info]   (min, avg, max) = (541928,136, 542880,950, 544032,114), stdev = 960,081
[info]   CI (99.9%): [539184,018, 546577,882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42,97% complete, ETA 01:15:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17017,383 ops/s
[info] # Warmup Iteration   2: 22181,092 ops/s
[info] # Warmup Iteration   3: 22190,026 ops/s
[info] # Warmup Iteration   4: 22124,094 ops/s
[info] # Warmup Iteration   5: 22122,979 ops/s
[info] Iteration   1: 22008,740 ops/s
[info]                  ·gc.alloc.rate:                   1014,850 MB/sec
[info]                  ·gc.alloc.rate.norm:              72575,281 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95926,962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,488 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 22154,204 ops/s
[info]                  ·gc.alloc.rate:                   1021,621 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47604,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,479 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 22118,321 ops/s
[info]                  ·gc.alloc.rate:                   1020,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95359,560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,481 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 21965,011 ops/s
[info]                  ·gc.alloc.rate:               1013,044 MB/sec
[info]                  ·gc.alloc.rate.norm:          72576,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48016,180 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 21841,830 ops/s
[info]                  ·gc.alloc.rate:                   1007,058 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     96564,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,499 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   22017,621 ±(99.9%) 481,502 ops/s [Average]
[info]   (min, avg, max) = (21841,830, 22017,621, 22154,204), stdev = 125,044
[info]   CI (99.9%): [21536,120, 22499,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1015,341 ±(99.9%) 22,494 MB/sec [Average]
[info]   (min, avg, max) = (1007,058, 1015,341, 1021,621), stdev = 5,842
[info]   CI (99.9%): [992,847, 1037,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72575,872 ±(99.9%) 1,271 B/op [Average]
[info]   (min, avg, max) = (72575,281, 72575,872, 72576,020), stdev = 0,330
[info]   CI (99.9%): [72574,601, 72577,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1072,403 ±(99.9%) 1413,913 MB/sec [Average]
[info]   (min, avg, max) = (670,107, 1072,403, 1341,386), stdev = 367,189
[info]   CI (99.9%): [≈ 0, 2486,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76694,277 ±(99.9%) 101545,967 B/op [Average]
[info]   (min, avg, max) = (47604,470, 76694,277, 96564,212), stdev = 26371,165
[info]   CI (99.9%): [≈ 0, 178240,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,790 ±(99.9%) 6,336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,790, 4,499), stdev = 1,645
[info]   CI (99.9%): [≈ 0, 8,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 43,17% complete, ETA 01:15:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11028,149 ops/s
[info] # Warmup Iteration   2: 12131,293 ops/s
[info] # Warmup Iteration   3: 12203,534 ops/s
[info] # Warmup Iteration   4: 12063,652 ops/s
[info] # Warmup Iteration   5: 12237,336 ops/s
[info] Iteration   1: 12234,835 ops/s
[info]                  ·gc.alloc.rate:                   662,087 MB/sec
[info]                  ·gc.alloc.rate.norm:              85192,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86888,622 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 367,266 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 12236,600 ops/s
[info]                  ·gc.alloc.rate:                   662,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              85192,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86874,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,032 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 12248,380 ops/s
[info]                  ·gc.alloc.rate:               662,982 MB/sec
[info]                  ·gc.alloc.rate.norm:          85192,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,414 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86532,555 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 12237,225 ops/s
[info]                  ·gc.alloc.rate:               662,307 MB/sec
[info]                  ·gc.alloc.rate.norm:          85192,042 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86603,246 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 12238,843 ops/s
[info]                  ·gc.alloc.rate:                   662,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              85192,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,613 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86510,518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,677 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle":
[info]   12239,176 ±(99.9%) 20,567 ops/s [Average]
[info]   (min, avg, max) = (12234,835, 12239,176, 12248,380), stdev = 5,341
[info]   CI (99.9%): [12218,610, 12259,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   662,416 ±(99.9%) 1,289 MB/sec [Average]
[info]   (min, avg, max) = (662,087, 662,416, 662,982), stdev = 0,335
[info]   CI (99.9%): [661,127, 663,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   85192,037 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (85192,033, 85192,037, 85192,042), stdev = 0,004
[info]   CI (99.9%): [85192,023, 85192,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   674,000 ±(99.9%) 4,883 MB/sec [Average]
[info]   (min, avg, max) = (672,613, 674,000, 675,423), stdev = 1,268
[info]   CI (99.9%): [669,117, 678,883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   86681,873 ±(99.9%) 714,347 B/op [Average]
[info]   (min, avg, max) = (86510,518, 86681,873, 86888,622), stdev = 185,514
[info]   CI (99.9%): [85967,526, 87396,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,588 ±(99.9%) 4,880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,588, 2,854), stdev = 1,267
[info]   CI (99.9%): [≈ 0, 5,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   75,595 ±(99.9%) 627,971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 75,595, 367,266), stdev = 163,082
[info]   CI (99.9%): [≈ 0, 703,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 43,37% complete, ETA 01:15:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11672,920 ops/s
[info] # Warmup Iteration   2: 15069,544 ops/s
[info] # Warmup Iteration   3: 15075,341 ops/s
[info] # Warmup Iteration   4: 15150,210 ops/s
[info] # Warmup Iteration   5: 15053,545 ops/s
[info] Iteration   1: 15129,508 ops/s
[info]                  ·gc.alloc.rate:                   1519,853 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139690,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,496 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 14958,382 ops/s
[info]                  ·gc.alloc.rate:                   1502,663 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141426,706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,760 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 14936,816 ops/s
[info]                  ·gc.alloc.rate:               1500,527 MB/sec
[info]                  ·gc.alloc.rate.norm:          158112,062 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2017,762 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 212613,680 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 15115,430 ops/s
[info]                  ·gc.alloc.rate:                   1518,591 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     140235,510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,335 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15137,448 ops/s
[info]                  ·gc.alloc.rate:               1520,582 MB/sec
[info]                  ·gc.alloc.rate.norm:          158112,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 140160,997 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   15055,517 ±(99.9%) 381,691 ops/s [Average]
[info]   (min, avg, max) = (14936,816, 15055,517, 15137,448), stdev = 99,124
[info]   CI (99.9%): [14673,826, 15437,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1512,443 ±(99.9%) 38,342 MB/sec [Average]
[info]   (min, avg, max) = (1500,527, 1512,443, 1520,582), stdev = 9,957
[info]   CI (99.9%): [1474,102, 1550,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158112,036 ±(99.9%) 0,058 B/op [Average]
[info]   (min, avg, max) = (158112,027, 158112,036, 158112,062), stdev = 0,015
[info]   CI (99.9%): [158111,978, 158112,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1479,893 ±(99.9%) 1157,833 MB/sec [Average]
[info]   (min, avg, max) = (1342,771, 1479,893, 2017,762), stdev = 300,686
[info]   CI (99.9%): [322,060, 2637,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   154825,384 ±(99.9%) 124418,103 B/op [Average]
[info]   (min, avg, max) = (139690,029, 154825,384, 212613,680), stdev = 32310,986
[info]   CI (99.9%): [30407,281, 279243,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,918 ±(99.9%) 15,033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,918, 8,760), stdev = 3,904
[info]   CI (99.9%): [≈ 0, 18,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,57% complete, ETA 01:14:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9731,424 ops/s
[info] # Warmup Iteration   2: 15814,578 ops/s
[info] # Warmup Iteration   3: 15694,924 ops/s
[info] # Warmup Iteration   4: 15820,223 ops/s
[info] # Warmup Iteration   5: 15729,976 ops/s
[info] Iteration   1: 15797,416 ops/s
[info]                  ·gc.alloc.rate:               1445,750 MB/sec
[info]                  ·gc.alloc.rate.norm:          144048,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134779,942 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 15860,216 ops/s
[info]                  ·gc.alloc.rate:               1451,606 MB/sec
[info]                  ·gc.alloc.rate.norm:          144048,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,233 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 134385,363 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 15730,492 ops/s
[info]                  ·gc.alloc.rate:                   1439,259 MB/sec
[info]                  ·gc.alloc.rate.norm:              144027,288 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     135562,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,166 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15866,878 ops/s
[info]                  ·gc.alloc.rate:                   1451,948 MB/sec
[info]                  ·gc.alloc.rate.norm:              144016,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134515,830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,065 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15822,874 ops/s
[info]                  ·gc.alloc.rate:                   1447,828 MB/sec
[info]                  ·gc.alloc.rate.norm:              144016,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134956,044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,070 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   15815,575 ±(99.9%) 213,068 ops/s [Average]
[info]   (min, avg, max) = (15730,492, 15815,575, 15866,878), stdev = 55,333
[info]   CI (99.9%): [15602,507, 16028,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1447,278 ±(99.9%) 19,960 MB/sec [Average]
[info]   (min, avg, max) = (1439,259, 1447,278, 1451,948), stdev = 5,183
[info]   CI (99.9%): [1427,319, 1467,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144031,081 ±(99.9%) 62,161 B/op [Average]
[info]   (min, avg, max) = (144016,026, 144031,081, 144048,036), stdev = 16,143
[info]   CI (99.9%): [143968,920, 144093,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,910 ±(99.9%) 6,154 MB/sec [Average]
[info]   (min, avg, max) = (1352,731, 1354,910, 1356,746), stdev = 1,598
[info]   CI (99.9%): [1348,755, 1361,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   134839,920 ±(99.9%) 1775,840 B/op [Average]
[info]   (min, avg, max) = (134385,363, 134839,920, 135562,422), stdev = 461,180
[info]   CI (99.9%): [133064,080, 136615,760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,660 ±(99.9%) 6,703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,660, 4,166), stdev = 1,741
[info]   CI (99.9%): [≈ 0, 8,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43,78% complete, ETA 01:14:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261062,614 ops/s
[info] # Warmup Iteration   2: 274422,588 ops/s
[info] # Warmup Iteration   3: 274152,956 ops/s
[info] # Warmup Iteration   4: 275292,122 ops/s
[info] # Warmup Iteration   5: 275611,907 ops/s
[info] Iteration   1: 275508,289 ops/s
[info]                  ·gc.alloc.rate:                   1593,568 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7678,642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 276260,045 ops/s
[info]                  ·gc.alloc.rate:                   1598,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,858 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11495,164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,474 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 273171,916 ops/s
[info]                  ·gc.alloc.rate:                   1580,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7759,782 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,240 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 275330,266 ops/s
[info]                  ·gc.alloc.rate:                   1592,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7706,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 275358,948 ops/s
[info]                  ·gc.alloc.rate:                   1592,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11573,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,238 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   275125,893 ±(99.9%) 4451,883 ops/s [Average]
[info]   (min, avg, max) = (273171,916, 275125,893, 276260,045), stdev = 1156,140
[info]   CI (99.9%): [270674,010, 279577,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1591,406 ±(99.9%) 25,883 MB/sec [Average]
[info]   (min, avg, max) = (1580,090, 1591,406, 1598,114), stdev = 6,722
[info]   CI (99.9%): [1565,523, 1617,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9104,001, 9104,002, 9104,002), stdev = 0,001
[info]   CI (99.9%): [9104,001, 9104,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1616,317 ±(99.9%) 1423,551 MB/sec [Average]
[info]   (min, avg, max) = (1344,073, 1616,317, 2024,706), stdev = 369,692
[info]   CI (99.9%): [192,766, 3039,868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9242,806 ±(99.9%) 8057,302 B/op [Average]
[info]   (min, avg, max) = (7678,642, 9242,806, 11573,939), stdev = 2092,456
[info]   CI (99.9%): [1185,505, 17300,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,286 ±(99.9%) 0,406 B/op [Average]
[info]   (min, avg, max) = (0,238, 0,286, 0,474), stdev = 0,106
[info]   CI (99.9%): [≈ 0, 0,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 43,98% complete, ETA 01:14:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6844,435 ops/s
[info] # Warmup Iteration   2: 12997,628 ops/s
[info] # Warmup Iteration   3: 13155,972 ops/s
[info] # Warmup Iteration   4: 13115,838 ops/s
[info] # Warmup Iteration   5: 13165,806 ops/s
[info] Iteration   1: 13179,085 ops/s
[info]                  ·gc.alloc.rate:                   1674,775 MB/sec
[info]                  ·gc.alloc.rate.norm:              199992,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,560 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242358,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,457 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 13243,435 ops/s
[info]                  ·gc.alloc.rate:                   1682,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              199992,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160935,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,474 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13223,938 ops/s
[info]                  ·gc.alloc.rate:                   1680,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              199992,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,494 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161325,483 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,477 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 13198,942 ops/s
[info]                  ·gc.alloc.rate:                   1677,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              199992,039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,156 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     242645,030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,482 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 13155,341 ops/s
[info]                  ·gc.alloc.rate:               1671,549 MB/sec
[info]                  ·gc.alloc.rate.norm:          199992,031 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,440 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 162410,540 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   13200,148 ±(99.9%) 134,669 ops/s [Average]
[info]   (min, avg, max) = (13155,341, 13200,148, 13243,435), stdev = 34,973
[info]   CI (99.9%): [13065,479, 13334,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1677,405 ±(99.9%) 17,265 MB/sec [Average]
[info]   (min, avg, max) = (1671,549, 1677,405, 1682,915), stdev = 4,484
[info]   CI (99.9%): [1660,141, 1694,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   199992,033 ±(99.9%) 0,013 B/op [Average]
[info]   (min, avg, max) = (199992,031, 199992,033, 199992,039), stdev = 0,003
[info]   CI (99.9%): [199992,020, 199992,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1626,382 ±(99.9%) 1427,090 MB/sec [Average]
[info]   (min, avg, max) = (1354,260, 1626,382, 2035,156), stdev = 370,611
[info]   CI (99.9%): [199,292, 3053,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   193935,046 ±(99.9%) 170731,849 B/op [Average]
[info]   (min, avg, max) = (160935,755, 193935,046, 242645,030), stdev = 44338,519
[info]   CI (99.9%): [23203,196, 364666,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,978 ±(99.9%) 10,489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,978, 7,457), stdev = 2,724
[info]   CI (99.9%): [≈ 0, 13,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 44,18% complete, ETA 01:14:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10862,470 ops/s
[info] # Warmup Iteration   2: 15274,362 ops/s
[info] # Warmup Iteration   3: 15290,140 ops/s
[info] # Warmup Iteration   4: 15454,178 ops/s
[info] # Warmup Iteration   5: 15442,177 ops/s
[info] Iteration   1: 15455,302 ops/s
[info]                  ·gc.alloc.rate:                   1458,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              148536,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     136888,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 15300,160 ops/s
[info]                  ·gc.alloc.rate:                   1443,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              148536,036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     207412,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,283 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 15436,542 ops/s
[info]                  ·gc.alloc.rate:                   1456,488 MB/sec
[info]                  ·gc.alloc.rate.norm:              148522,093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137116,253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15464,058 ops/s
[info]                  ·gc.alloc.rate:                   1459,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              148512,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,154 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137003,627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 15467,837 ops/s
[info]                  ·gc.alloc.rate:               1459,398 MB/sec
[info]                  ·gc.alloc.rate.norm:          148512,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,378 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 137112,614 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle":
[info]   15424,780 ±(99.9%) 272,260 ops/s [Average]
[info]   (min, avg, max) = (15300,160, 15424,780, 15467,837), stdev = 70,705
[info]   CI (99.9%): [15152,520, 15697,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1455,529 ±(99.9%) 25,246 MB/sec [Average]
[info]   (min, avg, max) = (1443,985, 1455,529, 1459,398), stdev = 6,556
[info]   CI (99.9%): [1430,282, 1480,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   148523,642 ±(99.9%) 46,339 B/op [Average]
[info]   (min, avg, max) = (148512,026, 148523,642, 148536,036), stdev = 12,034
[info]   CI (99.9%): [148477,303, 148569,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1479,738 ±(99.9%) 1155,113 MB/sec [Average]
[info]   (min, avg, max) = (1344,171, 1479,738, 2016,353), stdev = 299,979
[info]   CI (99.9%): [324,625, 2634,851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   151106,829 ±(99.9%) 121203,589 B/op [Average]
[info]   (min, avg, max) = (136888,755, 151106,829, 207412,896), stdev = 31476,187
[info]   CI (99.9%): [29903,240, 272310,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,129 ±(99.9%) 5,830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,129, 4,283), stdev = 1,514
[info]   CI (99.9%): [≈ 0, 7,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44,38% complete, ETA 01:13:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25390,331 ops/s
[info] # Warmup Iteration   2: 32576,527 ops/s
[info] # Warmup Iteration   3: 32511,910 ops/s
[info] # Warmup Iteration   4: 32709,172 ops/s
[info] # Warmup Iteration   5: 32564,054 ops/s
[info] Iteration   1: 32862,288 ops/s
[info]                  ·gc.alloc.rate:                   1134,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64347,627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,994 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 32847,819 ops/s
[info]                  ·gc.alloc.rate:               1133,556 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,459 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32171,565 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 32734,505 ops/s
[info]                  ·gc.alloc.rate:                   1129,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              54312,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64561,256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 32801,899 ops/s
[info]                  ·gc.alloc.rate:               1132,042 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64429,418 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 32719,469 ops/s
[info]                  ·gc.alloc.rate:               1129,212 MB/sec
[info]                  ·gc.alloc.rate.norm:          54312,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,295 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64656,900 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   32793,196 ±(99.9%) 248,906 ops/s [Average]
[info]   (min, avg, max) = (32719,469, 32793,196, 32862,288), stdev = 64,640
[info]   CI (99.9%): [32544,290, 33042,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1131,685 ±(99.9%) 8,690 MB/sec [Average]
[info]   (min, avg, max) = (1129,212, 1131,685, 1134,108), stdev = 2,257
[info]   CI (99.9%): [1122,995, 1140,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   54312,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (54312,012, 54312,013, 54312,013), stdev = 0,001
[info]   CI (99.9%): [54312,011, 54312,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1208,999 ±(99.9%) 1157,098 MB/sec [Average]
[info]   (min, avg, max) = (671,459, 1208,999, 1344,295), stdev = 300,495
[info]   CI (99.9%): [51,901, 2366,097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   58033,353 ±(99.9%) 55671,332 B/op [Average]
[info]   (min, avg, max) = (32171,565, 58033,353, 64656,900), stdev = 14457,668
[info]   CI (99.9%): [2362,022, 113704,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,799 ±(99.9%) 4,213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,799, 2,002), stdev = 1,094
[info]   CI (99.9%): [≈ 0, 5,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,58% complete, ETA 01:13:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 59973,791 ops/s
[info] # Warmup Iteration   2: 81277,831 ops/s
[info] # Warmup Iteration   3: 81337,441 ops/s
[info] # Warmup Iteration   4: 81701,650 ops/s
[info] # Warmup Iteration   5: 81726,281 ops/s
[info] Iteration   1: 81741,473 ops/s
[info]                  ·gc.alloc.rate:                   1301,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26040,625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,802 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 81267,146 ops/s
[info]                  ·gc.alloc.rate:                   1293,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26214,077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,806 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 81539,151 ops/s
[info]                  ·gc.alloc.rate:                   1298,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26143,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,205 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 81864,057 ops/s
[info]                  ·gc.alloc.rate:                   1303,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,422 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26059,452 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,400 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 81984,658 ops/s
[info]                  ·gc.alloc.rate:               1304,989 MB/sec
[info]                  ·gc.alloc.rate.norm:          25056,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,264 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26040,498 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   81679,297 ±(99.9%) 1090,413 ops/s [Average]
[info]   (min, avg, max) = (81267,146, 81679,297, 81984,658), stdev = 283,177
[info]   CI (99.9%): [80588,884, 82769,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1300,282 ±(99.9%) 17,025 MB/sec [Average]
[info]   (min, avg, max) = (1293,859, 1300,282, 1304,989), stdev = 4,421
[info]   CI (99.9%): [1283,257, 1317,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (25056,005, 25056,005, 25056,005), stdev = 0,001
[info]   CI (99.9%): [25056,004, 25056,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,432 ±(99.9%) 5,752 MB/sec [Average]
[info]   (min, avg, max) = (1352,434, 1354,432, 1356,264), stdev = 1,494
[info]   CI (99.9%): [1348,680, 1360,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   26099,668 ±(99.9%) 295,973 B/op [Average]
[info]   (min, avg, max) = (26040,498, 26099,668, 26214,077), stdev = 76,863
[info]   CI (99.9%): [25803,695, 26395,642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,643 ±(99.9%) 1,765 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 1,205), stdev = 0,458
[info]   CI (99.9%): [≈ 0, 2,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44,78% complete, ETA 01:13:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 717545,477 ops/s
[info] # Warmup Iteration   2: 752618,874 ops/s
[info] # Warmup Iteration   3: 761856,546 ops/s
[info] # Warmup Iteration   4: 764345,251 ops/s
[info] # Warmup Iteration   5: 761234,910 ops/s
[info] Iteration   1: 762449,921 ops/s
[info]                  ·gc.alloc.rate:               1046,341 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1388,715 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 762941,387 ops/s
[info]                  ·gc.alloc.rate:                   1047,168 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,410 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2773,124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,086 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 762869,945 ops/s
[info]                  ·gc.alloc.rate:               1046,913 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1386,571 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 760226,417 ops/s
[info]                  ·gc.alloc.rate:                   1043,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2782,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,129 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 760700,960 ops/s
[info]                  ·gc.alloc.rate:               1043,881 MB/sec
[info]                  ·gc.alloc.rate.norm:          2160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2782,447 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   761837,726 ±(99.9%) 4926,297 ops/s [Average]
[info]   (min, avg, max) = (760226,417, 761837,726, 762941,387), stdev = 1279,344
[info]   CI (99.9%): [756911,429, 766764,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1045,537 ±(99.9%) 6,830 MB/sec [Average]
[info]   (min, avg, max) = (1043,382, 1045,537, 1047,168), stdev = 1,774
[info]   CI (99.9%): [1038,707, 1052,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2160,001, 2160,001, 2160,001), stdev = 0,001
[info]   CI (99.9%): [2160,000, 2160,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,615 ±(99.9%) 1417,422 MB/sec [Average]
[info]   (min, avg, max) = (672,046, 1075,615, 1344,696), stdev = 368,100
[info]   CI (99.9%): [≈ 0, 2493,037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2222,723 ±(99.9%) 2935,464 B/op [Average]
[info]   (min, avg, max) = (1386,571, 2222,723, 2782,759), stdev = 762,331
[info]   CI (99.9%): [≈ 0, 5158,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,043 ±(99.9%) 0,234 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,043, 0,129), stdev = 0,061
[info]   CI (99.9%): [≈ 0, 0,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 44,98% complete, ETA 01:13:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 819106,353 ops/s
[info] # Warmup Iteration   2: 855328,757 ops/s
[info] # Warmup Iteration   3: 852177,230 ops/s
[info] # Warmup Iteration   4: 853856,447 ops/s
[info] # Warmup Iteration   5: 851143,326 ops/s
[info] Iteration   1: 852278,869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 855832,010 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 854772,790 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 852336,337 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 853523,516 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   853748,705 ±(99.9%) 5963,783 ops/s [Average]
[info]   (min, avg, max) = (852278,869, 853748,705, 855832,010), stdev = 1548,775
[info]   CI (99.9%): [847784,922, 859712,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45,18% complete, ETA 01:12:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54051,708 ops/s
[info] # Warmup Iteration   2: 82586,500 ops/s
[info] # Warmup Iteration   3: 82754,615 ops/s
[info] # Warmup Iteration   4: 83073,106 ops/s
[info] # Warmup Iteration   5: 81995,936 ops/s
[info] Iteration   1: 81981,107 ops/s
[info]                  ·gc.alloc.rate:               1448,006 MB/sec
[info]                  ·gc.alloc.rate.norm:          27800,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25958,333 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 82898,903 ops/s
[info]                  ·gc.alloc.rate:               1464,252 MB/sec
[info]                  ·gc.alloc.rate.norm:          27800,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,542 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25698,098 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 82882,895 ops/s
[info]                  ·gc.alloc.rate:                   1463,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              27800,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25726,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 82860,448 ops/s
[info]                  ·gc.alloc.rate:                   1463,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              27800,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38627,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,791 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 82609,290 ops/s
[info]                  ·gc.alloc.rate:                   1459,016 MB/sec
[info]                  ·gc.alloc.rate.norm:              27800,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25851,126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,397 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   82646,529 ±(99.9%) 1503,103 ops/s [Average]
[info]   (min, avg, max) = (81981,107, 82646,529, 82898,903), stdev = 390,351
[info]   CI (99.9%): [81143,425, 84149,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1459,761 ±(99.9%) 26,609 MB/sec [Average]
[info]   (min, avg, max) = (1448,006, 1459,761, 1464,252), stdev = 6,910
[info]   CI (99.9%): [1433,152, 1486,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   27800,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27800,005, 27800,005, 27800,005), stdev = 0,001
[info]   CI (99.9%): [27800,004, 27800,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,153 ±(99.9%) 1170,057 MB/sec [Average]
[info]   (min, avg, max) = (1352,080, 1490,153, 2033,706), stdev = 303,860
[info]   CI (99.9%): [320,096, 2660,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   28372,334 ±(99.9%) 22078,898 B/op [Average]
[info]   (min, avg, max) = (25698,098, 28372,334, 38627,619), stdev = 5733,820
[info]   CI (99.9%): [6293,436, 50451,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,317 ±(99.9%) 1,274 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,317, 0,791), stdev = 0,331
[info]   CI (99.9%): [≈ 0, 1,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 45,38% complete, ETA 01:12:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18295,647 ops/s
[info] # Warmup Iteration   2: 19399,171 ops/s
[info] # Warmup Iteration   3: 19542,941 ops/s
[info] # Warmup Iteration   4: 19463,641 ops/s
[info] # Warmup Iteration   5: 19491,446 ops/s
[info] Iteration   1: 19391,809 ops/s
[info]                  ·gc.alloc.rate:                   428,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41517,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,209 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 19440,013 ops/s
[info]                  ·gc.alloc.rate:               429,850 MB/sec
[info]                  ·gc.alloc.rate.norm:          34800,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 41414,573 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 19559,320 ops/s
[info]                  ·gc.alloc.rate:      432,434 MB/sec
[info]                  ·gc.alloc.rate.norm: 34800,022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 19500,581 ops/s
[info]                  ·gc.alloc.rate:                   431,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              34800,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54455,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 257,382 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 19506,243 ops/s
[info]                  ·gc.alloc.rate:      431,253 MB/sec
[info]                  ·gc.alloc.rate.norm: 34800,021 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle":
[info]   19479,593 ±(99.9%) 249,399 ops/s [Average]
[info]   (min, avg, max) = (19391,809, 19479,593, 19559,320), stdev = 64,768
[info]   CI (99.9%): [19230,194, 19728,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   430,697 ±(99.9%) 5,480 MB/sec [Average]
[info]   (min, avg, max) = (428,747, 430,697, 432,434), stdev = 1,423
[info]   CI (99.9%): [425,217, 436,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34800,023 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (34800,021, 34800,023, 34800,026), stdev = 0,002
[info]   CI (99.9%): [34800,015, 34800,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   339,560 ±(99.9%) 1220,869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,560, 674,746), stdev = 317,056
[info]   CI (99.9%): [≈ 0, 1560,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27477,411 ±(99.9%) 98722,009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27477,411, 54455,423), stdev = 25637,792
[info]   CI (99.9%): [≈ 0, 126199,419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,648 ±(99.9%) 5,470 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,648, 3,189), stdev = 1,421
[info]   CI (99.9%): [≈ 0, 6,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   52,318 ±(99.9%) 441,470 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52,318, 257,382), stdev = 114,648
[info]   CI (99.9%): [≈ 0, 493,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45,58% complete, ETA 01:12:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12174,592 ops/s
[info] # Warmup Iteration   2: 21298,534 ops/s
[info] # Warmup Iteration   3: 21223,406 ops/s
[info] # Warmup Iteration   4: 21324,681 ops/s
[info] # Warmup Iteration   5: 21206,650 ops/s
[info] Iteration   1: 21340,821 ops/s
[info]                  ·gc.alloc.rate:               799,503 MB/sec
[info]                  ·gc.alloc.rate.norm:          58967,282 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,686 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49761,430 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 21347,875 ops/s
[info]                  ·gc.alloc.rate:                   799,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49597,797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 21436,146 ops/s
[info]                  ·gc.alloc.rate:               803,163 MB/sec
[info]                  ·gc.alloc.rate.norm:          58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49396,537 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 21431,991 ops/s
[info]                  ·gc.alloc.rate:               802,967 MB/sec
[info]                  ·gc.alloc.rate.norm:          58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,060 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49354,536 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 21415,463 ops/s
[info]                  ·gc.alloc.rate:                   802,421 MB/sec
[info]                  ·gc.alloc.rate.norm:              58968,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49393,706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,060 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   21394,459 ±(99.9%) 178,907 ops/s [Average]
[info]   (min, avg, max) = (21340,821, 21394,459, 21436,146), stdev = 46,462
[info]   CI (99.9%): [21215,552, 21573,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   801,565 ±(99.9%) 6,868 MB/sec [Average]
[info]   (min, avg, max) = (799,503, 801,565, 803,163), stdev = 1,784
[info]   CI (99.9%): [794,697, 808,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   58967,872 ±(99.9%) 1,271 B/op [Average]
[info]   (min, avg, max) = (58967,282, 58967,872, 58968,021), stdev = 0,330
[info]   CI (99.9%): [58966,601, 58969,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   672,873 ±(99.9%) 4,098 MB/sec [Average]
[info]   (min, avg, max) = (672,060, 672,873, 674,686), stdev = 1,064
[info]   CI (99.9%): [668,775, 676,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   49500,801 ±(99.9%) 669,917 B/op [Average]
[info]   (min, avg, max) = (49354,536, 49500,801, 49761,430), stdev = 173,975
[info]   CI (99.9%): [48830,885, 50170,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,226 ±(99.9%) 6,463 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,226, 3,069), stdev = 1,678
[info]   CI (99.9%): [≈ 0, 7,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,78% complete, ETA 01:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10311,890 ops/s
[info] # Warmup Iteration   2: 21605,151 ops/s
[info] # Warmup Iteration   3: 21322,265 ops/s
[info] # Warmup Iteration   4: 21521,306 ops/s
[info] # Warmup Iteration   5: 21589,002 ops/s
[info] Iteration   1: 21568,435 ops/s
[info]                  ·gc.alloc.rate:                   603,657 MB/sec
[info]                  ·gc.alloc.rate.norm:              44049,290 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49211,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 21561,180 ops/s
[info]                  ·gc.alloc.rate:                   603,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              44048,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49229,491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,039 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 21654,106 ops/s
[info]                  ·gc.alloc.rate:               606,003 MB/sec
[info]                  ·gc.alloc.rate.norm:          44048,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,349 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 49088,461 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 21575,937 ops/s
[info]                  ·gc.alloc.rate:      603,863 MB/sec
[info]                  ·gc.alloc.rate.norm: 44048,020 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 21578,462 ops/s
[info]                  ·gc.alloc.rate:                   603,826 MB/sec
[info]                  ·gc.alloc.rate.norm:              44048,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49259,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,518 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   21587,624 ±(99.9%) 145,460 ops/s [Average]
[info]   (min, avg, max) = (21561,180, 21587,624, 21654,106), stdev = 37,775
[info]   CI (99.9%): [21442,164, 21733,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   604,151 ±(99.9%) 4,047 MB/sec [Average]
[info]   (min, avg, max) = (603,407, 604,151, 606,003), stdev = 1,051
[info]   CI (99.9%): [600,104, 608,198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44048,274 ±(99.9%) 2,188 B/op [Average]
[info]   (min, avg, max) = (44048,019, 44048,274, 44049,290), stdev = 0,568
[info]   CI (99.9%): [44046,086, 44050,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,879 ±(99.9%) 1162,131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,879, 675,349), stdev = 301,802
[info]   CI (99.9%): [≈ 0, 1702,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   39357,643 ±(99.9%) 84720,662 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 39357,643, 49259,025), stdev = 22001,687
[info]   CI (99.9%): [≈ 0, 124078,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,126 ±(99.9%) 9,787 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,126, 6,075), stdev = 2,542
[info]   CI (99.9%): [≈ 0, 11,914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45,98% complete, ETA 01:11:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110896,710 ops/s
[info] # Warmup Iteration   2: 115231,071 ops/s
[info] # Warmup Iteration   3: 115863,076 ops/s
[info] # Warmup Iteration   4: 115389,504 ops/s
[info] # Warmup Iteration   5: 116060,342 ops/s
[info] Iteration   1: 115702,913 ops/s
[info]                  ·gc.alloc.rate:               290,471 MB/sec
[info]                  ·gc.alloc.rate.norm:          3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,442 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6958,433 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 115939,616 ops/s
[info]                  ·gc.alloc.rate:               291,125 MB/sec
[info]                  ·gc.alloc.rate.norm:          3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6945,050 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 116249,518 ops/s
[info]                  ·gc.alloc.rate:      291,897 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 115146,577 ops/s
[info]                  ·gc.alloc.rate:                   289,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              3952,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,553 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6992,206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 115970,745 ops/s
[info]                  ·gc.alloc.rate:      291,211 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   115801,874 ±(99.9%) 1595,908 ops/s [Average]
[info]   (min, avg, max) = (115146,577, 115801,874, 116249,518), stdev = 414,452
[info]   CI (99.9%): [114205,966, 117397,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   290,767 ±(99.9%) 4,024 MB/sec [Average]
[info]   (min, avg, max) = (289,130, 290,767, 291,897), stdev = 1,045
[info]   CI (99.9%): [286,743, 294,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3952,004, 3952,004, 3952,004), stdev = 0,001
[info]   CI (99.9%): [3952,003, 3952,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,921 ±(99.9%) 1078,869 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,921, 511,609), stdev = 280,179
[info]   CI (99.9%): [≈ 0, 1385,790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4179,138 ±(99.9%) 14690,407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4179,138, 6992,206), stdev = 3815,052
[info]   CI (99.9%): [≈ 0, 18869,545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,002 ±(99.9%) 0,018 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,010), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,028 ±(99.9%) 0,245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,028, 0,142), stdev = 0,064
[info]   CI (99.9%): [≈ 0, 0,274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46,18% complete, ETA 01:11:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6739,250 ops/s
[info] # Warmup Iteration   2: 17485,227 ops/s
[info] # Warmup Iteration   3: 17782,707 ops/s
[info] # Warmup Iteration   4: 17793,192 ops/s
[info] # Warmup Iteration   5: 17769,726 ops/s
[info] Iteration   1: 17643,517 ops/s
[info]                  ·gc.alloc.rate:                   1114,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              99368,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     120027,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,427 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 17646,211 ops/s
[info]                  ·gc.alloc.rate:               1114,207 MB/sec
[info]                  ·gc.alloc.rate.norm:          99368,494 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120132,623 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 17835,544 ops/s
[info]                  ·gc.alloc.rate:               1125,963 MB/sec
[info]                  ·gc.alloc.rate.norm:          99368,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 59449,281 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 17843,146 ops/s
[info]                  ·gc.alloc.rate:                   1126,592 MB/sec
[info]                  ·gc.alloc.rate.norm:              99368,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,491 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119028,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,836 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 17845,900 ops/s
[info]                  ·gc.alloc.rate:                   1126,833 MB/sec
[info]                  ·gc.alloc.rate.norm:              99368,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     119125,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,836 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   17762,863 ±(99.9%) 415,058 ops/s [Average]
[info]   (min, avg, max) = (17643,517, 17762,863, 17845,900), stdev = 107,789
[info]   CI (99.9%): [17347,805, 18177,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1121,527 ±(99.9%) 26,053 MB/sec [Average]
[info]   (min, avg, max) = (1114,040, 1121,527, 1126,833), stdev = 6,766
[info]   CI (99.9%): [1095,474, 1147,580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99368,117 ±(99.9%) 0,810 B/op [Average]
[info]   (min, avg, max) = (99368,023, 99368,117, 99368,494), stdev = 0,210
[info]   CI (99.9%): [99367,308, 99368,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1213,340 ±(99.9%) 1161,784 MB/sec [Average]
[info]   (min, avg, max) = (673,634, 1213,340, 1350,884), stdev = 301,712
[info]   CI (99.9%): [51,556, 2375,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   107552,629 ±(99.9%) 103564,276 B/op [Average]
[info]   (min, avg, max) = (59449,281, 107552,629, 120132,623), stdev = 26895,313
[info]   CI (99.9%): [3988,353, 211116,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,220 ±(99.9%) 11,754 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,220, 7,427), stdev = 3,052
[info]   CI (99.9%): [≈ 0, 13,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 46,39% complete, ETA 01:11:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11084,565 ops/s
[info] # Warmup Iteration   2: 18604,311 ops/s
[info] # Warmup Iteration   3: 18697,926 ops/s
[info] # Warmup Iteration   4: 18719,396 ops/s
[info] # Warmup Iteration   5: 18634,952 ops/s
[info] Iteration   1: 18657,862 ops/s
[info]                  ·gc.alloc.rate:                   600,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              50680,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43149,888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 18713,156 ops/s
[info]                  ·gc.alloc.rate:                   602,426 MB/sec
[info]                  ·gc.alloc.rate.norm:              50662,624 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56806,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,826 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 237,672 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 18751,703 ops/s
[info]                  ·gc.alloc.rate:                   603,512 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56688,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,241 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 18742,991 ops/s
[info]                  ·gc.alloc.rate:               603,259 MB/sec
[info]                  ·gc.alloc.rate.norm:          50656,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56545,249 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 18692,832 ops/s
[info]                  ·gc.alloc.rate:                   601,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              50656,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,313 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56699,488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,753 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle":
[info]   18711,709 ±(99.9%) 147,083 ops/s [Average]
[info]   (min, avg, max) = (18657,862, 18711,709, 18751,703), stdev = 38,197
[info]   CI (99.9%): [18564,626, 18858,792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate":
[info]   602,299 ±(99.9%) 4,465 MB/sec [Average]
[info]   (min, avg, max) = (600,749, 602,299, 603,512), stdev = 1,160
[info]   CI (99.9%): [597,833, 606,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   50662,144 ±(99.9%) 40,039 B/op [Average]
[info]   (min, avg, max) = (50656,022, 50662,144, 50680,027), stdev = 10,398
[info]   CI (99.9%): [50622,105, 50702,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   641,814 ±(99.9%) 280,564 MB/sec [Average]
[info]   (min, avg, max) = (511,489, 641,814, 675,488), stdev = 72,862
[info]   CI (99.9%): [361,250, 922,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   53978,089 ±(99.9%) 23311,272 B/op [Average]
[info]   (min, avg, max) = (43149,888, 53978,089, 56806,970), stdev = 6053,863
[info]   CI (99.9%): [30666,817, 77289,362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,582 ±(99.9%) 4,831 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,582, 2,826), stdev = 1,255
[info]   CI (99.9%): [≈ 0, 5,414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   48,953 ±(99.9%) 406,315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 48,953, 237,672), stdev = 105,519
[info]   CI (99.9%): [≈ 0, 455,268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46,59% complete, ETA 01:10:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51594,381 ops/s
[info] # Warmup Iteration   2: 62951,725 ops/s
[info] # Warmup Iteration   3: 62728,116 ops/s
[info] # Warmup Iteration   4: 64777,178 ops/s
[info] # Warmup Iteration   5: 65109,551 ops/s
[info] Iteration   1: 64844,120 ops/s
[info]                  ·gc.alloc.rate:                   1156,607 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32608,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,516 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 65108,869 ops/s
[info]                  ·gc.alloc.rate:                   1161,427 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32462,556 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,013 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 64995,332 ops/s
[info]                  ·gc.alloc.rate:               1159,206 MB/sec
[info]                  ·gc.alloc.rate.norm:          28072,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16258,743 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 64610,400 ops/s
[info]                  ·gc.alloc.rate:                   1152,541 MB/sec
[info]                  ·gc.alloc.rate.norm:              28072,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     32712,728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,028 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 65144,954 ops/s
[info]                  ·gc.alloc.rate:               1162,075 MB/sec
[info]                  ·gc.alloc.rate.norm:          28072,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,376 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 32475,810 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   64940,735 ±(99.9%) 842,340 ops/s [Average]
[info]   (min, avg, max) = (64610,400, 64940,735, 65144,954), stdev = 218,753
[info]   CI (99.9%): [64098,395, 65783,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1158,371 ±(99.9%) 15,019 MB/sec [Average]
[info]   (min, avg, max) = (1152,541, 1158,371, 1162,075), stdev = 3,900
[info]   CI (99.9%): [1143,352, 1173,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28072,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28072,006, 28072,007, 28072,007), stdev = 0,001
[info]   CI (99.9%): [28072,005, 28072,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1209,085 ±(99.9%) 1157,435 MB/sec [Average]
[info]   (min, avg, max) = (671,389, 1209,085, 1344,376), stdev = 300,582
[info]   CI (99.9%): [51,651, 2366,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   29303,638 ±(99.9%) 28082,903 B/op [Average]
[info]   (min, avg, max) = (16258,743, 29303,638, 32712,728), stdev = 7293,041
[info]   CI (99.9%): [1220,735, 57386,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,111 ±(99.9%) 3,986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,111, 2,028), stdev = 1,035
[info]   CI (99.9%): [≈ 0, 5,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,79% complete, ETA 01:10:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55585,191 ops/s
[info] # Warmup Iteration   2: 75151,155 ops/s
[info] # Warmup Iteration   3: 75454,594 ops/s
[info] # Warmup Iteration   4: 74930,922 ops/s
[info] # Warmup Iteration   5: 75043,580 ops/s
[info] Iteration   1: 75116,513 ops/s
[info]                  ·gc.alloc.rate:                   1074,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,796 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28302,550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,872 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 75303,864 ops/s
[info]                  ·gc.alloc.rate:                   1077,061 MB/sec
[info]                  ·gc.alloc.rate.norm:              22512,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28260,502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,870 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 75337,856 ops/s
[info]                  ·gc.alloc.rate:               1077,505 MB/sec
[info]                  ·gc.alloc.rate.norm:          22512,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14130,458 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 75436,325 ops/s
[info]                  ·gc.alloc.rate:               1078,997 MB/sec
[info]                  ·gc.alloc.rate.norm:          22512,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28252,379 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 75468,044 ops/s
[info]                  ·gc.alloc.rate:               1079,315 MB/sec
[info]                  ·gc.alloc.rate.norm:          22512,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14126,585 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   75332,521 ±(99.9%) 533,043 ops/s [Average]
[info]   (min, avg, max) = (75116,513, 75332,521, 75468,044), stdev = 138,430
[info]   CI (99.9%): [74799,477, 75865,564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1077,462 ±(99.9%) 7,491 MB/sec [Average]
[info]   (min, avg, max) = (1074,431, 1077,462, 1079,315), stdev = 1,946
[info]   CI (99.9%): [1069,970, 1084,953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22512,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (22512,005, 22512,005, 22512,006), stdev = 0,001
[info]   CI (99.9%): [22512,005, 22512,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,128 ±(99.9%) 1424,758 MB/sec [Average]
[info]   (min, avg, max) = (676,334, 1082,128, 1354,132), stdev = 370,005
[info]   CI (99.9%): [≈ 0, 2506,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   22614,495 ±(99.9%) 29829,483 B/op [Average]
[info]   (min, avg, max) = (14126,585, 22614,495, 28302,550), stdev = 7746,622
[info]   CI (99.9%): [≈ 0, 52443,978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,348 ±(99.9%) 1,837 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,348, 0,872), stdev = 0,477
[info]   CI (99.9%): [≈ 0, 2,186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46,99% complete, ETA 01:10:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 299884,337 ops/s
[info] # Warmup Iteration   2: 327225,983 ops/s
[info] # Warmup Iteration   3: 328525,416 ops/s
[info] # Warmup Iteration   4: 329652,322 ops/s
[info] # Warmup Iteration   5: 322079,348 ops/s
[info] Iteration   1: 318981,737 ops/s
[info]                  ·gc.alloc.rate:                   611,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3332,673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13,738 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 330383,261 ops/s
[info]                  ·gc.alloc.rate:      633,096 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 329681,956 ops/s
[info]                  ·gc.alloc.rate:                   631,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3224,411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,397 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 329516,649 ops/s
[info]                  ·gc.alloc.rate:               631,521 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3219,848 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 329656,754 ops/s
[info]                  ·gc.alloc.rate:                   631,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3218,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   327644,071 ±(99.9%) 18691,456 ops/s [Average]
[info]   (min, avg, max) = (318981,737, 327644,071, 330383,261), stdev = 4854,112
[info]   CI (99.9%): [308952,616, 346335,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   627,874 ±(99.9%) 35,842 MB/sec [Average]
[info]   (min, avg, max) = (611,261, 627,874, 633,096), stdev = 9,308
[info]   CI (99.9%): [592,032, 663,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3016,001, 3016,001, 3016,001), stdev = 0,001
[info]   CI (99.9%): [3016,001, 3016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   539,841 ±(99.9%) 1162,051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,841, 675,441), stdev = 301,781
[info]   CI (99.9%): [≈ 0, 1701,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2599,083 ±(99.9%) 5597,830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2599,083, 3332,673), stdev = 1453,739
[info]   CI (99.9%): [≈ 0, 8196,913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,578 ±(99.9%) 4,752 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,578, 2,784), stdev = 1,234
[info]   CI (99.9%): [≈ 0, 5,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2,847 ±(99.9%) 23,452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,847, 13,738), stdev = 6,090
[info]   CI (99.9%): [≈ 0, 26,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 47,19% complete, ETA 01:10:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 371349,070 ops/s
[info] # Warmup Iteration   2: 393807,816 ops/s
[info] # Warmup Iteration   3: 393085,210 ops/s
[info] # Warmup Iteration   4: 392938,902 ops/s
[info] # Warmup Iteration   5: 393381,253 ops/s
[info] Iteration   1: 394230,463 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 394685,421 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 393832,891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 392712,789 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 394689,042 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   394030,121 ±(99.9%) 3150,709 ops/s [Average]
[info]   (min, avg, max) = (392712,789, 394030,121, 394689,042), stdev = 818,229
[info]   CI (99.9%): [390879,412, 397180,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47,39% complete, ETA 01:09:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62075,252 ops/s
[info] # Warmup Iteration   2: 78492,211 ops/s
[info] # Warmup Iteration   3: 78527,167 ops/s
[info] # Warmup Iteration   4: 79434,018 ops/s
[info] # Warmup Iteration   5: 79302,719 ops/s
[info] Iteration   1: 79270,179 ops/s
[info]                  ·gc.alloc.rate:               1422,732 MB/sec
[info]                  ·gc.alloc.rate.norm:          28248,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,292 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26611,187 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 79209,158 ops/s
[info]                  ·gc.alloc.rate:                   1421,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26636,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,827 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 78335,419 ops/s
[info]                  ·gc.alloc.rate:                   1405,959 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40423,012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,255 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 78406,239 ops/s
[info]                  ·gc.alloc.rate:               1407,185 MB/sec
[info]                  ·gc.alloc.rate.norm:          28248,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,514 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26969,877 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 79144,774 ops/s
[info]                  ·gc.alloc.rate:                   1420,368 MB/sec
[info]                  ·gc.alloc.rate.norm:              28248,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,688 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26742,900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,828 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   78873,154 ±(99.9%) 1776,597 ops/s [Average]
[info]   (min, avg, max) = (78335,419, 78873,154, 79270,179), stdev = 461,376
[info]   CI (99.9%): [77096,557, 80649,750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1415,580 ±(99.9%) 31,871 MB/sec [Average]
[info]   (min, avg, max) = (1405,959, 1415,580, 1422,732), stdev = 8,277
[info]   CI (99.9%): [1383,709, 1447,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28248,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28248,005, 28248,005, 28248,005), stdev = 0,001
[info]   CI (99.9%): [28248,005, 28248,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1476,197 ±(99.9%) 1153,235 MB/sec [Average]
[info]   (min, avg, max) = (1340,292, 1476,197, 2011,933), stdev = 299,491
[info]   CI (99.9%): [322,962, 2629,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29476,718 ±(99.9%) 23569,024 B/op [Average]
[info]   (min, avg, max) = (26611,187, 29476,718, 40423,012), stdev = 6120,801
[info]   CI (99.9%): [5907,694, 53045,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,582 ±(99.9%) 2,153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,582, 1,255), stdev = 0,559
[info]   CI (99.9%): [≈ 0, 2,735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 47,59% complete, ETA 01:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16264,712 ops/s
[info] # Warmup Iteration   2: 17287,213 ops/s
[info] # Warmup Iteration   3: 17344,371 ops/s
[info] # Warmup Iteration   4: 17266,640 ops/s
[info] # Warmup Iteration   5: 17344,853 ops/s
[info] Iteration   1: 17280,185 ops/s
[info]                  ·gc.alloc.rate:                   378,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46589,897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,867 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 17317,193 ops/s
[info]                  ·gc.alloc.rate:               379,849 MB/sec
[info]                  ·gc.alloc.rate.norm:          34520,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,627 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 46495,749 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 16996,439 ops/s
[info]                  ·gc.alloc.rate:               372,743 MB/sec
[info]                  ·gc.alloc.rate.norm:          34520,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47368,176 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 17065,226 ops/s
[info]                  ·gc.alloc.rate:      374,292 MB/sec
[info]                  ·gc.alloc.rate.norm: 34520,024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 17304,761 ops/s
[info]                  ·gc.alloc.rate:                   379,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              34520,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     61424,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 258,579 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle":
[info]   17192,761 ±(99.9%) 579,128 ops/s [Average]
[info]   (min, avg, max) = (16996,439, 17192,761, 17317,193), stdev = 150,398
[info]   CI (99.9%): [16613,633, 17771,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   377,075 ±(99.9%) 12,737 MB/sec [Average]
[info]   (min, avg, max) = (372,743, 377,075, 379,849), stdev = 3,308
[info]   CI (99.9%): [364,338, 389,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   34520,025 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (34520,024, 34520,025, 34520,030), stdev = 0,003
[info]   CI (99.9%): [34520,016, 34520,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   441,977 ±(99.9%) 989,791 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,977, 675,282), stdev = 257,045
[info]   CI (99.9%): [≈ 0, 1431,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   40375,641 ±(99.9%) 90268,863 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40375,641, 61424,383), stdev = 23442,537
[info]   CI (99.9%): [≈ 0, 130644,504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,573 ±(99.9%) 4,887 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,573, 2,843), stdev = 1,269
[info]   CI (99.9%): [≈ 0, 5,459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   52,089 ±(99.9%) 444,495 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52,089, 258,579), stdev = 115,434
[info]   CI (99.9%): [≈ 0, 496,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47,79% complete, ETA 01:09:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118731,729 ops/s
[info] # Warmup Iteration   2: 136094,126 ops/s
[info] # Warmup Iteration   3: 137299,426 ops/s
[info] # Warmup Iteration   4: 136194,186 ops/s
[info] # Warmup Iteration   5: 136617,337 ops/s
[info] Iteration   1: 138035,644 ops/s
[info]                  ·gc.alloc.rate:                   1999,665 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23003,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,712 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 137469,801 ops/s
[info]                  ·gc.alloc.rate:                   1991,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23138,652 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,715 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 137682,317 ops/s
[info]                  ·gc.alloc.rate:                   1994,458 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,498 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23131,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,714 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 137363,301 ops/s
[info]                  ·gc.alloc.rate:                   1990,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23223,506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,477 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 137658,141 ops/s
[info]                  ·gc.alloc.rate:                   1994,012 MB/sec
[info]                  ·gc.alloc.rate.norm:              22800,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23204,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,476 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   137641,841 ±(99.9%) 989,562 ops/s [Average]
[info]   (min, avg, max) = (137363,301, 137641,841, 138035,644), stdev = 256,986
[info]   CI (99.9%): [136652,279, 138631,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   1993,961 ±(99.9%) 14,069 MB/sec [Average]
[info]   (min, avg, max) = (1990,112, 1993,961, 1999,665), stdev = 3,654
[info]   CI (99.9%): [1979,892, 2008,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22800,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (22800,003, 22800,003, 22800,003), stdev = 0,001
[info]   CI (99.9%): [22800,003, 22800,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2023,726 ±(99.9%) 18,045 MB/sec [Average]
[info]   (min, avg, max) = (2017,555, 2023,726, 2029,363), stdev = 4,686
[info]   CI (99.9%): [2005,681, 2041,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23140,465 ±(99.9%) 331,594 B/op [Average]
[info]   (min, avg, max) = (23003,981, 23140,465, 23223,506), stdev = 86,114
[info]   CI (99.9%): [22808,871, 23472,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,619 ±(99.9%) 0,500 B/op [Average]
[info]   (min, avg, max) = (0,476, 0,619, 0,715), stdev = 0,130
[info]   CI (99.9%): [0,119, 1,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 47,99% complete, ETA 01:09:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 139809,639 ops/s
[info] # Warmup Iteration   2: 742392,357 ops/s
[info] # Warmup Iteration   3: 747409,101 ops/s
[info] # Warmup Iteration   4: 747161,077 ops/s
[info] # Warmup Iteration   5: 746073,740 ops/s
[info] Iteration   1: 746294,645 ops/s
[info]                  ·gc.alloc.rate:               413,495 MB/sec
[info]                  ·gc.alloc.rate.norm:          872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1078,845 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 746331,920 ops/s
[info]                  ·gc.alloc.rate:                   413,498 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1078,793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,035 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 750298,194 ops/s
[info]                  ·gc.alloc.rate:      415,699 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 746391,285 ops/s
[info]                  ·gc.alloc.rate:                   413,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1421,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,514 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 746572,707 ops/s
[info]                  ·gc.alloc.rate:      413,613 MB/sec
[info]                  ·gc.alloc.rate.norm: 872,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   747177,750 ±(99.9%) 6729,566 ops/s [Average]
[info]   (min, avg, max) = (746294,645, 747177,750, 750298,194), stdev = 1747,647
[info]   CI (99.9%): [740448,184, 753907,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   413,977 ±(99.9%) 3,712 MB/sec [Average]
[info]   (min, avg, max) = (413,495, 413,977, 415,699), stdev = 0,964
[info]   CI (99.9%): [410,265, 417,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (872,001, 872,001, 872,001), stdev = 0,001
[info]   CI (99.9%): [872,000, 872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,459 ±(99.9%) 1220,316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,459, 674,160), stdev = 316,912
[info]   CI (99.9%): [≈ 0, 1559,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   715,812 ±(99.9%) 2573,172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 715,812, 1421,419), stdev = 668,245
[info]   CI (99.9%): [≈ 0, 3288,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,530 ±(99.9%) 4,489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,530, 2,615), stdev = 1,166
[info]   CI (99.9%): [≈ 0, 5,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   1,118 ±(99.9%) 9,464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,118, 5,514), stdev = 2,458
[info]   CI (99.9%): [≈ 0, 10,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,19% complete, ETA 01:08:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292436,703 ops/s
[info] # Warmup Iteration   2: 419911,170 ops/s
[info] # Warmup Iteration   3: 419963,185 ops/s
[info] # Warmup Iteration   4: 420365,285 ops/s
[info] # Warmup Iteration   5: 419029,318 ops/s
[info] Iteration   1: 419095,848 ops/s
[info]                  ·gc.alloc.rate:               417,508 MB/sec
[info]                  ·gc.alloc.rate.norm:          1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1921,101 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 418303,069 ops/s
[info]                  ·gc.alloc.rate:                   416,756 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1924,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 419240,481 ops/s
[info]                  ·gc.alloc.rate:                   417,632 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2531,844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,469 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 418961,313 ops/s
[info]                  ·gc.alloc.rate:      417,433 MB/sec
[info]                  ·gc.alloc.rate.norm: 1568,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 418190,820 ops/s
[info]                  ·gc.alloc.rate:                   416,646 MB/sec
[info]                  ·gc.alloc.rate.norm:              1568,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,437 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2538,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,078 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   418758,306 ±(99.9%) 1843,611 ops/s [Average]
[info]   (min, avg, max) = (418190,820, 418758,306, 419240,481), stdev = 478,780
[info]   CI (99.9%): [416914,695, 420601,917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   417,195 ±(99.9%) 1,765 MB/sec [Average]
[info]   (min, avg, max) = (416,646, 417,195, 417,632), stdev = 0,458
[info]   CI (99.9%): [415,430, 418,960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1568,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1568,001, 1568,001, 1568,001), stdev = 0,001
[info]   CI (99.9%): [1568,001, 1568,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,378 ±(99.9%) 1068,180 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,378, 674,437), stdev = 277,403
[info]   CI (99.9%): [≈ 0, 1542,558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1783,173 ±(99.9%) 4015,255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1783,173, 2538,169), stdev = 1042,749
[info]   CI (99.9%): [≈ 0, 5798,428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,125), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,125 ±(99.9%) 0,755 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,125, 0,469), stdev = 0,196
[info]   CI (99.9%): [≈ 0, 0,880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48,39% complete, ETA 01:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 834426,199 ops/s
[info] # Warmup Iteration   2: 865272,323 ops/s
[info] # Warmup Iteration   3: 868248,919 ops/s
[info] # Warmup Iteration   4: 864071,573 ops/s
[info] # Warmup Iteration   5: 864542,709 ops/s
[info] Iteration   1: 866546,667 ops/s
[info]                  ·gc.alloc.rate:      299,495 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 867518,423 ops/s
[info]                  ·gc.alloc.rate:                   299,843 MB/sec
[info]                  ·gc.alloc.rate.norm:              544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     928,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 868438,188 ops/s
[info]                  ·gc.alloc.rate:      300,180 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 863499,133 ops/s
[info]                  ·gc.alloc.rate:               298,480 MB/sec
[info]                  ·gc.alloc.rate.norm:          544,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 932,399 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 868824,593 ops/s
[info]                  ·gc.alloc.rate:      300,250 MB/sec
[info]                  ·gc.alloc.rate.norm: 544,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   866965,401 ±(99.9%) 8196,057 ops/s [Average]
[info]   (min, avg, max) = (863499,133, 866965,401, 868824,593), stdev = 2128,490
[info]   CI (99.9%): [858769,344, 875161,458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   299,649 ±(99.9%) 2,770 MB/sec [Average]
[info]   (min, avg, max) = (298,480, 299,649, 300,250), stdev = 0,719
[info]   CI (99.9%): [296,879, 302,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (544,000, 544,000, 544,001), stdev = 0,001
[info]   CI (99.9%): [544,000, 544,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,626 ±(99.9%) 1078,931 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,626, 511,585), stdev = 280,195
[info]   CI (99.9%): [≈ 0, 1283,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   372,097 ±(99.9%) 1961,967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 372,097, 932,399), stdev = 509,517
[info]   CI (99.9%): [≈ 0, 2334,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,010 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,006), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,002, 0,010), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48,59% complete, ETA 01:08:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60230,073 ops/s
[info] # Warmup Iteration   2: 90867,280 ops/s
[info] # Warmup Iteration   3: 90967,303 ops/s
[info] # Warmup Iteration   4: 90733,247 ops/s
[info] # Warmup Iteration   5: 91126,436 ops/s
[info] Iteration   1: 90879,244 ops/s
[info]                  ·gc.alloc.rate:                   3893,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,402 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58819,461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,163 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 90710,917 ops/s
[info]                  ·gc.alloc.rate:                   3886,524 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4080,484 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70797,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,722 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 90976,683 ops/s
[info]                  ·gc.alloc.rate:                   3897,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70659,443 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,800 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 91146,380 ops/s
[info]                  ·gc.alloc.rate:                   3905,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4086,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70551,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,719 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 91407,639 ops/s
[info]                  ·gc.alloc.rate:                   3915,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              67432,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,897 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     58665,845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,717 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   91024,173 ±(99.9%) 1024,897 ops/s [Average]
[info]   (min, avg, max) = (90710,917, 91024,173, 91407,639), stdev = 266,163
[info]   CI (99.9%): [89999,275, 92049,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3899,856 ±(99.9%) 43,512 MB/sec [Average]
[info]   (min, avg, max) = (3886,524, 3899,856, 3915,974), stdev = 11,300
[info]   CI (99.9%): [3856,345, 3943,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67432,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (67432,004, 67432,005, 67432,005), stdev = 0,001
[info]   CI (99.9%): [67432,004, 67432,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3810,814 ±(99.9%) 1438,363 MB/sec [Average]
[info]   (min, avg, max) = (3396,402, 3810,814, 4086,066), stdev = 373,538
[info]   CI (99.9%): [2372,451, 5249,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65898,694 ±(99.9%) 25157,596 B/op [Average]
[info]   (min, avg, max) = (58665,845, 65898,694, 70797,255), stdev = 6533,348
[info]   CI (99.9%): [40741,098, 91056,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,071, 0,125), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,224 ±(99.9%) 2,708 B/op [Average]
[info]   (min, avg, max) = (0,717, 1,224, 2,163), stdev = 0,703
[info]   CI (99.9%): [≈ 0, 3,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 48,80% complete, ETA 01:08:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226623,294 ops/s
[info] # Warmup Iteration   2: 244784,991 ops/s
[info] # Warmup Iteration   3: 241806,322 ops/s
[info] # Warmup Iteration   4: 242755,070 ops/s
[info] # Warmup Iteration   5: 244215,394 ops/s
[info] Iteration   1: 244264,140 ops/s
[info]                  ·gc.alloc.rate:                   1543,306 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12992,278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,268 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 244881,226 ops/s
[info]                  ·gc.alloc.rate:               1547,245 MB/sec
[info]                  ·gc.alloc.rate.norm:          9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8644,368 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 244754,994 ops/s
[info]                  ·gc.alloc.rate:                   1546,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,215 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8656,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,402 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 244553,414 ops/s
[info]                  ·gc.alloc.rate:               1545,231 MB/sec
[info]                  ·gc.alloc.rate.norm:          9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2021,849 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13011,170 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 244463,419 ops/s
[info]                  ·gc.alloc.rate:                   1544,429 MB/sec
[info]                  ·gc.alloc.rate.norm:              9944,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8688,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,134 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle":
[info]   244583,439 ±(99.9%) 934,062 ops/s [Average]
[info]   (min, avg, max) = (244264,140, 244583,439, 244881,226), stdev = 242,573
[info]   CI (99.9%): [243649,377, 245517,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1545,315 ±(99.9%) 5,982 MB/sec [Average]
[info]   (min, avg, max) = (1543,306, 1545,315, 1547,245), stdev = 1,553
[info]   CI (99.9%): [1539,334, 1551,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   9944,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (9944,002, 9944,002, 9944,002), stdev = 0,001
[info]   CI (99.9%): [9944,001, 9944,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1615,791 ±(99.9%) 1417,803 MB/sec [Average]
[info]   (min, avg, max) = (1345,027, 1615,791, 2021,849), stdev = 368,199
[info]   CI (99.9%): [197,988, 3033,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10398,690 ±(99.9%) 9150,280 B/op [Average]
[info]   (min, avg, max) = (8644,368, 10398,690, 13011,170), stdev = 2376,299
[info]   CI (99.9%): [1248,410, 19548,970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,161 ±(99.9%) 0,672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,161, 0,402), stdev = 0,175
[info]   CI (99.9%): [≈ 0, 0,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49,00% complete, ETA 01:07:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261435,439 ops/s
[info] # Warmup Iteration   2: 320571,795 ops/s
[info] # Warmup Iteration   3: 324457,103 ops/s
[info] # Warmup Iteration   4: 325174,820 ops/s
[info] # Warmup Iteration   5: 325312,575 ops/s
[info] Iteration   1: 323137,008 ops/s
[info]                  ·gc.alloc.rate:                   1683,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,211 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9810,661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,203 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 324151,472 ops/s
[info]                  ·gc.alloc.rate:                   1688,851 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,151 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6526,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,303 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 324917,763 ops/s
[info]                  ·gc.alloc.rate:                   1692,689 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9779,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,202 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 322430,699 ops/s
[info]                  ·gc.alloc.rate:                   1679,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6579,144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,203 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 323918,749 ops/s
[info]                  ·gc.alloc.rate:                   1687,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              8200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9837,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   323711,138 ±(99.9%) 3684,409 ops/s [Average]
[info]   (min, avg, max) = (322430,699, 323711,138, 324917,763), stdev = 956,829
[info]   CI (99.9%): [320026,729, 327395,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1686,512 ±(99.9%) 18,855 MB/sec [Average]
[info]   (min, avg, max) = (1679,998, 1686,512, 1692,689), stdev = 4,897
[info]   CI (99.9%): [1667,656, 1705,367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   8200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8200,001, 8200,001, 8200,001), stdev = 0,001
[info]   CI (99.9%): [8200,001, 8200,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1749,879 ±(99.9%) 1419,642 MB/sec [Average]
[info]   (min, avg, max) = (1344,151, 1749,879, 2024,389), stdev = 368,677
[info]   CI (99.9%): [330,236, 3169,521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8506,533 ±(99.9%) 6868,654 B/op [Average]
[info]   (min, avg, max) = (6526,353, 8506,533, 9837,085), stdev = 1783,768
[info]   CI (99.9%): [1637,879, 15375,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,202 ±(99.9%) 0,275 B/op [Average]
[info]   (min, avg, max) = (0,101, 0,202, 0,303), stdev = 0,071
[info]   CI (99.9%): [≈ 0, 0,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 49,20% complete, ETA 01:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 397750,551 ops/s
[info] # Warmup Iteration   2: 1626305,940 ops/s
[info] # Warmup Iteration   3: 1633132,745 ops/s
[info] # Warmup Iteration   4: 1632191,828 ops/s
[info] # Warmup Iteration   5: 1637608,362 ops/s
[info] Iteration   1: 1636550,733 ops/s
[info]                  ·gc.alloc.rate:                   557,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     492,018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1641152,531 ops/s
[info]                  ·gc.alloc.rate:                   558,872 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     646,519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,548 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1643313,401 ops/s
[info]                  ·gc.alloc.rate:               559,630 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 645,672 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1641987,819 ops/s
[info]                  ·gc.alloc.rate:                   559,184 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     644,878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,040 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1639483,130 ops/s
[info]                  ·gc.alloc.rate:      558,204 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1640497,523 ±(99.9%) 10038,542 ops/s [Average]
[info]   (min, avg, max) = (1636550,733, 1640497,523, 1643313,401), stdev = 2606,978
[info]   CI (99.9%): [1630458,980, 1650536,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   558,643 ±(99.9%) 3,472 MB/sec [Average]
[info]   (min, avg, max) = (557,324, 558,643, 559,630), stdev = 0,902
[info]   CI (99.9%): [555,171, 562,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,521 ±(99.9%) 1123,320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,521, 674,137), stdev = 291,723
[info]   CI (99.9%): [≈ 0, 1629,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   485,817 ±(99.9%) 1076,693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 485,817, 646,519), stdev = 279,614
[info]   CI (99.9%): [≈ 0, 1562,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,542 ±(99.9%) 4,552 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,542, 2,657), stdev = 1,182
[info]   CI (99.9%): [≈ 0, 5,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,520 ±(99.9%) 4,366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,520, 2,548), stdev = 1,134
[info]   CI (99.9%): [≈ 0, 4,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,40% complete, ETA 01:07:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1153273,177 ops/s
[info] # Warmup Iteration   2: 1442534,765 ops/s
[info] # Warmup Iteration   3: 1434679,881 ops/s
[info] # Warmup Iteration   4: 1425790,406 ops/s
[info] # Warmup Iteration   5: 1450152,792 ops/s
[info] Iteration   1: 1453946,806 ops/s
[info]                  ·gc.alloc.rate:                   849,936 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,438 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     731,118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1449136,578 ops/s
[info]                  ·gc.alloc.rate:               847,027 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,413 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 733,602 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1450431,659 ops/s
[info]                  ·gc.alloc.rate:                   847,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,997 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1467,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,068 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1446467,746 ops/s
[info]                  ·gc.alloc.rate:               845,525 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 736,378 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 1450174,712 ops/s
[info]                  ·gc.alloc.rate:               847,576 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,644 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 734,463 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1450031,500 ±(99.9%) 10370,228 ops/s [Average]
[info]   (min, avg, max) = (1446467,746, 1450031,500, 1453946,806), stdev = 2693,115
[info]   CI (99.9%): [1439661,272, 1460401,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   847,561 ±(99.9%) 6,119 MB/sec [Average]
[info]   (min, avg, max) = (845,525, 847,561, 849,936), stdev = 1,589
[info]   CI (99.9%): [841,442, 853,680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   811,252 ±(99.9%) 1163,996 MB/sec [Average]
[info]   (min, avg, max) = (675,413, 811,252, 1351,997), stdev = 302,286
[info]   CI (99.9%): [≈ 0, 1975,248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   880,560 ±(99.9%) 1262,889 B/op [Average]
[info]   (min, avg, max) = (731,118, 880,560, 1467,237), stdev = 327,968
[info]   CI (99.9%): [≈ 0, 2143,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,027, 0,068), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49,60% complete, ETA 01:06:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1447939,881 ops/s
[info] # Warmup Iteration   2: 1499438,432 ops/s
[info] # Warmup Iteration   3: 1495753,940 ops/s
[info] # Warmup Iteration   4: 1502447,114 ops/s
[info] # Warmup Iteration   5: 1503207,067 ops/s
[info] Iteration   1: 1504152,501 ops/s
[info]                  ·gc.alloc.rate:               512,244 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 535,247 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 1511435,711 ops/s
[info]                  ·gc.alloc.rate:      514,808 MB/sec
[info]                  ·gc.alloc.rate.norm: 536,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1505567,606 ops/s
[info]                  ·gc.alloc.rate:                   512,701 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     705,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,301 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1503691,287 ops/s
[info]                  ·gc.alloc.rate:                   512,130 MB/sec
[info]                  ·gc.alloc.rate.norm:              536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,795 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     706,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,065 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1505988,907 ops/s
[info]                  ·gc.alloc.rate:               512,818 MB/sec
[info]                  ·gc.alloc.rate.norm:          536,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 703,084 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1506167,202 ±(99.9%) 11921,097 ops/s [Average]
[info]   (min, avg, max) = (1503691,287, 1506167,202, 1511435,711), stdev = 3095,871
[info]   CI (99.9%): [1494246,105, 1518088,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   512,940 ±(99.9%) 4,175 MB/sec [Average]
[info]   (min, avg, max) = (512,130, 512,940, 514,808), stdev = 1,084
[info]   CI (99.9%): [508,765, 517,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (536,000, 536,000, 536,000), stdev = 0,001
[info]   CI (99.9%): [536,000, 536,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,739 ±(99.9%) 1123,960 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,739, 674,795), stdev = 291,889
[info]   CI (99.9%): [≈ 0, 1630,699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   529,988 ±(99.9%) 1175,393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 529,988, 706,248), stdev = 305,246
[info]   CI (99.9%): [≈ 0, 1705,381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,644 ±(99.9%) 5,412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,644, 3,158), stdev = 1,405
[info]   CI (99.9%): [≈ 0, 6,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,673 ±(99.9%) 5,658 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,673, 3,301), stdev = 1,469
[info]   CI (99.9%): [≈ 0, 6,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 49,80% complete, ETA 01:06:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1599720,522 ops/s
[info] # Warmup Iteration   2: 1670293,408 ops/s
[info] # Warmup Iteration   3: 1672665,314 ops/s
[info] # Warmup Iteration   4: 1672232,468 ops/s
[info] # Warmup Iteration   5: 1672088,344 ops/s
[info] Iteration   1: 1675566,873 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1671382,529 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1676357,158 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1671127,365 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1674090,211 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1673704,827 ±(99.9%) 9170,471 ops/s [Average]
[info]   (min, avg, max) = (1671127,365, 1673704,827, 1676357,158), stdev = 2381,542
[info]   CI (99.9%): [1664534,356, 1682875,299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50,00% complete, ETA 01:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32310,953 ops/s
[info] # Warmup Iteration   2: 44009,581 ops/s
[info] # Warmup Iteration   3: 43960,169 ops/s
[info] # Warmup Iteration   4: 44227,675 ops/s
[info] # Warmup Iteration   5: 43804,729 ops/s
[info] Iteration   1: 43938,736 ops/s
[info]                  ·gc.alloc.rate:                   2037,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2013,204 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72113,608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,237 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 43480,227 ops/s
[info]                  ·gc.alloc.rate:                   2016,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72995,260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,260 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 43903,776 ops/s
[info]                  ·gc.alloc.rate:                   2036,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72457,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,492 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 43560,915 ops/s
[info]                  ·gc.alloc.rate:                   2020,353 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73146,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,504 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 43867,057 ops/s
[info]                  ·gc.alloc.rate:                   2034,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              72992,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,663 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72754,384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,494 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   43750,142 ±(99.9%) 820,243 ops/s [Average]
[info]   (min, avg, max) = (43480,227, 43750,142, 43938,736), stdev = 213,014
[info]   CI (99.9%): [42929,899, 44570,385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2029,001 ±(99.9%) 37,800 MB/sec [Average]
[info]   (min, avg, max) = (2016,517, 2029,001, 2037,727), stdev = 9,816
[info]   CI (99.9%): [1991,201, 2066,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72992,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (72992,009, 72992,010, 72992,010), stdev = 0,001
[info]   CI (99.9%): [72992,008, 72992,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2020,665 ±(99.9%) 22,549 MB/sec [Average]
[info]   (min, avg, max) = (2013,204, 2020,665, 2027,663), stdev = 5,856
[info]   CI (99.9%): [1998,116, 2043,214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   72693,508 ±(99.9%) 1601,660 B/op [Average]
[info]   (min, avg, max) = (72113,608, 72693,508, 73146,671), stdev = 415,946
[info]   CI (99.9%): [71091,848, 74295,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,050, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,006, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,797 ±(99.9%) 1,586 B/op [Average]
[info]   (min, avg, max) = (1,492, 1,797, 2,260), stdev = 0,412
[info]   CI (99.9%): [0,211, 3,384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 50,20% complete, ETA 01:06:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 136294,114 ops/s
[info] # Warmup Iteration   2: 149704,078 ops/s
[info] # Warmup Iteration   3: 151375,025 ops/s
[info] # Warmup Iteration   4: 152015,633 ops/s
[info] # Warmup Iteration   5: 151558,255 ops/s
[info] Iteration   1: 150272,927 ops/s
[info]                  ·gc.alloc.rate:               1307,639 MB/sec
[info]                  ·gc.alloc.rate.norm:          13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,248 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 14079,434 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 152311,950 ops/s
[info]                  ·gc.alloc.rate:                   1325,402 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,270 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13890,977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,645 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 152092,671 ops/s
[info]                  ·gc.alloc.rate:               1323,567 MB/sec
[info]                  ·gc.alloc.rate.norm:          13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13917,869 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 151750,047 ops/s
[info]                  ·gc.alloc.rate:                   1320,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,244 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13961,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,648 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 151408,580 ops/s
[info]                  ·gc.alloc.rate:               1317,638 MB/sec
[info]                  ·gc.alloc.rate.norm:          13696,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,417 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6999,738 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle":
[info]   151567,235 ±(99.9%) 3083,227 ops/s [Average]
[info]   (min, avg, max) = (150272,927, 151567,235, 152311,950), stdev = 800,704
[info]   CI (99.9%): [148484,008, 154650,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1318,976 ±(99.9%) 26,916 MB/sec [Average]
[info]   (min, avg, max) = (1307,639, 1318,976, 1325,402), stdev = 6,990
[info]   CI (99.9%): [1292,061, 1345,892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   13696,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (13696,003, 13696,003, 13696,003), stdev = 0,001
[info]   CI (99.9%): [13696,002, 13696,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,637 ±(99.9%) 1156,412 MB/sec [Average]
[info]   (min, avg, max) = (673,417, 1210,637, 1346,244), stdev = 300,316
[info]   CI (99.9%): [54,226, 2367,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12569,919 ±(99.9%) 11993,447 B/op [Average]
[info]   (min, avg, max) = (6999,738, 12569,919, 14079,434), stdev = 3114,660
[info]   CI (99.9%): [576,472, 24563,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,259 ±(99.9%) 1,364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,259, 0,648), stdev = 0,354
[info]   CI (99.9%): [≈ 0, 1,622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 50,40% complete, ETA 01:05:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53980,480 ops/s
[info] # Warmup Iteration   2: 63242,262 ops/s
[info] # Warmup Iteration   3: 63271,149 ops/s
[info] # Warmup Iteration   4: 63411,463 ops/s
[info] # Warmup Iteration   5: 63538,999 ops/s
[info] Iteration   1: 63458,539 ops/s
[info]                  ·gc.alloc.rate:                   1267,100 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,254 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33337,425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 63535,155 ops/s
[info]                  ·gc.alloc.rate:                   1268,570 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,309 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33300,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,063 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 63495,368 ops/s
[info]                  ·gc.alloc.rate:                   1267,736 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,188 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33319,052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,548 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 63360,403 ops/s
[info]                  ·gc.alloc.rate:                   1265,126 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33407,103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,034 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 63426,282 ops/s
[info]                  ·gc.alloc.rate:                   1266,209 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,985 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33403,826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,517 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   63455,150 ±(99.9%) 257,159 ops/s [Average]
[info]   (min, avg, max) = (63360,403, 63455,150, 63535,155), stdev = 66,783
[info]   CI (99.9%): [63197,991, 63712,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   1266,948 ±(99.9%) 5,144 MB/sec [Average]
[info]   (min, avg, max) = (1265,126, 1266,948, 1268,570), stdev = 1,336
[info]   CI (99.9%): [1261,804, 1272,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (31424,006, 31424,007, 31424,007), stdev = 0,001
[info]   CI (99.9%): [31424,006, 31424,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1344,740 ±(99.9%) 2,937 MB/sec [Average]
[info]   (min, avg, max) = (1344,188, 1344,740, 1345,985), stdev = 0,763
[info]   CI (99.9%): [1341,803, 1347,677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33353,516 ±(99.9%) 189,568 B/op [Average]
[info]   (min, avg, max) = (33300,176, 33353,516, 33407,103), stdev = 49,230
[info]   CI (99.9%): [33163,948, 33543,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,239 ±(99.9%) 2,262 B/op [Average]
[info]   (min, avg, max) = (0,517, 1,239, 2,063), stdev = 0,587
[info]   CI (99.9%): [≈ 0, 3,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,60% complete, ETA 01:05:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 62624,697 ops/s
[info] # Warmup Iteration   2: 87743,848 ops/s
[info] # Warmup Iteration   3: 87934,286 ops/s
[info] # Warmup Iteration   4: 88138,949 ops/s
[info] # Warmup Iteration   5: 88116,715 ops/s
[info] Iteration   1: 88295,156 ops/s
[info]                  ·gc.alloc.rate:                   926,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24066,574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,484 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 88395,185 ops/s
[info]                  ·gc.alloc.rate:               927,836 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12032,898 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 88195,978 ops/s
[info]                  ·gc.alloc.rate:                   925,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12059,361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,371 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 87920,159 ops/s
[info]                  ·gc.alloc.rate:                   922,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,920 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24217,169 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,745 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 87962,721 ops/s
[info]                  ·gc.alloc.rate:               923,209 MB/sec
[info]                  ·gc.alloc.rate.norm:          16520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12114,447 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   88153,840 ±(99.9%) 796,456 ops/s [Average]
[info]   (min, avg, max) = (87920,159, 88153,840, 88395,185), stdev = 206,837
[info]   CI (99.9%): [87357,384, 88950,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   925,301 ±(99.9%) 8,391 MB/sec [Average]
[info]   (min, avg, max) = (922,909, 925,301, 927,836), stdev = 2,179
[info]   CI (99.9%): [916,910, 933,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16520,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16520,005, 16520,005, 16520,005), stdev = 0,001
[info]   CI (99.9%): [16520,004, 16520,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,343 ±(99.9%) 1424,385 MB/sec [Average]
[info]   (min, avg, max) = (675,776, 946,343, 1352,920), stdev = 369,908
[info]   CI (99.9%): [≈ 0, 2370,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   16898,090 ±(99.9%) 25463,991 B/op [Average]
[info]   (min, avg, max) = (12032,898, 16898,090, 24217,169), stdev = 6612,918
[info]   CI (99.9%): [≈ 0, 42362,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,520 ±(99.9%) 2,392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,520, 1,484), stdev = 0,621
[info]   CI (99.9%): [≈ 0, 2,912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50,80% complete, ETA 01:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 280326,757 ops/s
[info] # Warmup Iteration   2: 293823,291 ops/s
[info] # Warmup Iteration   3: 291372,126 ops/s
[info] # Warmup Iteration   4: 292560,652 ops/s
[info] # Warmup Iteration   5: 293890,585 ops/s
[info] Iteration   1: 290061,723 ops/s
[info]                  ·gc.alloc.rate:               943,756 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7297,910 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 294033,855 ops/s
[info]                  ·gc.alloc.rate:                   956,599 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3597,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,111 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 293935,827 ops/s
[info]                  ·gc.alloc.rate:               956,196 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3598,660 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 292968,999 ops/s
[info]                  ·gc.alloc.rate:                   953,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7221,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,224 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 293790,218 ops/s
[info]                  ·gc.alloc.rate:               955,616 MB/sec
[info]                  ·gc.alloc.rate.norm:          5120,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3600,350 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   292958,124 ±(99.9%) 6441,846 ops/s [Average]
[info]   (min, avg, max) = (290061,723, 292958,124, 294033,855), stdev = 1672,927
[info]   CI (99.9%): [286516,278, 299399,971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   953,050 ±(99.9%) 20,688 MB/sec [Average]
[info]   (min, avg, max) = (943,756, 953,050, 956,599), stdev = 5,373
[info]   CI (99.9%): [932,362, 973,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5120,001, 5120,001, 5120,002), stdev = 0,001
[info]   CI (99.9%): [5120,001, 5120,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,130 ±(99.9%) 1418,615 MB/sec [Average]
[info]   (min, avg, max) = (671,982, 941,130, 1345,203), stdev = 368,410
[info]   CI (99.9%): [≈ 0, 2359,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5063,151 ±(99.9%) 7721,193 B/op [Average]
[info]   (min, avg, max) = (3597,742, 5063,151, 7297,910), stdev = 2005,169
[info]   CI (99.9%): [≈ 0, 12784,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,067 ±(99.9%) 0,385 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,067, 0,224), stdev = 0,100
[info]   CI (99.9%): [≈ 0, 0,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51,00% complete, ETA 01:05:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25012,419 ops/s
[info] # Warmup Iteration   2: 38268,032 ops/s
[info] # Warmup Iteration   3: 38842,193 ops/s
[info] # Warmup Iteration   4: 38720,893 ops/s
[info] # Warmup Iteration   5: 38955,192 ops/s
[info] Iteration   1: 38936,427 ops/s
[info]                  ·gc.alloc.rate:                   1931,094 MB/sec
[info]                  ·gc.alloc.rate.norm:              78056,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81864,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,366 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 39100,433 ops/s
[info]                  ·gc.alloc.rate:                   1939,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              78056,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81670,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,514 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 39005,783 ops/s
[info]                  ·gc.alloc.rate:                   1934,381 MB/sec
[info]                  ·gc.alloc.rate.norm:              78056,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81976,695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,360 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 39049,259 ops/s
[info]                  ·gc.alloc.rate:                   1936,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              78056,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,799 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82005,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,356 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 38868,670 ops/s
[info]                  ·gc.alloc.rate:               1927,516 MB/sec
[info]                  ·gc.alloc.rate.norm:          78056,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 54957,520 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   38992,114 ±(99.9%) 352,522 ops/s [Average]
[info]   (min, avg, max) = (38868,670, 38992,114, 39100,433), stdev = 91,549
[info]   CI (99.9%): [38639,593, 39344,636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1933,823 ±(99.9%) 17,918 MB/sec [Average]
[info]   (min, avg, max) = (1927,516, 1933,823, 1939,314), stdev = 4,653
[info]   CI (99.9%): [1915,905, 1951,740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   78056,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (78056,010, 78056,011, 78056,011), stdev = 0,001
[info]   CI (99.9%): [78056,009, 78056,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1895,576 ±(99.9%) 1159,141 MB/sec [Average]
[info]   (min, avg, max) = (1357,121, 1895,576, 2034,799), stdev = 301,025
[info]   CI (99.9%): [736,435, 3054,717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76494,746 ±(99.9%) 46363,270 B/op [Average]
[info]   (min, avg, max) = (54957,520, 76494,746, 82005,156), stdev = 12040,394
[info]   CI (99.9%): [30131,476, 122858,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,519 ±(99.9%) 5,603 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,519, 3,366), stdev = 1,455
[info]   CI (99.9%): [≈ 0, 8,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 51,20% complete, ETA 01:04:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46594,356 ops/s
[info] # Warmup Iteration   2: 52494,946 ops/s
[info] # Warmup Iteration   3: 52014,933 ops/s
[info] # Warmup Iteration   4: 52909,457 ops/s
[info] # Warmup Iteration   5: 52861,123 ops/s
[info] Iteration   1: 53012,730 ops/s
[info]                  ·gc.alloc.rate:                   884,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,525 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40005,078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,472 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 53092,984 ops/s
[info]                  ·gc.alloc.rate:               886,056 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19944,290 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 53032,019 ops/s
[info]                  ·gc.alloc.rate:               884,959 MB/sec
[info]                  ·gc.alloc.rate.norm:          26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19945,578 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 52872,464 ops/s
[info]                  ·gc.alloc.rate:                   882,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40011,844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 52800,380 ops/s
[info]                  ·gc.alloc.rate:                   881,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              26264,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20033,196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,620 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle":
[info]   52962,115 ±(99.9%) 466,750 ops/s [Average]
[info]   (min, avg, max) = (52800,380, 52962,115, 53092,984), stdev = 121,214
[info]   CI (99.9%): [52495,365, 53428,866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate":
[info]   883,814 ±(99.9%) 7,933 MB/sec [Average]
[info]   (min, avg, max) = (881,026, 883,814, 886,056), stdev = 2,060
[info]   CI (99.9%): [875,881, 891,747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   26264,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (26264,008, 26264,008, 26264,009), stdev = 0,001
[info]   CI (99.9%): [26264,006, 26264,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   941,735 ±(99.9%) 1420,614 MB/sec [Average]
[info]   (min, avg, max) = (672,013, 941,735, 1347,525), stdev = 368,929
[info]   CI (99.9%): [≈ 0, 2362,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   27987,997 ±(99.9%) 42253,852 B/op [Average]
[info]   (min, avg, max) = (19944,290, 27987,997, 40011,844), stdev = 10973,191
[info]   CI (99.9%): [≈ 0, 70241,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,866 ±(99.9%) 3,982 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,866, 2,472), stdev = 1,034
[info]   CI (99.9%): [≈ 0, 4,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readUPickle:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51,41% complete, ETA 01:04:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51333,352 ops/s
[info] # Warmup Iteration   2: 61151,782 ops/s
[info] # Warmup Iteration   3: 61181,274 ops/s
[info] # Warmup Iteration   4: 62358,104 ops/s
[info] # Warmup Iteration   5: 62297,210 ops/s
[info] Iteration   1: 61880,076 ops/s
[info]                  ·gc.alloc.rate:               918,154 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17093,678 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 62607,047 ops/s
[info]                  ·gc.alloc.rate:                   928,893 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16896,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,523 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 62541,295 ops/s
[info]                  ·gc.alloc.rate:                   927,971 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,863 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33792,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,048 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 62351,918 ops/s
[info]                  ·gc.alloc.rate:               925,168 MB/sec
[info]                  ·gc.alloc.rate.norm:          23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16947,498 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 62402,693 ops/s
[info]                  ·gc.alloc.rate:                   925,789 MB/sec
[info]                  ·gc.alloc.rate.norm:              23352,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,645 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33866,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,525 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   62356,606 ±(99.9%) 1099,387 ops/s [Average]
[info]   (min, avg, max) = (61880,076, 62356,606, 62607,047), stdev = 285,507
[info]   CI (99.9%): [61257,218, 63455,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   925,195 ±(99.9%) 16,258 MB/sec [Average]
[info]   (min, avg, max) = (918,154, 925,195, 928,893), stdev = 4,222
[info]   CI (99.9%): [908,937, 941,453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   23352,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23352,007, 23352,007, 23352,007), stdev = 0,001
[info]   CI (99.9%): [23352,006, 23352,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   940,226 ±(99.9%) 1414,944 MB/sec [Average]
[info]   (min, avg, max) = (671,432, 940,226, 1342,863), stdev = 367,457
[info]   CI (99.9%): [≈ 0, 2355,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23719,367 ±(99.9%) 35540,392 B/op [Average]
[info]   (min, avg, max) = (16896,311, 23719,367, 33866,759), stdev = 9229,727
[info]   CI (99.9%): [≈ 0, 59259,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,419 ±(99.9%) 1,688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,419, 1,048), stdev = 0,438
[info]   CI (99.9%): [≈ 0, 2,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,61% complete, ETA 01:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 73913,722 ops/s
[info] # Warmup Iteration   2: 103115,857 ops/s
[info] # Warmup Iteration   3: 103753,130 ops/s
[info] # Warmup Iteration   4: 104329,893 ops/s
[info] # Warmup Iteration   5: 104734,029 ops/s
[info] Iteration   1: 104933,392 ops/s
[info]                  ·gc.alloc.rate:                   1437,394 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20290,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,937 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 105124,115 ops/s
[info]                  ·gc.alloc.rate:                   1440,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559,985 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20264,073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,312 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 104850,455 ops/s
[info]                  ·gc.alloc.rate:                   1436,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,800 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20336,431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,625 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 104754,757 ops/s
[info]                  ·gc.alloc.rate:                   1435,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,169 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20375,273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,313 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 105207,896 ops/s
[info]                  ·gc.alloc.rate:                   1441,036 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20296,755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,311 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   104974,123 ±(99.9%) 726,083 ops/s [Average]
[info]   (min, avg, max) = (104754,757, 104974,123, 105207,896), stdev = 188,561
[info]   CI (99.9%): [104248,040, 105700,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1437,954 ±(99.9%) 9,679 MB/sec [Average]
[info]   (min, avg, max) = (1435,026, 1437,954, 1441,036), stdev = 2,514
[info]   CI (99.9%): [1428,275, 1447,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560,008 ±(99.9%) 0,061 B/op [Average]
[info]   (min, avg, max) = (21559,985, 21560,008, 21560,023), stdev = 0,016
[info]   CI (99.9%): [21559,947, 21560,069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,754 ±(99.9%) 6,430 MB/sec [Average]
[info]   (min, avg, max) = (1352,748, 1354,754, 1356,602), stdev = 1,670
[info]   CI (99.9%): [1348,324, 1361,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20312,582 ±(99.9%) 167,797 B/op [Average]
[info]   (min, avg, max) = (20264,073, 20312,582, 20375,273), stdev = 43,576
[info]   CI (99.9%): [20144,785, 20480,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,499 ±(99.9%) 1,076 B/op [Average]
[info]   (min, avg, max) = (0,311, 0,499, 0,937), stdev = 0,279
[info]   CI (99.9%): [≈ 0, 1,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51,81% complete, ETA 01:04:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 298293,056 ops/s
[info] # Warmup Iteration   2: 313858,160 ops/s
[info] # Warmup Iteration   3: 307066,913 ops/s
[info] # Warmup Iteration   4: 306044,268 ops/s
[info] # Warmup Iteration   5: 305247,036 ops/s
[info] Iteration   1: 305364,735 ops/s
[info]                  ·gc.alloc.rate:               973,159 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6934,845 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 307041,972 ops/s
[info]                  ·gc.alloc.rate:               978,632 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3445,298 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 305536,686 ops/s
[info]                  ·gc.alloc.rate:                   973,690 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6924,102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,214 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 306196,222 ops/s
[info]                  ·gc.alloc.rate:               975,897 MB/sec
[info]                  ·gc.alloc.rate.norm:          5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,138 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3454,714 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 304814,509 ops/s
[info]                  ·gc.alloc.rate:                   971,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6940,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   305790,825 ±(99.9%) 3295,084 ops/s [Average]
[info]   (min, avg, max) = (304814,509, 305790,825, 307041,972), stdev = 855,723
[info]   CI (99.9%): [302495,741, 309085,909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   974,566 ±(99.9%) 10,676 MB/sec [Average]
[info]   (min, avg, max) = (971,452, 974,566, 978,632), stdev = 2,772
[info]   CI (99.9%): [963,890, 985,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5016,001, 5016,001, 5016,001), stdev = 0,001
[info]   CI (99.9%): [5016,001, 5016,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,598 ±(99.9%) 1418,139 MB/sec [Average]
[info]   (min, avg, max) = (672,138, 1075,598, 1345,436), stdev = 368,286
[info]   CI (99.9%): [≈ 0, 2493,738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5539,869 ±(99.9%) 7346,208 B/op [Average]
[info]   (min, avg, max) = (3445,298, 5539,869, 6940,385), stdev = 1907,787
[info]   CI (99.9%): [≈ 0, 12886,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,064 ±(99.9%) 0,369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,064, 0,214), stdev = 0,096
[info]   CI (99.9%): [≈ 0, 0,434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 52,01% complete, ETA 01:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 345484,959 ops/s
[info] # Warmup Iteration   2: 360026,453 ops/s
[info] # Warmup Iteration   3: 359696,732 ops/s
[info] # Warmup Iteration   4: 359729,074 ops/s
[info] # Warmup Iteration   5: 359703,573 ops/s
[info] Iteration   1: 360350,805 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 358569,797 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 360783,753 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 359511,451 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 359586,685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   359760,498 ±(99.9%) 3281,823 ops/s [Average]
[info]   (min, avg, max) = (358569,797, 359760,498, 360783,753), stdev = 852,279
[info]   CI (99.9%): [356478,675, 363042,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 52,21% complete, ETA 01:03:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 65222,804 ops/s
[info] # Warmup Iteration   2: 80964,418 ops/s
[info] # Warmup Iteration   3: 80671,716 ops/s
[info] # Warmup Iteration   4: 81282,148 ops/s
[info] # Warmup Iteration   5: 81006,266 ops/s
[info] Iteration   1: 81318,453 ops/s
[info]                  ·gc.alloc.rate:                   1206,120 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25937,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,403 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 81516,794 ops/s
[info]                  ·gc.alloc.rate:               1209,145 MB/sec
[info]                  ·gc.alloc.rate.norm:          23344,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,175 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12938,555 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 81443,514 ops/s
[info]                  ·gc.alloc.rate:               1207,897 MB/sec
[info]                  ·gc.alloc.rate.norm:          23344,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25905,465 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 81096,404 ops/s
[info]                  ·gc.alloc.rate:                   1202,878 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343,980 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26027,290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,808 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 81306,418 ops/s
[info]                  ·gc.alloc.rate:                   1205,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,356 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25987,149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,403 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   81336,317 ±(99.9%) 617,409 ops/s [Average]
[info]   (min, avg, max) = (81096,404, 81336,317, 81516,794), stdev = 160,339
[info]   CI (99.9%): [80718,908, 81953,725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1206,374 ±(99.9%) 9,150 MB/sec [Average]
[info]   (min, avg, max) = (1202,878, 1206,374, 1209,145), stdev = 2,376
[info]   CI (99.9%): [1197,224, 1215,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344,010 ±(99.9%) 0,079 B/op [Average]
[info]   (min, avg, max) = (23343,980, 23344,010, 23344,030), stdev = 0,021
[info]   CI (99.9%): [23343,931, 23344,089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1206,850 ±(99.9%) 1155,238 MB/sec [Average]
[info]   (min, avg, max) = (670,175, 1206,850, 1342,356), stdev = 300,012
[info]   CI (99.9%): [51,612, 2362,088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   23359,267 ±(99.9%) 22432,083 B/op [Average]
[info]   (min, avg, max) = (12938,555, 23359,267, 26027,290), stdev = 5825,541
[info]   CI (99.9%): [927,184, 45791,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,323 ±(99.9%) 1,301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,323, 0,808), stdev = 0,338
[info]   CI (99.9%): [≈ 0, 1,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 52,41% complete, ETA 01:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11026,923 ops/s
[info] # Warmup Iteration   2: 11320,295 ops/s
[info] # Warmup Iteration   3: 11547,002 ops/s
[info] # Warmup Iteration   4: 11413,950 ops/s
[info] # Warmup Iteration   5: 11519,290 ops/s
[info] Iteration   1: 11483,397 ops/s
[info]                  ·gc.alloc.rate:                   284,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              39010,939 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70105,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,005 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,625 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11539,240 ops/s
[info]                  ·gc.alloc.rate:               286,024 MB/sec
[info]                  ·gc.alloc.rate.norm:          39008,035 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,598 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 69771,822 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 11544,714 ops/s
[info]                  ·gc.alloc.rate:      286,116 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 11486,932 ops/s
[info]                  ·gc.alloc.rate:               284,699 MB/sec
[info]                  ·gc.alloc.rate.norm:          39008,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,532 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70087,586 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 11515,526 ops/s
[info]                  ·gc.alloc.rate:      285,481 MB/sec
[info]                  ·gc.alloc.rate.norm: 39008,035 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle":
[info]   11513,962 ±(99.9%) 109,793 ops/s [Average]
[info]   (min, avg, max) = (11483,397, 11513,962, 11544,714), stdev = 28,513
[info]   CI (99.9%): [11404,168, 11623,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   285,388 ±(99.9%) 2,732 MB/sec [Average]
[info]   (min, avg, max) = (284,617, 285,388, 286,116), stdev = 0,710
[info]   CI (99.9%): [282,655, 288,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   39008,618 ±(99.9%) 4,996 B/op [Average]
[info]   (min, avg, max) = (39008,035, 39008,618, 39010,939), stdev = 1,298
[info]   CI (99.9%): [39003,622, 39013,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,922 ±(99.9%) 1078,874 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,922, 511,598), stdev = 280,180
[info]   CI (99.9%): [≈ 0, 1385,796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   41993,060 ±(99.9%) 147612,408 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41993,060, 70105,891), stdev = 38334,474
[info]   CI (99.9%): [≈ 0, 189605,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,005), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,125 ±(99.9%) 1,077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,125, 0,625), stdev = 0,280
[info]   CI (99.9%): [≈ 0, 1,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52,61% complete, ETA 01:02:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22836,693 ops/s
[info] # Warmup Iteration   2: 29191,327 ops/s
[info] # Warmup Iteration   3: 29082,604 ops/s
[info] # Warmup Iteration   4: 29210,619 ops/s
[info] # Warmup Iteration   5: 29040,289 ops/s
[info] Iteration   1: 29263,286 ops/s
[info]                  ·gc.alloc.rate:               1524,260 MB/sec
[info]                  ·gc.alloc.rate.norm:          81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,136 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72295,820 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 29316,810 ops/s
[info]                  ·gc.alloc.rate:                   1527,022 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72160,223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,117 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 29292,472 ops/s
[info]                  ·gc.alloc.rate:                   1525,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,814 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     108422,164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,355 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 29233,078 ops/s
[info]                  ·gc.alloc.rate:               1522,847 MB/sec
[info]                  ·gc.alloc.rate.norm:          81984,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,886 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72510,967 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 29260,258 ops/s
[info]                  ·gc.alloc.rate:               1524,034 MB/sec
[info]                  ·gc.alloc.rate.norm:          81984,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,978 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 72513,251 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce":
[info]   29273,181 ±(99.9%) 124,012 ops/s [Average]
[info]   (min, avg, max) = (29233,078, 29273,181, 29316,810), stdev = 32,206
[info]   CI (99.9%): [29149,169, 29397,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate":
[info]   1524,789 ±(99.9%) 6,266 MB/sec [Average]
[info]   (min, avg, max) = (1522,847, 1524,789, 1527,022), stdev = 1,627
[info]   CI (99.9%): [1518,522, 1531,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   81984,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (81984,014, 81984,014, 81984,015), stdev = 0,001
[info]   CI (99.9%): [81984,012, 81984,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1480,172 ±(99.9%) 1157,334 MB/sec [Average]
[info]   (min, avg, max) = (1344,046, 1480,172, 2017,814), stdev = 300,556
[info]   CI (99.9%): [322,838, 2637,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   79580,485 ±(99.9%) 62086,573 B/op [Average]
[info]   (min, avg, max) = (72160,223, 79580,485, 108422,164), stdev = 16123,686
[info]   CI (99.9%): [17493,912, 141667,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,895 ±(99.9%) 5,615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,895, 3,355), stdev = 1,458
[info]   CI (99.9%): [≈ 0, 6,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52,81% complete, ETA 01:02:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22693,173 ops/s
[info] # Warmup Iteration   2: 33640,851 ops/s
[info] # Warmup Iteration   3: 33708,676 ops/s
[info] # Warmup Iteration   4: 33726,324 ops/s
[info] # Warmup Iteration   5: 33676,351 ops/s
[info] Iteration   1: 33631,599 ops/s
[info]                  ·gc.alloc.rate:                   1316,478 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63278,019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,974 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 33607,731 ops/s
[info]                  ·gc.alloc.rate:                   1315,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63387,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,975 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 33736,806 ops/s
[info]                  ·gc.alloc.rate:                   1320,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,424 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63189,880 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,942 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 33683,679 ops/s
[info]                  ·gc.alloc.rate:               1318,632 MB/sec
[info]                  ·gc.alloc.rate.norm:          61608,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63334,090 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 33725,976 ops/s
[info]                  ·gc.alloc.rate:               1320,088 MB/sec
[info]                  ·gc.alloc.rate.norm:          61608,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,423 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63303,739 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala":
[info]   33677,158 ±(99.9%) 218,500 ops/s [Average]
[info]   (min, avg, max) = (33607,731, 33677,158, 33736,806), stdev = 56,744
[info]   CI (99.9%): [33458,658, 33895,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1318,232 ±(99.9%) 8,538 MB/sec [Average]
[info]   (min, avg, max) = (1315,446, 1318,232, 1320,517), stdev = 2,217
[info]   CI (99.9%): [1309,695, 1326,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   61608,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (61608,012, 61608,012, 61608,013), stdev = 0,001
[info]   CI (99.9%): [61608,011, 61608,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1354,405 ±(99.9%) 6,499 MB/sec [Average]
[info]   (min, avg, max) = (1352,164, 1354,405, 1356,423), stdev = 1,688
[info]   CI (99.9%): [1347,907, 1360,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   63298,640 ±(99.9%) 281,832 B/op [Average]
[info]   (min, avg, max) = (63189,880, 63298,640, 63387,470), stdev = 73,191
[info]   CI (99.9%): [63016,808, 63580,472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,778 ±(99.9%) 3,130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,778, 1,942), stdev = 0,813
[info]   CI (99.9%): [≈ 0, 3,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,01% complete, ETA 01:02:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 527667,778 ops/s
[info] # Warmup Iteration   2: 550759,491 ops/s
[info] # Warmup Iteration   3: 549990,427 ops/s
[info] # Warmup Iteration   4: 554935,628 ops/s
[info] # Warmup Iteration   5: 552734,429 ops/s
[info] Iteration   1: 551111,325 ops/s
[info]                  ·gc.alloc.rate:                   1434,240 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3838,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 554181,762 ops/s
[info]                  ·gc.alloc.rate:                   1442,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3817,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,059 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 553710,154 ops/s
[info]                  ·gc.alloc.rate:                   1440,964 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3824,474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,177 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 552177,227 ops/s
[info]                  ·gc.alloc.rate:                   1437,132 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3838,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,119 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 554482,458 ops/s
[info]                  ·gc.alloc.rate:                   1442,905 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3826,720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,118 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala":
[info]   553132,585 ±(99.9%) 5531,647 ops/s [Average]
[info]   (min, avg, max) = (551111,325, 553132,585, 554482,458), stdev = 1436,551
[info]   CI (99.9%): [547600,938, 558664,232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1439,525 ±(99.9%) 14,320 MB/sec [Average]
[info]   (min, avg, max) = (1434,240, 1439,525, 1442,905), stdev = 3,719
[info]   CI (99.9%): [1425,205, 1453,845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4096,001, 4096,001, 4096,001), stdev = 0,001
[info]   CI (99.9%): [4096,001, 4096,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1345,787 ±(99.9%) 6,425 MB/sec [Average]
[info]   (min, avg, max) = (1344,148, 1345,787, 1348,045), stdev = 1,668
[info]   CI (99.9%): [1339,362, 1352,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3829,298 ±(99.9%) 35,724 B/op [Average]
[info]   (min, avg, max) = (3817,716, 3829,298, 3838,872), stdev = 9,277
[info]   CI (99.9%): [3793,574, 3865,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,107 ±(99.9%) 0,190 B/op [Average]
[info]   (min, avg, max) = (0,059, 0,107, 0,177), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53,21% complete, ETA 01:02:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13642,707 ops/s
[info] # Warmup Iteration   2: 25470,555 ops/s
[info] # Warmup Iteration   3: 25371,427 ops/s
[info] # Warmup Iteration   4: 25388,368 ops/s
[info] # Warmup Iteration   5: 25497,690 ops/s
[info] Iteration   1: 25433,281 ops/s
[info]                  ·gc.alloc.rate:                   1933,676 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125672,493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,864 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 25510,119 ops/s
[info]                  ·gc.alloc.rate:                   1939,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     125467,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,421 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 25636,111 ops/s
[info]                  ·gc.alloc.rate:               1948,821 MB/sec
[info]                  ·gc.alloc.rate.norm:          119656,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83298,858 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 25403,060 ops/s
[info]                  ·gc.alloc.rate:                   1931,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126155,962 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,290 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 25190,948 ops/s
[info]                  ·gc.alloc.rate:                   1915,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              119656,016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127347,300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,601 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson":
[info]   25434,704 ±(99.9%) 628,825 ops/s [Average]
[info]   (min, avg, max) = (25190,948, 25434,704, 25636,111), stdev = 163,304
[info]   CI (99.9%): [24805,879, 26063,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1933,738 ±(99.9%) 47,776 MB/sec [Average]
[info]   (min, avg, max) = (1915,073, 1933,738, 1948,821), stdev = 12,407
[info]   CI (99.9%): [1885,963, 1981,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   119656,016 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (119656,016, 119656,016, 119656,017), stdev = 0,001
[info]   CI (99.9%): [119656,014, 119656,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1899,200 ±(99.9%) 1167,870 MB/sec [Average]
[info]   (min, avg, max) = (1356,677, 1899,200, 2038,170), stdev = 303,292
[info]   CI (99.9%): [731,330, 3067,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   117588,417 ±(99.9%) 73864,250 B/op [Average]
[info]   (min, avg, max) = (83298,858, 117588,417, 127347,300), stdev = 19182,311
[info]   CI (99.9%): [43724,166, 191452,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,835 ±(99.9%) 9,511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,835, 6,421), stdev = 2,470
[info]   CI (99.9%): [≈ 0, 12,346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 53,41% complete, ETA 01:01:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24891,012 ops/s
[info] # Warmup Iteration   2: 30487,960 ops/s
[info] # Warmup Iteration   3: 30495,927 ops/s
[info] # Warmup Iteration   4: 30605,289 ops/s
[info] # Warmup Iteration   5: 30715,031 ops/s
[info] Iteration   1: 30650,332 ops/s
[info]                  ·gc.alloc.rate:                   1383,316 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69027,120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,069 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30682,768 ops/s
[info]                  ·gc.alloc.rate:                   1384,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68950,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,203 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 30772,763 ops/s
[info]                  ·gc.alloc.rate:               1388,941 MB/sec
[info]                  ·gc.alloc.rate.norm:          71032,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 68770,532 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 30738,079 ops/s
[info]                  ·gc.alloc.rate:                   1387,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68893,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 30658,869 ops/s
[info]                  ·gc.alloc.rate:                   1383,575 MB/sec
[info]                  ·gc.alloc.rate.norm:              71032,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69139,134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,069 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle":
[info]   30700,562 ±(99.9%) 203,743 ops/s [Average]
[info]   (min, avg, max) = (30650,332, 30700,562, 30772,763), stdev = 52,911
[info]   CI (99.9%): [30496,820, 30904,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1385,537 ±(99.9%) 9,491 MB/sec [Average]
[info]   (min, avg, max) = (1383,316, 1385,537, 1388,941), stdev = 2,465
[info]   CI (99.9%): [1376,045, 1395,028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   71032,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (71032,013, 71032,014, 71032,014), stdev = 0,001
[info]   CI (99.9%): [71032,012, 71032,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1345,041 ±(99.9%) 4,194 MB/sec [Average]
[info]   (min, avg, max) = (1344,008, 1345,041, 1346,706), stdev = 1,089
[info]   CI (99.9%): [1340,847, 1349,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   68956,140 ±(99.9%) 534,111 B/op [Average]
[info]   (min, avg, max) = (68770,532, 68956,140, 69139,134), stdev = 138,707
[info]   CI (99.9%): [68422,029, 69490,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,708 ±(99.9%) 5,509 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,708, 3,203), stdev = 1,431
[info]   CI (99.9%): [≈ 0, 7,217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53,61% complete, ETA 01:01:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58191,613 ops/s
[info] # Warmup Iteration   2: 74896,630 ops/s
[info] # Warmup Iteration   3: 75105,023 ops/s
[info] # Warmup Iteration   4: 75161,589 ops/s
[info] # Warmup Iteration   5: 74756,193 ops/s
[info] Iteration   1: 75370,109 ops/s
[info]                  ·gc.alloc.rate:                   1596,282 MB/sec
[info]                  ·gc.alloc.rate.norm:              33336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42063,779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,304 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 75767,247 ops/s
[info]                  ·gc.alloc.rate:               1604,693 MB/sec
[info]                  ·gc.alloc.rate.norm:          33336,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,493 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 27909,814 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 75469,308 ops/s
[info]                  ·gc.alloc.rate:                   1598,448 MB/sec
[info]                  ·gc.alloc.rate.norm:              33336,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42075,281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,302 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 75128,702 ops/s
[info]                  ·gc.alloc.rate:                   1591,391 MB/sec
[info]                  ·gc.alloc.rate.norm:              33336,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28213,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,872 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 75396,873 ops/s
[info]                  ·gc.alloc.rate:               1596,801 MB/sec
[info]                  ·gc.alloc.rate.norm:          33336,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28142,599 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce":
[info]   75426,448 ±(99.9%) 883,726 ops/s [Average]
[info]   (min, avg, max) = (75128,702, 75426,448, 75767,247), stdev = 229,501
[info]   CI (99.9%): [74542,722, 76310,174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1597,523 ±(99.9%) 18,460 MB/sec [Average]
[info]   (min, avg, max) = (1591,391, 1597,523, 1604,693), stdev = 4,794
[info]   CI (99.9%): [1579,063, 1615,983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33336,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (33336,005, 33336,006, 33336,006), stdev = 0,001
[info]   CI (99.9%): [33336,004, 33336,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,021 ±(99.9%) 1412,509 MB/sec [Average]
[info]   (min, avg, max) = (1343,493, 1614,021, 2017,492), stdev = 366,824
[info]   CI (99.9%): [201,512, 3026,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   33681,081 ±(99.9%) 29489,762 B/op [Average]
[info]   (min, avg, max) = (27909,814, 33681,081, 42075,281), stdev = 7658,398
[info]   CI (99.9%): [4191,319, 63170,843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,696 ±(99.9%) 2,538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,696, 1,304), stdev = 0,659
[info]   CI (99.9%): [≈ 0, 3,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53,82% complete, ETA 01:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 137151,658 ops/s
[info] # Warmup Iteration   2: 183975,194 ops/s
[info] # Warmup Iteration   3: 182169,265 ops/s
[info] # Warmup Iteration   4: 184271,931 ops/s
[info] # Warmup Iteration   5: 182818,871 ops/s
[info] Iteration   1: 183189,696 ops/s
[info]                  ·gc.alloc.rate:                   1388,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11622,740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,179 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 183080,759 ops/s
[info]                  ·gc.alloc.rate:               1387,538 MB/sec
[info]                  ·gc.alloc.rate.norm:          11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,165 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11641,110 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 184077,850 ops/s
[info]                  ·gc.alloc.rate:                   1395,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11583,832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,534 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 183787,280 ops/s
[info]                  ·gc.alloc.rate:                   1392,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11613,262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 183992,864 ops/s
[info]                  ·gc.alloc.rate:                   1394,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              11928,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,365 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11611,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,356 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala":
[info]   183625,690 ±(99.9%) 1777,581 ops/s [Average]
[info]   (min, avg, max) = (183080,759, 183625,690, 184077,850), stdev = 461,632
[info]   CI (99.9%): [181848,108, 185403,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1391,641 ±(99.9%) 13,445 MB/sec [Average]
[info]   (min, avg, max) = (1387,538, 1391,641, 1395,091), stdev = 3,492
[info]   CI (99.9%): [1378,196, 1405,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11928,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11928,002, 11928,002, 11928,002), stdev = 0,001
[info]   CI (99.9%): [11928,002, 11928,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1355,066 ±(99.9%) 6,844 MB/sec [Average]
[info]   (min, avg, max) = (1352,778, 1355,066, 1357,365), stdev = 1,777
[info]   CI (99.9%): [1348,222, 1361,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11614,546 ±(99.9%) 79,974 B/op [Average]
[info]   (min, avg, max) = (11583,832, 11614,546, 11641,110), stdev = 20,769
[info]   CI (99.9%): [11534,571, 11694,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,249 ±(99.9%) 0,781 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,249, 0,534), stdev = 0,203
[info]   CI (99.9%): [≈ 0, 1,030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,02% complete, ETA 01:01:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1241330,534 ops/s
[info] # Warmup Iteration   2: 1310177,070 ops/s
[info] # Warmup Iteration   3: 1323653,648 ops/s
[info] # Warmup Iteration   4: 1330179,171 ops/s
[info] # Warmup Iteration   5: 1323220,201 ops/s
[info] Iteration   1: 1328630,587 ops/s
[info]                  ·gc.alloc.rate:                   1100,771 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1593,058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1329871,788 ops/s
[info]                  ·gc.alloc.rate:               1101,808 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,118 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 795,457 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1329291,001 ops/s
[info]                  ·gc.alloc.rate:                   1101,314 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1591,469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1317176,483 ops/s
[info]                  ·gc.alloc.rate:                   1091,363 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,220 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1606,124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1323652,604 ops/s
[info]                  ·gc.alloc.rate:               1096,547 MB/sec
[info]                  ·gc.alloc.rate.norm:          1304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 799,915 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala":
[info]   1325724,492 ±(99.9%) 20711,902 ops/s [Average]
[info]   (min, avg, max) = (1317176,483, 1325724,492, 1329871,788), stdev = 5378,815
[info]   CI (99.9%): [1305012,590, 1346436,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1098,361 ±(99.9%) 17,078 MB/sec [Average]
[info]   (min, avg, max) = (1091,363, 1098,361, 1101,808), stdev = 4,435
[info]   CI (99.9%): [1081,283, 1115,438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1304,000, 1304,000, 1304,000), stdev = 0,001
[info]   CI (99.9%): [1304,000, 1304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,575 ±(99.9%) 1417,262 MB/sec [Average]
[info]   (min, avg, max) = (672,118, 1075,575, 1344,778), stdev = 368,058
[info]   CI (99.9%): [≈ 0, 2492,836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1277,205 ±(99.9%) 1685,728 B/op [Average]
[info]   (min, avg, max) = (795,457, 1277,205, 1606,124), stdev = 437,778
[info]   CI (99.9%): [≈ 0, 2962,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,039 ±(99.9%) 0,172 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,039, 0,099), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 54,22% complete, ETA 01:00:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1450769,903 ops/s
[info] # Warmup Iteration   2: 1530357,588 ops/s
[info] # Warmup Iteration   3: 1528976,037 ops/s
[info] # Warmup Iteration   4: 1528805,501 ops/s
[info] # Warmup Iteration   5: 1529350,073 ops/s
[info] Iteration   1: 1533014,212 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1535434,754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1532960,826 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1526808,013 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1531324,170 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc":
[info]   1531908,395 ±(99.9%) 12346,234 ops/s [Average]
[info]   (min, avg, max) = (1526808,013, 1531908,395, 1535434,754), stdev = 3206,278
[info]   CI (99.9%): [1519562,161, 1544254,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54,42% complete, ETA 01:00:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93939,553 ops/s
[info] # Warmup Iteration   2: 139760,980 ops/s
[info] # Warmup Iteration   3: 139891,244 ops/s
[info] # Warmup Iteration   4: 140148,707 ops/s
[info] # Warmup Iteration   5: 139284,214 ops/s
[info] Iteration   1: 139883,002 ops/s
[info]                  ·gc.alloc.rate:                   1576,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15220,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,468 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 139278,172 ops/s
[info]                  ·gc.alloc.rate:                   1570,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,375 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15303,778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,706 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 138148,199 ops/s
[info]                  ·gc.alloc.rate:                   1557,377 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23160,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,711 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 139611,661 ops/s
[info]                  ·gc.alloc.rate:               1574,152 MB/sec
[info]                  ·gc.alloc.rate.norm:          17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15288,057 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 139275,661 ops/s
[info]                  ·gc.alloc.rate:                   1570,012 MB/sec
[info]                  ·gc.alloc.rate.norm:              17744,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15340,095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,470 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson":
[info]   139239,339 ±(99.9%) 2544,296 ops/s [Average]
[info]   (min, avg, max) = (138148,199, 139239,339, 139883,002), stdev = 660,745
[info]   CI (99.9%): [136695,044, 141783,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1569,772 ±(99.9%) 28,893 MB/sec [Average]
[info]   (min, avg, max) = (1557,377, 1569,772, 1576,985), stdev = 7,504
[info]   CI (99.9%): [1540,879, 1598,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   17744,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17744,003, 17744,003, 17744,003), stdev = 0,001
[info]   CI (99.9%): [17744,003, 17744,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1490,699 ±(99.9%) 1166,958 MB/sec [Average]
[info]   (min, avg, max) = (1352,723, 1490,699, 2032,812), stdev = 303,055
[info]   CI (99.9%): [323,741, 2657,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16862,691 ±(99.9%) 13558,343 B/op [Average]
[info]   (min, avg, max) = (15220,648, 16862,691, 23160,875), stdev = 3521,059
[info]   CI (99.9%): [3304,348, 30421,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,471 ±(99.9%) 1,114 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,471, 0,711), stdev = 0,289
[info]   CI (99.9%): [≈ 0, 1,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 54,62% complete, ETA 01:00:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31627,646 ops/s
[info] # Warmup Iteration   2: 33207,764 ops/s
[info] # Warmup Iteration   3: 33659,344 ops/s
[info] # Warmup Iteration   4: 33263,100 ops/s
[info] # Warmup Iteration   5: 33668,157 ops/s
[info] Iteration   1: 33626,646 ops/s
[info]                  ·gc.alloc.rate:                   444,345 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,478 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23942,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,737 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 33669,905 ops/s
[info]                  ·gc.alloc.rate:               445,002 MB/sec
[info]                  ·gc.alloc.rate.norm:          20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23914,072 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 33680,971 ops/s
[info]                  ·gc.alloc.rate:      445,092 MB/sec
[info]                  ·gc.alloc.rate.norm: 20800,012 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 33513,928 ops/s
[info]                  ·gc.alloc.rate:                   442,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31686,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151,753 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 33655,549 ops/s
[info]                  ·gc.alloc.rate:                   444,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              20800,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31553,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,947 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle":
[info]   33629,400 ±(99.9%) 260,632 ops/s [Average]
[info]   (min, avg, max) = (33513,928, 33629,400, 33680,971), stdev = 67,685
[info]   CI (99.9%): [33368,767, 33890,032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   444,412 ±(99.9%) 3,406 MB/sec [Average]
[info]   (min, avg, max) = (442,918, 444,412, 445,092), stdev = 0,885
[info]   CI (99.9%): [441,006, 447,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   20800,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (20800,012, 20800,012, 20800,013), stdev = 0,001
[info]   CI (99.9%): [20800,011, 20800,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   474,490 ±(99.9%) 1068,572 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,490, 674,745), stdev = 277,505
[info]   CI (99.9%): [≈ 0, 1543,063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   22219,335 ±(99.9%) 50069,330 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22219,335, 31686,877), stdev = 13002,846
[info]   CI (99.9%): [≈ 0, 72288,665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,662 ±(99.9%) 5,531 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,662, 3,231), stdev = 1,436
[info]   CI (99.9%): [≈ 0, 6,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   31,087 ±(99.9%) 259,766 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31,087, 151,753), stdev = 67,460
[info]   CI (99.9%): [≈ 0, 290,854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54,82% complete, ETA 01:00:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30004,979 ops/s
[info] # Warmup Iteration   2: 43831,197 ops/s
[info] # Warmup Iteration   3: 43810,588 ops/s
[info] # Warmup Iteration   4: 43934,930 ops/s
[info] # Warmup Iteration   5: 43770,883 ops/s
[info] Iteration   1: 43879,999 ops/s
[info]                  ·gc.alloc.rate:               1573,902 MB/sec
[info]                  ·gc.alloc.rate.norm:          56456,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,460 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48548,725 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 43826,901 ops/s
[info]                  ·gc.alloc.rate:                   1572,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,445 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48638,867 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,495 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 43880,862 ops/s
[info]                  ·gc.alloc.rate:                   1574,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,068 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72937,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,493 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 43393,657 ops/s
[info]                  ·gc.alloc.rate:                   1556,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              56456,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49215,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,755 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 43723,773 ops/s
[info]                  ·gc.alloc.rate:               1568,274 MB/sec
[info]                  ·gc.alloc.rate.norm:          56456,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1357,334 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48862,419 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala":
[info]   43741,038 ±(99.9%) 787,278 ops/s [Average]
[info]   (min, avg, max) = (43393,657, 43741,038, 43880,862), stdev = 204,454
[info]   CI (99.9%): [42953,761, 44528,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1569,101 ±(99.9%) 28,128 MB/sec [Average]
[info]   (min, avg, max) = (1556,768, 1569,101, 1574,434), stdev = 7,305
[info]   CI (99.9%): [1540,974, 1597,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   56456,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56456,009, 56456,010, 56456,010), stdev = 0,001
[info]   CI (99.9%): [56456,008, 56456,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1491,283 ±(99.9%) 1168,403 MB/sec [Average]
[info]   (min, avg, max) = (1353,460, 1491,283, 2034,068), stdev = 303,431
[info]   CI (99.9%): [322,880, 2659,687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   53640,599 ±(99.9%) 41549,968 B/op [Average]
[info]   (min, avg, max) = (48548,725, 53640,599, 72937,562), stdev = 10790,395
[info]   CI (99.9%): [12090,631, 95190,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,749 ±(99.9%) 2,877 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,749, 1,495), stdev = 0,747
[info]   CI (99.9%): [≈ 0, 3,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,02% complete, ETA 00:59:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 728673,272 ops/s
[info] # Warmup Iteration   2: 770798,353 ops/s
[info] # Warmup Iteration   3: 773436,812 ops/s
[info] # Warmup Iteration   4: 777978,961 ops/s
[info] # Warmup Iteration   5: 777367,971 ops/s
[info] Iteration   1: 773771,111 ops/s
[info]                  ·gc.alloc.rate:                   1510,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2734,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 773831,107 ops/s
[info]                  ·gc.alloc.rate:                   1510,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4102,160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 775477,401 ops/s
[info]                  ·gc.alloc.rate:                   1513,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2732,075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,127 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 775000,496 ops/s
[info]                  ·gc.alloc.rate:               1512,806 MB/sec
[info]                  ·gc.alloc.rate.norm:          3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,589 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2736,500 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 774015,195 ops/s
[info]                  ·gc.alloc.rate:                   1510,623 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2742,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala":
[info]   774419,062 ±(99.9%) 2974,474 ops/s [Average]
[info]   (min, avg, max) = (773771,111, 774419,062, 775477,401), stdev = 772,461
[info]   CI (99.9%): [771444,588, 777393,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1511,518 ±(99.9%) 6,020 MB/sec [Average]
[info]   (min, avg, max) = (1510,245, 1511,518, 1513,588), stdev = 1,563
[info]   CI (99.9%): [1505,498, 1517,538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,001, 3072,001, 3072,001), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1480,659 ±(99.9%) 1154,105 MB/sec [Average]
[info]   (min, avg, max) = (1344,115, 1480,659, 2016,801), stdev = 299,717
[info]   CI (99.9%): [326,554, 2634,764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3009,499 ±(99.9%) 2352,086 B/op [Average]
[info]   (min, avg, max) = (2732,075, 3009,499, 4102,160), stdev = 610,829
[info]   CI (99.9%): [657,413, 5361,584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,093 ±(99.9%) 0,212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,093, 0,127), stdev = 0,055
[info]   CI (99.9%): [≈ 0, 0,305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55,22% complete, ETA 00:59:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15941,142 ops/s
[info] # Warmup Iteration   2: 30794,238 ops/s
[info] # Warmup Iteration   3: 30835,019 ops/s
[info] # Warmup Iteration   4: 30761,212 ops/s
[info] # Warmup Iteration   5: 30738,086 ops/s
[info] Iteration   1: 30794,951 ops/s
[info]                  ·gc.alloc.rate:                   2240,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,444 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103880,581 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,191 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 30801,088 ops/s
[info]                  ·gc.alloc.rate:                   2241,453 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103986,226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,127 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 30977,726 ops/s
[info]                  ·gc.alloc.rate:                   2254,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     138005,258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,115 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 30725,089 ops/s
[info]                  ·gc.alloc.rate:                   2236,131 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     104400,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,132 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 30876,483 ops/s
[info]                  ·gc.alloc.rate:                   2246,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              114536,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,776 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103991,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,061 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson":
[info]   30835,067 ±(99.9%) 369,972 ops/s [Average]
[info]   (min, avg, max) = (30725,089, 30835,067, 30977,726), stdev = 96,081
[info]   CI (99.9%): [30465,095, 31205,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2243,875 ±(99.9%) 26,546 MB/sec [Average]
[info]   (min, avg, max) = (2236,131, 2243,875, 2254,273), stdev = 6,894
[info]   CI (99.9%): [2217,328, 2270,421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   114536,014 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (114536,013, 114536,014, 114536,015), stdev = 0,001
[info]   CI (99.9%): [114536,010, 114536,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2172,331 ±(99.9%) 1170,748 MB/sec [Average]
[info]   (min, avg, max) = (2032,444, 2172,331, 2716,190), stdev = 304,040
[info]   CI (99.9%): [1001,582, 3343,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   110852,867 ±(99.9%) 58452,581 B/op [Average]
[info]   (min, avg, max) = (103880,581, 110852,867, 138005,258), stdev = 15179,950
[info]   CI (99.9%): [52400,287, 169305,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,125 ±(99.9%) 2,901 B/op [Average]
[info]   (min, avg, max) = (1,061, 2,125, 3,191), stdev = 0,753
[info]   CI (99.9%): [≈ 0, 5,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 55,42% complete, ETA 00:59:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35244,859 ops/s
[info] # Warmup Iteration   2: 41883,667 ops/s
[info] # Warmup Iteration   3: 42135,498 ops/s
[info] # Warmup Iteration   4: 42353,880 ops/s
[info] # Warmup Iteration   5: 41799,957 ops/s
[info] Iteration   1: 42181,695 ops/s
[info]                  ·gc.alloc.rate:               1761,065 MB/sec
[info]                  ·gc.alloc.rate.norm:          65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,873 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 50151,124 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 42364,450 ops/s
[info]                  ·gc.alloc.rate:                   1768,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74974,298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 42351,366 ops/s
[info]                  ·gc.alloc.rate:                   1768,655 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75094,558 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,094 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 42346,546 ops/s
[info]                  ·gc.alloc.rate:                   1768,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,497 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50154,992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,774 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 42201,883 ops/s
[info]                  ·gc.alloc.rate:                   1761,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              65720,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     75593,859 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,776 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle":
[info]   42289,188 ±(99.9%) 344,397 ops/s [Average]
[info]   (min, avg, max) = (42181,695, 42289,188, 42364,450), stdev = 89,439
[info]   CI (99.9%): [41944,791, 42633,586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1765,717 ±(99.9%) 15,256 MB/sec [Average]
[info]   (min, avg, max) = (1761,065, 1765,717, 1768,854), stdev = 3,962
[info]   CI (99.9%): [1750,461, 1780,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   65720,010 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (65720,010, 65720,010, 65720,010), stdev = 0,001
[info]   CI (99.9%): [65720,008, 65720,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1751,729 ±(99.9%) 1423,853 MB/sec [Average]
[info]   (min, avg, max) = (1343,873, 1751,729, 2026,397), stdev = 369,770
[info]   CI (99.9%): [327,875, 3175,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   65193,766 ±(99.9%) 52877,776 B/op [Average]
[info]   (min, avg, max) = (50151,124, 65193,766, 75593,859), stdev = 13732,191
[info]   CI (99.9%): [12315,990, 118071,542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   1,548 ±(99.9%) 5,571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,548, 3,094), stdev = 1,447
[info]   CI (99.9%): [≈ 0, 7,118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,62% complete, ETA 00:58:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 290072,103 ops/s
[info] # Warmup Iteration   2: 396162,415 ops/s
[info] # Warmup Iteration   3: 397503,212 ops/s
[info] # Warmup Iteration   4: 397951,858 ops/s
[info] # Warmup Iteration   5: 397225,682 ops/s
[info] Iteration   1: 396109,930 ops/s
[info]                  ·gc.alloc.rate:               1101,346 MB/sec
[info]                  ·gc.alloc.rate.norm:          4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2686,274 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 396495,034 ops/s
[info]                  ·gc.alloc.rate:                   1102,415 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,481 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5368,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,165 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 368843,566 ops/s
[info]                  ·gc.alloc.rate:               1025,438 MB/sec
[info]                  ·gc.alloc.rate.norm:          4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2886,286 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 395834,098 ops/s
[info]                  ·gc.alloc.rate:               1100,672 MB/sec
[info]                  ·gc.alloc.rate.norm:          4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,303 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5384,375 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 397936,323 ops/s
[info]                  ·gc.alloc.rate:                   1106,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              4376,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5358,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,247 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala":
[info]   391043,790 ±(99.9%) 47889,297 ops/s [Average]
[info]   (min, avg, max) = (368843,566, 391043,790, 397936,323), stdev = 12436,698
[info]   CI (99.9%): [343154,494, 438933,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1087,240 ±(99.9%) 133,301 MB/sec [Average]
[info]   (min, avg, max) = (1025,438, 1087,240, 1106,330), stdev = 34,618
[info]   CI (99.9%): [953,940, 1220,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   4376,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4376,001, 4376,001, 4376,001), stdev = 0,001
[info]   CI (99.9%): [4376,001, 4376,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,799 ±(99.9%) 1429,207 MB/sec [Average]
[info]   (min, avg, max) = (676,078, 1082,799, 1354,782), stdev = 371,161
[info]   CI (99.9%): [≈ 0, 2512,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4336,860 ±(99.9%) 5457,417 B/op [Average]
[info]   (min, avg, max) = (2686,274, 4336,860, 5384,375), stdev = 1417,274
[info]   CI (99.9%): [≈ 0, 9794,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,082 ±(99.9%) 0,449 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,082, 0,247), stdev = 0,117
[info]   CI (99.9%): [≈ 0, 0,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55,82% complete, ETA 00:58:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1722919,379 ops/s
[info] # Warmup Iteration   2: 1830619,744 ops/s
[info] # Warmup Iteration   3: 1832370,762 ops/s
[info] # Warmup Iteration   4: 1849241,356 ops/s
[info] # Warmup Iteration   5: 1847569,125 ops/s
[info] Iteration   1: 1844554,899 ops/s
[info]                  ·gc.alloc.rate:                   1078,103 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1147,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1849707,113 ops/s
[info]                  ·gc.alloc.rate:               1081,221 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,105 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 571,887 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1839186,320 ops/s
[info]                  ·gc.alloc.rate:                   1075,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,153 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1150,270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1844454,786 ops/s
[info]                  ·gc.alloc.rate:               1078,219 MB/sec
[info]                  ·gc.alloc.rate.norm:          920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 573,489 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1844097,597 ops/s
[info]                  ·gc.alloc.rate:                   1077,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              920,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1147,780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala":
[info]   1844400,143 ±(99.9%) 14338,977 ops/s [Average]
[info]   (min, avg, max) = (1839186,320, 1844400,143, 1849707,113), stdev = 3723,787
[info]   CI (99.9%): [1830061,166, 1858739,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1078,093 ±(99.9%) 8,391 MB/sec [Average]
[info]   (min, avg, max) = (1075,070, 1078,093, 1081,221), stdev = 2,179
[info]   CI (99.9%): [1069,703, 1086,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   920,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (920,000, 920,000, 920,000), stdev = 0,001
[info]   CI (99.9%): [920,000, 920,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,581 ±(99.9%) 1418,257 MB/sec [Average]
[info]   (min, avg, max) = (672,105, 1075,581, 1344,816), stdev = 368,317
[info]   CI (99.9%): [≈ 0, 2493,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   918,205 ±(99.9%) 1214,550 B/op [Average]
[info]   (min, avg, max) = (571,887, 918,205, 1150,270), stdev = 315,415
[info]   CI (99.9%): [≈ 0, 2132,755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,053), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 56,02% complete, ETA 00:58:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1700828,451 ops/s
[info] # Warmup Iteration   2: 1776456,703 ops/s
[info] # Warmup Iteration   3: 1779282,102 ops/s
[info] # Warmup Iteration   4: 1778319,285 ops/s
[info] # Warmup Iteration   5: 1779253,052 ops/s
[info] Iteration   1: 1783053,227 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1785883,495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1779546,011 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1778647,347 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1781343,974 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc":
[info]   1781694,811 ±(99.9%) 11129,932 ops/s [Average]
[info]   (min, avg, max) = (1778647,347, 1781694,811, 1785883,495), stdev = 2890,408
[info]   CI (99.9%): [1770564,879, 1792824,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56,22% complete, ETA 00:58:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169985,717 ops/s
[info] # Warmup Iteration   2: 257289,535 ops/s
[info] # Warmup Iteration   3: 258901,369 ops/s
[info] # Warmup Iteration   4: 259810,012 ops/s
[info] # Warmup Iteration   5: 257896,579 ops/s
[info] Iteration   1: 258279,656 ops/s
[info]                  ·gc.alloc.rate:               1672,521 MB/sec
[info]                  ·gc.alloc.rate.norm:          10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2029,534 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12367,561 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 259340,642 ops/s
[info]                  ·gc.alloc.rate:               1679,436 MB/sec
[info]                  ·gc.alloc.rate.norm:          10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8222,096 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 259044,853 ops/s
[info]                  ·gc.alloc.rate:                   1677,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,343 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12355,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,379 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 258834,530 ops/s
[info]                  ·gc.alloc.rate:                   1676,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,899 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8250,221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 255801,833 ops/s
[info]                  ·gc.alloc.rate:                   1656,578 MB/sec
[info]                  ·gc.alloc.rate.norm:              10192,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,023 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12532,667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,128 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson":
[info]   258260,303 ±(99.9%) 5498,754 ops/s [Average]
[info]   (min, avg, max) = (255801,833, 258260,303, 259340,642), stdev = 1428,009
[info]   CI (99.9%): [252761,549, 263759,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1672,413 ±(99.9%) 35,421 MB/sec [Average]
[info]   (min, avg, max) = (1656,578, 1672,413, 1679,436), stdev = 9,199
[info]   CI (99.9%): [1636,992, 1707,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   10192,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10192,002, 10192,002, 10192,002), stdev = 0,001
[info]   CI (99.9%): [10192,001, 10192,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1762,327 ±(99.9%) 1428,801 MB/sec [Average]
[info]   (min, avg, max) = (1354,836, 1762,327, 2037,023), stdev = 371,055
[info]   CI (99.9%): [333,526, 3191,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10745,651 ±(99.9%) 8825,413 B/op [Average]
[info]   (min, avg, max) = (8222,096, 10745,651, 12532,667), stdev = 2291,932
[info]   CI (99.9%): [1920,238, 19571,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,152 ±(99.9%) 0,635 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,152, 0,379), stdev = 0,165
[info]   CI (99.9%): [≈ 0, 0,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 56,43% complete, ETA 00:57:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48263,933 ops/s
[info] # Warmup Iteration   2: 51296,568 ops/s
[info] # Warmup Iteration   3: 51479,983 ops/s
[info] # Warmup Iteration   4: 51345,782 ops/s
[info] # Warmup Iteration   5: 51292,007 ops/s
[info] Iteration   1: 51422,513 ops/s
[info]                  ·gc.alloc.rate:               344,476 MB/sec
[info]                  ·gc.alloc.rate.norm:          10544,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15656,778 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 51284,805 ops/s
[info]                  ·gc.alloc.rate:      343,599 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 51257,001 ops/s
[info]                  ·gc.alloc.rate:                   343,361 MB/sec
[info]                  ·gc.alloc.rate.norm:              10544,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15708,084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,207 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 51283,707 ops/s
[info]                  ·gc.alloc.rate:               343,581 MB/sec
[info]                  ·gc.alloc.rate.norm:          10544,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15699,816 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 51495,021 ops/s
[info]                  ·gc.alloc.rate:      344,931 MB/sec
[info]                  ·gc.alloc.rate.norm: 10544,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle":
[info]   51348,610 ±(99.9%) 401,897 ops/s [Average]
[info]   (min, avg, max) = (51257,001, 51348,610, 51495,021), stdev = 104,371
[info]   CI (99.9%): [50946,713, 51750,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   343,990 ±(99.9%) 2,610 MB/sec [Average]
[info]   (min, avg, max) = (343,361, 343,990, 344,931), stdev = 0,678
[info]   CI (99.9%): [341,380, 346,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   10544,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (10544,008, 10544,008, 10544,009), stdev = 0,001
[info]   CI (99.9%): [10544,006, 10544,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,925 ±(99.9%) 1078,885 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,925, 511,586), stdev = 280,183
[info]   CI (99.9%): [≈ 0, 1385,810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   9412,936 ±(99.9%) 33087,880 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9412,936, 15708,084), stdev = 8592,817
[info]   CI (99.9%): [≈ 0, 42500,816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,001 ±(99.9%) 0,012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,041 ±(99.9%) 0,357 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,041, 0,207), stdev = 0,093
[info]   CI (99.9%): [≈ 0, 0,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfYearsBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,304
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56,63% complete, ETA 00:57:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61395,578 ops/s
[info] # Warmup Iteration   2: 81296,221 ops/s
[info] # Warmup Iteration   3: 77964,140 ops/s
[info] # Warmup Iteration   4: 80322,087 ops/s
[info] # Warmup Iteration   5: 80436,615 ops/s
[info] Iteration   1: 80360,967 ops/s
[info]                  ·gc.alloc.rate:                   1614,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1339,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26227,445 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,815 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 80322,994 ops/s
[info]                  ·gc.alloc.rate:               1613,892 MB/sec
[info]                  ·gc.alloc.rate.norm:          31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26259,427 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 80764,148 ops/s
[info]                  ·gc.alloc.rate:                   1622,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2012,495 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39220,029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,406 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 80335,357 ops/s
[info]                  ·gc.alloc.rate:                   1614,271 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26333,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,408 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 80228,220 ops/s
[info]                  ·gc.alloc.rate:                   1611,895 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39625,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,408 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   80402,337 ±(99.9%) 802,463 ops/s [Average]
[info]   (min, avg, max) = (80228,220, 80402,337, 80764,148), stdev = 208,397
[info]   CI (99.9%): [79599,874, 81204,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1615,480 ±(99.9%) 16,108 MB/sec [Average]
[info]   (min, avg, max) = (1611,895, 1615,480, 1622,720), stdev = 4,183
[info]   CI (99.9%): [1599,373, 1631,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (31624,005, 31624,005, 31624,005), stdev = 0,001
[info]   CI (99.9%): [31624,004, 31624,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1611,136 ±(99.9%) 1423,634 MB/sec [Average]
[info]   (min, avg, max) = (1339,092, 1611,136, 2019,749), stdev = 369,713
[info]   CI (99.9%): [187,502, 3034,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   31533,288 ±(99.9%) 27738,933 B/op [Average]
[info]   (min, avg, max) = (26227,445, 31533,288, 39625,735), stdev = 7203,713
[info]   CI (99.9%): [3794,355, 59272,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,407 ±(99.9%) 1,110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,407, 0,815), stdev = 0,288
[info]   CI (99.9%): [≈ 0, 1,517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56,83% complete, ETA 00:57:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68626,056 ops/s
[info] # Warmup Iteration   2: 96409,009 ops/s
[info] # Warmup Iteration   3: 96696,356 ops/s
[info] # Warmup Iteration   4: 96745,044 ops/s
[info] # Warmup Iteration   5: 96808,270 ops/s
[info] Iteration   1: 96634,101 ops/s
[info]                  ·gc.alloc.rate:               1119,946 MB/sec
[info]                  ·gc.alloc.rate.norm:          18240,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10994,763 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 96915,895 ops/s
[info]                  ·gc.alloc.rate:                   1123,301 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21938,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,676 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 96753,536 ops/s
[info]                  ·gc.alloc.rate:                   1121,296 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21994,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,339 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 96890,634 ops/s
[info]                  ·gc.alloc.rate:               1122,956 MB/sec
[info]                  ·gc.alloc.rate.norm:          18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10987,473 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 96178,133 ops/s
[info]                  ·gc.alloc.rate:                   1114,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              18240,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22148,485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,681 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   96674,460 ±(99.9%) 1153,979 ops/s [Average]
[info]   (min, avg, max) = (96178,133, 96674,460, 96915,895), stdev = 299,685
[info]   CI (99.9%): [95520,480, 97828,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1120,406 ±(99.9%) 13,669 MB/sec [Average]
[info]   (min, avg, max) = (1114,531, 1120,406, 1123,301), stdev = 3,550
[info]   CI (99.9%): [1106,737, 1134,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   18240,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (18240,004, 18240,004, 18240,005), stdev = 0,001
[info]   CI (99.9%): [18240,004, 18240,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1081,620 ±(99.9%) 1426,634 MB/sec [Average]
[info]   (min, avg, max) = (675,084, 1081,620, 1353,354), stdev = 370,492
[info]   CI (99.9%): [≈ 0, 2508,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17612,870 ±(99.9%) 23278,273 B/op [Average]
[info]   (min, avg, max) = (10987,473, 17612,870, 22148,485), stdev = 6045,293
[info]   CI (99.9%): [≈ 0, 40891,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,339 ±(99.9%) 1,307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,339, 0,681), stdev = 0,339
[info]   CI (99.9%): [≈ 0, 1,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,03% complete, ETA 00:57:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99952,666 ops/s
[info] # Warmup Iteration   2: 118205,911 ops/s
[info] # Warmup Iteration   3: 117930,785 ops/s
[info] # Warmup Iteration   4: 117688,205 ops/s
[info] # Warmup Iteration   5: 117589,467 ops/s
[info] Iteration   1: 118468,676 ops/s
[info]                  ·gc.alloc.rate:                   1247,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17804,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,277 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 118636,509 ops/s
[info]                  ·gc.alloc.rate:                   1249,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17780,563 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,552 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 118152,996 ops/s
[info]                  ·gc.alloc.rate:               1244,406 MB/sec
[info]                  ·gc.alloc.rate.norm:          16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1340,190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17851,878 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 118180,980 ops/s
[info]                  ·gc.alloc.rate:                   1244,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8932,695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,277 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 118137,904 ops/s
[info]                  ·gc.alloc.rate:               1244,074 MB/sec
[info]                  ·gc.alloc.rate.norm:          16576,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,012 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 17880,917 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   118315,413 ±(99.9%) 866,508 ops/s [Average]
[info]   (min, avg, max) = (118137,904, 118315,413, 118636,509), stdev = 225,029
[info]   CI (99.9%): [117448,906, 119181,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1246,112 ±(99.9%) 9,386 MB/sec [Average]
[info]   (min, avg, max) = (1244,074, 1246,112, 1249,598), stdev = 2,437
[info]   CI (99.9%): [1236,726, 1255,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16576,003, 16576,004, 16576,004), stdev = 0,001
[info]   CI (99.9%): [16576,003, 16576,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1206,718 ±(99.9%) 1153,648 MB/sec [Average]
[info]   (min, avg, max) = (670,781, 1206,718, 1342,012), stdev = 299,599
[info]   CI (99.9%): [53,070, 2360,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16050,065 ±(99.9%) 15321,422 B/op [Average]
[info]   (min, avg, max) = (8932,695, 16050,065, 17880,917), stdev = 3978,925
[info]   CI (99.9%): [728,643, 31371,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,221 ±(99.9%) 0,890 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,221, 0,552), stdev = 0,231
[info]   CI (99.9%): [≈ 0, 1,111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57,23% complete, ETA 00:56:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32031,399 ops/s
[info] # Warmup Iteration   2: 53237,487 ops/s
[info] # Warmup Iteration   3: 53492,151 ops/s
[info] # Warmup Iteration   4: 53525,616 ops/s
[info] # Warmup Iteration   5: 53204,130 ops/s
[info] Iteration   1: 53318,825 ops/s
[info]                  ·gc.alloc.rate:                   2545,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              75152,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,948 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     80060,779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,843 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 51985,799 ops/s
[info]                  ·gc.alloc.rate:                   2482,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              75152,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,697 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82221,879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,260 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 53837,614 ops/s
[info]                  ·gc.alloc.rate:                   2570,707 MB/sec
[info]                  ·gc.alloc.rate.norm:              75152,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59590,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,826 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 53742,792 ops/s
[info]                  ·gc.alloc.rate:                   2566,246 MB/sec
[info]                  ·gc.alloc.rate.norm:              75152,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79664,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 53706,569 ops/s
[info]                  ·gc.alloc.rate:                   2564,099 MB/sec
[info]                  ·gc.alloc.rate.norm:              75152,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2721,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     79778,289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,220 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   53318,320 ±(99.9%) 2967,864 ops/s [Average]
[info]   (min, avg, max) = (51985,799, 53318,320, 53837,614), stdev = 770,745
[info]   CI (99.9%): [50350,455, 56286,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2545,782 ±(99.9%) 141,742 MB/sec [Average]
[info]   (min, avg, max) = (2482,187, 2545,782, 2570,707), stdev = 36,810
[info]   CI (99.9%): [2404,040, 2687,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75152,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (75152,008, 75152,008, 75152,008), stdev = 0,001
[info]   CI (99.9%): [75152,006, 75152,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2581,666 ±(99.9%) 1169,533 MB/sec [Average]
[info]   (min, avg, max) = (2038,393, 2581,666, 2721,942), stdev = 303,724
[info]   CI (99.9%): [1412,133, 3751,199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   76263,231 ±(99.9%) 36113,949 B/op [Average]
[info]   (min, avg, max) = (59590,353, 76263,231, 82221,879), stdev = 9378,678
[info]   CI (99.9%): [40149,282, 112377,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,104), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,839 ±(99.9%) 2,842 B/op [Average]
[info]   (min, avg, max) = (1,220, 1,839, 3,048), stdev = 0,738
[info]   CI (99.9%): [≈ 0, 4,682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 3,000), stdev = 0,837
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 57,43% complete, ETA 00:56:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74502,640 ops/s
[info] # Warmup Iteration   2: 86053,625 ops/s
[info] # Warmup Iteration   3: 87731,511 ops/s
[info] # Warmup Iteration   4: 88035,204 ops/s
[info] # Warmup Iteration   5: 88225,326 ops/s
[info] Iteration   1: 87402,910 ops/s
[info]                  ·gc.alloc.rate:               1517,197 MB/sec
[info]                  ·gc.alloc.rate.norm:          27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1338,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 24108,228 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 87762,196 ops/s
[info]                  ·gc.alloc.rate:                   1523,323 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,466 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36056,671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,493 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 88112,751 ops/s
[info]                  ·gc.alloc.rate:               1529,514 MB/sec
[info]                  ·gc.alloc.rate.norm:          27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23968,097 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 87662,086 ops/s
[info]                  ·gc.alloc.rate:                   1521,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,942 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24126,707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,747 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 87874,360 ops/s
[info]                  ·gc.alloc.rate:                   1525,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              27320,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,332 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24098,065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,373 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle":
[info]   87762,861 ±(99.9%) 1008,869 ops/s [Average]
[info]   (min, avg, max) = (87402,910, 87762,861, 88112,751), stdev = 262,000
[info]   CI (99.9%): [86753,992, 88771,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1523,412 ±(99.9%) 17,393 MB/sec [Average]
[info]   (min, avg, max) = (1517,197, 1523,412, 1529,514), stdev = 4,517
[info]   CI (99.9%): [1506,019, 1540,804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   27320,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27320,005, 27320,005, 27320,005), stdev = 0,001
[info]   CI (99.9%): [27320,004, 27320,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1476,086 ±(99.9%) 1150,332 MB/sec [Average]
[info]   (min, avg, max) = (1338,833, 1476,086, 2010,466), stdev = 298,738
[info]   CI (99.9%): [325,754, 2626,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   26471,554 ±(99.9%) 20634,100 B/op [Average]
[info]   (min, avg, max) = (23968,097, 26471,554, 36056,671), stdev = 5358,610
[info]   CI (99.9%): [5837,453, 47105,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,523 ±(99.9%) 2,406 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,523, 1,493), stdev = 0,625
[info]   CI (99.9%): [≈ 0, 2,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 57,63% complete, ETA 00:56:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115546,650 ops/s
[info] # Warmup Iteration   2: 143442,311 ops/s
[info] # Warmup Iteration   3: 145381,259 ops/s
[info] # Warmup Iteration   4: 146542,363 ops/s
[info] # Warmup Iteration   5: 144016,561 ops/s
[info] Iteration   1: 147188,298 ops/s
[info]                  ·gc.alloc.rate:                   653,162 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7193,833 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4,136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44,224 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 147152,969 ops/s
[info]                  ·gc.alloc.rate:                   653,014 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7195,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,668 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 147036,190 ops/s
[info]                  ·gc.alloc.rate:                   652,500 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7173,139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 147132,814 ops/s
[info]                  ·gc.alloc.rate:               652,977 MB/sec
[info]                  ·gc.alloc.rate.norm:          6984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7168,362 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 147051,023 ops/s
[info]                  ·gc.alloc.rate:                   652,511 MB/sec
[info]                  ·gc.alloc.rate.norm:              6984,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          669,443 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7165,229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,446 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   147112,259 ±(99.9%) 253,954 ops/s [Average]
[info]   (min, avg, max) = (147036,190, 147112,259, 147188,298), stdev = 65,951
[info]   CI (99.9%): [146858,305, 147366,213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   652,833 ±(99.9%) 1,181 MB/sec [Average]
[info]   (min, avg, max) = (652,500, 652,833, 653,162), stdev = 0,307
[info]   CI (99.9%): [651,652, 654,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   6984,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6984,003, 6984,003, 6984,003), stdev = 0,001
[info]   CI (99.9%): [6984,002, 6984,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   671,088 ±(99.9%) 6,153 MB/sec [Average]
[info]   (min, avg, max) = (669,443, 671,088, 672,826), stdev = 1,598
[info]   CI (99.9%): [664,935, 677,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7179,290 ±(99.9%) 55,865 B/op [Average]
[info]   (min, avg, max) = (7165,229, 7179,290, 7195,886), stdev = 14,508
[info]   CI (99.9%): [7123,425, 7235,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,852 ±(99.9%) 7,069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,852, 4,136), stdev = 1,836
[info]   CI (99.9%): [≈ 0, 7,921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9,112 ±(99.9%) 75,587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,112, 44,224), stdev = 19,630
[info]   CI (99.9%): [≈ 0, 84,700] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57,83% complete, ETA 00:56:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 142098,775 ops/s
[info] # Warmup Iteration   2: 180105,893 ops/s
[info] # Warmup Iteration   3: 180500,517 ops/s
[info] # Warmup Iteration   4: 180125,178 ops/s
[info] # Warmup Iteration   5: 180793,583 ops/s
[info] Iteration   1: 181046,597 ops/s
[info]                  ·gc.alloc.rate:               268,695 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4446,971 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 181269,709 ops/s
[info]                  ·gc.alloc.rate:      269,035 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 180658,983 ops/s
[info]                  ·gc.alloc.rate:               268,102 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4456,445 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 180967,759 ops/s
[info]                  ·gc.alloc.rate:      268,612 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 180319,877 ops/s
[info]                  ·gc.alloc.rate:               267,609 MB/sec
[info]                  ·gc.alloc.rate.norm:          2336,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,477 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4464,771 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   180852,585 ±(99.9%) 1422,861 ops/s [Average]
[info]   (min, avg, max) = (180319,877, 180852,585, 181269,709), stdev = 369,512
[info]   CI (99.9%): [179429,724, 182275,446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   268,411 ±(99.9%) 2,152 MB/sec [Average]
[info]   (min, avg, max) = (267,609, 268,411, 269,035), stdev = 0,559
[info]   CI (99.9%): [266,258, 270,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2336,002, 2336,002, 2336,002), stdev = 0,001
[info]   CI (99.9%): [2336,002, 2336,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   306,889 ±(99.9%) 1078,760 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,889, 511,506), stdev = 280,150
[info]   CI (99.9%): [≈ 0, 1385,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2673,637 ±(99.9%) 9398,244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2673,637, 4464,771), stdev = 2440,694
[info]   CI (99.9%): [≈ 0, 12071,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58,03% complete, ETA 00:55:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 729736,002 ops/s
[info] # Warmup Iteration   2: 765320,993 ops/s
[info] # Warmup Iteration   3: 769900,415 ops/s
[info] # Warmup Iteration   4: 776768,999 ops/s
[info] # Warmup Iteration   5: 792937,413 ops/s
[info] Iteration   1: 789381,280 ops/s
[info]                  ·gc.alloc.rate:                   979,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,773 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2674,868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 784170,004 ops/s
[info]                  ·gc.alloc.rate:               972,584 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1344,998 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 793908,769 ops/s
[info]                  ·gc.alloc.rate:                   984,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2656,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,083 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 789035,805 ops/s
[info]                  ·gc.alloc.rate:               978,623 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1336,602 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 794753,068 ops/s
[info]                  ·gc.alloc.rate:               985,503 MB/sec
[info]                  ·gc.alloc.rate.norm:          1952,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,961 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1327,001 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   790249,785 ±(99.9%) 16434,122 ops/s [Average]
[info]   (min, avg, max) = (784170,004, 790249,785, 794753,068), stdev = 4267,889
[info]   CI (99.9%): [773815,663, 806683,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   980,086 ±(99.9%) 20,062 MB/sec [Average]
[info]   (min, avg, max) = (972,584, 980,086, 985,503), stdev = 5,210
[info]   CI (99.9%): [960,025, 1000,148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1952,001, 1952,001, 1952,001), stdev = 0,001
[info]   CI (99.9%): [1952,000, 1952,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   938,404 ±(99.9%) 1414,861 MB/sec [Average]
[info]   (min, avg, max) = (669,961, 938,404, 1341,773), stdev = 367,435
[info]   CI (99.9%): [≈ 0, 2353,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1868,054 ±(99.9%) 2804,524 B/op [Average]
[info]   (min, avg, max) = (1327,001, 1868,054, 2674,868), stdev = 728,326
[info]   CI (99.9%): [≈ 0, 4672,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,033 ±(99.9%) 0,175 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,083), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 58,23% complete, ETA 00:55:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 751396,892 ops/s
[info] # Warmup Iteration   2: 782948,172 ops/s
[info] # Warmup Iteration   3: 776473,025 ops/s
[info] # Warmup Iteration   4: 782540,969 ops/s
[info] # Warmup Iteration   5: 784460,884 ops/s
[info] Iteration   1: 787686,311 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 782242,626 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 788695,009 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 784463,207 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 782892,733 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   785195,977 ±(99.9%) 11061,668 ops/s [Average]
[info]   (min, avg, max) = (782242,626, 785195,977, 788695,009), stdev = 2872,680
[info]   CI (99.9%): [774134,310, 796257,645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58,43% complete, ETA 00:55:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192128,393 ops/s
[info] # Warmup Iteration   2: 233962,106 ops/s
[info] # Warmup Iteration   3: 232286,070 ops/s
[info] # Warmup Iteration   4: 234553,430 ops/s
[info] # Warmup Iteration   5: 233520,538 ops/s
[info] Iteration   1: 235908,086 ops/s
[info]                  ·gc.alloc.rate:                   770,919 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,972 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4483,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,417 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 236119,911 ops/s
[info]                  ·gc.alloc.rate:               771,633 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4462,479 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 235877,888 ops/s
[info]                  ·gc.alloc.rate:               770,835 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      669,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4467,057 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 235337,605 ops/s
[info]                  ·gc.alloc.rate:               769,124 MB/sec
[info]                  ·gc.alloc.rate.norm:          5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      668,057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4468,054 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 235850,035 ops/s
[info]                  ·gc.alloc.rate:                   770,589 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          667,880 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4458,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,139 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   235818,705 ±(99.9%) 1113,787 ops/s [Average]
[info]   (min, avg, max) = (235337,605, 235818,705, 236119,911), stdev = 289,247
[info]   CI (99.9%): [234704,917, 236932,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   770,620 ±(99.9%) 3,550 MB/sec [Average]
[info]   (min, avg, max) = (769,124, 770,620, 771,633), stdev = 0,922
[info]   CI (99.9%): [767,070, 774,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5144,002, 5144,002, 5144,002), stdev = 0,001
[info]   CI (99.9%): [5144,002, 5144,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   669,341 ±(99.9%) 6,300 MB/sec [Average]
[info]   (min, avg, max) = (667,880, 669,341, 671,972), stdev = 1,636
[info]   CI (99.9%): [663,040, 675,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4467,947 ±(99.9%) 37,172 B/op [Average]
[info]   (min, avg, max) = (4458,375, 4467,947, 4483,772), stdev = 9,653
[info]   CI (99.9%): [4430,776, 4505,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,111 ±(99.9%) 0,697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,111, 0,417), stdev = 0,181
[info]   CI (99.9%): [≈ 0, 0,808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 58,63% complete, ETA 00:54:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28269,429 ops/s
[info] # Warmup Iteration   2: 30284,300 ops/s
[info] # Warmup Iteration   3: 29957,414 ops/s
[info] # Warmup Iteration   4: 30321,082 ops/s
[info] # Warmup Iteration   5: 30246,616 ops/s
[info] Iteration   1: 30159,647 ops/s
[info]                  ·gc.alloc.rate:               168,318 MB/sec
[info]                  ·gc.alloc.rate.norm:          8784,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,508 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26694,059 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 30183,929 ops/s
[info]                  ·gc.alloc.rate:      168,458 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 30182,601 ops/s
[info]                  ·gc.alloc.rate:      168,444 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 30041,214 ops/s
[info]                  ·gc.alloc.rate:                   167,660 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26799,773 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,958 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 30193,459 ops/s
[info]                  ·gc.alloc.rate:      168,513 MB/sec
[info]                  ·gc.alloc.rate.norm: 8784,015 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle":
[info]   30152,170 ±(99.9%) 243,586 ops/s [Average]
[info]   (min, avg, max) = (30041,214, 30152,170, 30193,459), stdev = 63,258
[info]   CI (99.9%): [29908,584, 30395,756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   168,279 ±(99.9%) 1,359 MB/sec [Average]
[info]   (min, avg, max) = (167,660, 168,279, 168,513), stdev = 0,353
[info]   CI (99.9%): [166,919, 169,638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   8784,014 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (8784,014, 8784,014, 8784,015), stdev = 0,001
[info]   CI (99.9%): [8784,012, 8784,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,607 ±(99.9%) 1078,832 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,607, 511,526), stdev = 280,169
[info]   CI (99.9%): [≈ 0, 1283,439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   10698,766 ±(99.9%) 56411,690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10698,766, 26799,773), stdev = 14649,937
[info]   CI (99.9%): [≈ 0, 67110,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,018), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,192 ±(99.9%) 1,649 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,192, 0,958), stdev = 0,428
[info]   CI (99.9%): [≈ 0, 1,841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58,84% complete, ETA 00:54:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115631,282 ops/s
[info] # Warmup Iteration   2: 145659,533 ops/s
[info] # Warmup Iteration   3: 147796,963 ops/s
[info] # Warmup Iteration   4: 148675,323 ops/s
[info] # Warmup Iteration   5: 147600,763 ops/s
[info] Iteration   1: 148651,554 ops/s
[info]                  ·gc.alloc.rate:               1830,749 MB/sec
[info]                  ·gc.alloc.rate.norm:          19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2014,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21333,305 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 148623,303 ops/s
[info]                  ·gc.alloc.rate:                   1830,423 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14241,340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,220 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 149225,079 ops/s
[info]                  ·gc.alloc.rate:                   1837,805 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21300,583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,439 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 148257,098 ops/s
[info]                  ·gc.alloc.rate:                   1826,104 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21485,735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,884 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 148623,555 ops/s
[info]                  ·gc.alloc.rate:                   1830,355 MB/sec
[info]                  ·gc.alloc.rate.norm:              19384,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21461,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,882 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   148676,118 ±(99.9%) 1338,191 ops/s [Average]
[info]   (min, avg, max) = (148257,098, 148676,118, 149225,079), stdev = 347,524
[info]   CI (99.9%): [147337,927, 150014,309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1831,087 ±(99.9%) 16,229 MB/sec [Average]
[info]   (min, avg, max) = (1826,104, 1831,087, 1837,805), stdev = 4,215
[info]   CI (99.9%): [1814,859, 1847,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19384,003, 19384,003, 19384,003), stdev = 0,001
[info]   CI (99.9%): [19384,002, 19384,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1885,963 ±(99.9%) 1165,013 MB/sec [Average]
[info]   (min, avg, max) = (1344,804, 1885,963, 2026,537), stdev = 302,550
[info]   CI (99.9%): [720,950, 3050,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   19964,518 ±(99.9%) 12323,391 B/op [Average]
[info]   (min, avg, max) = (14241,340, 19964,518, 21485,735), stdev = 3200,346
[info]   CI (99.9%): [7641,127, 32287,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,485 ±(99.9%) 1,521 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,485, 0,884), stdev = 0,395
[info]   CI (99.9%): [≈ 0, 2,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,04% complete, ETA 00:54:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143544,541 ops/s
[info] # Warmup Iteration   2: 200229,049 ops/s
[info] # Warmup Iteration   3: 200983,583 ops/s
[info] # Warmup Iteration   4: 200890,837 ops/s
[info] # Warmup Iteration   5: 201115,446 ops/s
[info] Iteration   1: 201131,668 ops/s
[info]                  ·gc.alloc.rate:                   1064,137 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10570,302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,326 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 201721,348 ops/s
[info]                  ·gc.alloc.rate:               1067,323 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5272,843 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 201624,618 ops/s
[info]                  ·gc.alloc.rate:                   1066,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10561,212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,325 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 201340,218 ops/s
[info]                  ·gc.alloc.rate:               1065,399 MB/sec
[info]                  ·gc.alloc.rate.norm:          8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,571 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10580,579 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 201274,946 ops/s
[info]                  ·gc.alloc.rate:                   1065,086 MB/sec
[info]                  ·gc.alloc.rate.norm:              8328,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          677,464 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5297,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,163 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   201418,560 ±(99.9%) 949,498 ops/s [Average]
[info]   (min, avg, max) = (201131,668, 201418,560, 201721,348), stdev = 246,582
[info]   CI (99.9%): [200469,062, 202368,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1065,741 ±(99.9%) 4,969 MB/sec [Average]
[info]   (min, avg, max) = (1064,137, 1065,741, 1067,323), stdev = 1,290
[info]   CI (99.9%): [1060,772, 1070,710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8328,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8328,002, 8328,002, 8328,002), stdev = 0,001
[info]   CI (99.9%): [8328,002, 8328,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1082,056 ±(99.9%) 1425,179 MB/sec [Average]
[info]   (min, avg, max) = (675,772, 1082,056, 1353,571), stdev = 370,114
[info]   CI (99.9%): [≈ 0, 2507,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8456,418 ±(99.9%) 11148,066 B/op [Average]
[info]   (min, avg, max) = (5272,843, 8456,418, 10580,579), stdev = 2895,117
[info]   CI (99.9%): [≈ 0, 19604,484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,163 ±(99.9%) 0,626 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,163, 0,326), stdev = 0,163
[info]   CI (99.9%): [≈ 0, 0,789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59,24% complete, ETA 00:54:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 499252,547 ops/s
[info] # Warmup Iteration   2: 526831,358 ops/s
[info] # Warmup Iteration   3: 523632,219 ops/s
[info] # Warmup Iteration   4: 483445,485 ops/s
[info] # Warmup Iteration   5: 400920,423 ops/s
[info] Iteration   1: 400725,066 ops/s
[info]                  ·gc.alloc.rate:                   777,922 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,620 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2642,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,327 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 399312,524 ops/s
[info]                  ·gc.alloc.rate:               775,324 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2651,864 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 399883,518 ops/s
[info]                  ·gc.alloc.rate:                   776,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5290,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 399816,226 ops/s
[info]                  ·gc.alloc.rate:               776,351 MB/sec
[info]                  ·gc.alloc.rate.norm:          3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2645,641 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 398496,498 ops/s
[info]                  ·gc.alloc.rate:                   773,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2654,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   399646,766 ±(99.9%) 3153,259 ops/s [Average]
[info]   (min, avg, max) = (398496,498, 399646,766, 400725,066), stdev = 818,891
[info]   CI (99.9%): [396493,508, 402800,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   775,947 ±(99.9%) 5,897 MB/sec [Average]
[info]   (min, avg, max) = (773,768, 775,947, 777,922), stdev = 1,531
[info]   CI (99.9%): [770,050, 781,844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3056,001, 3056,001, 3056,001), stdev = 0,001
[info]   CI (99.9%): [3056,001, 3056,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   806,732 ±(99.9%) 1156,675 MB/sec [Average]
[info]   (min, avg, max) = (672,069, 806,732, 1344,077), stdev = 300,385
[info]   CI (99.9%): [≈ 0, 1963,407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3176,965 ±(99.9%) 4549,898 B/op [Average]
[info]   (min, avg, max) = (2642,330, 3176,965, 5290,648), stdev = 1181,594
[info]   CI (99.9%): [≈ 0, 7726,864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,115 ±(99.9%) 0,527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,115, 0,327), stdev = 0,137
[info]   CI (99.9%): [≈ 0, 0,641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 59,44% complete, ETA 00:53:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 43108,795 ops/s
[info] # Warmup Iteration   2: 77871,337 ops/s
[info] # Warmup Iteration   3: 78259,833 ops/s
[info] # Warmup Iteration   4: 78261,226 ops/s
[info] # Warmup Iteration   5: 78320,877 ops/s
[info] Iteration   1: 77706,174 ops/s
[info]                  ·gc.alloc.rate:                   3278,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,337 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68789,823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,265 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 78279,553 ops/s
[info]                  ·gc.alloc.rate:                   3303,333 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68359,478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,511 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 78633,449 ops/s
[info]                  ·gc.alloc.rate:                   3317,715 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68115,843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,250 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 78013,585 ops/s
[info]                  ·gc.alloc.rate:                   3291,888 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     54933,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,840 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 78268,078 ops/s
[info]                  ·gc.alloc.rate:                   3301,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              66408,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,333 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68470,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,093 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   78180,168 ±(99.9%) 1327,619 ops/s [Average]
[info]   (min, avg, max) = (77706,174, 78180,168, 78633,449), stdev = 344,778
[info]   CI (99.9%): [76852,549, 79507,787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3298,688 ±(99.9%) 55,708 MB/sec [Average]
[info]   (min, avg, max) = (3278,741, 3298,688, 3317,715), stdev = 14,467
[info]   CI (99.9%): [3242,980, 3354,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66408,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66408,005, 66408,005, 66408,006), stdev = 0,001
[info]   CI (99.9%): [66408,004, 66408,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3265,441 ±(99.9%) 1167,503 MB/sec [Average]
[info]   (min, avg, max) = (2723,094, 3265,441, 3404,333), stdev = 303,197
[info]   CI (99.9%): [2097,938, 4432,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   65733,948 ±(99.9%) 23267,272 B/op [Average]
[info]   (min, avg, max) = (54933,600, 65733,948, 68789,823), stdev = 6042,437
[info]   CI (99.9%): [42466,677, 89001,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,079, 0,125), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,592 ±(99.9%) 2,644 B/op [Average]
[info]   (min, avg, max) = (0,840, 1,592, 2,511), stdev = 0,687
[info]   CI (99.9%): [≈ 0, 4,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,000, 3,000), stdev = 0,707
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 59,64% complete, ETA 00:53:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128203,223 ops/s
[info] # Warmup Iteration   2: 145493,043 ops/s
[info] # Warmup Iteration   3: 147364,279 ops/s
[info] # Warmup Iteration   4: 145905,634 ops/s
[info] # Warmup Iteration   5: 147562,051 ops/s
[info] Iteration   1: 146901,343 ops/s
[info]                  ·gc.alloc.rate:                   1653,989 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21601,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,669 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 147497,704 ops/s
[info]                  ·gc.alloc.rate:                   1660,700 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14357,142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 147906,190 ops/s
[info]                  ·gc.alloc.rate:                   1665,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,170 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14324,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,443 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 147563,252 ops/s
[info]                  ·gc.alloc.rate:                   1661,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21576,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,222 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 146808,321 ops/s
[info]                  ·gc.alloc.rate:                   1652,709 MB/sec
[info]                  ·gc.alloc.rate.norm:              17720,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14474,888 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle":
[info]   147335,362 ±(99.9%) 1796,108 ops/s [Average]
[info]   (min, avg, max) = (146808,321, 147335,362, 147906,190), stdev = 466,444
[info]   CI (99.9%): [145539,254, 149131,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1658,824 ±(99.9%) 20,414 MB/sec [Average]
[info]   (min, avg, max) = (1652,709, 1658,824, 1665,230), stdev = 5,302
[info]   CI (99.9%): [1638,410, 1679,238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   17720,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (17720,003, 17720,003, 17720,003), stdev = 0,001
[info]   CI (99.9%): [17720,003, 17720,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,235 ±(99.9%) 1418,326 MB/sec [Average]
[info]   (min, avg, max) = (1345,536, 1616,235, 2023,121), stdev = 368,335
[info]   CI (99.9%): [197,909, 3034,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   17267,070 ±(99.9%) 15194,619 B/op [Average]
[info]   (min, avg, max) = (14324,828, 17267,070, 21601,658), stdev = 3945,994
[info]   CI (99.9%): [2072,451, 32461,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,356 ±(99.9%) 0,768 B/op [Average]
[info]   (min, avg, max) = (0,222, 0,356, 0,669), stdev = 0,199
[info]   CI (99.9%): [≈ 0, 1,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59,84% complete, ETA 00:53:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165314,225 ops/s
[info] # Warmup Iteration   2: 209378,999 ops/s
[info] # Warmup Iteration   3: 210176,383 ops/s
[info] # Warmup Iteration   4: 210189,493 ops/s
[info] # Warmup Iteration   5: 210666,483 ops/s
[info] Iteration   1: 210880,580 ops/s
[info]                  ·gc.alloc.rate:                   722,529 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5036,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,157 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 211158,106 ops/s
[info]                  ·gc.alloc.rate:                   723,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5029,225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,621 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 211583,820 ops/s
[info]                  ·gc.alloc.rate:               724,819 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4999,330 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 210909,446 ops/s
[info]                  ·gc.alloc.rate:                   722,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10025,682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,621 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 211315,655 ops/s
[info]                  ·gc.alloc.rate:               723,877 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5000,708 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   211169,521 ±(99.9%) 1129,648 ops/s [Average]
[info]   (min, avg, max) = (210880,580, 211169,521, 211583,820), stdev = 293,366
[info]   CI (99.9%): [210039,873, 212299,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   723,454 ±(99.9%) 3,645 MB/sec [Average]
[info]   (min, avg, max) = (722,529, 723,454, 724,819), stdev = 0,947
[info]   CI (99.9%): [719,810, 727,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5392,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,002, 5392,002, 5392,002), stdev = 0,001
[info]   CI (99.9%): [5392,002, 5392,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   807,326 ±(99.9%) 1154,442 MB/sec [Average]
[info]   (min, avg, max) = (671,345, 807,326, 1343,625), stdev = 299,805
[info]   CI (99.9%): [≈ 0, 1961,768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6018,265 ±(99.9%) 8626,505 B/op [Average]
[info]   (min, avg, max) = (4999,330, 6018,265, 10025,682), stdev = 2240,276
[info]   CI (99.9%): [≈ 0, 14644,769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,708 ±(99.9%) 5,736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,708, 3,371), stdev = 1,490
[info]   CI (99.9%): [≈ 0, 6,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5,280 ±(99.9%) 42,804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,280, 25,157), stdev = 11,116
[info]   CI (99.9%): [≈ 0, 48,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,04% complete, ETA 00:53:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 241480,205 ops/s
[info] # Warmup Iteration   2: 322042,780 ops/s
[info] # Warmup Iteration   3: 322170,276 ops/s
[info] # Warmup Iteration   4: 322291,210 ops/s
[info] # Warmup Iteration   5: 320427,767 ops/s
[info] Iteration   1: 323771,076 ops/s
[info]                  ·gc.alloc.rate:      319,247 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 322290,776 ops/s
[info]                  ·gc.alloc.rate:               317,814 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,554 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2498,104 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 323202,007 ops/s
[info]                  ·gc.alloc.rate:      318,681 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 316698,904 ops/s
[info]                  ·gc.alloc.rate:               312,306 MB/sec
[info]                  ·gc.alloc.rate.norm:          1552,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,561 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2542,195 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 323696,605 ops/s
[info]                  ·gc.alloc.rate:      319,142 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   321931,874 ±(99.9%) 11491,280 ops/s [Average]
[info]   (min, avg, max) = (316698,904, 321931,874, 323771,076), stdev = 2984,249
[info]   CI (99.9%): [310440,594, 333423,154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   317,438 ±(99.9%) 11,259 MB/sec [Average]
[info]   (min, avg, max) = (312,306, 317,438, 319,247), stdev = 2,924
[info]   CI (99.9%): [306,179, 328,698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1552,001, 1552,001, 1552,001), stdev = 0,001
[info]   CI (99.9%): [1552,001, 1552,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,623 ±(99.9%) 1078,917 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,623, 511,561), stdev = 280,191
[info]   CI (99.9%): [≈ 0, 1283,540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1008,060 ±(99.9%) 5315,548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1008,060, 2542,195), stdev = 1380,431
[info]   CI (99.9%): [≈ 0, 6323,607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60,24% complete, ETA 00:52:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1220812,277 ops/s
[info] # Warmup Iteration   2: 1279510,243 ops/s
[info] # Warmup Iteration   3: 1303069,058 ops/s
[info] # Warmup Iteration   4: 1302720,788 ops/s
[info] # Warmup Iteration   5: 1305097,718 ops/s
[info] Iteration   1: 1305982,602 ops/s
[info]                  ·gc.alloc.rate:                   969,033 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1621,498 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1312691,451 ops/s
[info]                  ·gc.alloc.rate:               974,158 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,144 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 805,890 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1313388,677 ops/s
[info]                  ·gc.alloc.rate:                   974,757 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,201 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805,464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1309233,125 ops/s
[info]                  ·gc.alloc.rate:                   971,604 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,213 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1615,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1314370,634 ops/s
[info]                  ·gc.alloc.rate:               975,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 804,811 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1311133,298 ±(99.9%) 13357,801 ops/s [Average]
[info]   (min, avg, max) = (1305982,602, 1311133,298, 1314370,634), stdev = 3468,978
[info]   CI (99.9%): [1297775,497, 1324491,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   972,945 ±(99.9%) 9,973 MB/sec [Average]
[info]   (min, avg, max) = (969,033, 972,945, 975,176), stdev = 2,590
[info]   CI (99.9%): [962,973, 982,918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1168,000, 1168,000, 1168,000), stdev = 0,001
[info]   CI (99.9%): [1168,000, 1168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,156 ±(99.9%) 1418,673 MB/sec [Average]
[info]   (min, avg, max) = (671,945, 941,156, 1345,278), stdev = 368,425
[info]   CI (99.9%): [≈ 0, 2359,830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1130,718 ±(99.9%) 1715,386 B/op [Average]
[info]   (min, avg, max) = (804,811, 1130,718, 1621,498), stdev = 445,480
[info]   CI (99.9%): [≈ 0, 2846,103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,030 ±(99.9%) 0,106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,030, 0,050), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 60,44% complete, ETA 00:52:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1314564,276 ops/s
[info] # Warmup Iteration   2: 1374853,143 ops/s
[info] # Warmup Iteration   3: 1363120,966 ops/s
[info] # Warmup Iteration   4: 1366530,873 ops/s
[info] # Warmup Iteration   5: 1369977,107 ops/s
[info] Iteration   1: 1372882,918 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1378385,383 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1378001,050 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1373338,496 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1374675,851 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1375456,740 ±(99.9%) 9961,893 ops/s [Average]
[info]   (min, avg, max) = (1372882,918, 1375456,740, 1378385,383), stdev = 2587,072
[info]   CI (99.9%): [1365494,846, 1385418,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60,64% complete, ETA 00:52:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 215269,365 ops/s
[info] # Warmup Iteration   2: 320345,272 ops/s
[info] # Warmup Iteration   3: 322951,730 ops/s
[info] # Warmup Iteration   4: 322426,719 ops/s
[info] # Warmup Iteration   5: 322349,319 ops/s
[info] Iteration   1: 322400,630 ops/s
[info]                  ·gc.alloc.rate:                   879,998 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3295,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,305 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 322013,780 ops/s
[info]                  ·gc.alloc.rate:                   878,954 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,824 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6602,332 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,203 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 322650,823 ops/s
[info]                  ·gc.alloc.rate:               880,617 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3296,244 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 322502,290 ops/s
[info]                  ·gc.alloc.rate:               880,338 MB/sec
[info]                  ·gc.alloc.rate.norm:          4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3299,371 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 322312,046 ops/s
[info]                  ·gc.alloc.rate:                   879,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              4296,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          676,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3301,306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   322375,914 ±(99.9%) 918,072 ops/s [Average]
[info]   (min, avg, max) = (322013,780, 322375,914, 322650,823), stdev = 238,420
[info]   CI (99.9%): [321457,841, 323293,986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   879,938 ±(99.9%) 2,448 MB/sec [Average]
[info]   (min, avg, max) = (878,954, 879,938, 880,617), stdev = 0,636
[info]   CI (99.9%): [877,489, 882,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4296,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4296,001, 4296,001, 4296,001), stdev = 0,001
[info]   CI (99.9%): [4296,001, 4296,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   810,751 ±(99.9%) 1162,549 MB/sec [Average]
[info]   (min, avg, max) = (675,064, 810,751, 1350,824), stdev = 301,910
[info]   CI (99.9%): [≈ 0, 1973,301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3958,960 ±(99.9%) 5690,064 B/op [Average]
[info]   (min, avg, max) = (3295,548, 3958,960, 6602,332), stdev = 1477,692
[info]   CI (99.9%): [≈ 0, 9649,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,122 ±(99.9%) 0,510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,122, 0,305), stdev = 0,133
[info]   CI (99.9%): [≈ 0, 0,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 60,84% complete, ETA 00:52:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46901,308 ops/s
[info] # Warmup Iteration   2: 49744,892 ops/s
[info] # Warmup Iteration   3: 49736,751 ops/s
[info] # Warmup Iteration   4: 49266,809 ops/s
[info] # Warmup Iteration   5: 49802,422 ops/s
[info] Iteration   1: 49754,986 ops/s
[info]                  ·gc.alloc.rate:      154,726 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 49390,339 ops/s
[info]                  ·gc.alloc.rate:               153,643 MB/sec
[info]                  ·gc.alloc.rate.norm:          4896,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16302,408 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 49849,561 ops/s
[info]                  ·gc.alloc.rate:      155,078 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 49798,963 ops/s
[info]                  ·gc.alloc.rate:      154,915 MB/sec
[info]                  ·gc.alloc.rate.norm: 4896,009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 49726,653 ops/s
[info]                  ·gc.alloc.rate:               154,659 MB/sec
[info]                  ·gc.alloc.rate.norm:          4896,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,462 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16191,294 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle":
[info]   49704,100 ±(99.9%) 698,713 ops/s [Average]
[info]   (min, avg, max) = (49390,339, 49704,100, 49849,561), stdev = 181,454
[info]   CI (99.9%): [49005,387, 50402,813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   154,604 ±(99.9%) 2,163 MB/sec [Average]
[info]   (min, avg, max) = (153,643, 154,604, 155,078), stdev = 0,562
[info]   CI (99.9%): [152,441, 156,767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4896,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4896,008, 4896,009, 4896,009), stdev = 0,001
[info]   CI (99.9%): [4896,008, 4896,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,611 ±(99.9%) 1078,853 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,611, 511,592), stdev = 280,175
[info]   CI (99.9%): [≈ 0, 1283,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6498,740 ±(99.9%) 34266,316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6498,740, 16302,408), stdev = 8898,853
[info]   CI (99.9%): [≈ 0, 40765,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 1,095
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61,04% complete, ETA 00:51:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4289,386 ops/s
[info] # Warmup Iteration   2: 5944,368 ops/s
[info] # Warmup Iteration   3: 6098,138 ops/s
[info] # Warmup Iteration   4: 6111,669 ops/s
[info] # Warmup Iteration   5: 6073,532 ops/s
[info] Iteration   1: 6101,993 ops/s
[info]                  ·gc.alloc.rate:               1130,472 MB/sec
[info]                  ·gc.alloc.rate.norm:          291576,067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1331,392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 343398,333 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 6076,677 ops/s
[info]                  ·gc.alloc.rate:               1125,842 MB/sec
[info]                  ·gc.alloc.rate.norm:          291576,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172319,037 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 6079,639 ops/s
[info]                  ·gc.alloc.rate:                   1126,385 MB/sec
[info]                  ·gc.alloc.rate.norm:              291576,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     344123,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,551 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 6062,140 ops/s
[info]                  ·gc.alloc.rate:               1123,189 MB/sec
[info]                  ·gc.alloc.rate.norm:          291576,073 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1330,874 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 345490,575 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 6061,436 ops/s
[info]                  ·gc.alloc.rate:               1122,857 MB/sec
[info]                  ·gc.alloc.rate.norm:          291576,067 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 172946,726 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   6076,377 ±(99.9%) 63,646 ops/s [Average]
[info]   (min, avg, max) = (6061,436, 6076,377, 6101,993), stdev = 16,529
[info]   CI (99.9%): [6012,731, 6140,023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1125,749 ±(99.9%) 11,812 MB/sec [Average]
[info]   (min, avg, max) = (1122,857, 1125,749, 1130,472), stdev = 3,067
[info]   CI (99.9%): [1113,937, 1137,561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   291576,070 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (291576,067, 291576,070, 291576,073), stdev = 0,003
[info]   CI (99.9%): [291576,059, 291576,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1064,605 ±(99.9%) 1402,247 MB/sec [Average]
[info]   (min, avg, max) = (665,363, 1064,605, 1331,392), stdev = 364,159
[info]   CI (99.9%): [≈ 0, 2466,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   275655,587 ±(99.9%) 362151,889 B/op [Average]
[info]   (min, avg, max) = (172319,037, 275655,587, 345490,575), stdev = 94049,695
[info]   CI (99.9%): [≈ 0, 637807,476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4,310 ±(99.9%) 37,112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,310, 21,551), stdev = 9,638
[info]   CI (99.9%): [≈ 0, 41,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,24% complete, ETA 00:51:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3293,099 ops/s
[info] # Warmup Iteration   2: 5782,298 ops/s
[info] # Warmup Iteration   3: 5772,128 ops/s
[info] # Warmup Iteration   4: 5874,138 ops/s
[info] # Warmup Iteration   5: 5849,320 ops/s
[info] Iteration   1: 5825,116 ops/s
[info]                  ·gc.alloc.rate:                   1082,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              292416,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,441 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363231,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,247 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5893,021 ops/s
[info]                  ·gc.alloc.rate:               1094,866 MB/sec
[info]                  ·gc.alloc.rate.norm:          292416,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 179684,723 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 5852,541 ops/s
[info]                  ·gc.alloc.rate:                   1087,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              292416,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362362,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,793 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5851,526 ops/s
[info]                  ·gc.alloc.rate:                   1087,255 MB/sec
[info]                  ·gc.alloc.rate.norm:              292416,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362782,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,197 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5873,037 ops/s
[info]                  ·gc.alloc.rate:                   1091,137 MB/sec
[info]                  ·gc.alloc.rate.norm:              292416,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,317 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     180979,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,578 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   5859,048 ±(99.9%) 98,176 ops/s [Average]
[info]   (min, avg, max) = (5825,116, 5859,048, 5893,021), stdev = 25,496
[info]   CI (99.9%): [5760,873, 5957,224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1088,583 ±(99.9%) 18,107 MB/sec [Average]
[info]   (min, avg, max) = (1082,329, 1088,583, 1094,866), stdev = 4,702
[info]   CI (99.9%): [1070,476, 1106,690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   292416,071 ±(99.9%) 0,009 B/op [Average]
[info]   (min, avg, max) = (292416,069, 292416,071, 292416,075), stdev = 0,002
[info]   CI (99.9%): [292416,062, 292416,079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1077,769 ±(99.9%) 1419,156 MB/sec [Average]
[info]   (min, avg, max) = (672,777, 1077,769, 1348,891), stdev = 368,550
[info]   CI (99.9%): [≈ 0, 2496,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   289808,206 ±(99.9%) 384829,308 B/op [Average]
[info]   (min, avg, max) = (179684,723, 289808,206, 363231,621), stdev = 99938,949
[info]   CI (99.9%): [≈ 0, 674637,514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8,963 ±(99.9%) 24,604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,963, 16,793), stdev = 6,390
[info]   CI (99.9%): [≈ 0, 33,567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61,45% complete, ETA 00:51:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34903,698 ops/s
[info] # Warmup Iteration   2: 41485,520 ops/s
[info] # Warmup Iteration   3: 41146,417 ops/s
[info] # Warmup Iteration   4: 41256,805 ops/s
[info] # Warmup Iteration   5: 41052,200 ops/s
[info] Iteration   1: 41196,832 ops/s
[info]                  ·gc.alloc.rate:                   676,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25624,676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206,934 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 40850,868 ops/s
[info]                  ·gc.alloc.rate:               670,601 MB/sec
[info]                  ·gc.alloc.rate.norm:          25840,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,643 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25841,659 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 40806,597 ops/s
[info]                  ·gc.alloc.rate:               669,830 MB/sec
[info]                  ·gc.alloc.rate.norm:          25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25718,528 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 40759,980 ops/s
[info]                  ·gc.alloc.rate:                   669,167 MB/sec
[info]                  ·gc.alloc.rate.norm:              25840,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25745,654 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,607 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 40745,697 ops/s
[info]                  ·gc.alloc.rate:               668,750 MB/sec
[info]                  ·gc.alloc.rate.norm:          25840,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,221 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 25703,671 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   40871,995 ±(99.9%) 717,143 ops/s [Average]
[info]   (min, avg, max) = (40745,697, 40871,995, 41196,832), stdev = 186,240
[info]   CI (99.9%): [40154,851, 41589,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   670,944 ±(99.9%) 11,994 MB/sec [Average]
[info]   (min, avg, max) = (668,750, 670,944, 676,373), stdev = 3,115
[info]   CI (99.9%): [658,950, 682,938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25840,011 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (25840,010, 25840,011, 25840,012), stdev = 0,001
[info]   CI (99.9%): [25840,008, 25840,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   668,001 ±(99.9%) 9,736 MB/sec [Average]
[info]   (min, avg, max) = (665,221, 668,001, 670,737), stdev = 2,528
[info]   CI (99.9%): [658,265, 677,737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25726,838 ±(99.9%) 301,857 B/op [Average]
[info]   (min, avg, max) = (25624,676, 25726,838, 25841,659), stdev = 78,391
[info]   CI (99.9%): [25424,981, 26028,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1,092 ±(99.9%) 9,310 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,092, 5,417), stdev = 2,418
[info]   CI (99.9%): [≈ 0, 10,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41,708 ±(99.9%) 355,670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41,708, 206,934), stdev = 92,366
[info]   CI (99.9%): [≈ 0, 397,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61,65% complete, ETA 00:50:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2932,291 ops/s
[info] # Warmup Iteration   2: 5304,382 ops/s
[info] # Warmup Iteration   3: 5353,509 ops/s
[info] # Warmup Iteration   4: 5338,061 ops/s
[info] # Warmup Iteration   5: 5324,475 ops/s
[info] Iteration   1: 5303,110 ops/s
[info]                  ·gc.alloc.rate:                   1289,009 MB/sec
[info]                  ·gc.alloc.rate.norm:              382552,083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     399565,765 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,177 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5320,516 ops/s
[info]                  ·gc.alloc.rate:               1293,000 MB/sec
[info]                  ·gc.alloc.rate.norm:          382552,083 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,595 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 199292,489 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 5354,846 ops/s
[info]                  ·gc.alloc.rate:                   1301,682 MB/sec
[info]                  ·gc.alloc.rate.norm:              382552,082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,959 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     396446,303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,236 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5309,867 ops/s
[info]                  ·gc.alloc.rate:                   1290,624 MB/sec
[info]                  ·gc.alloc.rate.norm:              382552,077 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     400322,313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,169 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5338,430 ops/s
[info]                  ·gc.alloc.rate:                   1297,310 MB/sec
[info]                  ·gc.alloc.rate.norm:              382552,082 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,786 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     398615,970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18,409 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   5325,354 ±(99.9%) 81,657 ops/s [Average]
[info]   (min, avg, max) = (5303,110, 5325,354, 5354,846), stdev = 21,206
[info]   CI (99.9%): [5243,696, 5407,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1294,325 ±(99.9%) 19,893 MB/sec [Average]
[info]   (min, avg, max) = (1289,009, 1294,325, 1301,682), stdev = 5,166
[info]   CI (99.9%): [1274,432, 1314,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   382552,081 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (382552,077, 382552,081, 382552,083), stdev = 0,003
[info]   CI (99.9%): [382552,071, 382552,091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1214,250 ±(99.9%) 1163,828 MB/sec [Average]
[info]   (min, avg, max) = (673,595, 1214,250, 1351,786), stdev = 302,242
[info]   CI (99.9%): [50,423, 2378,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   358848,568 ±(99.9%) 343502,152 B/op [Average]
[info]   (min, avg, max) = (199292,489, 358848,568, 400322,313), stdev = 89206,418
[info]   CI (99.9%): [15346,416, 702350,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8,598 ±(99.9%) 26,898 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,598, 18,409), stdev = 6,985
[info]   CI (99.9%): [≈ 0, 35,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 61,85% complete, ETA 00:50:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4197,552 ops/s
[info] # Warmup Iteration   2: 5597,667 ops/s
[info] # Warmup Iteration   3: 5668,406 ops/s
[info] # Warmup Iteration   4: 5632,581 ops/s
[info] # Warmup Iteration   5: 5672,388 ops/s
[info] Iteration   1: 5659,355 ops/s
[info]                  ·gc.alloc.rate:               1086,505 MB/sec
[info]                  ·gc.alloc.rate.norm:          302160,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 185228,052 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 5688,652 ops/s
[info]                  ·gc.alloc.rate:                   1092,136 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1330,830 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     368199,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,277 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5669,525 ops/s
[info]                  ·gc.alloc.rate:               1088,510 MB/sec
[info]                  ·gc.alloc.rate.norm:          302160,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1329,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369063,251 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 5666,318 ops/s
[info]                  ·gc.alloc.rate:                   1087,896 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160,072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          665,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     184814,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,781 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5677,579 ops/s
[info]                  ·gc.alloc.rate:                   1089,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              302160,083 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,335 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     369097,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17,310 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle":
[info]   5672,286 ±(99.9%) 43,322 ops/s [Average]
[info]   (min, avg, max) = (5659,355, 5672,286, 5688,652), stdev = 11,251
[info]   CI (99.9%): [5628,964, 5715,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate":
[info]   1088,988 ±(99.9%) 8,240 MB/sec [Average]
[info]   (min, avg, max) = (1086,505, 1088,988, 1092,136), stdev = 2,140
[info]   CI (99.9%): [1080,748, 1097,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   302160,074 ±(99.9%) 0,019 B/op [Average]
[info]   (min, avg, max) = (302160,072, 302160,074, 302160,083), stdev = 0,005
[info]   CI (99.9%): [302160,055, 302160,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1064,627 ±(99.9%) 1402,206 MB/sec [Average]
[info]   (min, avg, max) = (665,404, 1064,627, 1331,335), stdev = 364,148
[info]   CI (99.9%): [≈ 0, 2466,833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   295280,464 ±(99.9%) 387579,827 B/op [Average]
[info]   (min, avg, max) = (184814,295, 295280,464, 369097,275), stdev = 100653,250
[info]   CI (99.9%): [≈ 0, 682860,291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   8,074 ±(99.9%) 33,659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,074, 17,310), stdev = 8,741
[info]   CI (99.9%): [≈ 0, 41,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 62,05% complete, ETA 00:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12121,295 ops/s
[info] # Warmup Iteration   2: 16137,434 ops/s
[info] # Warmup Iteration   3: 16332,146 ops/s
[info] # Warmup Iteration   4: 16470,952 ops/s
[info] # Warmup Iteration   5: 16419,193 ops/s
[info] Iteration   1: 16446,611 ops/s
[info]                  ·gc.alloc.rate:                   921,735 MB/sec
[info]                  ·gc.alloc.rate.norm:              88208,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1329,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127223,737 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,992 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 16434,318 ops/s
[info]                  ·gc.alloc.rate:               921,051 MB/sec
[info]                  ·gc.alloc.rate.norm:          88204,860 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63690,196 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 16522,218 ops/s
[info]                  ·gc.alloc.rate:               925,655 MB/sec
[info]                  ·gc.alloc.rate.norm:          88184,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,027 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63354,904 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 16441,982 ops/s
[info]                  ·gc.alloc.rate:                   921,284 MB/sec
[info]                  ·gc.alloc.rate.norm:              88184,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127453,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,970 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 16441,334 ops/s
[info]                  ·gc.alloc.rate:               921,286 MB/sec
[info]                  ·gc.alloc.rate.norm:          88184,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:      667,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63854,364 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   16457,293 ±(99.9%) 140,777 ops/s [Average]
[info]   (min, avg, max) = (16434,318, 16457,293, 16522,218), stdev = 36,559
[info]   CI (99.9%): [16316,515, 16598,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   922,202 ±(99.9%) 7,493 MB/sec [Average]
[info]   (min, avg, max) = (921,051, 922,202, 925,655), stdev = 1,946
[info]   CI (99.9%): [914,709, 929,695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88192,992 ±(99.9%) 47,477 B/op [Average]
[info]   (min, avg, max) = (88184,025, 88192,992, 88208,025), stdev = 12,330
[info]   CI (99.9%): [88145,515, 88240,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   931,635 ±(99.9%) 1402,035 MB/sec [Average]
[info]   (min, avg, max) = (665,027, 931,635, 1331,546), stdev = 364,104
[info]   CI (99.9%): [≈ 0, 2333,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89115,379 ±(99.9%) 134362,565 B/op [Average]
[info]   (min, avg, max) = (63354,904, 89115,379, 127453,692), stdev = 34893,531
[info]   CI (99.9%): [≈ 0, 223477,943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,139 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,083), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,992 ±(99.9%) 13,289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,992, 7,970), stdev = 3,451
[info]   CI (99.9%): [≈ 0, 15,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,25% complete, ETA 00:50:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13176,159 ops/s
[info] # Warmup Iteration   2: 18894,050 ops/s
[info] # Warmup Iteration   3: 18937,843 ops/s
[info] # Warmup Iteration   4: 18946,384 ops/s
[info] # Warmup Iteration   5: 18899,533 ops/s
[info] Iteration   1: 19001,656 ops/s
[info]                  ·gc.alloc.rate:               989,259 MB/sec
[info]                  ·gc.alloc.rate.norm:          81943,940 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55636,813 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 18864,482 ops/s
[info]                  ·gc.alloc.rate:                   982,163 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112248,199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,473 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 18990,461 ops/s
[info]                  ·gc.alloc.rate:               988,726 MB/sec
[info]                  ·gc.alloc.rate.norm:          81944,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,693 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 55834,630 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 18920,757 ops/s
[info]                  ·gc.alloc.rate:                   985,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              81944,111 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,236 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112143,610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,463 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 18938,953 ops/s
[info]                  ·gc.alloc.rate:               985,876 MB/sec
[info]                  ·gc.alloc.rate.norm:          81943,932 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56043,243 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   18943,262 ±(99.9%) 214,126 ops/s [Average]
[info]   (min, avg, max) = (18864,482, 18943,262, 19001,656), stdev = 55,608
[info]   CI (99.9%): [18729,135, 19157,388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   986,238 ±(99.9%) 11,095 MB/sec [Average]
[info]   (min, avg, max) = (982,163, 986,238, 989,259), stdev = 2,881
[info]   CI (99.9%): [975,143, 997,332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81944,006 ±(99.9%) 0,281 B/op [Average]
[info]   (min, avg, max) = (81943,932, 81944,006, 81944,111), stdev = 0,073
[info]   CI (99.9%): [81943,725, 81944,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   942,648 ±(99.9%) 1420,691 MB/sec [Average]
[info]   (min, avg, max) = (671,669, 942,648, 1348,236), stdev = 368,949
[info]   CI (99.9%): [≈ 0, 2363,340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   78381,299 ±(99.9%) 118864,477 B/op [Average]
[info]   (min, avg, max) = (55636,813, 78381,299, 112248,199), stdev = 30868,727
[info]   CI (99.9%): [≈ 0, 197245,776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,387 ±(99.9%) 7,314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,387, 3,473), stdev = 1,899
[info]   CI (99.9%): [≈ 0, 8,701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 62,45% complete, ETA 00:49:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277510,263 ops/s
[info] # Warmup Iteration   2: 288452,976 ops/s
[info] # Warmup Iteration   3: 281357,192 ops/s
[info] # Warmup Iteration   4: 282708,801 ops/s
[info] # Warmup Iteration   5: 282906,139 ops/s
[info] Iteration   1: 281705,525 ops/s
[info]                  ·gc.alloc.rate:                   1020,965 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          666,757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3725,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,116 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 281906,548 ops/s
[info]                  ·gc.alloc.rate:                   1021,776 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,070 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7430,616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,465 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 282532,412 ops/s
[info]                  ·gc.alloc.rate:               1023,871 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3706,750 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 281158,765 ops/s
[info]                  ·gc.alloc.rate:                   1018,987 MB/sec
[info]                  ·gc.alloc.rate.norm:              5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1331,192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7451,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,466 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 281975,381 ops/s
[info]                  ·gc.alloc.rate:               1021,766 MB/sec
[info]                  ·gc.alloc.rate.norm:          5704,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      665,640 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3715,929 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   281855,726 ±(99.9%) 1909,002 ops/s [Average]
[info]   (min, avg, max) = (281158,765, 281855,726, 282532,412), stdev = 495,762
[info]   CI (99.9%): [279946,724, 283764,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1021,473 ±(99.9%) 6,770 MB/sec [Average]
[info]   (min, avg, max) = (1018,987, 1021,473, 1023,871), stdev = 1,758
[info]   CI (99.9%): [1014,703, 1028,243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5704,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5704,001, 5704,001, 5704,002), stdev = 0,001
[info]   CI (99.9%): [5704,001, 5704,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   932,004 ±(99.9%) 1402,989 MB/sec [Average]
[info]   (min, avg, max) = (665,363, 932,004, 1331,192), stdev = 364,352
[info]   CI (99.9%): [≈ 0, 2334,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5206,003 ±(99.9%) 7856,865 B/op [Average]
[info]   (min, avg, max) = (3706,750, 5206,003, 7451,637), stdev = 2040,403
[info]   CI (99.9%): [≈ 0, 13062,869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,209 ±(99.9%) 0,918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,209, 0,466), stdev = 0,238
[info]   CI (99.9%): [≈ 0, 1,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62,65% complete, ETA 00:49:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318004,589 ops/s
[info] # Warmup Iteration   2: 331420,022 ops/s
[info] # Warmup Iteration   3: 330646,857 ops/s
[info] # Warmup Iteration   4: 330895,303 ops/s
[info] # Warmup Iteration   5: 330825,550 ops/s
[info] Iteration   1: 331174,327 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 332283,525 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 331155,140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 330040,569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 330742,266 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   331079,165 ±(99.9%) 3138,626 ops/s [Average]
[info]   (min, avg, max) = (330040,569, 331079,165, 332283,525), stdev = 815,091
[info]   CI (99.9%): [327940,540, 334217,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,001, 0,001), stdev = 0,001
[info]   CI (99.9%): [0,001, 0,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62,85% complete, ETA 00:49:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12372,150 ops/s
[info] # Warmup Iteration   2: 16836,406 ops/s
[info] # Warmup Iteration   3: 16999,436 ops/s
[info] # Warmup Iteration   4: 17050,936 ops/s
[info] # Warmup Iteration   5: 17062,710 ops/s
[info] Iteration   1: 17066,898 ops/s
[info]                  ·gc.alloc.rate:               974,226 MB/sec
[info]                  ·gc.alloc.rate.norm:          89848,125 B/op
[info]                  ·gc.churn.PS_Eden_Space:      664,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61301,555 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 16997,826 ops/s
[info]                  ·gc.alloc.rate:                   970,238 MB/sec
[info]                  ·gc.alloc.rate.norm:              89843,494 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1328,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122977,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,637 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 17051,999 ops/s
[info]                  ·gc.alloc.rate:               973,167 MB/sec
[info]                  ·gc.alloc.rate.norm:          89831,911 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61232,510 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 17012,873 ops/s
[info]                  ·gc.alloc.rate:                   971,045 MB/sec
[info]                  ·gc.alloc.rate.norm:              89832,123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1326,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122745,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,851 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 17125,578 ops/s
[info]                  ·gc.alloc.rate:               977,378 MB/sec
[info]                  ·gc.alloc.rate.norm:          89831,925 B/op
[info]                  ·gc.churn.PS_Eden_Space:      663,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 61002,159 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   17051,035 ±(99.9%) 193,461 ops/s [Average]
[info]   (min, avg, max) = (16997,826, 17051,035, 17125,578), stdev = 50,241
[info]   CI (99.9%): [16857,574, 17244,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   973,211 ±(99.9%) 10,879 MB/sec [Average]
[info]   (min, avg, max) = (970,238, 973,211, 977,378), stdev = 2,825
[info]   CI (99.9%): [962,332, 984,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89837,516 ±(99.9%) 29,829 B/op [Average]
[info]   (min, avg, max) = (89831,911, 89837,516, 89848,125), stdev = 7,746
[info]   CI (99.9%): [89807,687, 89867,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   929,326 ±(99.9%) 1399,434 MB/sec [Average]
[info]   (min, avg, max) = (663,344, 929,326, 1328,056), stdev = 363,428
[info]   CI (99.9%): [≈ 0, 2328,759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   85851,849 ±(99.9%) 130095,254 B/op [Average]
[info]   (min, avg, max) = (61002,159, 85851,849, 122977,329), stdev = 33785,324
[info]   CI (99.9%): [≈ 0, 215947,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,046
[info]   CI (99.9%): [≈ 0, 0,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,698 ±(99.9%) 16,258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,698, 9,637), stdev = 4,222
[info]   CI (99.9%): [≈ 0, 18,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 63,05% complete, ETA 00:49:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7571,432 ops/s
[info] # Warmup Iteration   2: 8150,829 ops/s
[info] # Warmup Iteration   3: 8212,908 ops/s
[info] # Warmup Iteration   4: 8254,451 ops/s
[info] # Warmup Iteration   5: 8275,549 ops/s
[info] Iteration   1: 8284,971 ops/s
[info]                  ·gc.alloc.rate:                   544,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              103408,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     97177,069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 8258,700 ops/s
[info]                  ·gc.alloc.rate:                   542,606 MB/sec
[info]                  ·gc.alloc.rate.norm:              103408,053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     127692,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      5,452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1038,956 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 8326,635 ops/s
[info]                  ·gc.alloc.rate:      547,042 MB/sec
[info]                  ·gc.alloc.rate.norm: 103408,049 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8328,070 ops/s
[info]                  ·gc.alloc.rate:                   547,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              103408,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     126619,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,867 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 8355,070 ops/s
[info]                  ·gc.alloc.rate:               548,923 MB/sec
[info]                  ·gc.alloc.rate.norm:          103408,049 B/op
[info]                  ·gc.churn.PS_Eden_Space:      666,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 125583,223 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle":
[info]   8310,689 ±(99.9%) 147,766 ops/s [Average]
[info]   (min, avg, max) = (8258,700, 8310,689, 8355,070), stdev = 38,374
[info]   CI (99.9%): [8162,923, 8458,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate":
[info]   546,017 ±(99.9%) 9,700 MB/sec [Average]
[info]   (min, avg, max) = (542,606, 546,017, 548,923), stdev = 2,519
[info]   CI (99.9%): [536,317, 555,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   103408,050 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (103408,049, 103408,050, 103408,053), stdev = 0,002
[info]   CI (99.9%): [103408,042, 103408,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   503,641 ±(99.9%) 1115,442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 503,641, 670,032), stdev = 289,677
[info]   CI (99.9%): [≈ 0, 1619,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   95414,461 ±(99.9%) 211196,564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95414,461, 127692,465), stdev = 54847,077
[info]   CI (99.9%): [≈ 0, 306611,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   1,101 ±(99.9%) 9,366 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1,101, 5,452), stdev = 2,432
[info]   CI (99.9%): [≈ 0, 10,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   209,767 ±(99.9%) 1784,935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 209,767, 1038,956), stdev = 463,542
[info]   CI (99.9%): [≈ 0, 1994,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,643
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,25% complete, ETA 00:48:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 923199,735 ops/s
[info] # Warmup Iteration   2: 986143,589 ops/s
[info] # Warmup Iteration   3: 985242,211 ops/s
[info] # Warmup Iteration   4: 985818,953 ops/s
[info] # Warmup Iteration   5: 984162,522 ops/s
[info] Iteration   1: 986477,137 ops/s
[info]                  ·gc.alloc.rate:      40,112 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 984148,716 ops/s
[info]                  ·gc.alloc.rate:      40,020 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 987212,592 ops/s
[info]                  ·gc.alloc.rate:      40,143 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 983445,254 ops/s
[info]                  ·gc.alloc.rate:      39,994 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 985545,008 ops/s
[info]                  ·gc.alloc.rate:      40,073 MB/sec
[info]                  ·gc.alloc.rate.norm: 64,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   985365,741 ±(99.9%) 6041,835 ops/s [Average]
[info]   (min, avg, max) = (983445,254, 985365,741, 987212,592), stdev = 1569,045
[info]   CI (99.9%): [979323,906, 991407,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   40,068 ±(99.9%) 0,238 MB/sec [Average]
[info]   (min, avg, max) = (39,994, 40,068, 40,143), stdev = 0,062
[info]   CI (99.9%): [39,830, 40,307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   64,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (64,000, 64,000, 64,000), stdev = 0,001
[info]   CI (99.9%): [64,000, 64,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 63,45% complete, ETA 00:48:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48184,230 ops/s
[info] # Warmup Iteration   2: 81442,237 ops/s
[info] # Warmup Iteration   3: 82005,341 ops/s
[info] # Warmup Iteration   4: 81801,840 ops/s
[info] # Warmup Iteration   5: 81986,219 ops/s
[info] Iteration   1: 82014,462 ops/s
[info]                  ·gc.alloc.rate:                   3698,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398,469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65216,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,598 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 81943,832 ops/s
[info]                  ·gc.alloc.rate:                   3695,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78413,869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,599 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 81848,086 ops/s
[info]                  ·gc.alloc.rate:                   3690,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65449,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,801 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 81888,464 ops/s
[info]                  ·gc.alloc.rate:                   3692,677 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4087,461 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     78555,184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,800 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 82220,657 ops/s
[info]                  ·gc.alloc.rate:                   3708,228 MB/sec
[info]                  ·gc.alloc.rate.norm:              70968,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3407,780 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65218,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,797 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   81983,100 ±(99.9%) 565,086 ops/s [Average]
[info]   (min, avg, max) = (81848,086, 81983,100, 82220,657), stdev = 146,751
[info]   CI (99.9%): [81418,014, 82548,187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3696,987 ±(99.9%) 26,493 MB/sec [Average]
[info]   (min, avg, max) = (3690,695, 3696,987, 3708,228), stdev = 6,880
[info]   CI (99.9%): [3670,494, 3723,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70968,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (70968,005, 70968,005, 70968,005), stdev = 0,001
[info]   CI (99.9%): [70968,004, 70968,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3676,051 ±(99.9%) 1438,107 MB/sec [Average]
[info]   (min, avg, max) = (3398,469, 3676,051, 4087,461), stdev = 373,472
[info]   CI (99.9%): [2237,943, 5114,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   70570,615 ±(99.9%) 27821,578 B/op [Average]
[info]   (min, avg, max) = (65216,437, 70570,615, 78555,184), stdev = 7225,175
[info]   CI (99.9%): [42749,037, 98392,192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,119 ±(99.9%) 1,686 B/op [Average]
[info]   (min, avg, max) = (0,797, 1,119, 1,599), stdev = 0,438
[info]   CI (99.9%): [≈ 0, 2,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,65% complete, ETA 00:48:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 887342,610 ops/s
[info] # Warmup Iteration   2: 1206769,352 ops/s
[info] # Warmup Iteration   3: 1202816,928 ops/s
[info] # Warmup Iteration   4: 1203241,051 ops/s
[info] # Warmup Iteration   5: 1196147,720 ops/s
[info] Iteration   1: 1200577,221 ops/s
[info]                  ·gc.alloc.rate:               689,563 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,394 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 884,115 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1202140,299 ops/s
[info]                  ·gc.alloc.rate:                   690,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,097 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     883,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1200864,958 ops/s
[info]                  ·gc.alloc.rate:               689,714 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 884,774 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1198222,342 ops/s
[info]                  ·gc.alloc.rate:                   688,280 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     887,595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1199856,283 ops/s
[info]                  ·gc.alloc.rate:               689,182 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 886,377 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   1200332,221 ±(99.9%) 5543,820 ops/s [Average]
[info]   (min, avg, max) = (1198222,342, 1200332,221, 1202140,299), stdev = 1439,712
[info]   CI (99.9%): [1194788,401, 1205876,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   689,443 ±(99.9%) 3,094 MB/sec [Average]
[info]   (min, avg, max) = (688,280, 689,443, 690,479), stdev = 0,803
[info]   CI (99.9%): [686,350, 692,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,214 ±(99.9%) 2,219 MB/sec [Average]
[info]   (min, avg, max) = (674,394, 675,214, 675,789), stdev = 0,576
[info]   CI (99.9%): [672,996, 677,433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   885,344 ±(99.9%) 6,138 B/op [Average]
[info]   (min, avg, max) = (883,862, 885,344, 887,595), stdev = 1,594
[info]   CI (99.9%): [879,206, 891,482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,149 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,027, 0,082), stdev = 0,039
[info]   CI (99.9%): [≈ 0, 0,176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 63,86% complete, ETA 00:48:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 751426,874 ops/s
[info] # Warmup Iteration   2: 762061,590 ops/s
[info] # Warmup Iteration   3: 756263,422 ops/s
[info] # Warmup Iteration   4: 764381,711 ops/s
[info] # Warmup Iteration   5: 761105,249 ops/s
[info] Iteration   1: 759799,563 ops/s
[info]                  ·gc.alloc.rate:      204,681 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 761735,759 ops/s
[info]                  ·gc.alloc.rate:      205,201 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 759259,486 ops/s
[info]                  ·gc.alloc.rate:               204,534 MB/sec
[info]                  ·gc.alloc.rate.norm:          424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1060,413 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 758167,538 ops/s
[info]                  ·gc.alloc.rate:      204,264 MB/sec
[info]                  ·gc.alloc.rate.norm: 424,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 756398,793 ops/s
[info]                  ·gc.alloc.rate:                   203,743 MB/sec
[info]                  ·gc.alloc.rate.norm:              424,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1064,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   759072,228 ±(99.9%) 7610,308 ops/s [Average]
[info]   (min, avg, max) = (756398,793, 759072,228, 761735,759), stdev = 1976,373
[info]   CI (99.9%): [751461,920, 766682,536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   204,485 ±(99.9%) 2,067 MB/sec [Average]
[info]   (min, avg, max) = (203,743, 204,485, 205,201), stdev = 0,537
[info]   CI (99.9%): [202,418, 206,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (424,001, 424,001, 424,001), stdev = 0,001
[info]   CI (99.9%): [424,000, 424,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,602 ±(99.9%) 1078,808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,602, 511,535), stdev = 280,163
[info]   CI (99.9%): [≈ 0, 1283,410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   424,964 ±(99.9%) 2240,721 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 424,964, 1064,409), stdev = 581,908
[info]   CI (99.9%): [≈ 0, 2665,686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,016), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 64,06% complete, ETA 00:47:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1563111,002 ops/s
[info] # Warmup Iteration   2: 1636351,646 ops/s
[info] # Warmup Iteration   3: 1634883,172 ops/s
[info] # Warmup Iteration   4: 1631671,700 ops/s
[info] # Warmup Iteration   5: 1633915,667 ops/s
[info] Iteration   1: 1615217,099 ops/s
[info]                  ·gc.alloc.rate:      16,419 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1630879,337 ops/s
[info]                  ·gc.alloc.rate:      16,580 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1638070,857 ops/s
[info]                  ·gc.alloc.rate:      16,653 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1632769,647 ops/s
[info]                  ·gc.alloc.rate:      16,600 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1635492,880 ops/s
[info]                  ·gc.alloc.rate:      16,625 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1630485,964 ±(99.9%) 34500,781 ops/s [Average]
[info]   (min, avg, max) = (1615217,099, 1630485,964, 1638070,857), stdev = 8959,743
[info]   CI (99.9%): [1595985,183, 1664986,745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   16,575 ±(99.9%) 0,353 MB/sec [Average]
[info]   (min, avg, max) = (16,419, 16,575, 16,653), stdev = 0,092
[info]   CI (99.9%): [16,222, 16,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 64,26% complete, ETA 00:47:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29173,973 ops/s
[info] # Warmup Iteration   2: 50504,388 ops/s
[info] # Warmup Iteration   3: 50730,612 ops/s
[info] # Warmup Iteration   4: 50648,778 ops/s
[info] # Warmup Iteration   5: 50883,988 ops/s
[info] Iteration   1: 50804,265 ops/s
[info]                  ·gc.alloc.rate:                   2140,994 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,837 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     62946,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,935 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 50537,797 ops/s
[info]                  ·gc.alloc.rate:                   2129,869 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84478,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,945 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 50668,474 ops/s
[info]                  ·gc.alloc.rate:                   2135,143 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63252,236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,647 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 50590,527 ops/s
[info]                  ·gc.alloc.rate:                   2132,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,391 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63409,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,295 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 50028,337 ops/s
[info]                  ·gc.alloc.rate:                   2108,506 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,656 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     64162,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,655 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   50525,880 ±(99.9%) 1138,551 ops/s [Average]
[info]   (min, avg, max) = (50028,337, 50525,880, 50804,265), stdev = 295,678
[info]   CI (99.9%): [49387,329, 51664,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2129,345 ±(99.9%) 47,634 MB/sec [Average]
[info]   (min, avg, max) = (2108,506, 2129,345, 2140,994), stdev = 12,370
[info]   CI (99.9%): [2081,711, 2176,979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66328,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66328,008, 66328,008, 66328,009), stdev = 0,001
[info]   CI (99.9%): [66328,007, 66328,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2171,746 ±(99.9%) 1164,534 MB/sec [Average]
[info]   (min, avg, max) = (2031,837, 2171,746, 2712,716), stdev = 302,426
[info]   CI (99.9%): [1007,212, 3336,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   67649,819 ±(99.9%) 36266,924 B/op [Average]
[info]   (min, avg, max) = (62946,338, 67649,819, 84478,936), stdev = 9418,405
[info]   CI (99.9%): [31382,894, 103916,743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,295 ±(99.9%) 2,482 B/op [Average]
[info]   (min, avg, max) = (0,647, 1,295, 1,945), stdev = 0,644
[info]   CI (99.9%): [≈ 0, 3,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64,46% complete, ETA 00:47:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 495685,563 ops/s
[info] # Warmup Iteration   2: 902023,340 ops/s
[info] # Warmup Iteration   3: 915741,690 ops/s
[info] # Warmup Iteration   4: 918623,830 ops/s
[info] # Warmup Iteration   5: 914957,981 ops/s
[info] Iteration   1: 917088,956 ops/s
[info]                  ·gc.alloc.rate:                   2913,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4630,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 916033,253 ops/s
[info]                  ·gc.alloc.rate:                   2909,659 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,891 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4646,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,072 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 917281,474 ops/s
[info]                  ·gc.alloc.rate:                   2914,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3388,218 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5813,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,107 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 920150,191 ops/s
[info]                  ·gc.alloc.rate:                   2923,226 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4642,883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,071 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 909063,877 ops/s
[info]                  ·gc.alloc.rate:                   2887,423 MB/sec
[info]                  ·gc.alloc.rate.norm:              5000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,226 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4705,279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   915923,550 ±(99.9%) 15892,221 ops/s [Average]
[info]   (min, avg, max) = (909063,877, 915923,550, 920150,191), stdev = 4127,159
[info]   CI (99.9%): [900031,329, 931815,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2909,580 ±(99.9%) 51,411 MB/sec [Average]
[info]   (min, avg, max) = (2887,423, 2909,580, 2923,226), stdev = 13,351
[info]   CI (99.9%): [2858,169, 2960,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5000,000, 5000,000, 5000,000), stdev = 0,001
[info]   CI (99.9%): [5000,000, 5000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2844,338 ±(99.9%) 1171,130 MB/sec [Average]
[info]   (min, avg, max) = (2697,914, 2844,338, 3388,218), stdev = 304,139
[info]   CI (99.9%): [1673,207, 4015,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4887,610 ±(99.9%) 1995,684 B/op [Average]
[info]   (min, avg, max) = (4630,208, 4887,610, 5813,275), stdev = 518,273
[info]   CI (99.9%): [2891,926, 6883,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,071 ±(99.9%) 0,097 B/op [Average]
[info]   (min, avg, max) = (0,036, 0,071, 0,107), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   21,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,200, 5,000), stdev = 0,447
[info]   CI (99.9%): [21,000, 21,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64,66% complete, ETA 00:46:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 612880,636 ops/s
[info] # Warmup Iteration   2: 6056462,354 ops/s
[info] # Warmup Iteration   3: 6098415,365 ops/s
[info] # Warmup Iteration   4: 6086371,377 ops/s
[info] # Warmup Iteration   5: 6077462,078 ops/s
[info] Iteration   1: 6118685,174 ops/s
[info]                  ·gc.alloc.rate:      373,196 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 6104091,247 ops/s
[info]                  ·gc.alloc.rate:               372,321 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,573 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131,905 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 6112040,072 ops/s
[info]                  ·gc.alloc.rate:               372,801 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 131,735 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 6098664,953 ops/s
[info]                  ·gc.alloc.rate:      372,039 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6100586,808 ops/s
[info]                  ·gc.alloc.rate:                   372,085 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     173,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,690 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   6106813,651 ±(99.9%) 32264,792 ops/s [Average]
[info]   (min, avg, max) = (6098664,953, 6106813,651, 6118685,174), stdev = 8379,064
[info]   CI (99.9%): [6074548,858, 6139078,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   372,488 ±(99.9%) 1,917 MB/sec [Average]
[info]   (min, avg, max) = (372,039, 372,488, 373,196), stdev = 0,498
[info]   CI (99.9%): [370,571, 374,405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,370 ±(99.9%) 1219,856 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,370, 673,703), stdev = 316,793
[info]   CI (99.9%): [≈ 0, 1559,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   87,492 ±(99.9%) 314,554 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 87,492, 173,819), stdev = 81,689
[info]   CI (99.9%): [≈ 0, 402,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,535 ±(99.9%) 4,603 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,535, 2,673), stdev = 1,195
[info]   CI (99.9%): [≈ 0, 5,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,138 ±(99.9%) 1,188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,138, 0,690), stdev = 0,308
[info]   CI (99.9%): [≈ 0, 1,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64,86% complete, ETA 00:46:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 488738,429 ops/s
[info] # Warmup Iteration   2: 1080778,652 ops/s
[info] # Warmup Iteration   3: 1089871,066 ops/s
[info] # Warmup Iteration   4: 1090780,824 ops/s
[info] # Warmup Iteration   5: 1089488,965 ops/s
[info] Iteration   1: 1090175,982 ops/s
[info]                  ·gc.alloc.rate:                   1302,185 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,439 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1951,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1092655,457 ops/s
[info]                  ·gc.alloc.rate:                   1305,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1947,810 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,090 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1087550,356 ops/s
[info]                  ·gc.alloc.rate:               1299,065 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1958,717 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1091129,447 ops/s
[info]                  ·gc.alloc.rate:                   1303,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,898 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1954,221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1092262,415 ops/s
[info]                  ·gc.alloc.rate:                   1304,582 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,352 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1953,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   1090754,731 ±(99.9%) 7851,267 ops/s [Average]
[info]   (min, avg, max) = (1087550,356, 1090754,731, 1092655,457), stdev = 2038,949
[info]   CI (99.9%): [1082903,464, 1098605,999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1302,912 ±(99.9%) 9,441 MB/sec [Average]
[info]   (min, avg, max) = (1299,065, 1302,912, 1305,289), stdev = 2,452
[info]   CI (99.9%): [1293,471, 1312,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1880,000, 1880,000, 1880,000), stdev = 0,001
[info]   CI (99.9%): [1880,000, 1880,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1353,503 ±(99.9%) 6,360 MB/sec [Average]
[info]   (min, avg, max) = (1351,439, 1353,503, 1355,352), stdev = 1,652
[info]   CI (99.9%): [1347,143, 1359,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1953,005 ±(99.9%) 15,489 B/op [Average]
[info]   (min, avg, max) = (1947,810, 1953,005, 1958,717), stdev = 4,022
[info]   CI (99.9%): [1937,516, 1968,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,083), stdev = 0,034
[info]   CI (99.9%): [≈ 0, 0,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,054 ±(99.9%) 0,190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,120), stdev = 0,049
[info]   CI (99.9%): [≈ 0, 0,244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 65,06% complete, ETA 00:46:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8503183,758 ops/s
[info] # Warmup Iteration   2: 8786372,264 ops/s
[info] # Warmup Iteration   3: 9047631,602 ops/s
[info] # Warmup Iteration   4: 8979717,336 ops/s
[info] # Warmup Iteration   5: 8955272,791 ops/s
[info] Iteration   1: 9018995,773 ops/s
[info]                  ·gc.alloc.rate:      412,537 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9045570,173 ops/s
[info]                  ·gc.alloc.rate:               413,835 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,626 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89,014 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 9035009,850 ops/s
[info]                  ·gc.alloc.rate:               413,294 MB/sec
[info]                  ·gc.alloc.rate.norm:          72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 89,110 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 9016661,476 ops/s
[info]                  ·gc.alloc.rate:                   412,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              72,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     117,898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,538 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8660861,991 ops/s
[info]                  ·gc.alloc.rate:      396,207 MB/sec
[info]                  ·gc.alloc.rate.norm: 72,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8955419,853 ±(99.9%) 635701,592 ops/s [Average]
[info]   (min, avg, max) = (8660861,991, 8955419,853, 9045570,173), stdev = 165089,685
[info]   CI (99.9%): [8319718,261, 9591121,444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   409,687 ±(99.9%) 29,092 MB/sec [Average]
[info]   (min, avg, max) = (396,207, 409,687, 413,835), stdev = 7,555
[info]   CI (99.9%): [380,596, 438,779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (72,000, 72,000, 72,000), stdev = 0,001
[info]   CI (99.9%): [72,000, 72,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   339,739 ±(99.9%) 1221,738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,739, 675,559), stdev = 317,281
[info]   CI (99.9%): [≈ 0, 1561,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   59,204 ±(99.9%) 212,991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 59,204, 117,898), stdev = 55,313
[info]   CI (99.9%): [≈ 0, 272,196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,616 ±(99.9%) 5,306 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,616, 3,081), stdev = 1,378
[info]   CI (99.9%): [≈ 0, 5,922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,108 ±(99.9%) 0,926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,108, 0,538), stdev = 0,240
[info]   CI (99.9%): [≈ 0, 1,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65,26% complete, ETA 00:46:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90002,527 ops/s
[info] # Warmup Iteration   2: 338983,379 ops/s
[info] # Warmup Iteration   3: 338997,472 ops/s
[info] # Warmup Iteration   4: 340644,726 ops/s
[info] # Warmup Iteration   5: 339891,641 ops/s
[info] Iteration   1: 338640,143 ops/s
[info]                  ·gc.alloc.rate:                   1779,795 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,520 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9432,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 340527,057 ops/s
[info]                  ·gc.alloc.rate:                   1789,779 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,160 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6258,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,289 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 340472,067 ops/s
[info]                  ·gc.alloc.rate:                   1789,413 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9400,224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,192 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 338345,640 ops/s
[info]                  ·gc.alloc.rate:                   1778,414 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,727 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9468,850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 339147,057 ops/s
[info]                  ·gc.alloc.rate:                   1782,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              8272,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6299,647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   339426,393 ±(99.9%) 3931,213 ops/s [Average]
[info]   (min, avg, max) = (338345,640, 339426,393, 340527,057), stdev = 1020,924
[info]   CI (99.9%): [335495,180, 343357,606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1783,925 ±(99.9%) 20,621 MB/sec [Average]
[info]   (min, avg, max) = (1778,414, 1783,925, 1789,779), stdev = 5,355
[info]   CI (99.9%): [1763,303, 1804,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8272,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8272,001, 8272,001, 8272,001), stdev = 0,001
[info]   CI (99.9%): [8272,001, 8272,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1762,031 ±(99.9%) 1428,282 MB/sec [Average]
[info]   (min, avg, max) = (1354,160, 1762,031, 2035,727), stdev = 370,920
[info]   CI (99.9%): [333,749, 3190,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8172,007 ±(99.9%) 6654,542 B/op [Average]
[info]   (min, avg, max) = (6258,657, 8172,007, 9468,850), stdev = 1728,164
[info]   CI (99.9%): [1517,465, 14826,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,154 ±(99.9%) 0,330 B/op [Average]
[info]   (min, avg, max) = (0,097, 0,154, 0,289), stdev = 0,086
[info]   CI (99.9%): [≈ 0, 0,485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle
[info] # Run progress: 65,46% complete, ETA 00:45:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 581832,510 ops/s
[info] # Warmup Iteration   2: 809888,085 ops/s
[info] # Warmup Iteration   3: 813188,895 ops/s
[info] # Warmup Iteration   4: 824628,042 ops/s
[info] # Warmup Iteration   5: 825052,337 ops/s
[info] Iteration   1: 824221,717 ops/s
[info]                  ·gc.alloc.rate:                   1143,820 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,071 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2568,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,119 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 823522,976 ops/s
[info]                  ·gc.alloc.rate:               1142,832 MB/sec
[info]                  ·gc.alloc.rate.norm:          2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,172 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1284,550 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 822219,470 ops/s
[info]                  ·gc.alloc.rate:                   1140,871 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2572,949 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 821024,393 ops/s
[info]                  ·gc.alloc.rate:                   1139,286 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,140 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2576,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 818872,912 ops/s
[info]                  ·gc.alloc.rate:                   1136,177 MB/sec
[info]                  ·gc.alloc.rate.norm:              2184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2586,039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle":
[info]   821972,294 ±(99.9%) 8175,320 ops/s [Average]
[info]   (min, avg, max) = (818872,912, 821972,294, 824221,717), stdev = 2123,105
[info]   CI (99.9%): [813796,973, 830147,614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1140,597 ±(99.9%) 11,665 MB/sec [Average]
[info]   (min, avg, max) = (1136,177, 1140,597, 1143,820), stdev = 3,029
[info]   CI (99.9%): [1128,932, 1152,262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2184,000, 2184,001, 2184,001), stdev = 0,001
[info]   CI (99.9%): [2184,000, 2184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,152 ±(99.9%) 1158,044 MB/sec [Average]
[info]   (min, avg, max) = (672,172, 1210,152, 1345,329), stdev = 300,740
[info]   CI (99.9%): [52,108, 2368,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2317,702 ±(99.9%) 2224,080 B/op [Average]
[info]   (min, avg, max) = (1284,550, 2317,702, 2586,039), stdev = 577,586
[info]   CI (99.9%): [93,622, 4541,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,072 ±(99.9%) 0,168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,072, 0,119), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce
[info] # Run progress: 65,66% complete, ETA 00:45:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3101,532 ops/s
[info] # Warmup Iteration   2: 4456,167 ops/s
[info] # Warmup Iteration   3: 4531,842 ops/s
[info] # Warmup Iteration   4: 4562,728 ops/s
[info] # Warmup Iteration   5: 4558,823 ops/s
[info] Iteration   1: 4561,698 ops/s
[info]                  ·gc.alloc.rate:                   2078,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     699280,466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21,544 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4534,903 ops/s
[info]                  ·gc.alloc.rate:                   2066,450 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,612 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     704367,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108,360 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 4566,473 ops/s
[info]                  ·gc.alloc.rate:                   2080,606 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152,089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     700466,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35,867 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 4531,220 ops/s
[info]                  ·gc.alloc.rate:                   2065,151 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     941845,117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57,817 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 4540,381 ops/s
[info]                  ·gc.alloc.rate:                   2068,563 MB/sec
[info]                  ·gc.alloc.rate.norm:              717152,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     705976,532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57,716 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce":
[info]   4546,935 ±(99.9%) 61,921 ops/s [Average]
[info]   (min, avg, max) = (4531,220, 4546,935, 4566,473), stdev = 16,081
[info]   CI (99.9%): [4485,014, 4608,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate":
[info]   2071,875 ±(99.9%) 27,708 MB/sec [Average]
[info]   (min, avg, max) = (2065,151, 2071,875, 2080,606), stdev = 7,196
[info]   CI (99.9%): [2044,167, 2099,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   717152,093 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (717152,089, 717152,093, 717152,097), stdev = 0,004
[info]   CI (99.9%): [717152,077, 717152,108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2167,426 ±(99.9%) 1172,721 MB/sec [Average]
[info]   (min, avg, max) = (2026,804, 2167,426, 2712,189), stdev = 304,552
[info]   CI (99.9%): [994,705, 3340,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   750387,170 ±(99.9%) 412262,891 B/op [Average]
[info]   (min, avg, max) = (699280,466, 750387,170, 941845,117), stdev = 107063,364
[info]   CI (99.9%): [338124,278, 1162650,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,162 ±(99.9%) 0,365 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,162, 0,312), stdev = 0,095
[info]   CI (99.9%): [≈ 0, 0,527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   56,261 ±(99.9%) 126,838 B/op [Average]
[info]   (min, avg, max) = (21,544, 56,261, 108,360), stdev = 32,939
[info]   CI (99.9%): [≈ 0, 183,099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala
[info] # Run progress: 65,86% complete, ETA 00:45:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3169,815 ops/s
[info] # Warmup Iteration   2: 5774,411 ops/s
[info] # Warmup Iteration   3: 5855,504 ops/s
[info] # Warmup Iteration   4: 5852,865 ops/s
[info] # Warmup Iteration   5: 5839,232 ops/s
[info] Iteration   1: 5875,558 ops/s
[info]                  ·gc.alloc.rate:                   2427,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,075 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     725813,709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,303 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 5881,297 ops/s
[info]                  ·gc.alloc.rate:                   2430,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544518,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33,420 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5804,369 ops/s
[info]                  ·gc.alloc.rate:                   2398,360 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     736314,907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,288 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5801,563 ops/s
[info]                  ·gc.alloc.rate:                   2397,407 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,076 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     552928,237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,293 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5829,863 ops/s
[info]                  ·gc.alloc.rate:                   2408,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              650352,070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2719,212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     734290,875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,619 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala":
[info]   5838,530 ±(99.9%) 146,738 ops/s [Average]
[info]   (min, avg, max) = (5801,563, 5838,530, 5881,297), stdev = 38,107
[info]   CI (99.9%): [5691,792, 5985,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2412,454 ±(99.9%) 60,772 MB/sec [Average]
[info]   (min, avg, max) = (2397,407, 2412,454, 2430,216), stdev = 15,782
[info]   CI (99.9%): [2351,682, 2473,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   650352,072 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (650352,069, 650352,072, 650352,076), stdev = 0,003
[info]   CI (99.9%): [650352,060, 650352,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2443,446 ±(99.9%) 1430,522 MB/sec [Average]
[info]   (min, avg, max) = (2034,739, 2443,446, 2719,212), stdev = 371,502
[info]   CI (99.9%): [1012,923, 3873,968] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   658773,155 ±(99.9%) 387307,891 B/op [Average]
[info]   (min, avg, max) = (544518,049, 658773,155, 736314,907), stdev = 100582,629
[info]   CI (99.9%): [271465,265, 1046081,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,062, 0,125), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16,784 ±(99.9%) 42,715 B/op [Average]
[info]   (min, avg, max) = (5,619, 16,784, 33,420), stdev = 11,093
[info]   CI (99.9%): [≈ 0, 59,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJacksonScala:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala
[info] # Run progress: 66,06% complete, ETA 00:45:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45327,622 ops/s
[info] # Warmup Iteration   2: 48000,661 ops/s
[info] # Warmup Iteration   3: 48076,730 ops/s
[info] # Warmup Iteration   4: 47867,260 ops/s
[info] # Warmup Iteration   5: 47739,187 ops/s
[info] Iteration   1: 47873,973 ops/s
[info]                  ·gc.alloc.rate:                   796,434 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22204,366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,369 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 48346,911 ops/s
[info]                  ·gc.alloc.rate:               804,284 MB/sec
[info]                  ·gc.alloc.rate.norm:          26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21923,943 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 48292,956 ops/s
[info]                  ·gc.alloc.rate:                   803,418 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43871,565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,678 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 48175,928 ops/s
[info]                  ·gc.alloc.rate:               801,523 MB/sec
[info]                  ·gc.alloc.rate.norm:          26184,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,763 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21977,707 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 48150,649 ops/s
[info]                  ·gc.alloc.rate:                   800,945 MB/sec
[info]                  ·gc.alloc.rate.norm:              26184,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,641 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21989,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,680 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala":
[info]   48168,083 ±(99.9%) 705,937 ops/s [Average]
[info]   (min, avg, max) = (47873,973, 48168,083, 48346,911), stdev = 183,330
[info]   CI (99.9%): [47462,147, 48874,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   801,321 ±(99.9%) 11,749 MB/sec [Average]
[info]   (min, avg, max) = (796,434, 801,321, 804,284), stdev = 3,051
[info]   CI (99.9%): [789,572, 813,070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26184,009 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (26184,008, 26184,009, 26184,009), stdev = 0,001
[info]   CI (99.9%): [26184,007, 26184,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   808,071 ±(99.9%) 1158,231 MB/sec [Average]
[info]   (min, avg, max) = (672,641, 808,071, 1346,135), stdev = 300,789
[info]   CI (99.9%): [≈ 0, 1966,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   26393,431 ±(99.9%) 37625,262 B/op [Average]
[info]   (min, avg, max) = (21923,943, 26393,431, 43871,565), stdev = 9771,161
[info]   CI (99.9%): [≈ 0, 64018,693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,545 ±(99.9%) 2,202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,545, 1,369), stdev = 0,572
[info]   CI (99.9%): [≈ 0, 2,748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce
[info] # Run progress: 66,27% complete, ETA 00:44:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3230,125 ops/s
[info] # Warmup Iteration   2: 4490,887 ops/s
[info] # Warmup Iteration   3: 4490,610 ops/s
[info] # Warmup Iteration   4: 4553,128 ops/s
[info] # Warmup Iteration   5: 4551,488 ops/s
[info] Iteration   1: 4544,061 ops/s
[info]                  ·gc.alloc.rate:               835,572 MB/sec
[info]                  ·gc.alloc.rate.norm:          289416,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 233132,244 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 4517,627 ops/s
[info]                  ·gc.alloc.rate:               830,760 MB/sec
[info]                  ·gc.alloc.rate.norm:          289416,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,049 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 234473,567 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 4563,902 ops/s
[info]                  ·gc.alloc.rate:                   839,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     232340,553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28,712 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 4552,151 ops/s
[info]                  ·gc.alloc.rate:               837,198 MB/sec
[info]                  ·gc.alloc.rate.norm:          289416,097 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 466033,778 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 4553,650 ops/s
[info]                  ·gc.alloc.rate:                   837,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              289416,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233080,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35,969 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce":
[info]   4546,278 ±(99.9%) 67,393 ops/s [Average]
[info]   (min, avg, max) = (4517,627, 4546,278, 4563,902), stdev = 17,502
[info]   CI (99.9%): [4478,886, 4613,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate":
[info]   836,003 ±(99.9%) 12,327 MB/sec [Average]
[info]   (min, avg, max) = (830,760, 836,003, 839,208), stdev = 3,201
[info]   CI (99.9%): [823,676, 848,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   289416,094 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (289416,090, 289416,094, 289416,097), stdev = 0,004
[info]   CI (99.9%): [289416,079, 289416,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   808,447 ±(99.9%) 1161,651 MB/sec [Average]
[info]   (min, avg, max) = (673,049, 808,447, 1348,102), stdev = 301,677
[info]   CI (99.9%): [≈ 0, 1970,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   279812,195 ±(99.9%) 400866,939 B/op [Average]
[info]   (min, avg, max) = (232340,553, 279812,195, 466033,778), stdev = 104103,871
[info]   CI (99.9%): [≈ 0, 680679,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12,936 ±(99.9%) 68,921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12,936, 35,969), stdev = 17,899
[info]   CI (99.9%): [≈ 0, 81,858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala
[info] # Run progress: 66,47% complete, ETA 00:44:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1d4655e3/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 3119,847 ops/s
[info] # Warmup Iteration   2: 5258,179 ops/s
[info] # Warmup Iteration   3: 5329,354 ops/s
[info] # Warmup Iteration   4: 5209,115 ops/s
[info] # Warmup Iteration   5: 5302,067 ops/s
[info] Iteration   1: 5330,060 ops/s
[info]                  ·gc.alloc.rate:      564,088 MB/sec
[info]                  ·gc.alloc.rate.norm: 166581,863 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5326,248 ops/s
[info]                  ·gc.alloc.rate:                   563,697 MB/sec
[info]                  ·gc.alloc.rate.norm:              166581,331 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199203,851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 262,489 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 5330,792 ops/s
[info]                  ·gc.alloc.rate:                   564,147 MB/sec
[info]                  ·gc.alloc.rate.norm:              166580,486 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199017,050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,291 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 5330,002 ops/s
[info]                  ·gc.alloc.rate:                   564,144 MB/sec
[info]                  ·gc.alloc.rate.norm:              166581,725 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199152,729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,147 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 5323,147 ops/s
[info]                  ·gc.alloc.rate:                   563,383 MB/sec
[info]                  ·gc.alloc.rate.norm:              166581,553 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     199377,127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,154 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala":
[info]   5328,050 ±(99.9%) 12,574 ops/s [Average]
[info]   (min, avg, max) = (5323,147, 5328,050, 5330,792), stdev = 3,265
[info]   CI (99.9%): [5315,476, 5340,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   563,892 ±(99.9%) 1,311 MB/sec [Average]
[info]   (min, avg, max) = (563,383, 563,892, 564,147), stdev = 0,341
[info]   CI (99.9%): [562,580, 565,203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   166581,392 ±(99.9%) 2,094 B/op [Average]
[info]   (min, avg, max) = (166580,486, 166581,392, 166581,863), stdev = 0,544
[info]   CI (99.9%): [166579,297, 166583,486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,367 ±(99.9%) 1161,028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,367, 674,448), stdev = 301,515
[info]   CI (99.9%): [≈ 0, 1700,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   159350,151 ±(99.9%) 343013,574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 159350,151, 199377,127), stdev = 89079,536
[info]   CI (99.9%): [≈ 0, 502363,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,194 ±(99.9%) 1,495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,194, 0,888), stdev = 0,388
[info]   CI (99.9%): [≈ 0, 1,689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   57,416 ±(99.9%) 441,752 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57,416, 262,489), stdev = 114,722
[info]   CI (99.9%): [≈ 0, 499,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala
[info] # Run progress: 66,67% complete, ETA 00:44:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6795,324 ops/s
[info] # Warmup Iteration   2: 7054,081 ops/s
[info] # Warmup Iteration   3: 6938,337 ops/s
[info] # Warmup Iteration   4: 7067,109 ops/s
[info] # Warmup Iteration   5: 7050,775 ops/s
[info] Iteration   1: 6985,927 ops/s
[info]                  ·gc.alloc.rate:               186,674 MB/sec
[info]                  ·gc.alloc.rate.norm:          42056,058 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115241,323 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 7077,630 ops/s
[info]                  ·gc.alloc.rate:      189,130 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,067 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 6706,840 ops/s
[info]                  ·gc.alloc.rate:               179,209 MB/sec
[info]                  ·gc.alloc.rate.norm:          42056,061 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,488 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 120033,741 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 7035,168 ops/s
[info]                  ·gc.alloc.rate:      188,004 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,058 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7053,959 ops/s
[info]                  ·gc.alloc.rate:      188,471 MB/sec
[info]                  ·gc.alloc.rate.norm: 42056,058 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala":
[info]   6971,905 ±(99.9%) 585,148 ops/s [Average]
[info]   (min, avg, max) = (6706,840, 6971,905, 7077,630), stdev = 151,961
[info]   CI (99.9%): [6386,757, 7557,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   186,298 ±(99.9%) 15,647 MB/sec [Average]
[info]   (min, avg, max) = (179,209, 186,298, 189,130), stdev = 4,063
[info]   CI (99.9%): [170,651, 201,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   42056,060 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (42056,058, 42056,060, 42056,067), stdev = 0,004
[info]   CI (99.9%): [42056,046, 42056,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   204,602 ±(99.9%) 1078,806 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,602, 511,521), stdev = 280,163
[info]   CI (99.9%): [≈ 0, 1283,408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   47055,013 ±(99.9%) 248193,272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47055,013, 120033,741), stdev = 64455,004
[info]   CI (99.9%): [≈ 0, 295248,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 66,87% complete, ETA 00:44:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7032,345 ops/s
[info] # Warmup Iteration   2: 7317,148 ops/s
[info] # Warmup Iteration   3: 7286,386 ops/s
[info] # Warmup Iteration   4: 7276,263 ops/s
[info] # Warmup Iteration   5: 7316,481 ops/s
[info] Iteration   1: 7291,810 ops/s
[info]                  ·gc.alloc.rate:      141,546 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7295,640 ops/s
[info]                  ·gc.alloc.rate:               141,639 MB/sec
[info]                  ·gc.alloc.rate.norm:          30552,060 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,633 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 110361,295 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 7320,057 ops/s
[info]                  ·gc.alloc.rate:      142,099 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7295,909 ops/s
[info]                  ·gc.alloc.rate:      141,639 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,088 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7310,567 ops/s
[info]                  ·gc.alloc.rate:      141,905 MB/sec
[info]                  ·gc.alloc.rate.norm: 30552,056 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc":
[info]   7302,796 ±(99.9%) 46,275 ops/s [Average]
[info]   (min, avg, max) = (7291,810, 7302,796, 7320,057), stdev = 12,017
[info]   CI (99.9%): [7256,521, 7349,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   141,765 ±(99.9%) 0,884 MB/sec [Average]
[info]   (min, avg, max) = (141,546, 141,765, 142,099), stdev = 0,230
[info]   CI (99.9%): [140,881, 142,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   30552,063 ±(99.9%) 0,053 B/op [Average]
[info]   (min, avg, max) = (30552,056, 30552,063, 30552,088), stdev = 0,014
[info]   CI (99.9%): [30552,010, 30552,117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   102,327 ±(99.9%) 881,063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,327, 511,633), stdev = 228,809
[info]   CI (99.9%): [≈ 0, 983,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   22072,259 ±(99.9%) 190048,806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22072,259, 110361,295), stdev = 49355,071
[info]   CI (99.9%): [≈ 0, 212121,065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 67,07% complete, ETA 00:43:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6791,950 ops/s
[info] # Warmup Iteration   2: 8704,729 ops/s
[info] # Warmup Iteration   3: 8770,180 ops/s
[info] # Warmup Iteration   4: 8803,583 ops/s
[info] # Warmup Iteration   5: 8772,968 ops/s
[info] Iteration   1: 8798,525 ops/s
[info]                  ·gc.alloc.rate:                   2049,077 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,768 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360585,759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,137 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8807,181 ops/s
[info]                  ·gc.alloc.rate:                   2051,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              366544,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,389 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     360693,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,474 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 8794,272 ops/s
[info]                  ·gc.alloc.rate:                   2048,293 MB/sec
[info]                  ·gc.alloc.rate.norm:              366571,632 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362001,286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,067 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11,930 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8793,849 ops/s
[info]                  ·gc.alloc.rate:                   2048,219 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,262 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     362638,494 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22,352 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 8715,902 ops/s
[info]                  ·gc.alloc.rate:                   2029,404 MB/sec
[info]                  ·gc.alloc.rate.norm:              366568,047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     366544,547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,759 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   8781,946 ±(99.9%) 143,653 ops/s [Average]
[info]   (min, avg, max) = (8715,902, 8781,946, 8807,181), stdev = 37,306
[info]   CI (99.9%): [8638,293, 8925,599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   2045,224 ±(99.9%) 34,353 MB/sec [Average]
[info]   (min, avg, max) = (2029,404, 2045,224, 2051,128), stdev = 8,921
[info]   CI (99.9%): [2010,871, 2079,577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   366559,164 ±(99.9%) 53,434 B/op [Average]
[info]   (min, avg, max) = (366544,046, 366559,164, 366571,632), stdev = 13,877
[info]   CI (99.9%): [366505,731, 366612,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2022,490 ±(99.9%) 21,293 MB/sec [Average]
[info]   (min, avg, max) = (2015,768, 2022,490, 2029,274), stdev = 5,530
[info]   CI (99.9%): [2001,197, 2043,783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   362492,713 ±(99.9%) 9344,026 B/op [Average]
[info]   (min, avg, max) = (360585,759, 362492,713, 366544,547), stdev = 2426,614
[info]   CI (99.9%): [353148,687, 371836,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,063 ±(99.9%) 0,165 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,063, 0,125), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   11,331 ±(99.9%) 29,455 B/op [Average]
[info]   (min, avg, max) = (3,759, 11,331, 22,352), stdev = 7,649
[info]   CI (99.9%): [≈ 0, 40,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 67,27% complete, ETA 00:43:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4174,973 ops/s
[info] # Warmup Iteration   2: 15249,732 ops/s
[info] # Warmup Iteration   3: 15260,827 ops/s
[info] # Warmup Iteration   4: 15202,826 ops/s
[info] # Warmup Iteration   5: 15201,219 ops/s
[info] Iteration   1: 15267,404 ops/s
[info]                  ·gc.alloc.rate:      351,936 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280,029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15265,798 ops/s
[info]                  ·gc.alloc.rate:               351,909 MB/sec
[info]                  ·gc.alloc.rate.norm:          36280,029 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,546 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 52737,811 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 15240,635 ops/s
[info]                  ·gc.alloc.rate:                   351,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280,034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52827,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,746 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 15335,291 ops/s
[info]                  ·gc.alloc.rate:      353,543 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280,027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 15304,593 ops/s
[info]                  ·gc.alloc.rate:                   352,783 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,065 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69320,546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306,267 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   15282,744 ±(99.9%) 143,229 ops/s [Average]
[info]   (min, avg, max) = (15240,635, 15282,744, 15335,291), stdev = 37,196
[info]   CI (99.9%): [15139,515, 15425,973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   352,289 ±(99.9%) 3,400 MB/sec [Average]
[info]   (min, avg, max) = (351,272, 352,289, 353,543), stdev = 0,883
[info]   CI (99.9%): [348,889, 355,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280,029 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (36280,027, 36280,029, 36280,034), stdev = 0,003
[info]   CI (99.9%): [36280,018, 36280,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   339,421 ±(99.9%) 1220,167 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 339,421, 674,065), stdev = 316,874
[info]   CI (99.9%): [≈ 0, 1559,588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   34977,223 ±(99.9%) 125668,468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34977,223, 69320,546), stdev = 32635,702
[info]   CI (99.9%): [≈ 0, 160645,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,597 ±(99.9%) 5,125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,597, 2,978), stdev = 1,331
[info]   CI (99.9%): [≈ 0, 5,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   61,403 ±(99.9%) 527,091 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61,403, 306,267), stdev = 136,884
[info]   CI (99.9%): [≈ 0, 588,493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 67,47% complete, ETA 00:43:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9813,012 ops/s
[info] # Warmup Iteration   2: 16760,358 ops/s
[info] # Warmup Iteration   3: 16871,491 ops/s
[info] # Warmup Iteration   4: 16862,141 ops/s
[info] # Warmup Iteration   5: 16902,244 ops/s
[info] Iteration   1: 16758,954 ops/s
[info]                  ·gc.alloc.rate:               425,384 MB/sec
[info]                  ·gc.alloc.rate.norm:          39952,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,507 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48040,707 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 16729,145 ops/s
[info]                  ·gc.alloc.rate:               424,678 MB/sec
[info]                  ·gc.alloc.rate.norm:          39952,033 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48129,714 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 16701,771 ops/s
[info]                  ·gc.alloc.rate:                   423,960 MB/sec
[info]                  ·gc.alloc.rate.norm:              39952,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63519,628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,959 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 16843,064 ops/s
[info]                  ·gc.alloc.rate:      427,581 MB/sec
[info]                  ·gc.alloc.rate.norm: 39952,024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 16811,084 ops/s
[info]                  ·gc.alloc.rate:               426,686 MB/sec
[info]                  ·gc.alloc.rate.norm:          39952,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,949 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 63104,122 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   16768,804 ±(99.9%) 223,415 ops/s [Average]
[info]   (min, avg, max) = (16701,771, 16768,804, 16843,064), stdev = 58,020
[info]   CI (99.9%): [16545,388, 16992,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   425,658 ±(99.9%) 5,671 MB/sec [Average]
[info]   (min, avg, max) = (423,960, 425,658, 427,581), stdev = 1,473
[info]   CI (99.9%): [419,987, 431,328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39952,026 ±(99.9%) 0,014 B/op [Average]
[info]   (min, avg, max) = (39952,024, 39952,026, 39952,033), stdev = 0,004
[info]   CI (99.9%): [39952,012, 39952,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   474,222 ±(99.9%) 1067,638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,222, 674,052), stdev = 277,262
[info]   CI (99.9%): [≈ 0, 1541,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   44558,834 ±(99.9%) 100298,072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44558,834, 63519,628), stdev = 26047,091
[info]   CI (99.9%): [≈ 0, 144856,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,112 ±(99.9%) 0,968 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,112, 0,562), stdev = 0,251
[info]   CI (99.9%): [≈ 0, 1,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,592 ±(99.9%) 91,199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,592, 52,959), stdev = 23,684
[info]   CI (99.9%): [≈ 0, 101,791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 67,67% complete, ETA 00:42:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24445,377 ops/s
[info] # Warmup Iteration   2: 27329,064 ops/s
[info] # Warmup Iteration   3: 28409,516 ops/s
[info] # Warmup Iteration   4: 28393,463 ops/s
[info] # Warmup Iteration   5: 28371,813 ops/s
[info] Iteration   1: 28213,430 ops/s
[info]                  ·gc.alloc.rate:               528,733 MB/sec
[info]                  ·gc.alloc.rate.norm:          29496,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,519 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 28535,713 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 28526,109 ops/s
[info]                  ·gc.alloc.rate:      534,594 MB/sec
[info]                  ·gc.alloc.rate.norm: 29496,014 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 28418,282 ops/s
[info]                  ·gc.alloc.rate:                   532,536 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37368,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180,375 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 28346,617 ops/s
[info]                  ·gc.alloc.rate:                   531,278 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,767 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37462,351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,311 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 28425,673 ops/s
[info]                  ·gc.alloc.rate:                   532,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              29496,015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,676 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37247,626 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,152 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   28386,022 ±(99.9%) 445,654 ops/s [Average]
[info]   (min, avg, max) = (28213,430, 28386,022, 28526,109), stdev = 115,735
[info]   CI (99.9%): [27940,369, 28831,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   531,965 ±(99.9%) 8,320 MB/sec [Average]
[info]   (min, avg, max) = (528,733, 531,965, 534,594), stdev = 2,161
[info]   CI (99.9%): [523,645, 540,285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496,015 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (29496,014, 29496,015, 29496,015), stdev = 0,001
[info]   CI (99.9%): [29496,013, 29496,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   506,727 ±(99.9%) 1123,929 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,727, 674,767), stdev = 291,881
[info]   CI (99.9%): [≈ 0, 1630,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28122,893 ±(99.9%) 62299,567 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28122,893, 37462,351), stdev = 16179,000
[info]   CI (99.9%): [≈ 0, 90422,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,664 ±(99.9%) 5,582 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,664, 3,257), stdev = 1,450
[info]   CI (99.9%): [≈ 0, 6,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   36,768 ±(99.9%) 309,147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36,768, 180,375), stdev = 80,284
[info]   CI (99.9%): [≈ 0, 345,915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 67,87% complete, ETA 00:42:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1270,309 ops/s
[info] # Warmup Iteration   2: 2624,996 ops/s
[info] # Warmup Iteration   3: 2623,063 ops/s
[info] # Warmup Iteration   4: 2647,266 ops/s
[info] # Warmup Iteration   5: 2656,350 ops/s
[info] Iteration   1: 2656,480 ops/s
[info]                  ·gc.alloc.rate:                   1687,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1201444,021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61,640 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2664,577 ops/s
[info]                  ·gc.alloc.rate:                   1692,804 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     799214,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,291 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2662,237 ops/s
[info]                  ·gc.alloc.rate:               1690,997 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,165 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2032,306 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1201550,756 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 2656,212 ops/s
[info]                  ·gc.alloc.rate:               1687,384 MB/sec
[info]                  ·gc.alloc.rate.norm:          999760,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,806 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 803303,142 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2652,219 ops/s
[info]                  ·gc.alloc.rate:                   1684,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              999760,154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805107,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2658,345 ±(99.9%) 19,208 ops/s [Average]
[info]   (min, avg, max) = (2652,219, 2658,345, 2664,577), stdev = 4,988
[info]   CI (99.9%): [2639,137, 2677,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1688,724 ±(99.9%) 12,322 MB/sec [Average]
[info]   (min, avg, max) = (1684,671, 1688,724, 1692,804), stdev = 3,200
[info]   CI (99.9%): [1676,402, 1701,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   999760,158 ±(99.9%) 0,025 B/op [Average]
[info]   (min, avg, max) = (999760,153, 999760,158, 999760,166), stdev = 0,007
[info]   CI (99.9%): [999760,133, 999760,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1625,251 ±(99.9%) 1423,726 MB/sec [Average]
[info]   (min, avg, max) = (1353,238, 1625,251, 2032,306), stdev = 369,737
[info]   CI (99.9%): [201,525, 3048,977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   962123,960 ±(99.9%) 841471,497 B/op [Average]
[info]   (min, avg, max) = (799214,716, 962123,960, 1201550,756), stdev = 218527,475
[info]   CI (99.9%): [120652,464, 1803595,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,104), stdev = 0,045
[info]   CI (99.9%): [≈ 0, 0,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22,197 ±(99.9%) 102,965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22,197, 61,640), stdev = 26,740
[info]   CI (99.9%): [≈ 0, 125,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle
[info] # Run progress: 68,07% complete, ETA 00:42:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7391,603 ops/s
[info] # Warmup Iteration   2: 8956,625 ops/s
[info] # Warmup Iteration   3: 8977,814 ops/s
[info] # Warmup Iteration   4: 9001,738 ops/s
[info] # Warmup Iteration   5: 9020,878 ops/s
[info] Iteration   1: 9020,616 ops/s
[info]                  ·gc.alloc.rate:                   1107,374 MB/sec
[info]                  ·gc.alloc.rate.norm:              193248,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,328 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234424,495 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,632 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9020,364 ops/s
[info]                  ·gc.alloc.rate:               1107,668 MB/sec
[info]                  ·gc.alloc.rate.norm:          193248,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,509 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117154,135 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 9046,659 ops/s
[info]                  ·gc.alloc.rate:                   1110,909 MB/sec
[info]                  ·gc.alloc.rate.norm:              193274,522 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233609,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,864 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9026,919 ops/s
[info]                  ·gc.alloc.rate:               1108,563 MB/sec
[info]                  ·gc.alloc.rate.norm:          193272,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 234242,750 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 9013,662 ops/s
[info]                  ·gc.alloc.rate:               1106,843 MB/sec
[info]                  ·gc.alloc.rate.norm:          193272,045 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 117335,387 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle":
[info]   9025,644 ±(99.9%) 48,706 ops/s [Average]
[info]   (min, avg, max) = (9013,662, 9025,644, 9046,659), stdev = 12,649
[info]   CI (99.9%): [8976,938, 9074,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate":
[info]   1108,272 ±(99.9%) 6,165 MB/sec [Average]
[info]   (min, avg, max) = (1106,843, 1108,272, 1110,909), stdev = 1,601
[info]   CI (99.9%): [1102,107, 1114,437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   193262,941 ±(99.9%) 52,504 B/op [Average]
[info]   (min, avg, max) = (193248,045, 193262,941, 193274,522), stdev = 13,635
[info]   CI (99.9%): [193210,437, 193315,445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1074,622 ±(99.9%) 1416,199 MB/sec [Average]
[info]   (min, avg, max) = (671,509, 1074,622, 1343,562), stdev = 367,782
[info]   CI (99.9%): [≈ 0, 2490,821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   187353,184 ±(99.9%) 246443,864 B/op [Average]
[info]   (min, avg, max) = (117154,135, 187353,184, 234424,495), stdev = 64000,689
[info]   CI (99.9%): [≈ 0, 433797,047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,899 ±(99.9%) 18,182 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,899, 10,864), stdev = 4,722
[info]   CI (99.9%): [≈ 0, 21,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 68,27% complete, ETA 00:42:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6637,269 ops/s
[info] # Warmup Iteration   2: 8766,356 ops/s
[info] # Warmup Iteration   3: 8846,833 ops/s
[info] # Warmup Iteration   4: 8818,781 ops/s
[info] # Warmup Iteration   5: 8840,529 ops/s
[info] Iteration   1: 8837,056 ops/s
[info]                  ·gc.alloc.rate:                   1701,858 MB/sec
[info]                  ·gc.alloc.rate.norm:              303088,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     359765,951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,827 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8811,505 ops/s
[info]                  ·gc.alloc.rate:               1696,933 MB/sec
[info]                  ·gc.alloc.rate.norm:          303088,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 240935,709 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 8782,112 ops/s
[info]                  ·gc.alloc.rate:                   1691,332 MB/sec
[info]                  ·gc.alloc.rate.norm:              303125,807 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363032,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,920 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8806,876 ops/s
[info]                  ·gc.alloc.rate:                   1696,319 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136,046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     241612,858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,719 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8800,358 ops/s
[info]                  ·gc.alloc.rate:                   1694,772 MB/sec
[info]                  ·gc.alloc.rate.norm:              303136,050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     363124,382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,889 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   8807,581 ±(99.9%) 76,663 ops/s [Average]
[info]   (min, avg, max) = (8782,112, 8807,581, 8837,056), stdev = 19,909
[info]   CI (99.9%): [8730,918, 8884,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1696,243 ±(99.9%) 14,699 MB/sec [Average]
[info]   (min, avg, max) = (1691,332, 1696,243, 1701,858), stdev = 3,817
[info]   CI (99.9%): [1681,544, 1710,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   303114,800 ±(99.9%) 95,405 B/op [Average]
[info]   (min, avg, max) = (303088,046, 303114,800, 303136,050), stdev = 24,776
[info]   CI (99.9%): [303019,395, 303210,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1755,370 ±(99.9%) 1423,256 MB/sec [Average]
[info]   (min, avg, max) = (1348,954, 1755,370, 2030,155), stdev = 369,615
[info]   CI (99.9%): [332,114, 3178,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   313694,357 ±(99.9%) 254621,723 B/op [Average]
[info]   (min, avg, max) = (240935,709, 313694,357, 363124,382), stdev = 66124,453
[info]   CI (99.9%): [59072,635, 568316,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,054, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9,671 ±(99.9%) 27,922 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9,671, 14,920), stdev = 7,251
[info]   CI (99.9%): [≈ 0, 37,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 68,47% complete, ETA 00:41:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13820,180 ops/s
[info] # Warmup Iteration   2: 58113,545 ops/s
[info] # Warmup Iteration   3: 58931,732 ops/s
[info] # Warmup Iteration   4: 59063,388 ops/s
[info] # Warmup Iteration   5: 58525,368 ops/s
[info] Iteration   1: 58477,831 ops/s
[info]                  ·gc.alloc.rate:               546,639 MB/sec
[info]                  ·gc.alloc.rate.norm:          14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,565 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13768,039 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 58798,102 ops/s
[info]                  ·gc.alloc.rate:                   549,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18044,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81,294 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 58910,447 ops/s
[info]                  ·gc.alloc.rate:                   550,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18008,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,556 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 58787,744 ops/s
[info]                  ·gc.alloc.rate:                   549,583 MB/sec
[info]                  ·gc.alloc.rate.norm:              14712,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17993,421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,557 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 58710,886 ops/s
[info]                  ·gc.alloc.rate:      548,761 MB/sec
[info]                  ·gc.alloc.rate.norm: 14712,007 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   58737,002 ±(99.9%) 621,622 ops/s [Average]
[info]   (min, avg, max) = (58477,831, 58737,002, 58910,447), stdev = 161,433
[info]   CI (99.9%): [58115,380, 59358,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   549,043 ±(99.9%) 5,758 MB/sec [Average]
[info]   (min, avg, max) = (546,639, 549,043, 550,614), stdev = 1,495
[info]   CI (99.9%): [543,285, 554,800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   14712,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14712,007, 14712,007, 14712,007), stdev = 0,001
[info]   CI (99.9%): [14712,006, 14712,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,367 ±(99.9%) 1122,909 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,367, 674,109), stdev = 291,616
[info]   CI (99.9%): [≈ 0, 1629,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   13562,912 ±(99.9%) 30041,986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13562,912, 18044,465), stdev = 7801,808
[info]   CI (99.9%): [≈ 0, 43604,899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,616 ±(99.9%) 5,212 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,616, 3,037), stdev = 1,354
[info]   CI (99.9%): [≈ 0, 5,828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   16,482 ±(99.9%) 139,519 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,482, 81,294), stdev = 36,233
[info]   CI (99.9%): [≈ 0, 156,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 68,67% complete, ETA 00:41:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1d4655e3/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 29343,430 ops/s
[info] # Warmup Iteration   2: 45865,525 ops/s
[info] # Warmup Iteration   3: 46124,036 ops/s
[info] # Warmup Iteration   4: 46006,578 ops/s
[info] # Warmup Iteration   5: 46125,073 ops/s
[info] Iteration   1: 46287,928 ops/s
[info]                  ·gc.alloc.rate:                   689,146 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,791 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,114 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22920,684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,831 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45929,441 ops/s
[info]                  ·gc.alloc.rate:               683,753 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431,903 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23121,122 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 46001,752 ops/s
[info]                  ·gc.alloc.rate:               684,832 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431,795 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23084,943 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 45990,719 ops/s
[info]                  ·gc.alloc.rate:                   684,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431,830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23090,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,425 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 46019,646 ops/s
[info]                  ·gc.alloc.rate:               685,048 MB/sec
[info]                  ·gc.alloc.rate.norm:          23431,780 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,629 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23075,415 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   46045,897 ±(99.9%) 537,105 ops/s [Average]
[info]   (min, avg, max) = (45929,441, 46045,897, 46287,928), stdev = 139,484
[info]   CI (99.9%): [45508,792, 46583,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   685,503 ±(99.9%) 8,072 MB/sec [Average]
[info]   (min, avg, max) = (683,753, 685,503, 689,146), stdev = 2,096
[info]   CI (99.9%): [677,431, 693,575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431,820 ±(99.9%) 0,194 B/op [Average]
[info]   (min, avg, max) = (23431,780, 23431,820, 23431,903), stdev = 0,050
[info]   CI (99.9%): [23431,626, 23432,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   674,577 ±(99.9%) 1,012 MB/sec [Average]
[info]   (min, avg, max) = (674,114, 674,577, 674,761), stdev = 0,263
[info]   CI (99.9%): [673,564, 675,589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   23058,526 ±(99.9%) 303,944 B/op [Average]
[info]   (min, avg, max) = (22920,684, 23058,526, 23121,122), stdev = 78,933
[info]   CI (99.9%): [22754,582, 23362,469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,851 ±(99.9%) 4,879 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,851, 2,831), stdev = 1,267
[info]   CI (99.9%): [≈ 0, 5,730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 68,88% complete, ETA 00:41:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79218,524 ops/s
[info] # Warmup Iteration   2: 84782,517 ops/s
[info] # Warmup Iteration   3: 84594,293 ops/s
[info] # Warmup Iteration   4: 80513,490 ops/s
[info] # Warmup Iteration   5: 84244,267 ops/s
[info] Iteration   1: 84669,743 ops/s
[info]                  ·gc.alloc.rate:                   636,342 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12542,745 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61,313 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 84768,161 ops/s
[info]                  ·gc.alloc.rate:                   637,290 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,847 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12529,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 84745,990 ops/s
[info]                  ·gc.alloc.rate:               637,063 MB/sec
[info]                  ·gc.alloc.rate.norm:          11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 12495,419 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 84716,267 ops/s
[info]                  ·gc.alloc.rate:      636,909 MB/sec
[info]                  ·gc.alloc.rate.norm: 11832,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 84634,894 ops/s
[info]                  ·gc.alloc.rate:                   636,171 MB/sec
[info]                  ·gc.alloc.rate.norm:              11832,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12510,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,387 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   84707,011 ±(99.9%) 210,328 ops/s [Average]
[info]   (min, avg, max) = (84634,894, 84707,011, 84768,161), stdev = 54,622
[info]   CI (99.9%): [84496,683, 84917,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   636,755 ±(99.9%) 1,843 MB/sec [Average]
[info]   (min, avg, max) = (636,171, 636,755, 637,290), stdev = 0,479
[info]   CI (99.9%): [634,912, 638,598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11832,005, 11832,005, 11832,006), stdev = 0,001
[info]   CI (99.9%): [11832,004, 11832,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   538,971 ±(99.9%) 1160,182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,971, 674,847), stdev = 301,295
[info]   CI (99.9%): [≈ 0, 1699,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10015,614 ±(99.9%) 21559,476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10015,614, 12542,745), stdev = 5598,927
[info]   CI (99.9%): [≈ 0, 31575,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,668 ±(99.9%) 5,661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,668, 3,298), stdev = 1,470
[info]   CI (99.9%): [≈ 0, 6,329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12,417 ±(99.9%) 105,255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12,417, 61,313), stdev = 27,334
[info]   CI (99.9%): [≈ 0, 117,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 3,000), stdev = 1,304
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 69,08% complete, ETA 00:41:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 105916,478 ops/s
[info] # Warmup Iteration   2: 112068,501 ops/s
[info] # Warmup Iteration   3: 111893,607 ops/s
[info] # Warmup Iteration   4: 112194,633 ops/s
[info] # Warmup Iteration   5: 111879,238 ops/s
[info] Iteration   1: 111603,440 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 112457,776 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 112300,046 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 112223,825 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 112024,745 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   112121,966 ±(99.9%) 1267,174 ops/s [Average]
[info]   (min, avg, max) = (111603,440, 112121,966, 112457,776), stdev = 329,081
[info]   CI (99.9%): [110854,793, 113389,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,004, 0,004, 0,004), stdev = 0,001
[info]   CI (99.9%): [0,004, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 69,28% complete, ETA 00:40:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3415,348 ops/s
[info] # Warmup Iteration   2: 6581,594 ops/s
[info] # Warmup Iteration   3: 6652,743 ops/s
[info] # Warmup Iteration   4: 6624,376 ops/s
[info] # Warmup Iteration   5: 6643,423 ops/s
[info] Iteration   1: 6626,429 ops/s
[info]                  ·gc.alloc.rate:                   1938,110 MB/sec
[info]                  ·gc.alloc.rate.norm:              460400,115 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     482047,537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,719 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 6648,113 ops/s
[info]                  ·gc.alloc.rate:                   1945,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              460399,899 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,807 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     480925,835 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,710 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 6644,086 ops/s
[info]                  ·gc.alloc.rate:               1943,374 MB/sec
[info]                  ·gc.alloc.rate.norm:          460399,772 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 321073,151 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 6620,484 ops/s
[info]                  ·gc.alloc.rate:                   1936,889 MB/sec
[info]                  ·gc.alloc.rate.norm:              460399,978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,820 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     483678,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,895 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6654,343 ops/s
[info]                  ·gc.alloc.rate:                   1946,384 MB/sec
[info]                  ·gc.alloc.rate.norm:              460399,972 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     481752,615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,692 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   6638,691 ±(99.9%) 55,958 ops/s [Average]
[info]   (min, avg, max) = (6620,484, 6638,691, 6654,343), stdev = 14,532
[info]   CI (99.9%): [6582,734, 6694,649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1941,969 ±(99.9%) 16,325 MB/sec [Average]
[info]   (min, avg, max) = (1936,889, 1941,969, 1946,384), stdev = 4,239
[info]   CI (99.9%): [1925,645, 1958,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   460399,947 ±(99.9%) 0,481 B/op [Average]
[info]   (min, avg, max) = (460399,772, 460399,947, 460400,115), stdev = 0,125
[info]   CI (99.9%): [460399,466, 460400,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1897,557 ±(99.9%) 1167,369 MB/sec [Average]
[info]   (min, avg, max) = (1355,268, 1897,557, 2036,654), stdev = 303,162
[info]   CI (99.9%): [730,189, 3064,926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   449895,436 ±(99.9%) 277326,365 B/op [Average]
[info]   (min, avg, max) = (321073,151, 449895,436, 483678,043), stdev = 72020,776
[info]   CI (99.9%): [172569,072, 727221,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,104), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   14,803 ±(99.9%) 37,999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14,803, 24,719), stdev = 9,868
[info]   CI (99.9%): [≈ 0, 52,803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle
[info] # Run progress: 69,48% complete, ETA 00:40:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4499,012 ops/s
[info] # Warmup Iteration   2: 4844,173 ops/s
[info] # Warmup Iteration   3: 4886,040 ops/s
[info] # Warmup Iteration   4: 4854,447 ops/s
[info] # Warmup Iteration   5: 4879,538 ops/s
[info] Iteration   1: 4852,013 ops/s
[info]                  ·gc.alloc.rate:                   269,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              87296,091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165905,721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6,383 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 4890,072 ops/s
[info]                  ·gc.alloc.rate:      271,246 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296,083 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 4869,207 ops/s
[info]                  ·gc.alloc.rate:               270,057 MB/sec
[info]                  ·gc.alloc.rate.norm:          87296,090 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,450 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 165326,703 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   4: 4869,623 ops/s
[info]                  ·gc.alloc.rate:      270,103 MB/sec
[info]                  ·gc.alloc.rate.norm: 87296,084 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4874,952 ops/s
[info]                  ·gc.alloc.rate:                   270,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              87296,084 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     165123,307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,444 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle":
[info]   4871,173 ±(99.9%) 52,545 ops/s [Average]
[info]   (min, avg, max) = (4852,013, 4871,173, 4890,072), stdev = 13,646
[info]   CI (99.9%): [4818,628, 4923,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate":
[info]   270,177 ±(99.9%) 2,937 MB/sec [Average]
[info]   (min, avg, max) = (269,114, 270,177, 271,246), stdev = 0,763
[info]   CI (99.9%): [267,239, 273,114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   87296,086 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (87296,083, 87296,086, 87296,091), stdev = 0,004
[info]   CI (99.9%): [87296,072, 87296,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   306,860 ±(99.9%) 1078,655 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,860, 511,450), stdev = 280,123
[info]   CI (99.9%): [≈ 0, 1385,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   99271,146 ±(99.9%) 348953,816 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 99271,146, 165905,721), stdev = 90622,198
[info]   CI (99.9%): [≈ 0, 448224,962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,007 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,020), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   2,165 ±(99.9%) 11,719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,165, 6,383), stdev = 3,043
[info]   CI (99.9%): [≈ 0, 13,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 69,68% complete, ETA 00:40:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4413210,291 ops/s
[info] # Warmup Iteration   2: 6131986,826 ops/s
[info] # Warmup Iteration   3: 6132522,651 ops/s
[info] # Warmup Iteration   4: 6152370,764 ops/s
[info] # Warmup Iteration   5: 6169489,602 ops/s
[info] Iteration   1: 6135509,416 ops/s
[info]                  ·gc.alloc.rate:                   3804,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4064,510 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1042,621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6150508,684 ops/s
[info]                  ·gc.alloc.rate:                   3814,079 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     868,432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6167774,026 ops/s
[info]                  ·gc.alloc.rate:                   3824,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,989 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1040,894 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 6171105,811 ops/s
[info]                  ·gc.alloc.rate:                   3826,947 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     867,734 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6156914,091 ops/s
[info]                  ·gc.alloc.rate:                   3817,695 MB/sec
[info]                  ·gc.alloc.rate.norm:              976,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,056 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1044,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6156362,406 ±(99.9%) 55032,245 ops/s [Average]
[info]   (min, avg, max) = (6135509,416, 6156362,406, 6171105,811), stdev = 14291,699
[info]   CI (99.9%): [6101330,161, 6211394,650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   3817,641 ±(99.9%) 34,113 MB/sec [Average]
[info]   (min, avg, max) = (3804,796, 3817,641, 3826,947), stdev = 8,859
[info]   CI (99.9%): [3783,528, 3851,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (976,000, 976,000, 976,000), stdev = 0,001
[info]   CI (99.9%): [976,000, 976,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3804,741 ±(99.9%) 1429,807 MB/sec [Average]
[info]   (min, avg, max) = (3393,716, 3804,741, 4084,056), stdev = 371,316
[info]   CI (99.9%): [2374,933, 5234,548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   972,755 ±(99.9%) 367,966 B/op [Average]
[info]   (min, avg, max) = (867,734, 972,755, 1044,096), stdev = 95,559
[info]   CI (99.9%): [604,790, 1340,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,028 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,013, 0,021), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   28,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,600, 6,000), stdev = 0,548
[info]   CI (99.9%): [28,000, 28,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 69,88% complete, ETA 00:40:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6107902,038 ops/s
[info] # Warmup Iteration   2: 43652006,772 ops/s
[info] # Warmup Iteration   3: 47303255,454 ops/s
[info] # Warmup Iteration   4: 47188326,095 ops/s
[info] # Warmup Iteration   5: 42014333,495 ops/s
[info] Iteration   1: 46843660,887 ops/s
[info]                  ·gc.alloc.rate:                   476,205 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 47455945,928 ops/s
[info]                  ·gc.alloc.rate:               482,464 MB/sec
[info]                  ·gc.alloc.rate.norm:          16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,603 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16,966 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 44791774,179 ops/s
[info]                  ·gc.alloc.rate:                   455,359 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23,686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,092 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 40804768,401 ops/s
[info]                  ·gc.alloc.rate:      414,878 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 40850768,463 ops/s
[info]                  ·gc.alloc.rate:                   415,259 MB/sec
[info]                  ·gc.alloc.rate.norm:              16,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25,971 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   44149383,572 ±(99.9%) 12278734,275 ops/s [Average]
[info]   (min, avg, max) = (40804768,401, 44149383,572, 47455945,928), stdev = 3188748,298
[info]   CI (99.9%): [31870649,297, 56428117,846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   448,833 ±(99.9%) 124,820 MB/sec [Average]
[info]   (min, avg, max) = (414,878, 448,833, 482,464), stdev = 32,415
[info]   CI (99.9%): [324,013, 573,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   474,257 ±(99.9%) 1067,735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,257, 674,092), stdev = 277,287
[info]   CI (99.9%): [≈ 0, 1541,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   16,762 ±(99.9%) 39,171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16,762, 25,971), stdev = 10,173
[info]   CI (99.9%): [≈ 0, 55,933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,539 ±(99.9%) 4,493 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,539, 2,625), stdev = 1,167
[info]   CI (99.9%): [≈ 0, 5,031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,092), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 70,08% complete, ETA 00:39:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5622222,757 ops/s
[info] # Warmup Iteration   2: 10311113,577 ops/s
[info] # Warmup Iteration   3: 10273916,131 ops/s
[info] # Warmup Iteration   4: 10269406,316 ops/s
[info] # Warmup Iteration   5: 10283711,941 ops/s
[info] Iteration   1: 10311248,539 ops/s
[info]                  ·gc.alloc.rate:                   3616,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4073,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     621,749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 10320898,410 ops/s
[info]                  ·gc.alloc.rate:                   3620,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     518,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 10327909,811 ops/s
[info]                  ·gc.alloc.rate:                   3622,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,346 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     518,514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 10242555,213 ops/s
[info]                  ·gc.alloc.rate:                   3592,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,654 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     627,641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 10258538,354 ops/s
[info]                  ·gc.alloc.rate:                   3597,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              552,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3406,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     522,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   10292230,065 ±(99.9%) 149870,491 ops/s [Average]
[info]   (min, avg, max) = (10242555,213, 10292230,065, 10327909,811), stdev = 38920,891
[info]   CI (99.9%): [10142359,574, 10442100,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3609,768 ±(99.9%) 52,960 MB/sec [Average]
[info]   (min, avg, max) = (3592,389, 3609,768, 3622,075), stdev = 13,754
[info]   CI (99.9%): [3556,808, 3662,728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   552,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (552,000, 552,000, 552,000), stdev = 0,001
[info]   CI (99.9%): [552,000, 552,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   3673,407 ±(99.9%) 1426,312 MB/sec [Average]
[info]   (min, avg, max) = (3399,691, 3673,407, 4084,654), stdev = 370,409
[info]   CI (99.9%): [2247,095, 5099,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   561,800 ±(99.9%) 221,330 B/op [Average]
[info]   (min, avg, max) = (518,385, 561,800, 627,641), stdev = 57,479
[info]   CI (99.9%): [340,470, 783,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,071, 0,083), stdev = 0,011
[info]   CI (99.9%): [0,027, 0,115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,007 B/op [Average]
[info]   (min, avg, max) = (0,010, 0,011, 0,013), stdev = 0,002
[info]   CI (99.9%): [0,004, 0,018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   27,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,400, 6,000), stdev = 0,548
[info]   CI (99.9%): [27,000, 27,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 70,28% complete, ETA 00:39:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54437901,367 ops/s
[info] # Warmup Iteration   2: 56571261,050 ops/s
[info] # Warmup Iteration   3: 56757146,079 ops/s
[info] # Warmup Iteration   4: 56817665,773 ops/s
[info] # Warmup Iteration   5: 56792836,216 ops/s
[info] Iteration   1: 56694756,018 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 56997162,971 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 56955582,764 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 56753569,594 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 56746233,477 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   56829460,965 ±(99.9%) 526787,261 ops/s [Average]
[info]   (min, avg, max) = (56694756,018, 56829460,965, 56997162,971), stdev = 136804,979
[info]   CI (99.9%): [56302673,704, 57356248,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 70,48% complete, ETA 00:39:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37827679,180 ops/s
[info] # Warmup Iteration   2: 45117028,944 ops/s
[info] # Warmup Iteration   3: 47139573,203 ops/s
[info] # Warmup Iteration   4: 47580086,732 ops/s
[info] # Warmup Iteration   5: 47300042,233 ops/s
[info] Iteration   1: 47396464,076 ops/s
[info]                  ·gc.alloc.rate:                   1686,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,486 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 47430515,933 ops/s
[info]                  ·gc.alloc.rate:                   1687,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66,966 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 47463036,594 ops/s
[info]                  ·gc.alloc.rate:                   1688,790 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,926 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 47440947,212 ops/s
[info]                  ·gc.alloc.rate:               1687,927 MB/sec
[info]                  ·gc.alloc.rate.norm:          56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1349,111 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 44,759 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 47382163,028 ops/s
[info]                  ·gc.alloc.rate:                   1685,754 MB/sec
[info]                  ·gc.alloc.rate.norm:              56,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,386 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   47422625,369 ±(99.9%) 127022,119 ops/s [Average]
[info]   (min, avg, max) = (47382163,028, 47422625,369, 47463036,594), stdev = 32987,241
[info]   CI (99.9%): [47295603,249, 47549647,488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1687,301 ±(99.9%) 4,690 MB/sec [Average]
[info]   (min, avg, max) = (1685,754, 1687,301, 1688,790), stdev = 1,218
[info]   CI (99.9%): [1682,611, 1691,991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   56,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56,000, 56,000, 56,000), stdev = 0,001
[info]   CI (99.9%): [56,000, 56,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   1751,802 ±(99.9%) 1423,706 MB/sec [Average]
[info]   (min, avg, max) = (1344,486, 1751,802, 2026,386), stdev = 369,732
[info]   CI (99.9%): [328,096, 3175,509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   58,140 ±(99.9%) 47,237 B/op [Average]
[info]   (min, avg, max) = (44,646, 58,140, 67,316), stdev = 12,267
[info]   CI (99.9%): [10,903, 105,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 70,68% complete, ETA 00:38:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5832591,921 ops/s
[info] # Warmup Iteration   2: 9151244,723 ops/s
[info] # Warmup Iteration   3: 9193125,261 ops/s
[info] # Warmup Iteration   4: 9108619,491 ops/s
[info] # Warmup Iteration   5: 8971441,035 ops/s
[info] Iteration   1: 9191798,313 ops/s
[info]                  ·gc.alloc.rate:                   4064,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4060,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     695,272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 9194853,759 ops/s
[info]                  ·gc.alloc.rate:                   4066,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4071,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     696,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 9213890,771 ops/s
[info]                  ·gc.alloc.rate:                   4074,278 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4078,161 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     696,663 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 9186284,687 ops/s
[info]                  ·gc.alloc.rate:                   4062,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4083,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     699,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 9136037,076 ops/s
[info]                  ·gc.alloc.rate:                   4039,309 MB/sec
[info]                  ·gc.alloc.rate.norm:              696,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     703,719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   9184572,921 ±(99.9%) 111869,269 ops/s [Average]
[info]   (min, avg, max) = (9136037,076, 9184572,921, 9213890,771), stdev = 29052,094
[info]   CI (99.9%): [9072703,653, 9296442,190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4061,458 ±(99.9%) 50,597 MB/sec [Average]
[info]   (min, avg, max) = (4039,309, 4061,458, 4074,278), stdev = 13,140
[info]   CI (99.9%): [4010,861, 4112,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   696,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (696,000, 696,000, 696,000), stdev = 0,001
[info]   CI (99.9%): [696,000, 696,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4075,605 ±(99.9%) 37,589 MB/sec [Average]
[info]   (min, avg, max) = (4060,535, 4075,605, 4084,108), stdev = 9,762
[info]   CI (99.9%): [4038,017, 4113,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   698,432 ±(99.9%) 12,849 B/op [Average]
[info]   (min, avg, max) = (695,272, 698,432, 703,719), stdev = 3,337
[info]   CI (99.9%): [685,584, 711,281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,083 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,083, 0,104), stdev = 0,015
[info]   CI (99.9%): [0,027, 0,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (0,011, 0,014, 0,018), stdev = 0,002
[info]   CI (99.9%): [0,005, 0,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   30,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,000, 6,000), stdev = 0,001
[info]   CI (99.9%): [30,000, 30,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle
[info] # Run progress: 70,88% complete, ETA 00:38:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9272582,967 ops/s
[info] # Warmup Iteration   2: 11518316,158 ops/s
[info] # Warmup Iteration   3: 11577215,065 ops/s
[info] # Warmup Iteration   4: 11503476,450 ops/s
[info] # Warmup Iteration   5: 11575875,087 ops/s
[info] Iteration   1: 11519240,942 ops/s
[info]                  ·gc.alloc.rate:                   4859,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4756,004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     649,803 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 11568766,936 ops/s
[info]                  ·gc.alloc.rate:                   4880,795 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4762,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     647,940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 11637420,094 ops/s
[info]                  ·gc.alloc.rate:                   4908,785 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4764,928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     644,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 11575845,258 ops/s
[info]                  ·gc.alloc.rate:                   4883,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,954 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     648,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,008 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 11629340,840 ops/s
[info]                  ·gc.alloc.rate:                   4904,752 MB/sec
[info]                  ·gc.alloc.rate.norm:              664,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          5449,871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     737,798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        8,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle":
[info]   11586122,814 ±(99.9%) 186460,729 ops/s [Average]
[info]   (min, avg, max) = (11519240,942, 11586122,814, 11637420,094), stdev = 48423,259
[info]   CI (99.9%): [11399662,085, 11772583,543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate":
[info]   4887,611 ±(99.9%) 76,296 MB/sec [Average]
[info]   (min, avg, max) = (4859,911, 4887,611, 4908,785), stdev = 19,814
[info]   CI (99.9%): [4811,314, 4963,907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   664,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (664,000, 664,000, 664,000), stdev = 0,001
[info]   CI (99.9%): [664,000, 664,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   4900,701 ±(99.9%) 1182,288 MB/sec [Average]
[info]   (min, avg, max) = (4756,004, 4900,701, 5449,871), stdev = 307,036
[info]   CI (99.9%): [3718,413, 6082,988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   665,720 ±(99.9%) 155,332 B/op [Average]
[info]   (min, avg, max) = (644,541, 665,720, 737,798), stdev = 40,339
[info]   CI (99.9%): [510,388, 821,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,075, 0,125), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,017 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,010, 0,017), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.count":
[info]   36,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (7,000, 7,200, 8,000), stdev = 0,447
[info]   CI (99.9%): [36,000, 36,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readUPickle:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 71,08% complete, ETA 00:38:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17155158,583 ops/s
[info] # Warmup Iteration   2: 24122740,999 ops/s
[info] # Warmup Iteration   3: 24246894,332 ops/s
[info] # Warmup Iteration   4: 24305547,995 ops/s
[info] # Warmup Iteration   5: 24195579,633 ops/s
[info] Iteration   1: 24228601,517 ops/s
[info]                  ·gc.alloc.rate:                   2216,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,539 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131,061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 24224757,140 ops/s
[info]                  ·gc.alloc.rate:                   2216,460 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,293 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131,320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 24144103,243 ops/s
[info]                  ·gc.alloc.rate:                   2209,013 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     131,979 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 24011414,907 ops/s
[info]                  ·gc.alloc.rate:                   2197,094 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,671 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     177,267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 24181879,403 ops/s
[info]                  ·gc.alloc.rate:                   2212,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              144,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,574 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     132,249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   24158151,242 ±(99.9%) 342747,928 ops/s [Average]
[info]   (min, avg, max) = (24011414,907, 24158151,242, 24228601,517), stdev = 89010,548
[info]   CI (99.9%): [23815403,314, 24500899,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2210,275 ±(99.9%) 30,947 MB/sec [Average]
[info]   (min, avg, max) = (2197,094, 2210,275, 2216,716), stdev = 8,037
[info]   CI (99.9%): [2179,328, 2241,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   144,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (144,000, 144,000, 144,000), stdev = 0,001
[info]   CI (99.9%): [144,000, 144,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2159,935 ±(99.9%) 1172,753 MB/sec [Average]
[info]   (min, avg, max) = (2017,539, 2159,935, 2704,671), stdev = 304,560
[info]   CI (99.9%): [987,182, 3332,688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   140,775 ±(99.9%) 78,573 B/op [Average]
[info]   (min, avg, max) = (131,061, 140,775, 177,267), stdev = 20,405
[info]   CI (99.9%): [62,202, 219,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,005 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,003, 0,004), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 71,29% complete, ETA 00:38:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7790349,170 ops/s
[info] # Warmup Iteration   2: 61457052,885 ops/s
[info] # Warmup Iteration   3: 63596857,258 ops/s
[info] # Warmup Iteration   4: 63775478,624 ops/s
[info] # Warmup Iteration   5: 63873765,626 ops/s
[info] Iteration   1: 63775418,634 ops/s
[info]                  ·gc.alloc.rate:                   1945,075 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 63859064,144 ops/s
[info]                  ·gc.alloc.rate:                   1947,648 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33,194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 63798658,804 ops/s
[info]                  ·gc.alloc.rate:                   1945,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49,897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 63718681,330 ops/s
[info]                  ·gc.alloc.rate:                   1943,371 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 63411242,660 ops/s
[info]                  ·gc.alloc.rate:                   1933,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50,353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   63712613,114 ±(99.9%) 677038,236 ops/s [Average]
[info]   (min, avg, max) = (63411242,660, 63712613,114, 63859064,144), stdev = 175824,680
[info]   CI (99.9%): [63035574,879, 64389651,350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1943,100 ±(99.9%) 20,911 MB/sec [Average]
[info]   (min, avg, max) = (1933,778, 1943,100, 1947,648), stdev = 5,430
[info]   CI (99.9%): [1922,190, 1964,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   1888,396 ±(99.9%) 1165,751 MB/sec [Average]
[info]   (min, avg, max) = (1346,882, 1888,396, 2028,581), stdev = 302,742
[info]   CI (99.9%): [722,645, 3054,147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   46,657 ±(99.9%) 28,991 B/op [Average]
[info]   (min, avg, max) = (33,194, 46,657, 50,353), stdev = 7,529
[info]   CI (99.9%): [17,666, 75,648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,071, 0,104), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,004 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,003), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 71,49% complete, ETA 00:37:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7458884,223 ops/s
[info] # Warmup Iteration   2: 15302107,044 ops/s
[info] # Warmup Iteration   3: 15457527,066 ops/s
[info] # Warmup Iteration   4: 15376131,900 ops/s
[info] # Warmup Iteration   5: 14767781,622 ops/s
[info] Iteration   1: 15541018,254 ops/s
[info]                  ·gc.alloc.rate:                   3080,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,982 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275,096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 15399720,334 ops/s
[info]                  ·gc.alloc.rate:                   3053,112 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     347,422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 15525659,686 ops/s
[info]                  ·gc.alloc.rate:                   3077,620 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     275,832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 15161175,263 ops/s
[info]                  ·gc.alloc.rate:                   3005,556 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,781 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     353,339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 15396044,313 ops/s
[info]                  ·gc.alloc.rate:                   3051,652 MB/sec
[info]                  ·gc.alloc.rate.norm:              312,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2722,608 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     278,359 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   15404723,570 ±(99.9%) 585936,954 ops/s [Average]
[info]   (min, avg, max) = (15161175,263, 15404723,570, 15541018,254), stdev = 152165,966
[info]   CI (99.9%): [14818786,616, 15990660,524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   3053,653 ±(99.9%) 115,574 MB/sec [Average]
[info]   (min, avg, max) = (3005,556, 3053,653, 3080,325), stdev = 30,014
[info]   CI (99.9%): [2938,079, 3169,227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (312,000, 312,000, 312,000), stdev = 0,001
[info]   CI (99.9%): [312,000, 312,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2992,592 ±(99.9%) 1438,316 MB/sec [Average]
[info]   (min, avg, max) = (2715,982, 2992,592, 3403,781), stdev = 373,526
[info]   CI (99.9%): [1554,276, 4430,908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   306,010 ±(99.9%) 156,247 B/op [Average]
[info]   (min, avg, max) = (275,096, 306,010, 353,339), stdev = 40,577
[info]   CI (99.9%): [149,763, 462,256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,058, 0,125), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,006 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (0,002, 0,006, 0,013), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 3,000), stdev = 0,894
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 71,69% complete, ETA 00:37:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40231817,482 ops/s
[info] # Warmup Iteration   2: 47755115,778 ops/s
[info] # Warmup Iteration   3: 49408543,214 ops/s
[info] # Warmup Iteration   4: 49039584,170 ops/s
[info] # Warmup Iteration   5: 48588041,088 ops/s
[info] Iteration   1: 48717034,559 ops/s
[info]                  ·gc.alloc.rate:                   990,493 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,474 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 49465132,660 ops/s
[info]                  ·gc.alloc.rate:               1005,815 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,203 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21,386 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 49246971,623 ops/s
[info]                  ·gc.alloc.rate:                   1001,197 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 49371130,100 ops/s
[info]                  ·gc.alloc.rate:               1003,838 MB/sec
[info]                  ·gc.alloc.rate.norm:          32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 21,426 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 49259244,246 ops/s
[info]                  ·gc.alloc.rate:                   1001,479 MB/sec
[info]                  ·gc.alloc.rate.norm:              32,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42,948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   49211902,638 ±(99.9%) 1119081,373 ops/s [Average]
[info]   (min, avg, max) = (48717034,559, 49211902,638, 49465132,660), stdev = 290621,879
[info]   CI (99.9%): [48092821,264, 50330984,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1000,564 ±(99.9%) 22,858 MB/sec [Average]
[info]   (min, avg, max) = (990,493, 1000,564, 1005,815), stdev = 5,936
[info]   CI (99.9%): [977,706, 1023,423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,000, 32,000, 32,000), stdev = 0,001
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,588 ±(99.9%) 1418,097 MB/sec [Average]
[info]   (min, avg, max) = (672,122, 1075,588, 1345,474), stdev = 368,275
[info]   CI (99.9%): [≈ 0, 2493,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   34,437 ±(99.9%) 45,814 B/op [Average]
[info]   (min, avg, max) = (21,386, 34,437, 43,468), stdev = 11,898
[info]   CI (99.9%): [≈ 0, 80,251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 0, 0,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 71,89% complete, ETA 00:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42565989,791 ops/s
[info] # Warmup Iteration   2: 52146891,750 ops/s
[info] # Warmup Iteration   3: 57926548,744 ops/s
[info] # Warmup Iteration   4: 57874581,749 ops/s
[info] # Warmup Iteration   5: 57983796,497 ops/s
[info] Iteration   1: 57984210,224 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 58032384,278 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 58026762,722 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 57941630,784 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 57894133,966 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   57975824,395 ±(99.9%) 225407,309 ops/s [Average]
[info]   (min, avg, max) = (57894133,966, 57975824,395, 58032384,278), stdev = 58537,562
[info]   CI (99.9%): [57750417,085, 58201231,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 72,09% complete, ETA 00:37:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48116823,305 ops/s
[info] # Warmup Iteration   2: 44196304,460 ops/s
[info] # Warmup Iteration   3: 45342662,064 ops/s
[info] # Warmup Iteration   4: 45172470,477 ops/s
[info] # Warmup Iteration   5: 45320252,795 ops/s
[info] Iteration   1: 44537138,587 ops/s
[info]                  ·gc.alloc.rate:                   2263,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2696,249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 45455925,336 ops/s
[info]                  ·gc.alloc.rate:                   2310,727 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,235 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 45360963,441 ops/s
[info]                  ·gc.alloc.rate:                   2305,685 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93,877 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 45342570,262 ops/s
[info]                  ·gc.alloc.rate:                   2304,934 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70,552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 45448399,140 ops/s
[info]                  ·gc.alloc.rate:                   2309,634 MB/sec
[info]                  ·gc.alloc.rate.norm:              80,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,535 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   45228999,353 ±(99.9%) 1502017,518 ops/s [Average]
[info]   (min, avg, max) = (44537138,587, 45228999,353, 45455925,336), stdev = 390069,180
[info]   CI (99.9%): [43726981,835, 46731016,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2298,958 ±(99.9%) 76,257 MB/sec [Average]
[info]   (min, avg, max) = (2263,811, 2298,958, 2310,727), stdev = 19,804
[info]   CI (99.9%): [2222,701, 2375,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   80,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (80,000, 80,000, 80,000), stdev = 0,001
[info]   CI (99.9%): [80,000, 80,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   2299,073 ±(99.9%) 1412,736 MB/sec [Average]
[info]   (min, avg, max) = (2026,235, 2299,073, 2705,636), stdev = 366,883
[info]   CI (99.9%): [886,336, 3711,809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   80,066 ±(99.9%) 51,054 B/op [Average]
[info]   (min, avg, max) = (70,151, 80,066, 95,282), stdev = 13,259
[info]   CI (99.9%): [29,012, 131,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,046, 0,062), stdev = 0,009
[info]   CI (99.9%): [0,010, 0,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (0,001, 0,002, 0,002), stdev = 0,001
[info]   CI (99.9%): [≈ 10⁻³, 0,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 72,29% complete, ETA 00:36:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2141781,466 ops/s
[info] # Warmup Iteration   2: 2790476,801 ops/s
[info] # Warmup Iteration   3: 2820342,664 ops/s
[info] # Warmup Iteration   4: 2758838,878 ops/s
[info] # Warmup Iteration   5: 2809304,172 ops/s
[info] Iteration   1: 2812486,176 ops/s
[info]                  ·gc.alloc.rate:                   2301,591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2687,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1503,854 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,035 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2827417,791 ops/s
[info]                  ·gc.alloc.rate:                   2314,069 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1124,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2823695,940 ops/s
[info]                  ·gc.alloc.rate:                   2310,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1504,403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2828277,877 ops/s
[info]                  ·gc.alloc.rate:                   2314,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,968 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1129,047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 2827237,921 ops/s
[info]                  ·gc.alloc.rate:                   2313,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,239 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1130,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2823823,141 ±(99.9%) 25321,450 ops/s [Average]
[info]   (min, avg, max) = (2812486,176, 2823823,141, 2828277,877), stdev = 6575,900
[info]   CI (99.9%): [2798501,691, 2849144,591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2310,862 ±(99.9%) 20,784 MB/sec [Average]
[info]   (min, avg, max) = (2301,591, 2310,862, 2314,617), stdev = 5,397
[info]   CI (99.9%): [2290,079, 2331,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1288,000, 1288,000, 1288,000), stdev = 0,001
[info]   CI (99.9%): [1288,000, 1288,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2293,405 ±(99.9%) 1405,213 MB/sec [Average]
[info]   (min, avg, max) = (2020,585, 2293,405, 2698,922), stdev = 364,929
[info]   CI (99.9%): [888,192, 3698,618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1278,577 ±(99.9%) 792,894 B/op [Average]
[info]   (min, avg, max) = (1124,648, 1278,577, 1504,403), stdev = 205,912
[info]   CI (99.9%): [485,683, 2071,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,038 B/op [Average]
[info]   (min, avg, max) = (0,012, 0,021, 0,035), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle
[info] # Run progress: 72,49% complete, ETA 00:36:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11210887,712 ops/s
[info] # Warmup Iteration   2: 13524796,975 ops/s
[info] # Warmup Iteration   3: 13874691,492 ops/s
[info] # Warmup Iteration   4: 13872156,110 ops/s
[info] # Warmup Iteration   5: 13919334,230 ops/s
[info] Iteration   1: 13970272,298 ops/s
[info]                  ·gc.alloc.rate:                   2698,331 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,695 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     303,928 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 13918273,625 ops/s
[info]                  ·gc.alloc.rate:                   2688,546 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,381 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305,677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 13965953,809 ops/s
[info]                  ·gc.alloc.rate:                   2697,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     305,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 13817338,224 ops/s
[info]                  ·gc.alloc.rate:               2668,982 MB/sec
[info]                  ·gc.alloc.rate.norm:          304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2713,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 309,026 B/op
[info]                  ·gc.count:                    4,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 13950619,213 ops/s
[info]                  ·gc.alloc.rate:                   2694,428 MB/sec
[info]                  ·gc.alloc.rate.norm:              304,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     306,446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle":
[info]   13924491,434 ±(99.9%) 243674,185 ops/s [Average]
[info]   (min, avg, max) = (13817338,224, 13924491,434, 13970272,298), stdev = 63281,412
[info]   CI (99.9%): [13680817,249, 14168165,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate":
[info]   2689,536 ±(99.9%) 46,625 MB/sec [Average]
[info]   (min, avg, max) = (2668,982, 2689,536, 2698,331), stdev = 12,108
[info]   CI (99.9%): [2642,911, 2736,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   304,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (304,000, 304,000, 304,000), stdev = 0,001
[info]   CI (99.9%): [304,000, 304,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   2707,680 ±(99.9%) 28,480 MB/sec [Average]
[info]   (min, avg, max) = (2697,695, 2707,680, 2716,106), stdev = 7,396
[info]   CI (99.9%): [2679,200, 2736,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   306,057 ±(99.9%) 7,296 B/op [Average]
[info]   (min, avg, max) = (303,928, 306,057, 309,026), stdev = 1,895
[info]   CI (99.9%): [298,761, 313,353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,007), stdev = 0,003
[info]   CI (99.9%): [≈ 0, 0,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 72,69% complete, ETA 00:36:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169787,487 ops/s
[info] # Warmup Iteration   2: 183685,278 ops/s
[info] # Warmup Iteration   3: 184169,346 ops/s
[info] # Warmup Iteration   4: 183644,675 ops/s
[info] # Warmup Iteration   5: 184455,754 ops/s
[info] Iteration   1: 184994,546 ops/s
[info]                  ·gc.alloc.rate:                   3392,951 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3382,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28783,306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,531 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 182351,911 ops/s
[info]                  ·gc.alloc.rate:                   3345,089 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,559 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29264,458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,359 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 184683,876 ops/s
[info]                  ·gc.alloc.rate:                   3388,295 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,396 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     28941,034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,532 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 183712,787 ops/s
[info]                  ·gc.alloc.rate:                   3370,155 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29124,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,535 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 183406,199 ops/s
[info]                  ·gc.alloc.rate:                   3364,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              28872,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29202,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,357 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   183829,864 ±(99.9%) 4067,565 ops/s [Average]
[info]   (min, avg, max) = (182351,911, 183829,864, 184994,546), stdev = 1056,334
[info]   CI (99.9%): [179762,299, 187897,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   3372,136 ±(99.9%) 74,393 MB/sec [Average]
[info]   (min, avg, max) = (3345,089, 3372,136, 3392,951), stdev = 19,320
[info]   CI (99.9%): [3297,743, 3446,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28872,002, 28872,002, 28872,003), stdev = 0,001
[info]   CI (99.9%): [28872,002, 28872,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   3394,358 ±(99.9%) 30,772 MB/sec [Average]
[info]   (min, avg, max) = (3382,528, 3394,358, 3402,667), stdev = 7,991
[info]   CI (99.9%): [3363,586, 3425,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   29063,117 ±(99.9%) 762,537 B/op [Average]
[info]   (min, avg, max) = (28783,306, 29063,117, 29264,458), stdev = 198,028
[info]   CI (99.9%): [28300,580, 29825,654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,062), stdev = 0,011
[info]   CI (99.9%): [0,010, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,463 ±(99.9%) 0,368 B/op [Average]
[info]   (min, avg, max) = (0,357, 0,463, 0,535), stdev = 0,096
[info]   CI (99.9%): [0,095, 0,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 0,837
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 72,89% complete, ETA 00:36:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11218,459 ops/s
[info] # Warmup Iteration   2: 20679,229 ops/s
[info] # Warmup Iteration   3: 21002,557 ops/s
[info] # Warmup Iteration   4: 20853,494 ops/s
[info] # Warmup Iteration   5: 20930,412 ops/s
[info] Iteration   1: 20963,892 ops/s
[info]                  ·gc.alloc.rate:               1629,965 MB/sec
[info]                  ·gc.alloc.rate.norm:          122376,024 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,869 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 101571,892 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 20976,108 ops/s
[info]                  ·gc.alloc.rate:                   1631,063 MB/sec
[info]                  ·gc.alloc.rate.norm:              122376,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,077 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152388,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,809 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 20915,947 ops/s
[info]                  ·gc.alloc.rate:               1626,481 MB/sec
[info]                  ·gc.alloc.rate.norm:          122376,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 102005,457 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 21002,101 ops/s
[info]                  ·gc.alloc.rate:                   1633,070 MB/sec
[info]                  ·gc.alloc.rate.norm:              122376,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     101628,064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,560 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 21002,833 ops/s
[info]                  ·gc.alloc.rate:                   1632,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              122376,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     152591,842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,560 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   20972,176 ±(99.9%) 137,242 ops/s [Average]
[info]   (min, avg, max) = (20915,947, 20972,176, 21002,833), stdev = 35,641
[info]   CI (99.9%): [20834,935, 21109,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1630,694 ±(99.9%) 10,348 MB/sec [Average]
[info]   (min, avg, max) = (1626,481, 1630,694, 1633,070), stdev = 2,687
[info]   CI (99.9%): [1620,346, 1641,042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   122376,021 ±(99.9%) 0,008 B/op [Average]
[info]   (min, avg, max) = (122376,019, 122376,021, 122376,024), stdev = 0,002
[info]   CI (99.9%): [122376,013, 122376,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1626,389 ±(99.9%) 1431,329 MB/sec [Average]
[info]   (min, avg, max) = (1352,869, 1626,389, 2036,067), stdev = 371,712
[info]   CI (99.9%): [195,060, 3057,718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   122037,127 ±(99.9%) 107048,814 B/op [Average]
[info]   (min, avg, max) = (101571,892, 122037,127, 152591,842), stdev = 27800,237
[info]   CI (99.9%): [14988,313, 229085,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,104), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,186 ±(99.9%) 12,472 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,186, 7,809), stdev = 3,239
[info]   CI (99.9%): [≈ 0, 14,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,09% complete, ETA 00:35:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108320,137 ops/s
[info] # Warmup Iteration   2: 166832,789 ops/s
[info] # Warmup Iteration   3: 167636,833 ops/s
[info] # Warmup Iteration   4: 159960,842 ops/s
[info] # Warmup Iteration   5: 167337,470 ops/s
[info] Iteration   1: 166248,714 ops/s
[info]                  ·gc.alloc.rate:                   1545,378 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,616 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19207,414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,197 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 165346,586 ops/s
[info]                  ·gc.alloc.rate:                   1537,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12887,650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,594 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 165834,362 ops/s
[info]                  ·gc.alloc.rate:                   1541,845 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12859,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 165834,306 ops/s
[info]                  ·gc.alloc.rate:                   1541,787 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19303,696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,198 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 167139,325 ops/s
[info]                  ·gc.alloc.rate:                   1553,627 MB/sec
[info]                  ·gc.alloc.rate.norm:              14632,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12782,770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,196 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   166080,659 ±(99.9%) 2589,705 ops/s [Average]
[info]   (min, avg, max) = (165346,586, 166080,659, 167139,325), stdev = 672,538
[info]   CI (99.9%): [163490,953, 168670,364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1543,952 ±(99.9%) 23,691 MB/sec [Average]
[info]   (min, avg, max) = (1537,123, 1543,952, 1553,627), stdev = 6,152
[info]   CI (99.9%): [1520,261, 1567,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14632,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14632,002, 14632,003, 14632,003), stdev = 0,001
[info]   CI (99.9%): [14632,002, 14632,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1625,770 ±(99.9%) 1425,632 MB/sec [Average]
[info]   (min, avg, max) = (1353,875, 1625,770, 2034,047), stdev = 370,232
[info]   CI (99.9%): [200,138, 3051,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   15408,149 ±(99.9%) 13525,616 B/op [Average]
[info]   (min, avg, max) = (12782,770, 15408,149, 19303,696), stdev = 3512,560
[info]   CI (99.9%): [1882,533, 28933,765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,316 ±(99.9%) 0,684 B/op [Average]
[info]   (min, avg, max) = (0,196, 0,316, 0,594), stdev = 0,178
[info]   CI (99.9%): [≈ 0, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 0,837
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73,29% complete, ETA 00:35:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512995,106 ops/s
[info] # Warmup Iteration   2: 541009,092 ops/s
[info] # Warmup Iteration   3: 549134,157 ops/s
[info] # Warmup Iteration   4: 549800,338 ops/s
[info] # Warmup Iteration   5: 550799,076 ops/s
[info] Iteration   1: 548307,117 ops/s
[info]                  ·gc.alloc.rate:                   1134,257 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3860,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,179 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 552116,970 ops/s
[info]                  ·gc.alloc.rate:                   1142,304 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,385 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3832,007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,178 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 552033,182 ops/s
[info]                  ·gc.alloc.rate:               1141,925 MB/sec
[info]                  ·gc.alloc.rate.norm:          3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1916,114 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 548022,232 ops/s
[info]                  ·gc.alloc.rate:                   1133,802 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3860,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 548075,859 ops/s
[info]                  ·gc.alloc.rate:                   1133,900 MB/sec
[info]                  ·gc.alloc.rate.norm:              3256,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3863,736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,120 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   549711,072 ±(99.9%) 8320,807 ops/s [Average]
[info]   (min, avg, max) = (548022,232, 549711,072, 552116,970), stdev = 2160,887
[info]   CI (99.9%): [541390,264, 558031,879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1137,238 ±(99.9%) 17,163 MB/sec [Average]
[info]   (min, avg, max) = (1133,802, 1137,238, 1142,304), stdev = 4,457
[info]   CI (99.9%): [1120,075, 1154,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3256,001, 3256,001, 3256,001), stdev = 0,001
[info]   CI (99.9%): [3256,001, 3256,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1210,183 ±(99.9%) 1158,463 MB/sec [Average]
[info]   (min, avg, max) = (672,008, 1210,183, 1345,544), stdev = 300,849
[info]   CI (99.9%): [51,720, 2368,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3466,478 ±(99.9%) 3337,639 B/op [Average]
[info]   (min, avg, max) = (1916,114, 3466,478, 3863,736), stdev = 866,774
[info]   CI (99.9%): [128,839, 6804,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,143 ±(99.9%) 0,349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,143, 0,239), stdev = 0,091
[info]   CI (99.9%): [≈ 0, 0,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 73,49% complete, ETA 00:35:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 564727,194 ops/s
[info] # Warmup Iteration   2: 589951,707 ops/s
[info] # Warmup Iteration   3: 602978,633 ops/s
[info] # Warmup Iteration   4: 603896,158 ops/s
[info] # Warmup Iteration   5: 593354,526 ops/s
[info] Iteration   1: 595794,926 ops/s
[info]                  ·gc.alloc.rate:                   581,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1351,323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 601921,132 ops/s
[info]                  ·gc.alloc.rate:                   587,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,816 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1764,412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,184 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 605016,772 ops/s
[info]                  ·gc.alloc.rate:                   590,446 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1755,248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,162 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 604012,379 ops/s
[info]                  ·gc.alloc.rate:               589,511 MB/sec
[info]                  ·gc.alloc.rate.norm:          1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1752,969 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 603307,033 ops/s
[info]                  ·gc.alloc.rate:                   588,721 MB/sec
[info]                  ·gc.alloc.rate.norm:              1536,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1755,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,109 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   602010,449 ±(99.9%) 14065,071 ops/s [Average]
[info]   (min, avg, max) = (595794,926, 602010,449, 605016,772), stdev = 3652,654
[info]   CI (99.9%): [587945,377, 616075,520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   587,507 ±(99.9%) 13,808 MB/sec [Average]
[info]   (min, avg, max) = (581,399, 587,507, 590,446), stdev = 3,586
[info]   CI (99.9%): [573,699, 601,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1536,001, 1536,001, 1536,001), stdev = 0,001
[info]   CI (99.9%): [1536,001, 1536,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   641,298 ±(99.9%) 279,435 MB/sec [Average]
[info]   (min, avg, max) = (511,496, 641,298, 674,816), stdev = 72,569
[info]   CI (99.9%): [361,862, 920,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1675,795 ±(99.9%) 698,656 B/op [Average]
[info]   (min, avg, max) = (1351,323, 1675,795, 1764,412), stdev = 181,439
[info]   CI (99.9%): [977,139, 2374,450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,647 ±(99.9%) 5,346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,647, 3,130), stdev = 1,388
[info]   CI (99.9%): [≈ 0, 5,993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   1,691 ±(99.9%) 13,980 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,691, 8,184), stdev = 3,630
[info]   CI (99.9%): [≈ 0, 15,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73,69% complete, ETA 00:34:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40516,446 ops/s
[info] # Warmup Iteration   2: 62909,719 ops/s
[info] # Warmup Iteration   3: 63534,370 ops/s
[info] # Warmup Iteration   4: 63869,950 ops/s
[info] # Warmup Iteration   5: 63601,873 ops/s
[info] Iteration   1: 63618,260 ops/s
[info]                  ·gc.alloc.rate:                   1391,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33438,017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,545 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 63610,755 ops/s
[info]                  ·gc.alloc.rate:                   1391,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50204,538 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,515 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 63861,925 ops/s
[info]                  ·gc.alloc.rate:                   1396,702 MB/sec
[info]                  ·gc.alloc.rate.norm:              34424,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,200 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33376,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,539 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 63666,390 ops/s
[info]                  ·gc.alloc.rate:               1392,481 MB/sec
[info]                  ·gc.alloc.rate.norm:          34424,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1354,822 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33493,045 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 63820,135 ops/s
[info]                  ·gc.alloc.rate:               1395,691 MB/sec
[info]                  ·gc.alloc.rate.norm:          34424,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,002 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33445,095 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   63715,493 ±(99.9%) 452,462 ops/s [Average]
[info]   (min, avg, max) = (63610,755, 63715,493, 63861,925), stdev = 117,503
[info]   CI (99.9%): [63263,031, 64167,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1393,490 ±(99.9%) 9,794 MB/sec [Average]
[info]   (min, avg, max) = (1391,251, 1393,490, 1396,702), stdev = 2,543
[info]   CI (99.9%): [1383,696, 1403,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   34424,007 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (34424,006, 34424,007, 34424,007), stdev = 0,001
[info]   CI (99.9%): [34424,005, 34424,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1489,105 ±(99.9%) 1162,235 MB/sec [Average]
[info]   (min, avg, max) = (1351,475, 1489,105, 2029,024), stdev = 301,829
[info]   CI (99.9%): [326,870, 2651,339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   36791,432 ±(99.9%) 28873,162 B/op [Average]
[info]   (min, avg, max) = (33376,468, 36791,432, 50204,538), stdev = 7498,268
[info]   CI (99.9%): [7918,271, 65664,594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,720 ±(99.9%) 3,002 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,720, 1,545), stdev = 0,779
[info]   CI (99.9%): [≈ 0, 3,721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73,90% complete, ETA 00:34:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 382571,036 ops/s
[info] # Warmup Iteration   2: 436506,805 ops/s
[info] # Warmup Iteration   3: 433218,654 ops/s
[info] # Warmup Iteration   4: 439850,703 ops/s
[info] # Warmup Iteration   5: 437525,525 ops/s
[info] Iteration   1: 440721,519 ops/s
[info]                  ·gc.alloc.rate:                   2990,710 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2701,893 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9648,619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,149 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 441556,691 ops/s
[info]                  ·gc.alloc.rate:                   2996,261 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707,100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9649,305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 440619,694 ops/s
[info]                  ·gc.alloc.rate:                   2989,939 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12111,153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,223 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 440736,127 ops/s
[info]                  ·gc.alloc.rate:                   2990,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,634 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9700,601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,149 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 438460,199 ops/s
[info]                  ·gc.alloc.rate:                   2974,969 MB/sec
[info]                  ·gc.alloc.rate.norm:              10680,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3398,907 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12201,919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,075 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   440418,846 ±(99.9%) 4458,942 ops/s [Average]
[info]   (min, avg, max) = (438460,199, 440418,846, 441556,691), stdev = 1157,973
[info]   CI (99.9%): [435959,904, 444877,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2988,558 ±(99.9%) 30,810 MB/sec [Average]
[info]   (min, avg, max) = (2974,969, 2988,558, 2996,261), stdev = 8,001
[info]   CI (99.9%): [2957,749, 3019,368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10680,001, 10680,001, 10680,001), stdev = 0,001
[info]   CI (99.9%): [10680,001, 10680,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2983,027 ±(99.9%) 1447,465 MB/sec [Average]
[info]   (min, avg, max) = (2701,893, 2983,027, 3398,907), stdev = 375,902
[info]   CI (99.9%): [1535,562, 4430,492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10662,319 ±(99.9%) 5254,463 B/op [Average]
[info]   (min, avg, max) = (9648,619, 10662,319, 12201,919), stdev = 1364,567
[info]   CI (99.9%): [5407,856, 15916,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,164 ±(99.9%) 0,239 B/op [Average]
[info]   (min, avg, max) = (0,075, 0,164, 0,223), stdev = 0,062
[info]   CI (99.9%): [≈ 0, 0,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,10% complete, ETA 00:34:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 227235,746 ops/s
[info] # Warmup Iteration   2: 353275,155 ops/s
[info] # Warmup Iteration   3: 354345,599 ops/s
[info] # Warmup Iteration   4: 354013,609 ops/s
[info] # Warmup Iteration   5: 353441,878 ops/s
[info] Iteration   1: 352537,427 ops/s
[info]                  ·gc.alloc.rate:                   924,614 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6027,683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,372 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 353751,288 ops/s
[info]                  ·gc.alloc.rate:               927,845 MB/sec
[info]                  ·gc.alloc.rate.norm:          4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,755 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3006,448 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 354114,984 ops/s
[info]                  ·gc.alloc.rate:               928,700 MB/sec
[info]                  ·gc.alloc.rate.norm:          4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3003,332 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 353304,655 ops/s
[info]                  ·gc.alloc.rate:                   926,718 MB/sec
[info]                  ·gc.alloc.rate.norm:              4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,241 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6023,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,185 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 353816,423 ops/s
[info]                  ·gc.alloc.rate:               928,067 MB/sec
[info]                  ·gc.alloc.rate.norm:          4128,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,784 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3010,306 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   353504,955 ±(99.9%) 2362,786 ops/s [Average]
[info]   (min, avg, max) = (352537,427, 353504,955, 354114,984), stdev = 613,608
[info]   CI (99.9%): [351142,169, 355867,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   927,189 ±(99.9%) 6,190 MB/sec [Average]
[info]   (min, avg, max) = (924,614, 927,189, 928,700), stdev = 1,608
[info]   CI (99.9%): [920,999, 933,379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4128,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4128,001, 4128,001, 4128,001), stdev = 0,001
[info]   CI (99.9%): [4128,001, 4128,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   946,115 ±(99.9%) 1423,861 MB/sec [Average]
[info]   (min, avg, max) = (675,677, 946,115, 1352,241), stdev = 369,772
[info]   CI (99.9%): [≈ 0, 2369,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4214,247 ±(99.9%) 6367,084 B/op [Average]
[info]   (min, avg, max) = (3003,332, 4214,247, 6027,683), stdev = 1653,511
[info]   CI (99.9%): [≈ 0, 10581,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,111 ±(99.9%) 0,640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,111, 0,372), stdev = 0,166
[info]   CI (99.9%): [≈ 0, 0,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74,30% complete, ETA 00:34:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1217533,573 ops/s
[info] # Warmup Iteration   2: 1343398,928 ops/s
[info] # Warmup Iteration   3: 1354502,199 ops/s
[info] # Warmup Iteration   4: 1350626,676 ops/s
[info] # Warmup Iteration   5: 1351402,539 ops/s
[info] Iteration   1: 1353784,311 ops/s
[info]                  ·gc.alloc.rate:                   2642,406 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3136,187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1355204,311 ops/s
[info]                  ·gc.alloc.rate:                   2645,195 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,171 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3139,331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,073 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1354063,845 ops/s
[info]                  ·gc.alloc.rate:                   2642,859 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,164 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3147,910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1353932,614 ops/s
[info]                  ·gc.alloc.rate:                   2642,810 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,051 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3153,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1355362,512 ops/s
[info]                  ·gc.alloc.rate:                   2644,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              3072,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3154,387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,097 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   1354469,518 ±(99.9%) 2894,203 ops/s [Average]
[info]   (min, avg, max) = (1353784,311, 1354469,518, 1355362,512), stdev = 751,615
[info]   CI (99.9%): [1351575,315, 1357363,722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2643,633 ±(99.9%) 5,025 MB/sec [Average]
[info]   (min, avg, max) = (2642,406, 2643,633, 2645,195), stdev = 1,305
[info]   CI (99.9%): [2638,608, 2648,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3072,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3072,000, 3072,000, 3072,000), stdev = 0,001
[info]   CI (99.9%): [3072,000, 3072,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2707,566 ±(99.9%) 28,361 MB/sec [Average]
[info]   (min, avg, max) = (2697,617, 2707,566, 2715,826), stdev = 7,365
[info]   CI (99.9%): [2679,205, 2735,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   3146,293 ±(99.9%) 31,801 B/op [Average]
[info]   (min, avg, max) = (3136,187, 3146,293, 3154,387), stdev = 8,259
[info]   CI (99.9%): [3114,491, 3178,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,063 ±(99.9%) 0,083 B/op [Average]
[info]   (min, avg, max) = (0,048, 0,063, 0,097), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74,50% complete, ETA 00:33:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89069,949 ops/s
[info] # Warmup Iteration   2: 125317,573 ops/s
[info] # Warmup Iteration   3: 125633,368 ops/s
[info] # Warmup Iteration   4: 125670,556 ops/s
[info] # Warmup Iteration   5: 125460,128 ops/s
[info] Iteration   1: 124921,951 ops/s
[info]                  ·gc.alloc.rate:                   4519,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4760,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59979,292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,525 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 126096,549 ops/s
[info]                  ·gc.alloc.rate:                   4562,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4766,205 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59481,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,039 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         4,000 ms
[info] Iteration   3: 125622,208 ops/s
[info]                  ·gc.alloc.rate:                   4545,161 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4768,526 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59742,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,782 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 125122,262 ops/s
[info]                  ·gc.alloc.rate:                   4527,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51427,152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,785 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 125950,078 ops/s
[info]                  ·gc.alloc.rate:                   4556,869 MB/sec
[info]                  ·gc.alloc.rate.norm:              56944,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59606,842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,780 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   125542,610 ±(99.9%) 1964,513 ops/s [Average]
[info]   (min, avg, max) = (124921,951, 125542,610, 126096,549), stdev = 510,178
[info]   CI (99.9%): [123578,097, 127507,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4542,404 ±(99.9%) 71,502 MB/sec [Average]
[info]   (min, avg, max) = (4519,505, 4542,404, 4562,875), stdev = 18,569
[info]   CI (99.9%): [4470,902, 4613,906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56944,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (56944,003, 56944,003, 56944,004), stdev = 0,001
[info]   CI (99.9%): [56944,003, 56944,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4630,813 ±(99.9%) 1166,454 MB/sec [Average]
[info]   (min, avg, max) = (4088,964, 4630,813, 4769,960), stdev = 302,924
[info]   CI (99.9%): [3464,359, 5797,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   58047,448 ±(99.9%) 14268,388 B/op [Average]
[info]   (min, avg, max) = (51427,152, 58047,448, 59979,292), stdev = 3705,455
[info]   CI (99.9%): [43779,060, 72315,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,015
[info]   CI (99.9%): [0,006, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,782 ±(99.9%) 0,701 B/op [Average]
[info]   (min, avg, max) = (0,525, 0,782, 1,039), stdev = 0,182
[info]   CI (99.9%): [0,082, 1,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   34,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,800, 7,000), stdev = 0,447
[info]   CI (99.9%): [34,000, 34,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   14,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 4,000), stdev = 0,837
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 74,70% complete, ETA 00:33:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 567029,248 ops/s
[info] # Warmup Iteration   2: 607925,928 ops/s
[info] # Warmup Iteration   3: 620219,882 ops/s
[info] # Warmup Iteration   4: 619187,886 ops/s
[info] # Warmup Iteration   5: 618884,824 ops/s
[info] Iteration   1: 621368,817 ops/s
[info]                  ·gc.alloc.rate:                   2712,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2698,902 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6836,346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 620144,473 ops/s
[info]                  ·gc.alloc.rate:                   2708,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2704,836 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6863,891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 623325,743 ops/s
[info]                  ·gc.alloc.rate:                   2721,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6841,742 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,105 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 620339,035 ops/s
[info]                  ·gc.alloc.rate:                   2708,704 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,944 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6885,295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 622671,035 ops/s
[info]                  ·gc.alloc.rate:                   2718,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              6872,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2716,668 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6867,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,158 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle":
[info]   621569,821 ±(99.9%) 5405,592 ops/s [Average]
[info]   (min, avg, max) = (620144,473, 621569,821, 623325,743), stdev = 1403,815
[info]   CI (99.9%): [616164,228, 626975,413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   2713,882 ±(99.9%) 22,583 MB/sec [Average]
[info]   (min, avg, max) = (2708,032, 2713,882, 2721,356), stdev = 5,865
[info]   CI (99.9%): [2691,299, 2736,464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   6872,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6872,001, 6872,001, 6872,001), stdev = 0,001
[info]   CI (99.9%): [6872,001, 6872,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2708,745 ±(99.9%) 27,388 MB/sec [Average]
[info]   (min, avg, max) = (2698,902, 2708,745, 2716,668), stdev = 7,113
[info]   CI (99.9%): [2681,357, 2736,132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   6859,010 ±(99.9%) 77,095 B/op [Average]
[info]   (min, avg, max) = (6836,346, 6859,010, 6885,295), stdev = 20,021
[info]   CI (99.9%): [6781,915, 6936,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,126 ±(99.9%) 0,182 B/op [Average]
[info]   (min, avg, max) = (0,053, 0,126, 0,158), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.count":
[info]   20,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,000, 4,000), stdev = 0,001
[info]   CI (99.9%): [20,000, 20,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readUPickle:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 74,90% complete, ETA 00:33:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310883,109 ops/s
[info] # Warmup Iteration   2: 366326,408 ops/s
[info] # Warmup Iteration   3: 363253,692 ops/s
[info] # Warmup Iteration   4: 362860,230 ops/s
[info] # Warmup Iteration   5: 362775,829 ops/s
[info] Iteration   1: 361749,755 ops/s
[info]                  ·gc.alloc.rate:                   551,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2225,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 362452,936 ops/s
[info]                  ·gc.alloc.rate:                   552,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,826 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2930,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,435 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 362203,526 ops/s
[info]                  ·gc.alloc.rate:                   552,256 MB/sec
[info]                  ·gc.alloc.rate.norm:              2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,670 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2931,991 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,362 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 363508,026 ops/s
[info]                  ·gc.alloc.rate:      554,356 MB/sec
[info]                  ·gc.alloc.rate.norm: 2400,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 363335,225 ops/s
[info]                  ·gc.alloc.rate:               554,081 MB/sec
[info]                  ·gc.alloc.rate.norm:          2400,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2911,309 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   362649,894 ±(99.9%) 2890,776 ops/s [Average]
[info]   (min, avg, max) = (361749,755, 362649,894, 363508,026), stdev = 750,725
[info]   CI (99.9%): [359759,118, 365540,670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   553,014 ±(99.9%) 4,508 MB/sec [Average]
[info]   (min, avg, max) = (551,638, 553,014, 554,356), stdev = 1,171
[info]   CI (99.9%): [548,506, 557,523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2400,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2400,001, 2400,001, 2400,001), stdev = 0,001
[info]   CI (99.9%): [2400,001, 2400,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   506,643 ±(99.9%) 1123,661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,643, 674,826), stdev = 291,811
[info]   CI (99.9%): [≈ 0, 1630,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2199,838 ±(99.9%) 4876,613 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2199,838, 2931,991), stdev = 1266,441
[info]   CI (99.9%): [≈ 0, 7076,451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,684 ±(99.9%) 5,686 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,684, 3,325), stdev = 1,477
[info]   CI (99.9%): [≈ 0, 6,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,968 ±(99.9%) 24,690 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,968, 14,435), stdev = 6,412
[info]   CI (99.9%): [≈ 0, 27,658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,10% complete, ETA 00:33:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 477685,673 ops/s
[info] # Warmup Iteration   2: 684866,584 ops/s
[info] # Warmup Iteration   3: 682836,400 ops/s
[info] # Warmup Iteration   4: 683497,686 ops/s
[info] # Warmup Iteration   5: 683574,791 ops/s
[info] Iteration   1: 675035,606 ops/s
[info]                  ·gc.alloc.rate:               500,956 MB/sec
[info]                  ·gc.alloc.rate.norm:          1168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1192,787 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 682097,633 ops/s
[info]                  ·gc.alloc.rate:                   506,187 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1555,470 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,720 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 682609,269 ops/s
[info]                  ·gc.alloc.rate:                   506,555 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1554,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 680868,917 ops/s
[info]                  ·gc.alloc.rate:      505,343 MB/sec
[info]                  ·gc.alloc.rate.norm: 1168,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 682970,595 ops/s
[info]                  ·gc.alloc.rate:                   506,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1554,963 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,048 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   680716,404 ±(99.9%) 12605,616 ops/s [Average]
[info]   (min, avg, max) = (675035,606, 680716,404, 682970,595), stdev = 3273,638
[info]   CI (99.9%): [668110,788, 693322,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   505,190 ±(99.9%) 9,386 MB/sec [Average]
[info]   (min, avg, max) = (500,956, 505,190, 506,910), stdev = 2,438
[info]   CI (99.9%): [495,804, 514,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1168,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1168,001, 1168,001, 1168,001), stdev = 0,001
[info]   CI (99.9%): [1168,001, 1168,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   506,929 ±(99.9%) 1124,446 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,929, 674,851), stdev = 292,015
[info]   CI (99.9%): [≈ 0, 1631,375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1171,507 ±(99.9%) 2593,039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1171,507, 1555,470), stdev = 673,404
[info]   CI (99.9%): [≈ 0, 3764,546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,521 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,312), stdev = 0,135
[info]   CI (99.9%): [≈ 0, 0,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,163 ±(99.9%) 1,203 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,163, 0,720), stdev = 0,312
[info]   CI (99.9%): [≈ 0, 1,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75,30% complete, ETA 00:32:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2328315,310 ops/s
[info] # Warmup Iteration   2: 2346759,517 ops/s
[info] # Warmup Iteration   3: 2199176,458 ops/s
[info] # Warmup Iteration   4: 2206060,607 ops/s
[info] # Warmup Iteration   5: 2206536,622 ops/s
[info] Iteration   1: 2209191,439 ops/s
[info]                  ·gc.alloc.rate:               1021,922 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,859 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479,333 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 2194890,661 ops/s
[info]                  ·gc.alloc.rate:                   1015,241 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     963,856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,045 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2206091,609 ops/s
[info]                  ·gc.alloc.rate:               1020,444 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,092 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 479,480 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2193758,055 ops/s
[info]                  ·gc.alloc.rate:                   1014,781 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     964,352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,030 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2219286,254 ops/s
[info]                  ·gc.alloc.rate:               1026,441 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,008 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 476,619 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2204643,604 ±(99.9%) 40878,617 ops/s [Average]
[info]   (min, avg, max) = (2193758,055, 2204643,604, 2219286,254), stdev = 10616,047
[info]   CI (99.9%): [2163764,986, 2245522,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1019,766 ±(99.9%) 18,766 MB/sec [Average]
[info]   (min, avg, max) = (1014,781, 1019,766, 1026,441), stdev = 4,874
[info]   CI (99.9%): [1001,000, 1038,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,070 ±(99.9%) 1417,046 MB/sec [Average]
[info]   (min, avg, max) = (672,008, 941,070, 1344,238), stdev = 368,002
[info]   CI (99.9%): [≈ 0, 2358,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   672,728 ±(99.9%) 1024,236 B/op [Average]
[info]   (min, avg, max) = (476,619, 672,728, 964,352), stdev = 265,991
[info]   CI (99.9%): [≈ 0, 1696,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,081 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,045), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 75,50% complete, ETA 00:32:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2576747,385 ops/s
[info] # Warmup Iteration   2: 2531819,895 ops/s
[info] # Warmup Iteration   3: 2265996,475 ops/s
[info] # Warmup Iteration   4: 2270742,239 ops/s
[info] # Warmup Iteration   5: 2265334,337 ops/s
[info] Iteration   1: 2270342,092 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2273970,623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2269956,630 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2266420,713 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2297462,216 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2275630,455 ±(99.9%) 48108,370 ops/s [Average]
[info]   (min, avg, max) = (2266420,713, 2275630,455, 2297462,216), stdev = 12493,591
[info]   CI (99.9%): [2227522,085, 2323738,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75,70% complete, ETA 00:32:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 368552,495 ops/s
[info] # Warmup Iteration   2: 436363,720 ops/s
[info] # Warmup Iteration   3: 430481,570 ops/s
[info] # Warmup Iteration   4: 431905,817 ops/s
[info] # Warmup Iteration   5: 428959,804 ops/s
[info] Iteration   1: 428271,242 ops/s
[info]                  ·gc.alloc.rate:                   616,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2474,783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,103 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 432575,602 ops/s
[info]                  ·gc.alloc.rate:      622,229 MB/sec
[info]                  ·gc.alloc.rate.norm: 2264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 431192,476 ops/s
[info]                  ·gc.alloc.rate:                   620,218 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2457,913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,228 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 431230,691 ops/s
[info]                  ·gc.alloc.rate:               620,332 MB/sec
[info]                  ·gc.alloc.rate.norm:          2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,752 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2448,018 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 430767,799 ops/s
[info]                  ·gc.alloc.rate:                   619,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              2264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,642 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2450,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,228 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   430807,562 ±(99.9%) 6054,109 ops/s [Average]
[info]   (min, avg, max) = (428271,242, 430807,562, 432575,602), stdev = 1572,233
[info]   CI (99.9%): [424753,454, 436861,671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   619,677 ±(99.9%) 8,689 MB/sec [Average]
[info]   (min, avg, max) = (616,055, 619,677, 622,229), stdev = 2,257
[info]   CI (99.9%): [610,988, 628,366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2264,001, 2264,001, 2264,001), stdev = 0,001
[info]   CI (99.9%): [2264,001, 2264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   537,629 ±(99.9%) 1157,299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,629, 673,411), stdev = 300,547
[info]   CI (99.9%): [≈ 0, 1694,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1966,283 ±(99.9%) 4232,763 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1966,283, 2474,783), stdev = 1099,235
[info]   CI (99.9%): [≈ 0, 6199,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,792 ±(99.9%) 6,556 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,792, 3,838), stdev = 1,703
[info]   CI (99.9%): [≈ 0, 7,348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,912 ±(99.9%) 24,094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,912, 14,103), stdev = 6,257
[info]   CI (99.9%): [≈ 0, 27,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 75,90% complete, ETA 00:32:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187210,702 ops/s
[info] # Warmup Iteration   2: 195177,097 ops/s
[info] # Warmup Iteration   3: 196095,121 ops/s
[info] # Warmup Iteration   4: 197285,696 ops/s
[info] # Warmup Iteration   5: 195557,545 ops/s
[info] Iteration   1: 196038,190 ops/s
[info]                  ·gc.alloc.rate:      500,161 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 196307,386 ops/s
[info]                  ·gc.alloc.rate:                   500,875 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,513 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4101,299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 197074,578 ops/s
[info]                  ·gc.alloc.rate:                   502,854 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,735 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5388,716 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25,301 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 197035,954 ops/s
[info]                  ·gc.alloc.rate:                   502,801 MB/sec
[info]                  ·gc.alloc.rate.norm:              4016,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,817 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5389,946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,333 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 197735,488 ops/s
[info]                  ·gc.alloc.rate:      504,485 MB/sec
[info]                  ·gc.alloc.rate.norm: 4016,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle":
[info]   196838,319 ±(99.9%) 2598,748 ops/s [Average]
[info]   (min, avg, max) = (196038,190, 196838,319, 197735,488), stdev = 674,887
[info]   CI (99.9%): [194239,571, 199437,067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   502,235 ±(99.9%) 6,646 MB/sec [Average]
[info]   (min, avg, max) = (500,161, 502,235, 504,485), stdev = 1,726
[info]   CI (99.9%): [495,589, 508,881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4016,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4016,002, 4016,002, 4016,002), stdev = 0,001
[info]   CI (99.9%): [4016,002, 4016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   372,213 ±(99.9%) 1333,316 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,213, 674,817), stdev = 346,258
[info]   CI (99.9%): [≈ 0, 1705,529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2975,992 ±(99.9%) 10655,189 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2975,992, 5389,946), stdev = 2767,119
[info]   CI (99.9%): [≈ 0, 13631,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,168), stdev = 1,412
[info]   CI (99.9%): [≈ 0, 6,080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,128 ±(99.9%) 43,427 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,128, 25,301), stdev = 11,278
[info]   CI (99.9%): [≈ 0, 48,555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 76,10% complete, ETA 00:31:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46275,999 ops/s
[info] # Warmup Iteration   2: 55333,939 ops/s
[info] # Warmup Iteration   3: 55781,845 ops/s
[info] # Warmup Iteration   4: 55863,329 ops/s
[info] # Warmup Iteration   5: 55902,439 ops/s
[info] Iteration   1: 55804,243 ops/s
[info]                  ·gc.alloc.rate:                   1880,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,480 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37919,463 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,174 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 55802,281 ops/s
[info]                  ·gc.alloc.rate:                   1880,277 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56932,896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,174 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 55829,005 ops/s
[info]                  ·gc.alloc.rate:                   1881,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,120 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57014,771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,347 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 55821,888 ops/s
[info]                  ·gc.alloc.rate:                   1881,294 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,679 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57110,714 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,348 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 55876,482 ops/s
[info]                  ·gc.alloc.rate:                   1882,756 MB/sec
[info]                  ·gc.alloc.rate.norm:              53040,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57149,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,173 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   55826,780 ±(99.9%) 115,636 ops/s [Average]
[info]   (min, avg, max) = (55802,281, 55826,780, 55876,482), stdev = 30,030
[info]   CI (99.9%): [55711,144, 55942,416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1881,215 ±(99.9%) 3,677 MB/sec [Average]
[info]   (min, avg, max) = (1880,277, 1881,215, 1882,756), stdev = 0,955
[info]   CI (99.9%): [1877,538, 1884,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53040,008 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (53040,007, 53040,008, 53040,008), stdev = 0,001
[info]   CI (99.9%): [53040,006, 53040,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1887,837 ±(99.9%) 1169,712 MB/sec [Average]
[info]   (min, avg, max) = (1344,480, 1887,837, 2028,625), stdev = 303,770
[info]   CI (99.9%): [718,125, 3057,549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   53225,437 ±(99.9%) 32948,867 B/op [Average]
[info]   (min, avg, max) = (37919,463, 53225,437, 57149,343), stdev = 8556,716
[info]   CI (99.9%): [20276,570, 86174,304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,643 ±(99.9%) 2,476 B/op [Average]
[info]   (min, avg, max) = (1,173, 1,643, 2,348), stdev = 0,643
[info]   CI (99.9%): [≈ 0, 4,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,31% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50681,091 ops/s
[info] # Warmup Iteration   2: 80416,916 ops/s
[info] # Warmup Iteration   3: 80960,123 ops/s
[info] # Warmup Iteration   4: 81201,463 ops/s
[info] # Warmup Iteration   5: 80167,877 ops/s
[info] Iteration   1: 80615,777 ops/s
[info]                  ·gc.alloc.rate:                   1447,673 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,168 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26399,391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,813 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 81142,418 ops/s
[info]                  ·gc.alloc.rate:               1457,280 MB/sec
[info]                  ·gc.alloc.rate.norm:          28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,685 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26254,777 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 81106,546 ops/s
[info]                  ·gc.alloc.rate:                   1456,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26290,337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,808 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 80603,239 ops/s
[info]                  ·gc.alloc.rate:               1447,611 MB/sec
[info]                  ·gc.alloc.rate.norm:          28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 26468,025 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 81121,323 ops/s
[info]                  ·gc.alloc.rate:                   1456,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              28264,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39491,857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,404 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   80917,861 ±(99.9%) 1085,148 ops/s [Average]
[info]   (min, avg, max) = (80603,239, 80917,861, 81142,418), stdev = 281,809
[info]   CI (99.9%): [79832,713, 82003,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1453,174 ±(99.9%) 19,472 MB/sec [Average]
[info]   (min, avg, max) = (1447,611, 1453,174, 1457,280), stdev = 5,057
[info]   CI (99.9%): [1433,701, 1472,646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28264,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (28264,005, 28264,005, 28264,006), stdev = 0,001
[info]   CI (99.9%): [28264,004, 28264,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1490,352 ±(99.9%) 1173,325 MB/sec [Average]
[info]   (min, avg, max) = (1352,168, 1490,352, 2035,426), stdev = 304,709
[info]   CI (99.9%): [317,027, 2663,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28980,877 ±(99.9%) 22628,048 B/op [Average]
[info]   (min, avg, max) = (26254,777, 28980,877, 39491,857), stdev = 5876,432
[info]   CI (99.9%): [6352,829, 51608,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,405 ±(99.9%) 1,560 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,405, 0,813), stdev = 0,405
[info]   CI (99.9%): [≈ 0, 1,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,51% complete, ETA 00:31:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98729,158 ops/s
[info] # Warmup Iteration   2: 106478,845 ops/s
[info] # Warmup Iteration   3: 107389,756 ops/s
[info] # Warmup Iteration   4: 106968,453 ops/s
[info] # Warmup Iteration   5: 107332,384 ops/s
[info] Iteration   1: 107254,623 ops/s
[info]                  ·gc.alloc.rate:                   1643,370 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2015,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29586,774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,611 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 107623,435 ops/s
[info]                  ·gc.alloc.rate:                   1649,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,503 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19677,482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,609 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 107535,238 ops/s
[info]                  ·gc.alloc.rate:                   1648,148 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19713,997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,914 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 107407,430 ops/s
[info]                  ·gc.alloc.rate:                   1646,114 MB/sec
[info]                  ·gc.alloc.rate.norm:              24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29643,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,305 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 107405,704 ops/s
[info]                  ·gc.alloc.rate:               1645,814 MB/sec
[info]                  ·gc.alloc.rate.norm:          24120,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,043 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19785,374 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   107445,286 ±(99.9%) 541,767 ops/s [Average]
[info]   (min, avg, max) = (107254,623, 107445,286, 107623,435), stdev = 140,695
[info]   CI (99.9%): [106903,518, 107987,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1646,544 ±(99.9%) 8,782 MB/sec [Average]
[info]   (min, avg, max) = (1643,370, 1646,544, 1649,273), stdev = 2,281
[info]   CI (99.9%): [1637,761, 1655,326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24120,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24120,004, 24120,004, 24120,004), stdev = 0,001
[info]   CI (99.9%): [24120,003, 24120,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1616,306 ±(99.9%) 1417,162 MB/sec [Average]
[info]   (min, avg, max) = (1345,503, 1616,306, 2023,064), stdev = 368,032
[info]   CI (99.9%): [199,144, 3033,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23681,394 ±(99.9%) 20858,347 B/op [Average]
[info]   (min, avg, max) = (19677,482, 23681,394, 29643,345), stdev = 5416,847
[info]   CI (99.9%): [2823,047, 44539,742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,488 ±(99.9%) 1,338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,488, 0,914), stdev = 0,347
[info]   CI (99.9%): [≈ 0, 1,826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76,71% complete, ETA 00:30:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11251,767 ops/s
[info] # Warmup Iteration   2: 20358,046 ops/s
[info] # Warmup Iteration   3: 20553,066 ops/s
[info] # Warmup Iteration   4: 20437,052 ops/s
[info] # Warmup Iteration   5: 20464,998 ops/s
[info] Iteration   1: 20412,693 ops/s
[info]                  ·gc.alloc.rate:                   1422,329 MB/sec
[info]                  ·gc.alloc.rate.norm:              109672,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     156326,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,210 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 20611,322 ops/s
[info]                  ·gc.alloc.rate:               1436,219 MB/sec
[info]                  ·gc.alloc.rate.norm:          109672,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,855 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103306,226 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 20527,889 ops/s
[info]                  ·gc.alloc.rate:                   1430,430 MB/sec
[info]                  ·gc.alloc.rate.norm:              109672,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,116 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103820,923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,788 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20506,863 ops/s
[info]                  ·gc.alloc.rate:                   1429,059 MB/sec
[info]                  ·gc.alloc.rate.norm:              109672,021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,868 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103978,334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,598 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 20568,910 ops/s
[info]                  ·gc.alloc.rate:                   1433,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              109672,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     103766,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,593 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   20525,535 ±(99.9%) 287,695 ops/s [Average]
[info]   (min, avg, max) = (20412,693, 20525,535, 20611,322), stdev = 74,713
[info]   CI (99.9%): [20237,841, 20813,230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1430,220 ±(99.9%) 19,984 MB/sec [Average]
[info]   (min, avg, max) = (1422,329, 1430,220, 1436,219), stdev = 5,190
[info]   CI (99.9%): [1410,236, 1450,204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   109672,022 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (109672,020, 109672,022, 109672,027), stdev = 0,003
[info]   CI (99.9%): [109672,011, 109672,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1489,025 ±(99.9%) 1158,863 MB/sec [Average]
[info]   (min, avg, max) = (1352,855, 1489,025, 2027,382), stdev = 300,953
[info]   CI (99.9%): [330,162, 2647,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   114239,692 ±(99.9%) 90599,185 B/op [Average]
[info]   (min, avg, max) = (103306,226, 114239,692, 156326,053), stdev = 23528,321
[info]   CI (99.9%): [23640,508, 204838,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,238 ±(99.9%) 7,016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,238, 4,788), stdev = 1,822
[info]   CI (99.9%): [≈ 0, 9,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76,91% complete, ETA 00:30:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94266,866 ops/s
[info] # Warmup Iteration   2: 137536,300 ops/s
[info] # Warmup Iteration   3: 138498,008 ops/s
[info] # Warmup Iteration   4: 138635,769 ops/s
[info] # Warmup Iteration   5: 138361,007 ops/s
[info] Iteration   1: 138549,224 ops/s
[info]                  ·gc.alloc.rate:               1276,025 MB/sec
[info]                  ·gc.alloc.rate.norm:          14496,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,400 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7672,729 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 137262,441 ops/s
[info]                  ·gc.alloc.rate:                   1264,210 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15504,926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,239 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 137543,918 ops/s
[info]                  ·gc.alloc.rate:               1266,851 MB/sec
[info]                  ·gc.alloc.rate.norm:          14496,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,529 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15487,824 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 137220,404 ops/s
[info]                  ·gc.alloc.rate:                   1263,915 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15531,686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,477 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 138248,734 ops/s
[info]                  ·gc.alloc.rate:                   1273,200 MB/sec
[info]                  ·gc.alloc.rate.norm:              14496,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15430,717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,237 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   137764,944 ±(99.9%) 2316,021 ops/s [Average]
[info]   (min, avg, max) = (137220,404, 137764,944, 138549,224), stdev = 601,463
[info]   CI (99.9%): [135448,923, 140080,965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1268,840 ±(99.9%) 21,116 MB/sec [Average]
[info]   (min, avg, max) = (1263,915, 1268,840, 1276,025), stdev = 5,484
[info]   CI (99.9%): [1247,724, 1289,957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14496,003, 14496,003, 14496,003), stdev = 0,001
[info]   CI (99.9%): [14496,003, 14496,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1218,128 ±(99.9%) 1168,273 MB/sec [Average]
[info]   (min, avg, max) = (675,400, 1218,128, 1355,297), stdev = 303,397
[info]   CI (99.9%): [49,856, 2386,401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13925,577 ±(99.9%) 13460,480 B/op [Average]
[info]   (min, avg, max) = (7672,729, 13925,577, 15531,686), stdev = 3495,644
[info]   CI (99.9%): [465,097, 27386,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,191 ±(99.9%) 0,769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,191, 0,477), stdev = 0,200
[info]   CI (99.9%): [≈ 0, 0,959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 77,11% complete, ETA 00:30:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 545801,562 ops/s
[info] # Warmup Iteration   2: 592831,588 ops/s
[info] # Warmup Iteration   3: 598171,571 ops/s
[info] # Warmup Iteration   4: 589479,489 ops/s
[info] # Warmup Iteration   5: 599069,071 ops/s
[info] Iteration   1: 600888,494 ops/s
[info]                  ·gc.alloc.rate:                   662,718 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1767,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,325 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 606610,102 ops/s
[info]                  ·gc.alloc.rate:                   669,160 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,861 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1750,789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,108 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 605668,425 ops/s
[info]                  ·gc.alloc.rate:               668,010 MB/sec
[info]                  ·gc.alloc.rate.norm:          1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,704 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1748,198 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 604057,204 ops/s
[info]                  ·gc.alloc.rate:                   666,308 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1752,836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 605730,147 ops/s
[info]                  ·gc.alloc.rate:                   668,084 MB/sec
[info]                  ·gc.alloc.rate.norm:              1736,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1746,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   604590,874 ±(99.9%) 8723,378 ops/s [Average]
[info]   (min, avg, max) = (600888,494, 604590,874, 606610,102), stdev = 2265,434
[info]   CI (99.9%): [595867,496, 613314,253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   666,856 ±(99.9%) 9,736 MB/sec [Average]
[info]   (min, avg, max) = (662,718, 666,856, 669,160), stdev = 2,528
[info]   CI (99.9%): [657,120, 676,592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1736,001, 1736,001, 1736,001), stdev = 0,001
[info]   CI (99.9%): [1736,001, 1736,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,410 ±(99.9%) 4,906 MB/sec [Average]
[info]   (min, avg, max) = (672,040, 673,410, 674,861), stdev = 1,274
[info]   CI (99.9%): [668,504, 678,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1753,086 ±(99.9%) 32,120 B/op [Average]
[info]   (min, avg, max) = (1746,282, 1753,086, 1767,327), stdev = 8,341
[info]   CI (99.9%): [1720,967, 1785,206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,652 ±(99.9%) 5,437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,652, 3,178), stdev = 1,412
[info]   CI (99.9%): [≈ 0, 6,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,708 ±(99.9%) 14,244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,708, 8,325), stdev = 3,699
[info]   CI (99.9%): [≈ 0, 15,952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 77,31% complete, ETA 00:30:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 558399,160 ops/s
[info] # Warmup Iteration   2: 589078,568 ops/s
[info] # Warmup Iteration   3: 588609,392 ops/s
[info] # Warmup Iteration   4: 588331,648 ops/s
[info] # Warmup Iteration   5: 587562,616 ops/s
[info] Iteration   1: 591402,949 ops/s
[info]                  ·gc.alloc.rate:      6,012 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 589266,897 ops/s
[info]                  ·gc.alloc.rate:      5,991 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 590823,346 ops/s
[info]                  ·gc.alloc.rate:      6,006 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 588117,248 ops/s
[info]                  ·gc.alloc.rate:      5,980 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 588046,137 ops/s
[info]                  ·gc.alloc.rate:      5,978 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   589531,315 ±(99.9%) 5917,857 ops/s [Average]
[info]   (min, avg, max) = (588046,137, 589531,315, 591402,949), stdev = 1536,849
[info]   CI (99.9%): [583613,459, 595449,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5,993 ±(99.9%) 0,060 MB/sec [Average]
[info]   (min, avg, max) = (5,978, 5,993, 6,012), stdev = 0,016
[info]   CI (99.9%): [5,934, 6,053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 77,51% complete, ETA 00:29:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15632,578 ops/s
[info] # Warmup Iteration   2: 23565,293 ops/s
[info] # Warmup Iteration   3: 23530,979 ops/s
[info] # Warmup Iteration   4: 23950,891 ops/s
[info] # Warmup Iteration   5: 23829,263 ops/s
[info] Iteration   1: 23921,605 ops/s
[info]                  ·gc.alloc.rate:               456,348 MB/sec
[info]                  ·gc.alloc.rate.norm:          30024,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,522 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33653,992 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 23963,267 ops/s
[info]                  ·gc.alloc.rate:      457,181 MB/sec
[info]                  ·gc.alloc.rate.norm: 30024,018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23982,875 ops/s
[info]                  ·gc.alloc.rate:                   457,463 MB/sec
[info]                  ·gc.alloc.rate.norm:              30024,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44255,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27,318 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 23841,918 ops/s
[info]                  ·gc.alloc.rate:                   454,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              30024,018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44518,752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,748 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 23953,980 ops/s
[info]                  ·gc.alloc.rate:      456,864 MB/sec
[info]                  ·gc.alloc.rate.norm: 30024,018 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   23932,729 ±(99.9%) 213,261 ops/s [Average]
[info]   (min, avg, max) = (23841,918, 23932,729, 23982,875), stdev = 55,383
[info]   CI (99.9%): [23719,467, 24145,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   456,539 ±(99.9%) 3,992 MB/sec [Average]
[info]   (min, avg, max) = (454,838, 456,539, 457,463), stdev = 1,037
[info]   CI (99.9%): [452,546, 460,531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30024,019 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (30024,018, 30024,019, 30024,020), stdev = 0,001
[info]   CI (99.9%): [30024,016, 30024,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   372,048 ±(99.9%) 1332,618 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,048, 674,421), stdev = 346,077
[info]   CI (99.9%): [≈ 0, 1704,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   24485,597 ±(99.9%) 87709,235 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24485,597, 44518,752), stdev = 22777,810
[info]   CI (99.9%): [≈ 0, 112194,831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,092 ±(99.9%) 0,702 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,092, 0,416), stdev = 0,182
[info]   CI (99.9%): [≈ 0, 0,794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6,013 ±(99.9%) 46,089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6,013, 27,318), stdev = 11,969
[info]   CI (99.9%): [≈ 0, 52,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77,71% complete, ETA 00:29:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1528807,166 ops/s
[info] # Warmup Iteration   2: 2553730,894 ops/s
[info] # Warmup Iteration   3: 2580524,991 ops/s
[info] # Warmup Iteration   4: 2607616,950 ops/s
[info] # Warmup Iteration   5: 2595067,311 ops/s
[info] Iteration   1: 2582603,473 ops/s
[info]                  ·gc.alloc.rate:                   3491,327 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380,600 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2060,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2578152,655 ops/s
[info]                  ·gc.alloc.rate:                   3485,420 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2069,306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         8,000 ms
[info] Iteration   3: 2599714,923 ops/s
[info]                  ·gc.alloc.rate:                   3515,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,157 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2055,381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2590604,282 ops/s
[info]                  ·gc.alloc.rate:               3503,544 MB/sec
[info]                  ·gc.alloc.rate.norm:          2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      4080,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2478,298 B/op
[info]                  ·gc.count:                    6,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   5: 2577915,459 ops/s
[info]                  ·gc.alloc.rate:                   3485,551 MB/sec
[info]                  ·gc.alloc.rate.norm:              2128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,281 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2077,772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2585798,158 ±(99.9%) 35894,315 ops/s [Average]
[info]   (min, avg, max) = (2577915,459, 2585798,158, 2599714,923), stdev = 9321,639
[info]   CI (99.9%): [2549903,844, 2621692,473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3496,191 ±(99.9%) 49,649 MB/sec [Average]
[info]   (min, avg, max) = (3485,420, 3496,191, 3515,113), stdev = 12,894
[info]   CI (99.9%): [3446,542, 3545,840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2128,000, 2128,000, 2128,000), stdev = 0,001
[info]   CI (99.9%): [2128,000, 2128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3529,720 ±(99.9%) 1185,543 MB/sec [Average]
[info]   (min, avg, max) = (3380,600, 3529,720, 4080,276), stdev = 307,882
[info]   CI (99.9%): [2344,177, 4715,263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2148,254 ±(99.9%) 711,208 B/op [Average]
[info]   (min, avg, max) = (2055,381, 2148,254, 2478,298), stdev = 184,698
[info]   CI (99.9%): [1437,046, 2859,462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,050, 0,083), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,030 ±(99.9%) 0,074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,030, 0,051), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   26,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,200, 6,000), stdev = 0,447
[info]   CI (99.9%): [26,000, 26,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   16,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 3,200, 8,000), stdev = 2,775
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77,91% complete, ETA 00:29:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118539,423 ops/s
[info] # Warmup Iteration   2: 909425,613 ops/s
[info] # Warmup Iteration   3: 909043,263 ops/s
[info] # Warmup Iteration   4: 905655,373 ops/s
[info] # Warmup Iteration   5: 909387,163 ops/s
[info] Iteration   1: 888302,257 ops/s
[info]                  ·gc.alloc.rate:                   564,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,599 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     906,456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,010 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 887730,569 ops/s
[info]                  ·gc.alloc.rate:                   564,020 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1195,210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,647 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 889850,598 ops/s
[info]                  ·gc.alloc.rate:                   565,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,230 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1192,375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 886455,612 ops/s
[info]                  ·gc.alloc.rate:               563,264 MB/sec
[info]                  ·gc.alloc.rate.norm:          1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1194,457 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 889609,241 ops/s
[info]                  ·gc.alloc.rate:                   565,203 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,721 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1190,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   888389,656 ±(99.9%) 5378,613 ops/s [Average]
[info]   (min, avg, max) = (886455,612, 888389,656, 889850,598), stdev = 1396,809
[info]   CI (99.9%): [883011,043, 893768,269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   564,467 ±(99.9%) 3,424 MB/sec [Average]
[info]   (min, avg, max) = (563,264, 564,467, 565,451), stdev = 0,889
[info]   CI (99.9%): [561,043, 567,891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1000,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1000,000, 1000,000, 1000,000), stdev = 0,001
[info]   CI (99.9%): [1000,000, 1000,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   641,093 ±(99.9%) 278,760 MB/sec [Average]
[info]   (min, avg, max) = (511,599, 641,093, 674,230), stdev = 72,393
[info]   CI (99.9%): [362,333, 919,853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   1135,746 ±(99.9%) 493,620 B/op [Average]
[info]   (min, avg, max) = (906,456, 1135,746, 1195,210), stdev = 128,191
[info]   CI (99.9%): [642,126, 1629,365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,543 ±(99.9%) 4,474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,543, 2,621), stdev = 1,162
[info]   CI (99.9%): [≈ 0, 5,017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,963 ±(99.9%) 7,933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,963, 4,647), stdev = 2,060
[info]   CI (99.9%): [≈ 0, 8,895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 78,11% complete, ETA 00:29:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51456,154 ops/s
[info] # Warmup Iteration   2: 320168,053 ops/s
[info] # Warmup Iteration   3: 325377,416 ops/s
[info] # Warmup Iteration   4: 325792,928 ops/s
[info] # Warmup Iteration   5: 323933,182 ops/s
[info] Iteration   1: 323596,479 ops/s
[info]                  ·gc.alloc.rate:                   620,090 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,401 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3280,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,012 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 320167,218 ops/s
[info]                  ·gc.alloc.rate:      613,527 MB/sec
[info]                  ·gc.alloc.rate.norm: 3016,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 319776,109 ops/s
[info]                  ·gc.alloc.rate:                   612,762 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,387 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3319,316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,307 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 320818,926 ops/s
[info]                  ·gc.alloc.rate:               614,789 MB/sec
[info]                  ·gc.alloc.rate.norm:          3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3311,785 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 321337,459 ops/s
[info]                  ·gc.alloc.rate:                   615,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              3016,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,981 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3306,437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,102 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   321139,238 ±(99.9%) 5770,466 ops/s [Average]
[info]   (min, avg, max) = (319776,109, 321139,238, 323596,479), stdev = 1498,572
[info]   CI (99.9%): [315368,772, 326909,704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   615,372 ±(99.9%) 11,046 MB/sec [Average]
[info]   (min, avg, max) = (612,762, 615,372, 620,090), stdev = 2,869
[info]   CI (99.9%): [604,326, 626,418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3016,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3016,001, 3016,001, 3016,001), stdev = 0,001
[info]   CI (99.9%): [3016,001, 3016,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,770 ±(99.9%) 1161,897 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,770, 675,082), stdev = 301,741
[info]   CI (99.9%): [≈ 0, 1701,667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2643,540 ±(99.9%) 5690,701 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2643,540, 3319,316), stdev = 1477,857
[info]   CI (99.9%): [≈ 0, 8334,241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,337 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,208), stdev = 0,088
[info]   CI (99.9%): [≈ 0, 0,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,284 ±(99.9%) 1,640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,284, 1,012), stdev = 0,426
[info]   CI (99.9%): [≈ 0, 1,924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 78,31% complete, ETA 00:28:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 737426,828 ops/s
[info] # Warmup Iteration   2: 800075,115 ops/s
[info] # Warmup Iteration   3: 808034,543 ops/s
[info] # Warmup Iteration   4: 797043,554 ops/s
[info] # Warmup Iteration   5: 798704,528 ops/s
[info] Iteration   1: 805209,135 ops/s
[info]                  ·gc.alloc.rate:                   605,708 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     999,895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,066 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 807633,036 ops/s
[info]                  ·gc.alloc.rate:                   607,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,854 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1315,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,926 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 803618,594 ops/s
[info]                  ·gc.alloc.rate:                   604,504 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1321,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,163 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 801643,988 ops/s
[info]                  ·gc.alloc.rate:               603,103 MB/sec
[info]                  ·gc.alloc.rate.norm:          1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,785 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1320,799 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 803505,274 ops/s
[info]                  ·gc.alloc.rate:                   604,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,667 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1317,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   804322,005 ±(99.9%) 8628,265 ops/s [Average]
[info]   (min, avg, max) = (801643,988, 804322,005, 807633,036), stdev = 2240,733
[info]   CI (99.9%): [795693,740, 812950,270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   605,062 ±(99.9%) 6,521 MB/sec [Average]
[info]   (min, avg, max) = (603,103, 605,062, 607,603), stdev = 1,693
[info]   CI (99.9%): [598,541, 611,583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1184,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1184,001, 1184,001, 1184,001), stdev = 0,001
[info]   CI (99.9%): [1184,000, 1184,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   641,304 ±(99.9%) 279,390 MB/sec [Average]
[info]   (min, avg, max) = (511,524, 641,304, 674,854), stdev = 72,557
[info]   CI (99.9%): [361,914, 920,694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1254,993 ±(99.9%) 549,207 B/op [Average]
[info]   (min, avg, max) = (999,895, 1254,993, 1321,471), stdev = 142,627
[info]   CI (99.9%): [705,786, 1804,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,644 ±(99.9%) 5,161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,644, 3,041), stdev = 1,340
[info]   CI (99.9%): [≈ 0, 5,805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,255 ±(99.9%) 10,057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,255, 5,926), stdev = 2,612
[info]   CI (99.9%): [≈ 0, 11,312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78,51% complete, ETA 00:28:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4358425,894 ops/s
[info] # Warmup Iteration   2: 4846765,369 ops/s
[info] # Warmup Iteration   3: 4827415,673 ops/s
[info] # Warmup Iteration   4: 4886506,013 ops/s
[info] # Warmup Iteration   5: 4871082,965 ops/s
[info] Iteration   1: 4838795,318 ops/s
[info]                  ·gc.alloc.rate:                   1549,447 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     655,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4846913,044 ops/s
[info]                  ·gc.alloc.rate:               1551,873 MB/sec
[info]                  ·gc.alloc.rate.norm:          504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,939 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 436,794 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 4844325,277 ops/s
[info]                  ·gc.alloc.rate:                   1551,108 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,145 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     437,401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 4874106,079 ops/s
[info]                  ·gc.alloc.rate:                   1560,846 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     652,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,020 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4842088,199 ops/s
[info]                  ·gc.alloc.rate:               1550,397 MB/sec
[info]                  ·gc.alloc.rate.norm:          504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1350,010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 438,859 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   4849245,583 ±(99.9%) 54732,356 ops/s [Average]
[info]   (min, avg, max) = (4838795,318, 4849245,583, 4874106,079), stdev = 14213,819
[info]   CI (99.9%): [4794513,228, 4903977,939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1552,734 ±(99.9%) 17,798 MB/sec [Average]
[info]   (min, avg, max) = (1549,447, 1552,734, 1560,846), stdev = 4,622
[info]   CI (99.9%): [1534,936, 1570,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   1615,851 ±(99.9%) 1417,445 MB/sec [Average]
[info]   (min, avg, max) = (1344,939, 1615,851, 2021,665), stdev = 368,106
[info]   CI (99.9%): [198,407, 3033,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   524,355 ±(99.9%) 457,015 B/op [Average]
[info]   (min, avg, max) = (436,794, 524,355, 655,921), stdev = 118,685
[info]   CI (99.9%): [67,340, 981,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   0,009 ±(99.9%) 0,035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,020), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78,71% complete, ETA 00:28:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8596854,161 ops/s
[info] # Warmup Iteration   2: 9359279,174 ops/s
[info] # Warmup Iteration   3: 9303085,127 ops/s
[info] # Warmup Iteration   4: 9350722,938 ops/s
[info] # Warmup Iteration   5: 9086115,022 ops/s
[info] Iteration   1: 9289398,710 ops/s
[info]                  ·gc.alloc.rate:                   755,466 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,398 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114,434 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 9270681,163 ops/s
[info]                  ·gc.alloc.rate:               754,013 MB/sec
[info]                  ·gc.alloc.rate.norm:          128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,846 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 114,221 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 9286906,632 ops/s
[info]                  ·gc.alloc.rate:                   755,133 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,619 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114,013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 9286976,903 ops/s
[info]                  ·gc.alloc.rate:                   755,230 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113,903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 9288917,033 ops/s
[info]                  ·gc.alloc.rate:                   755,178 MB/sec
[info]                  ·gc.alloc.rate.norm:              128,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,867 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     113,879 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   9284576,089 ±(99.9%) 30219,937 ops/s [Average]
[info]   (min, avg, max) = (9270681,163, 9284576,089, 9289398,710), stdev = 7848,022
[info]   CI (99.9%): [9254356,152, 9314796,025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   755,004 ±(99.9%) 2,190 MB/sec [Average]
[info]   (min, avg, max) = (754,013, 755,004, 755,466), stdev = 0,569
[info]   CI (99.9%): [752,814, 757,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (128,000, 128,000, 128,000), stdev = 0,001
[info]   CI (99.9%): [128,000, 128,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   672,957 ±(99.9%) 5,475 MB/sec [Average]
[info]   (min, avg, max) = (671,867, 672,957, 675,398), stdev = 1,422
[info]   CI (99.9%): [667,482, 678,432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   114,090 ±(99.9%) 0,905 B/op [Average]
[info]   (min, avg, max) = (113,879, 114,090, 114,434), stdev = 0,235
[info]   CI (99.9%): [113,185, 114,995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   0,004 ±(99.9%) 0,015 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,011), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78,92% complete, ETA 00:28:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42022,996 ops/s
[info] # Warmup Iteration   2: 203008,410 ops/s
[info] # Warmup Iteration   3: 203131,029 ops/s
[info] # Warmup Iteration   4: 206499,709 ops/s
[info] # Warmup Iteration   5: 206809,663 ops/s
[info] Iteration   1: 207388,215 ops/s
[info]                  ·gc.alloc.rate:                   1402,113 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15382,545 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,316 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 206739,705 ops/s
[info]                  ·gc.alloc.rate:                   1397,636 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10299,298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,317 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 205174,823 ops/s
[info]                  ·gc.alloc.rate:                   1386,892 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,653 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10385,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,479 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 204552,247 ops/s
[info]                  ·gc.alloc.rate:                   1382,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,864 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10424,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,320 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 204631,454 ops/s
[info]                  ·gc.alloc.rate:                   1383,275 MB/sec
[info]                  ·gc.alloc.rate.norm:              10640,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,690 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10427,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,160 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   205697,289 ±(99.9%) 4970,895 ops/s [Average]
[info]   (min, avg, max) = (204552,247, 205697,289, 207388,215), stdev = 1290,926
[info]   CI (99.9%): [200726,394, 210668,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1390,563 ±(99.9%) 33,832 MB/sec [Average]
[info]   (min, avg, max) = (1382,898, 1390,563, 1402,113), stdev = 8,786
[info]   CI (99.9%): [1356,731, 1424,394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10640,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10640,002, 10640,002, 10640,002), stdev = 0,001
[info]   CI (99.9%): [10640,002, 10640,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1488,832 ±(99.9%) 1158,611 MB/sec [Average]
[info]   (min, avg, max) = (1352,882, 1488,832, 2027,073), stdev = 300,888
[info]   CI (99.9%): [330,222, 2647,443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11383,795 ±(99.9%) 8609,920 B/op [Average]
[info]   (min, avg, max) = (10299,298, 11383,795, 15382,545), stdev = 2235,969
[info]   CI (99.9%): [2773,875, 19993,715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,318 ±(99.9%) 0,434 B/op [Average]
[info]   (min, avg, max) = (0,160, 0,318, 0,479), stdev = 0,113
[info]   CI (99.9%): [≈ 0, 0,753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle
[info] # Run progress: 79,12% complete, ETA 00:27:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 236889,277 ops/s
[info] # Warmup Iteration   2: 331189,040 ops/s
[info] # Warmup Iteration   3: 333657,250 ops/s
[info] # Warmup Iteration   4: 335474,940 ops/s
[info] # Warmup Iteration   5: 333460,357 ops/s
[info] Iteration   1: 333904,647 ops/s
[info]                  ·gc.alloc.rate:                   660,215 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3180,471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,146 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 335643,538 ops/s
[info]                  ·gc.alloc.rate:                   663,672 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3164,166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,293 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 335480,481 ops/s
[info]                  ·gc.alloc.rate:               663,296 MB/sec
[info]                  ·gc.alloc.rate.norm:          3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,710 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3156,168 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 334800,352 ops/s
[info]                  ·gc.alloc.rate:                   662,034 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,792 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3162,568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 335155,614 ops/s
[info]                  ·gc.alloc.rate:                   662,633 MB/sec
[info]                  ·gc.alloc.rate.norm:              3112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3156,091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle":
[info]   334996,926 ±(99.9%) 2660,032 ops/s [Average]
[info]   (min, avg, max) = (333904,647, 334996,926, 335643,538), stdev = 690,802
[info]   CI (99.9%): [332336,894, 337656,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate":
[info]   662,370 ±(99.9%) 5,230 MB/sec [Average]
[info]   (min, avg, max) = (660,215, 662,370, 663,672), stdev = 1,358
[info]   CI (99.9%): [657,140, 667,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   3112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (3112,001, 3112,001, 3112,001), stdev = 0,001
[info]   CI (99.9%): [3112,001, 3112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   673,412 ±(99.9%) 4,907 MB/sec [Average]
[info]   (min, avg, max) = (672,021, 673,412, 674,797), stdev = 1,274
[info]   CI (99.9%): [668,505, 678,319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3163,893 ±(99.9%) 38,372 B/op [Average]
[info]   (min, avg, max) = (3156,091, 3163,893, 3180,471), stdev = 9,965
[info]   CI (99.9%): [3125,521, 3202,265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,663 ±(99.9%) 5,489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,663, 3,213), stdev = 1,426
[info]   CI (99.9%): [≈ 0, 6,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   3,127 ±(99.9%) 25,876 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,127, 15,146), stdev = 6,720
[info]   CI (99.9%): [≈ 0, 29,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,32% complete, ETA 00:27:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 986039,739 ops/s
[info] # Warmup Iteration   2: 1033208,332 ops/s
[info] # Warmup Iteration   3: 1030553,699 ops/s
[info] # Warmup Iteration   4: 1030477,680 ops/s
[info] # Warmup Iteration   5: 1017351,592 ops/s
[info] Iteration   1: 1032997,879 ops/s
[info]                  ·gc.alloc.rate:      57,757 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1031146,568 ops/s
[info]                  ·gc.alloc.rate:      57,658 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1033681,896 ops/s
[info]                  ·gc.alloc.rate:      57,796 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1016566,996 ops/s
[info]                  ·gc.alloc.rate:               56,841 MB/sec
[info]                  ·gc.alloc.rate.norm:          88,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,558 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 791,994 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 1005983,386 ops/s
[info]                  ·gc.alloc.rate:      56,252 MB/sec
[info]                  ·gc.alloc.rate.norm: 88,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   1024075,345 ±(99.9%) 47379,897 ops/s [Average]
[info]   (min, avg, max) = (1005983,386, 1024075,345, 1033681,896), stdev = 12304,409
[info]   CI (99.9%): [976695,448, 1071455,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   57,261 ±(99.9%) 2,643 MB/sec [Average]
[info]   (min, avg, max) = (56,252, 57,261, 57,796), stdev = 0,686
[info]   CI (99.9%): [54,617, 59,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   88,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (88,000, 88,000, 88,000), stdev = 0,001
[info]   CI (99.9%): [88,000, 88,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   102,312 ±(99.9%) 880,934 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102,312, 511,558), stdev = 228,776
[info]   CI (99.9%): [≈ 0, 983,246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   158,399 ±(99.9%) 1363,861 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 158,399, 791,994), stdev = 354,190
[info]   CI (99.9%): [≈ 0, 1522,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,200, 1,000), stdev = 0,447
[info]   CI (99.9%): [1,000, 1,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79,52% complete, ETA 00:27:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39202,497 ops/s
[info] # Warmup Iteration   2: 71654,231 ops/s
[info] # Warmup Iteration   3: 71912,887 ops/s
[info] # Warmup Iteration   4: 72220,801 ops/s
[info] # Warmup Iteration   5: 72068,986 ops/s
[info] Iteration   1: 71992,010 ops/s
[info]                  ·gc.alloc.rate:                   3342,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3395,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74233,665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,365 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 72259,400 ops/s
[info]                  ·gc.alloc.rate:                   3355,273 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,976 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74053,658 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,267 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 72012,350 ops/s
[info]                  ·gc.alloc.rate:                   3343,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,851 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74367,918 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,910 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 72114,413 ops/s
[info]                  ·gc.alloc.rate:                   3348,489 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3403,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74286,672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,363 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 71844,442 ops/s
[info]                  ·gc.alloc.rate:                   3335,782 MB/sec
[info]                  ·gc.alloc.rate.norm:              73080,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3405,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     74604,379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,912 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   72044,523 ±(99.9%) 593,055 ops/s [Average]
[info]   (min, avg, max) = (71844,442, 72044,523, 72259,400), stdev = 154,015
[info]   CI (99.9%): [71451,467, 72637,578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3345,151 ±(99.9%) 27,973 MB/sec [Average]
[info]   (min, avg, max) = (3335,782, 3345,151, 3355,273), stdev = 7,265
[info]   CI (99.9%): [3317,177, 3373,124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73080,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (73080,006, 73080,006, 73080,006), stdev = 0,001
[info]   CI (99.9%): [73080,005, 73080,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3401,404 ±(99.9%) 15,617 MB/sec [Average]
[info]   (min, avg, max) = (3395,052, 3401,404, 3405,363), stdev = 4,056
[info]   CI (99.9%): [3385,787, 3417,020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   74309,258 ±(99.9%) 775,150 B/op [Average]
[info]   (min, avg, max) = (74053,658, 74309,258, 74604,379), stdev = 201,304
[info]   CI (99.9%): [73534,108, 75084,409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,104), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,363 ±(99.9%) 2,132 B/op [Average]
[info]   (min, avg, max) = (0,910, 1,363, 2,267), stdev = 0,554
[info]   CI (99.9%): [≈ 0, 3,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,72% complete, ETA 00:26:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 894179,618 ops/s
[info] # Warmup Iteration   2: 1219475,550 ops/s
[info] # Warmup Iteration   3: 1221614,157 ops/s
[info] # Warmup Iteration   4: 1219482,679 ops/s
[info] # Warmup Iteration   5: 1219159,818 ops/s
[info] Iteration   1: 1217014,114 ops/s
[info]                  ·gc.alloc.rate:                   699,023 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     872,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1222367,283 ops/s
[info]                  ·gc.alloc.rate:                   701,985 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,960 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     869,198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,080 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1221932,672 ops/s
[info]                  ·gc.alloc.rate:               701,848 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 869,519 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1218353,179 ops/s
[info]                  ·gc.alloc.rate:                   699,811 MB/sec
[info]                  ·gc.alloc.rate.norm:              904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     872,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1221875,221 ops/s
[info]                  ·gc.alloc.rate:               701,719 MB/sec
[info]                  ·gc.alloc.rate.norm:          904,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,658 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 870,427 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1220308,494 ±(99.9%) 9433,567 ops/s [Average]
[info]   (min, avg, max) = (1217014,114, 1220308,494, 1222367,283), stdev = 2449,867
[info]   CI (99.9%): [1210874,927, 1229742,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   700,877 ±(99.9%) 5,257 MB/sec [Average]
[info]   (min, avg, max) = (699,023, 700,877, 701,985), stdev = 1,365
[info]   CI (99.9%): [695,621, 706,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (904,000, 904,000, 904,000), stdev = 0,001
[info]   CI (99.9%): [904,000, 904,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,170 ±(99.9%) 2,122 MB/sec [Average]
[info]   (min, avg, max) = (674,405, 675,170, 675,751), stdev = 0,551
[info]   CI (99.9%): [673,048, 677,292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   870,845 ±(99.9%) 6,295 B/op [Average]
[info]   (min, avg, max) = (869,198, 870,845, 872,921), stdev = 1,635
[info]   CI (99.9%): [864,550, 877,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,027 ±(99.9%) 0,126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,027, 0,080), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79,92% complete, ETA 00:26:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1500809,642 ops/s
[info] # Warmup Iteration   2: 1541226,526 ops/s
[info] # Warmup Iteration   3: 1577339,723 ops/s
[info] # Warmup Iteration   4: 1574808,467 ops/s
[info] # Warmup Iteration   5: 1576197,834 ops/s
[info] Iteration   1: 1574168,680 ops/s
[info]                  ·gc.alloc.rate:                   440,040 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,511 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     511,465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,028 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1571364,503 ops/s
[info]                  ·gc.alloc.rate:               439,304 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,566 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 512,377 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   3: 1577954,843 ops/s
[info]                  ·gc.alloc.rate:      441,099 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1572593,583 ops/s
[info]                  ·gc.alloc.rate:                   439,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,798 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     675,305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,127 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1574388,855 ops/s
[info]                  ·gc.alloc.rate:                   440,107 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     674,520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   1574094,093 ±(99.9%) 9568,682 ops/s [Average]
[info]   (min, avg, max) = (1571364,503, 1574094,093, 1577954,843), stdev = 2484,956
[info]   CI (99.9%): [1564525,411, 1583662,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   440,044 ±(99.9%) 2,586 MB/sec [Average]
[info]   (min, avg, max) = (439,304, 440,044, 441,099), stdev = 0,672
[info]   CI (99.9%): [437,458, 442,630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,512 ±(99.9%) 1068,661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,512, 674,798), stdev = 277,528
[info]   CI (99.9%): [≈ 0, 1543,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   474,733 ±(99.9%) 1068,999 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 474,733, 675,305), stdev = 277,616
[info]   CI (99.9%): [≈ 0, 1543,733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,643 ±(99.9%) 5,342 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,124), stdev = 1,387
[info]   CI (99.9%): [≈ 0, 5,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,643 ±(99.9%) 5,346 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,127), stdev = 1,388
[info]   CI (99.9%): [≈ 0, 5,990] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 80,12% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1522328,201 ops/s
[info] # Warmup Iteration   2: 1590022,700 ops/s
[info] # Warmup Iteration   3: 1575301,754 ops/s
[info] # Warmup Iteration   4: 1571656,109 ops/s
[info] # Warmup Iteration   5: 1576149,146 ops/s
[info] Iteration   1: 1579867,657 ops/s
[info]                  ·gc.alloc.rate:      16,061 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1575218,621 ops/s
[info]                  ·gc.alloc.rate:      16,014 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1565785,593 ops/s
[info]                  ·gc.alloc.rate:      15,917 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1548195,972 ops/s
[info]                  ·gc.alloc.rate:      15,740 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1579028,147 ops/s
[info]                  ·gc.alloc.rate:      16,051 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   1569619,198 ±(99.9%) 50886,953 ops/s [Average]
[info]   (min, avg, max) = (1548195,972, 1569619,198, 1579867,657), stdev = 13215,180
[info]   CI (99.9%): [1518732,245, 1620506,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   15,957 ±(99.9%) 0,514 MB/sec [Average]
[info]   (min, avg, max) = (15,740, 15,957, 16,061), stdev = 0,133
[info]   CI (99.9%): [15,443, 16,471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,000, 16,000, 16,000), stdev = 0,001
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,32% complete, ETA 00:26:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29261,471 ops/s
[info] # Warmup Iteration   2: 50413,216 ops/s
[info] # Warmup Iteration   3: 50477,983 ops/s
[info] # Warmup Iteration   4: 50295,140 ops/s
[info] # Warmup Iteration   5: 50234,426 ops/s
[info] Iteration   1: 50174,356 ops/s
[info]                  ·gc.alloc.rate:                   2114,558 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,607 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63757,416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,959 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 50298,674 ops/s
[info]                  ·gc.alloc.rate:                   2119,838 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,113 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63645,751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,954 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 50238,218 ops/s
[info]                  ·gc.alloc.rate:                   2116,983 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,344 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85075,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,956 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 50312,587 ops/s
[info]                  ·gc.alloc.rate:                   2120,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,637 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     63768,840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,651 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 49856,522 ops/s
[info]                  ·gc.alloc.rate:               2101,068 MB/sec
[info]                  ·gc.alloc.rate.norm:          66328,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2039,804 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 64393,992 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   50176,071 ±(99.9%) 719,476 ops/s [Average]
[info]   (min, avg, max) = (49856,522, 50176,071, 50312,587), stdev = 186,846
[info]   CI (99.9%): [49456,596, 50895,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2114,580 ±(99.9%) 30,471 MB/sec [Average]
[info]   (min, avg, max) = (2101,068, 2114,580, 2120,452), stdev = 7,913
[info]   CI (99.9%): [2084,109, 2145,050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66328,008 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (66328,008, 66328,008, 66328,009), stdev = 0,001
[info]   CI (99.9%): [66328,007, 66328,009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2172,101 ±(99.9%) 1169,429 MB/sec [Average]
[info]   (min, avg, max) = (2032,607, 2172,101, 2715,344), stdev = 303,697
[info]   CI (99.9%): [1002,672, 3341,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   68128,302 ±(99.9%) 36497,713 B/op [Average]
[info]   (min, avg, max) = (63645,751, 68128,302, 85075,509), stdev = 9478,340
[info]   CI (99.9%): [31630,589, 104626,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,304 ±(99.9%) 3,552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,304, 1,959), stdev = 0,922
[info]   CI (99.9%): [≈ 0, 4,856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,52% complete, ETA 00:25:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 277856,723 ops/s
[info] # Warmup Iteration   2: 299256,346 ops/s
[info] # Warmup Iteration   3: 298237,071 ops/s
[info] # Warmup Iteration   4: 299987,911 ops/s
[info] # Warmup Iteration   5: 300220,917 ops/s
[info] Iteration   1: 299824,359 ops/s
[info]                  ·gc.alloc.rate:               1173,459 MB/sec
[info]                  ·gc.alloc.rate.norm:          6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 3527,898 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 300574,292 ops/s
[info]                  ·gc.alloc.rate:                   1176,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,209 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7038,827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,327 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 299831,503 ops/s
[info]                  ·gc.alloc.rate:                   1173,399 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7055,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,219 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 298553,677 ops/s
[info]                  ·gc.alloc.rate:                   1168,611 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7089,386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,110 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 300774,591 ops/s
[info]                  ·gc.alloc.rate:                   1177,039 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,638 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3520,232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,218 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   299911,684 ±(99.9%) 3357,959 ops/s [Average]
[info]   (min, avg, max) = (298553,677, 299911,684, 300774,591), stdev = 872,051
[info]   CI (99.9%): [296553,725, 303269,643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1173,777 ±(99.9%) 12,820 MB/sec [Average]
[info]   (min, avg, max) = (1168,611, 1173,777, 1177,039), stdev = 3,329
[info]   CI (99.9%): [1160,957, 1186,597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6160,001, 6160,001, 6160,001), stdev = 0,001
[info]   CI (99.9%): [6160,001, 6160,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1075,568 ±(99.9%) 1417,387 MB/sec [Average]
[info]   (min, avg, max) = (672,052, 1075,568, 1344,924), stdev = 368,091
[info]   CI (99.9%): [≈ 0, 2492,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5646,409 ±(99.9%) 7460,675 B/op [Average]
[info]   (min, avg, max) = (3520,232, 5646,409, 7089,386), stdev = 1937,514
[info]   CI (99.9%): [≈ 0, 13107,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,175 ±(99.9%) 0,478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,175, 0,327), stdev = 0,124
[info]   CI (99.9%): [≈ 0, 0,653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80,72% complete, ETA 00:25:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16040,746 ops/s
[info] # Warmup Iteration   2: 31106,982 ops/s
[info] # Warmup Iteration   3: 31260,883 ops/s
[info] # Warmup Iteration   4: 31157,268 ops/s
[info] # Warmup Iteration   5: 31378,197 ops/s
[info] Iteration   1: 31295,105 ops/s
[info]                  ·gc.alloc.rate:                   1708,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,489 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102070,509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,047 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 31185,600 ops/s
[info]                  ·gc.alloc.rate:                   1702,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,088 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68338,623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,050 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 31293,219 ops/s
[info]                  ·gc.alloc.rate:                   1708,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102274,768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,141 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 31093,191 ops/s
[info]                  ·gc.alloc.rate:                   1697,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              85920,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     68677,834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 31012,818 ops/s
[info]                  ·gc.alloc.rate:               1692,809 MB/sec
[info]                  ·gc.alloc.rate.norm:          85920,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2035,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 103333,124 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   31175,987 ±(99.9%) 477,480 ops/s [Average]
[info]   (min, avg, max) = (31012,818, 31175,987, 31295,105), stdev = 124,000
[info]   CI (99.9%): [30698,507, 31653,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1701,875 ±(99.9%) 26,079 MB/sec [Average]
[info]   (min, avg, max) = (1692,809, 1701,875, 1708,366), stdev = 6,773
[info]   CI (99.9%): [1675,796, 1727,954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   85920,013 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (85920,013, 85920,013, 85920,014), stdev = 0,001
[info]   CI (99.9%): [85920,012, 85920,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1761,941 ±(99.9%) 1428,778 MB/sec [Average]
[info]   (min, avg, max) = (1354,088, 1761,941, 2035,885), stdev = 371,049
[info]   CI (99.9%): [333,164, 3190,719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   88938,972 ±(99.9%) 71842,130 B/op [Average]
[info]   (min, avg, max) = (68338,623, 88938,972, 103333,124), stdev = 18657,173
[info]   CI (99.9%): [17096,841, 160781,102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,258 ±(99.9%) 4,414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,258, 3,141), stdev = 1,146
[info]   CI (99.9%): [≈ 0, 5,672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   13,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80,92% complete, ETA 00:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 94303,003 ops/s
[info] # Warmup Iteration   2: 148054,591 ops/s
[info] # Warmup Iteration   3: 148468,818 ops/s
[info] # Warmup Iteration   4: 148231,278 ops/s
[info] # Warmup Iteration   5: 148154,823 ops/s
[info] Iteration   1: 148244,696 ops/s
[info]                  ·gc.alloc.rate:                   1811,388 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21561,146 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,663 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 148636,022 ops/s
[info]                  ·gc.alloc.rate:                   1816,827 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,473 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21525,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,661 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 147942,016 ops/s
[info]                  ·gc.alloc.rate:                   1807,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14428,612 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,221 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 147075,012 ops/s
[info]                  ·gc.alloc.rate:                   1797,324 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21793,804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,445 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 148424,229 ops/s
[info]                  ·gc.alloc.rate:                   1813,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              19232,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21609,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,662 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   148064,395 ±(99.9%) 2344,313 ops/s [Average]
[info]   (min, avg, max) = (147075,012, 148064,395, 148636,022), stdev = 608,811
[info]   CI (99.9%): [145720,082, 150408,708] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1809,359 ±(99.9%) 28,874 MB/sec [Average]
[info]   (min, avg, max) = (1797,324, 1809,359, 1816,827), stdev = 7,498
[info]   CI (99.9%): [1780,485, 1838,233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (19232,003, 19232,003, 19232,003), stdev = 0,001
[info]   CI (99.9%): [19232,002, 19232,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1898,992 ±(99.9%) 1168,408 MB/sec [Average]
[info]   (min, avg, max) = (1356,219, 1898,992, 2037,770), stdev = 303,432
[info]   CI (99.9%): [730,584, 3067,400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   20183,753 ±(99.9%) 12394,763 B/op [Average]
[info]   (min, avg, max) = (14428,612, 20183,753, 21793,804), stdev = 3218,881
[info]   CI (99.9%): [7788,990, 32578,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,062), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,531 ±(99.9%) 0,757 B/op [Average]
[info]   (min, avg, max) = (0,221, 0,531, 0,663), stdev = 0,197
[info]   CI (99.9%): [≈ 0, 1,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,12% complete, ETA 00:25:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367095,780 ops/s
[info] # Warmup Iteration   2: 391427,738 ops/s
[info] # Warmup Iteration   3: 391475,661 ops/s
[info] # Warmup Iteration   4: 390845,969 ops/s
[info] # Warmup Iteration   5: 391752,263 ops/s
[info] Iteration   1: 388658,260 ops/s
[info]                  ·gc.alloc.rate:                   1851,073 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8170,211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 391580,776 ops/s
[info]                  ·gc.alloc.rate:                   1864,979 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,813 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5413,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,335 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 390870,988 ops/s
[info]                  ·gc.alloc.rate:                   1861,534 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,794 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8145,358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,251 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 390758,261 ops/s
[info]                  ·gc.alloc.rate:                   1861,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8158,527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,168 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 387456,960 ops/s
[info]                  ·gc.alloc.rate:                   1845,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              7496,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,548 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8241,569 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   389865,049 ±(99.9%) 6671,926 ops/s [Average]
[info]   (min, avg, max) = (387456,960, 389865,049, 391580,776), stdev = 1732,678
[info]   CI (99.9%): [383193,123, 396536,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1856,767 ±(99.9%) 32,214 MB/sec [Average]
[info]   (min, avg, max) = (1845,037, 1856,767, 1864,979), stdev = 8,366
[info]   CI (99.9%): [1824,554, 1888,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7496,001, 7496,001, 7496,001), stdev = 0,001
[info]   CI (99.9%): [7496,001, 7496,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1888,287 ±(99.9%) 1165,669 MB/sec [Average]
[info]   (min, avg, max) = (1346,813, 1888,287, 2028,548), stdev = 302,721
[info]   CI (99.9%): [722,618, 3053,956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   7625,795 ±(99.9%) 4764,696 B/op [Average]
[info]   (min, avg, max) = (5413,311, 7625,795, 8241,569), stdev = 1237,376
[info]   CI (99.9%): [2861,099, 12390,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,218 ±(99.9%) 0,367 B/op [Average]
[info]   (min, avg, max) = (0,085, 0,218, 0,335), stdev = 0,095
[info]   CI (99.9%): [≈ 0, 0,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81,33% complete, ETA 00:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 423808,633 ops/s
[info] # Warmup Iteration   2: 458137,472 ops/s
[info] # Warmup Iteration   3: 462338,541 ops/s
[info] # Warmup Iteration   4: 460381,310 ops/s
[info] # Warmup Iteration   5: 461151,088 ops/s
[info] Iteration   1: 460902,587 ops/s
[info]                  ·gc.alloc.rate:                   1578,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,198 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4590,427 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 458864,921 ops/s
[info]                  ·gc.alloc.rate:               1572,083 MB/sec
[info]                  ·gc.alloc.rate.norm:          5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,999 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4613,138 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 463002,237 ops/s
[info]                  ·gc.alloc.rate:                   1586,202 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2019,537 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6865,040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,212 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 459651,222 ops/s
[info]                  ·gc.alloc.rate:                   1574,841 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,272 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4616,263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,143 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 460756,680 ops/s
[info]                  ·gc.alloc.rate:                   1578,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              5392,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,425 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4609,815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,142 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   460635,529 ±(99.9%) 6024,509 ops/s [Average]
[info]   (min, avg, max) = (458864,921, 460635,529, 463002,237), stdev = 1564,546
[info]   CI (99.9%): [454611,020, 466660,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1578,088 ±(99.9%) 20,488 MB/sec [Average]
[info]   (min, avg, max) = (1572,083, 1578,088, 1586,202), stdev = 5,321
[info]   CI (99.9%): [1557,600, 1598,576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5392,001, 5392,001, 5392,001), stdev = 0,001
[info]   CI (99.9%): [5392,001, 5392,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   1481,286 ±(99.9%) 1158,655 MB/sec [Average]
[info]   (min, avg, max) = (1344,198, 1481,286, 2019,537), stdev = 300,899
[info]   CI (99.9%): [322,631, 2639,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   5058,937 ±(99.9%) 3887,967 B/op [Average]
[info]   (min, avg, max) = (4590,427, 5058,937, 6865,040), stdev = 1009,693
[info]   CI (99.9%): [1170,970, 8946,904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,128 ±(99.9%) 0,299 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,128, 0,212), stdev = 0,078
[info]   CI (99.9%): [≈ 0, 0,427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81,53% complete, ETA 00:24:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14112,197 ops/s
[info] # Warmup Iteration   2: 21898,459 ops/s
[info] # Warmup Iteration   3: 21784,424 ops/s
[info] # Warmup Iteration   4: 21897,235 ops/s
[info] # Warmup Iteration   5: 21613,728 ops/s
[info] Iteration   1: 21872,884 ops/s
[info]                  ·gc.alloc.rate:      548,905 MB/sec
[info]                  ·gc.alloc.rate.norm: 39497,520 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 21944,093 ops/s
[info]                  ·gc.alloc.rate:                   550,653 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48368,255 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19,407 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 21980,983 ops/s
[info]                  ·gc.alloc.rate:               551,609 MB/sec
[info]                  ·gc.alloc.rate.norm:          39496,019 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,383 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48286,860 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 21927,912 ops/s
[info]                  ·gc.alloc.rate:                   550,254 MB/sec
[info]                  ·gc.alloc.rate.norm:              39496,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,080 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     48455,762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,988 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 22008,973 ops/s
[info]                  ·gc.alloc.rate:               552,236 MB/sec
[info]                  ·gc.alloc.rate.norm:          39496,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,957 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 48273,076 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   21946,969 ±(99.9%) 200,655 ops/s [Average]
[info]   (min, avg, max) = (21872,884, 21946,969, 22008,973), stdev = 52,109
[info]   CI (99.9%): [21746,314, 22147,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   550,731 ±(99.9%) 4,947 MB/sec [Average]
[info]   (min, avg, max) = (548,905, 550,731, 552,236), stdev = 1,285
[info]   CI (99.9%): [545,784, 555,679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   39496,319 ±(99.9%) 2,584 B/op [Average]
[info]   (min, avg, max) = (39496,019, 39496,319, 39497,520), stdev = 0,671
[info]   CI (99.9%): [39493,736, 39498,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   539,754 ±(99.9%) 1161,862 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,754, 675,080), stdev = 301,732
[info]   CI (99.9%): [≈ 0, 1701,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   38676,791 ±(99.9%) 83255,184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38676,791, 48455,762), stdev = 21621,107
[info]   CI (99.9%): [≈ 0, 121931,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,453 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,062, 0,271), stdev = 0,118
[info]   CI (99.9%): [≈ 0, 0,516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4,479 ±(99.9%) 32,518 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4,479, 19,407), stdev = 8,445
[info]   CI (99.9%): [≈ 0, 36,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81,73% complete, ETA 00:24:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75641,833 ops/s
[info] # Warmup Iteration   2: 91840,547 ops/s
[info] # Warmup Iteration   3: 91931,985 ops/s
[info] # Warmup Iteration   4: 92161,799 ops/s
[info] # Warmup Iteration   5: 92553,776 ops/s
[info] Iteration   1: 92491,209 ops/s
[info]                  ·gc.alloc.rate:                   1911,149 MB/sec
[info]                  ·gc.alloc.rate.norm:              32520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34333,644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,354 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 91760,699 ops/s
[info]                  ·gc.alloc.rate:                   1895,944 MB/sec
[info]                  ·gc.alloc.rate.norm:              32520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23090,700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,714 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 92896,562 ops/s
[info]                  ·gc.alloc.rate:                   1919,242 MB/sec
[info]                  ·gc.alloc.rate.norm:              32520,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,665 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34272,426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,705 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 92408,836 ops/s
[info]                  ·gc.alloc.rate:                   1909,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              32520,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34498,005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,355 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 92447,086 ops/s
[info]                  ·gc.alloc.rate:               1909,914 MB/sec
[info]                  ·gc.alloc.rate.norm:          32520,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2028,580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 34540,527 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   92400,878 ±(99.9%) 1571,103 ops/s [Average]
[info]   (min, avg, max) = (91760,699, 92400,878, 92896,562), stdev = 408,010
[info]   CI (99.9%): [90829,776, 93971,981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1909,151 ±(99.9%) 32,271 MB/sec [Average]
[info]   (min, avg, max) = (1895,944, 1909,151, 1919,242), stdev = 8,381
[info]   CI (99.9%): [1876,880, 1941,422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32520,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32520,004, 32520,005, 32520,005), stdev = 0,001
[info]   CI (99.9%): [32520,004, 32520,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1888,167 ±(99.9%) 1166,711 MB/sec [Average]
[info]   (min, avg, max) = (1346,207, 1888,167, 2028,580), stdev = 302,991
[info]   CI (99.9%): [721,456, 3054,878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   32147,060 ±(99.9%) 19499,207 B/op [Average]
[info]   (min, avg, max) = (23090,700, 32147,060, 34540,527), stdev = 5063,882
[info]   CI (99.9%): [12647,853, 51646,267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,426 ±(99.9%) 1,143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,426, 0,714), stdev = 0,297
[info]   CI (99.9%): [≈ 0, 1,569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81,93% complete, ETA 00:24:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86436,770 ops/s
[info] # Warmup Iteration   2: 144166,612 ops/s
[info] # Warmup Iteration   3: 144418,701 ops/s
[info] # Warmup Iteration   4: 143860,396 ops/s
[info] # Warmup Iteration   5: 144195,310 ops/s
[info] Iteration   1: 144272,244 ops/s
[info]                  ·gc.alloc.rate:                   713,525 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7357,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,227 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 144640,200 ops/s
[info]                  ·gc.alloc.rate:               715,381 MB/sec
[info]                  ·gc.alloc.rate.norm:          7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,155 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7346,309 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 144302,728 ops/s
[info]                  ·gc.alloc.rate:               713,618 MB/sec
[info]                  ·gc.alloc.rate.norm:          7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7362,902 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 143847,590 ops/s
[info]                  ·gc.alloc.rate:                   711,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7392,805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,683 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 143931,485 ops/s
[info]                  ·gc.alloc.rate:               711,762 MB/sec
[info]                  ·gc.alloc.rate.norm:          7784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,649 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7389,057 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   144198,849 ±(99.9%) 1226,529 ops/s [Average]
[info]   (min, avg, max) = (143847,590, 144198,849, 144640,200), stdev = 318,526
[info]   CI (99.9%): [142972,320, 145425,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   713,153 ±(99.9%) 6,105 MB/sec [Average]
[info]   (min, avg, max) = (711,480, 713,153, 715,381), stdev = 1,585
[info]   CI (99.9%): [707,049, 719,258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7784,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7784,003, 7784,003, 7784,003), stdev = 0,001
[info]   CI (99.9%): [7784,002, 7784,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,189 ±(99.9%) 2,061 MB/sec [Average]
[info]   (min, avg, max) = (674,403, 675,189, 675,723), stdev = 0,535
[info]   CI (99.9%): [673,127, 677,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7369,658 ±(99.9%) 78,390 B/op [Average]
[info]   (min, avg, max) = (7346,309, 7369,658, 7392,805), stdev = 20,358
[info]   CI (99.9%): [7291,268, 7448,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,182 ±(99.9%) 1,143 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,182, 0,683), stdev = 0,297
[info]   CI (99.9%): [≈ 0, 1,325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,13% complete, ETA 00:23:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204812,671 ops/s
[info] # Warmup Iteration   2: 224637,239 ops/s
[info] # Warmup Iteration   3: 224589,648 ops/s
[info] # Warmup Iteration   4: 224821,835 ops/s
[info] # Warmup Iteration   5: 224692,727 ops/s
[info] Iteration   1: 225402,436 ops/s
[info]                  ·gc.alloc.rate:               928,223 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,884 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4697,463 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 221760,984 ops/s
[info]                  ·gc.alloc.rate:                   913,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9545,231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,443 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 225061,911 ops/s
[info]                  ·gc.alloc.rate:               926,448 MB/sec
[info]                  ·gc.alloc.rate.norm:          6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4699,900 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 224738,316 ops/s
[info]                  ·gc.alloc.rate:                   925,296 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,102 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4706,841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,292 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 225671,974 ops/s
[info]                  ·gc.alloc.rate:                   928,935 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9374,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,290 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   224527,125 ±(99.9%) 6106,331 ops/s [Average]
[info]   (min, avg, max) = (221760,984, 224527,125, 225671,974), stdev = 1585,795
[info]   CI (99.9%): [218420,793, 230633,456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   924,399 ±(99.9%) 24,956 MB/sec [Average]
[info]   (min, avg, max) = (913,093, 924,399, 928,935), stdev = 6,481
[info]   CI (99.9%): [899,443, 949,355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6480,002, 6480,002, 6480,002), stdev = 0,001
[info]   CI (99.9%): [6480,001, 6480,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,169 ±(99.9%) 1417,613 MB/sec [Average]
[info]   (min, avg, max) = (671,946, 941,169, 1345,013), stdev = 368,150
[info]   CI (99.9%): [≈ 0, 2358,782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6604,824 ±(99.9%) 10038,895 B/op [Average]
[info]   (min, avg, max) = (4697,463, 6604,824, 9545,231), stdev = 2607,069
[info]   CI (99.9%): [≈ 0, 16643,720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,028
[info]   CI (99.9%): [≈ 0, 0,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,205 ±(99.9%) 0,759 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,205, 0,443), stdev = 0,197
[info]   CI (99.9%): [≈ 0, 0,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82,33% complete, ETA 00:23:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9763,282 ops/s
[info] # Warmup Iteration   2: 19934,323 ops/s
[info] # Warmup Iteration   3: 20001,062 ops/s
[info] # Warmup Iteration   4: 19946,306 ops/s
[info] # Warmup Iteration   5: 20089,317 ops/s
[info] Iteration   1: 20115,718 ops/s
[info]                  ·gc.alloc.rate:                   1151,629 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104,027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,760 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     52871,787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,257 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 20153,792 ops/s
[info]                  ·gc.alloc.rate:                   1153,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105570,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,626 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 20139,372 ops/s
[info]                  ·gc.alloc.rate:                   1152,902 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105716,449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,627 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 20064,135 ops/s
[info]                  ·gc.alloc.rate:               1148,717 MB/sec
[info]                  ·gc.alloc.rate.norm:          90104,022 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 53081,874 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 20129,494 ops/s
[info]                  ·gc.alloc.rate:                   1152,285 MB/sec
[info]                  ·gc.alloc.rate.norm:              90104,020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,946 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     105873,107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,882 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   20120,502 ±(99.9%) 132,627 ops/s [Average]
[info]   (min, avg, max) = (20064,135, 20120,502, 20153,792), stdev = 34,443
[info]   CI (99.9%): [19987,875, 20253,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1151,893 ±(99.9%) 7,577 MB/sec [Average]
[info]   (min, avg, max) = (1148,717, 1151,893, 1153,932), stdev = 1,968
[info]   CI (99.9%): [1144,316, 1159,470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   90104,022 ±(99.9%) 0,011 B/op [Average]
[info]   (min, avg, max) = (90104,020, 90104,022, 90104,027), stdev = 0,003
[info]   CI (99.9%): [90104,011, 90104,033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1082,221 ±(99.9%) 1427,067 MB/sec [Average]
[info]   (min, avg, max) = (675,760, 1082,221, 1353,946), stdev = 370,605
[info]   CI (99.9%): [≈ 0, 2509,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84622,692 ±(99.9%) 111240,795 B/op [Average]
[info]   (min, avg, max) = (52871,787, 84622,692, 105873,107), stdev = 28888,881
[info]   CI (99.9%): [≈ 0, 195863,487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,278 ±(99.9%) 7,147 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,278, 4,882), stdev = 1,856
[info]   CI (99.9%): [≈ 0, 9,425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,53% complete, ETA 00:23:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120797,791 ops/s
[info] # Warmup Iteration   2: 192311,079 ops/s
[info] # Warmup Iteration   3: 192955,596 ops/s
[info] # Warmup Iteration   4: 192685,642 ops/s
[info] # Warmup Iteration   5: 192243,946 ops/s
[info] Iteration   1: 189627,711 ops/s
[info]                  ·gc.alloc.rate:                   1220,276 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,853 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11211,760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,346 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 192026,158 ops/s
[info]                  ·gc.alloc.rate:                   1235,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11082,408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,853 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 192335,457 ops/s
[info]                  ·gc.alloc.rate:               1237,682 MB/sec
[info]                  ·gc.alloc.rate.norm:          10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1352,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 11069,943 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 192846,318 ops/s
[info]                  ·gc.alloc.rate:                   1241,064 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11051,604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,510 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 192604,765 ops/s
[info]                  ·gc.alloc.rate:               1239,279 MB/sec
[info]                  ·gc.alloc.rate.norm:          10128,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      677,325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 5535,436 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   191888,082 ±(99.9%) 5005,963 ops/s [Average]
[info]   (min, avg, max) = (189627,711, 191888,082, 192846,318), stdev = 1300,033
[info]   CI (99.9%): [186882,119, 196894,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1234,782 ±(99.9%) 32,170 MB/sec [Average]
[info]   (min, avg, max) = (1220,276, 1234,782, 1241,064), stdev = 8,354
[info]   CI (99.9%): [1202,612, 1266,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10128,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10128,002, 10128,002, 10128,002), stdev = 0,001
[info]   CI (99.9%): [10128,002, 10128,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,451 ±(99.9%) 1162,671 MB/sec [Average]
[info]   (min, avg, max) = (677,325, 1217,451, 1354,240), stdev = 301,942
[info]   CI (99.9%): [54,780, 2380,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9990,231 ±(99.9%) 9592,369 B/op [Average]
[info]   (min, avg, max) = (5535,436, 9990,231, 11211,760), stdev = 2491,108
[info]   CI (99.9%): [397,861, 19582,600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,044
[info]   CI (99.9%): [≈ 0, 0,212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,342 ±(99.9%) 1,393 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,342, 0,853), stdev = 0,362
[info]   CI (99.9%): [≈ 0, 1,734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,600, 5,000), stdev = 1,949
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82,73% complete, ETA 00:22:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 550768,101 ops/s
[info] # Warmup Iteration   2: 568529,986 ops/s
[info] # Warmup Iteration   3: 572132,192 ops/s
[info] # Warmup Iteration   4: 579210,974 ops/s
[info] # Warmup Iteration   5: 578103,836 ops/s
[info] Iteration   1: 576832,357 ops/s
[info]                  ·gc.alloc.rate:                   641,940 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,630 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1841,217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8,474 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 582936,302 ops/s
[info]                  ·gc.alloc.rate:                   648,903 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,812 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1821,953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,169 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 580758,295 ops/s
[info]                  ·gc.alloc.rate:               646,447 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1823,359 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 582749,328 ops/s
[info]                  ·gc.alloc.rate:               648,716 MB/sec
[info]                  ·gc.alloc.rate.norm:          1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1817,009 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 580933,159 ops/s
[info]                  ·gc.alloc.rate:                   646,594 MB/sec
[info]                  ·gc.alloc.rate.norm:              1752,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1820,899 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,113 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   580841,888 ±(99.9%) 9454,989 ops/s [Average]
[info]   (min, avg, max) = (576832,357, 580841,888, 582936,302), stdev = 2455,431
[info]   CI (99.9%): [571386,899, 590296,877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   646,520 ±(99.9%) 10,803 MB/sec [Average]
[info]   (min, avg, max) = (641,940, 646,520, 648,903), stdev = 2,806
[info]   CI (99.9%): [635,717, 657,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1752,001, 1752,001, 1752,001), stdev = 0,001
[info]   CI (99.9%): [1752,001, 1752,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,405 ±(99.9%) 4,782 MB/sec [Average]
[info]   (min, avg, max) = (672,022, 673,405, 674,812), stdev = 1,242
[info]   CI (99.9%): [668,623, 678,188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1824,887 ±(99.9%) 36,306 B/op [Average]
[info]   (min, avg, max) = (1817,009, 1824,887, 1841,217), stdev = 9,429
[info]   CI (99.9%): [1788,581, 1861,194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,642 ±(99.9%) 5,303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,642, 3,105), stdev = 1,377
[info]   CI (99.9%): [≈ 0, 5,945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,751 ±(99.9%) 14,475 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,751, 8,474), stdev = 3,759
[info]   CI (99.9%): [≈ 0, 16,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 82,93% complete, ETA 00:22:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 582301,973 ops/s
[info] # Warmup Iteration   2: 607134,108 ops/s
[info] # Warmup Iteration   3: 604632,223 ops/s
[info] # Warmup Iteration   4: 603215,496 ops/s
[info] # Warmup Iteration   5: 603672,956 ops/s
[info] Iteration   1: 604185,584 ops/s
[info]                  ·gc.alloc.rate:      12,284 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 604265,585 ops/s
[info]                  ·gc.alloc.rate:      12,286 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 605956,201 ops/s
[info]                  ·gc.alloc.rate:      12,320 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 605305,855 ops/s
[info]                  ·gc.alloc.rate:      12,309 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 604037,438 ops/s
[info]                  ·gc.alloc.rate:      12,283 MB/sec
[info]                  ·gc.alloc.rate.norm: 32,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   604750,133 ±(99.9%) 3235,952 ops/s [Average]
[info]   (min, avg, max) = (604037,438, 604750,133, 605956,201), stdev = 840,366
[info]   CI (99.9%): [601514,181, 607986,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12,296 ±(99.9%) 0,065 MB/sec [Average]
[info]   (min, avg, max) = (12,283, 12,296, 12,320), stdev = 0,017
[info]   CI (99.9%): [12,231, 12,361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32,001, 32,001, 32,001), stdev = 0,001
[info]   CI (99.9%): [32,001, 32,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,13% complete, ETA 00:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37521,108 ops/s
[info] # Warmup Iteration   2: 61732,108 ops/s
[info] # Warmup Iteration   3: 63482,813 ops/s
[info] # Warmup Iteration   4: 63887,750 ops/s
[info] # Warmup Iteration   5: 63753,483 ops/s
[info] Iteration   1: 63593,926 ops/s
[info]                  ·gc.alloc.rate:               1302,076 MB/sec
[info]                  ·gc.alloc.rate.norm:          32224,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1351,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33448,531 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 63774,598 ops/s
[info]                  ·gc.alloc.rate:                   1305,809 MB/sec
[info]                  ·gc.alloc.rate.norm:              32224,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,937 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33387,020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,514 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 63815,367 ops/s
[info]                  ·gc.alloc.rate:               1306,515 MB/sec
[info]                  ·gc.alloc.rate.norm:          32224,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,701 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 16690,217 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 63459,286 ops/s
[info]                  ·gc.alloc.rate:                   1299,288 MB/sec
[info]                  ·gc.alloc.rate.norm:              32224,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,152 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     33584,696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,032 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 63970,531 ops/s
[info]                  ·gc.alloc.rate:               1309,590 MB/sec
[info]                  ·gc.alloc.rate.norm:          32224,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 33349,777 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   63722,742 ±(99.9%) 766,922 ops/s [Average]
[info]   (min, avg, max) = (63459,286, 63722,742, 63970,531), stdev = 199,167
[info]   CI (99.9%): [62955,820, 64489,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1304,656 ±(99.9%) 15,475 MB/sec [Average]
[info]   (min, avg, max) = (1299,288, 1304,656, 1309,590), stdev = 4,019
[info]   CI (99.9%): [1289,181, 1320,131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32224,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32224,006, 32224,007, 32224,007), stdev = 0,001
[info]   CI (99.9%): [32224,006, 32224,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1218,138 ±(99.9%) 1165,495 MB/sec [Average]
[info]   (min, avg, max) = (676,701, 1218,138, 1355,342), stdev = 302,675
[info]   CI (99.9%): [52,642, 2383,633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   30092,048 ±(99.9%) 28850,505 B/op [Average]
[info]   (min, avg, max) = (16690,217, 30092,048, 33584,696), stdev = 7492,384
[info]   CI (99.9%): [1241,544, 58942,553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,309 ±(99.9%) 1,777 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,309, 1,032), stdev = 0,461
[info]   CI (99.9%): [≈ 0, 2,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83,33% complete, ETA 00:22:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76231,407 ops/s
[info] # Warmup Iteration   2: 88105,949 ops/s
[info] # Warmup Iteration   3: 89528,924 ops/s
[info] # Warmup Iteration   4: 90434,046 ops/s
[info] # Warmup Iteration   5: 85429,583 ops/s
[info] Iteration   1: 89320,251 ops/s
[info]                  ·gc.alloc.rate:                   1561,003 MB/sec
[info]                  ·gc.alloc.rate.norm:              27504,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35529,631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 90573,734 ops/s
[info]                  ·gc.alloc.rate:               1582,651 MB/sec
[info]                  ·gc.alloc.rate.norm:          27504,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23370,369 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 90067,795 ops/s
[info]                  ·gc.alloc.rate:                   1573,861 MB/sec
[info]                  ·gc.alloc.rate.norm:              27504,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,714 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23517,014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,727 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 90435,274 ops/s
[info]                  ·gc.alloc.rate:                   1580,432 MB/sec
[info]                  ·gc.alloc.rate.norm:              27504,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2021,273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35175,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,811 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 90692,311 ops/s
[info]                  ·gc.alloc.rate:                   1584,731 MB/sec
[info]                  ·gc.alloc.rate.norm:              27504,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,380 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23419,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,361 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   90217,873 ±(99.9%) 2132,888 ops/s [Average]
[info]   (min, avg, max) = (89320,251, 90217,873, 90692,311), stdev = 553,904
[info]   CI (99.9%): [88084,984, 92350,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1576,536 ±(99.9%) 36,942 MB/sec [Average]
[info]   (min, avg, max) = (1561,003, 1576,536, 1584,731), stdev = 9,594
[info]   CI (99.9%): [1539,594, 1613,478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27504,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (27504,004, 27504,005, 27504,005), stdev = 0,001
[info]   CI (99.9%): [27504,004, 27504,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   1615,532 ±(99.9%) 1417,881 MB/sec [Average]
[info]   (min, avg, max) = (1344,791, 1615,532, 2021,273), stdev = 368,219
[info]   CI (99.9%): [197,651, 3033,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28202,445 ±(99.9%) 25139,771 B/op [Average]
[info]   (min, avg, max) = (23370,369, 28202,445, 35529,631), stdev = 6528,719
[info]   CI (99.9%): [3062,673, 53342,216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,800 ±(99.9%) 2,689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,811), stdev = 0,698
[info]   CI (99.9%): [≈ 0, 3,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,53% complete, ETA 00:21:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102847,423 ops/s
[info] # Warmup Iteration   2: 161411,902 ops/s
[info] # Warmup Iteration   3: 160845,147 ops/s
[info] # Warmup Iteration   4: 161624,419 ops/s
[info] # Warmup Iteration   5: 161928,568 ops/s
[info] Iteration   1: 161476,021 ops/s
[info]                  ·gc.alloc.rate:               686,057 MB/sec
[info]                  ·gc.alloc.rate.norm:          6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,284 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6573,239 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 161498,580 ops/s
[info]                  ·gc.alloc.rate:                   686,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6579,568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,203 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 161457,388 ops/s
[info]                  ·gc.alloc.rate:               686,012 MB/sec
[info]                  ·gc.alloc.rate.norm:          6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,061 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6581,238 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 161200,606 ops/s
[info]                  ·gc.alloc.rate:               685,002 MB/sec
[info]                  ·gc.alloc.rate.norm:          6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,408 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6594,327 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 161302,571 ops/s
[info]                  ·gc.alloc.rate:               685,355 MB/sec
[info]                  ·gc.alloc.rate.norm:          6688,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6589,994 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   161387,033 ±(99.9%) 499,102 ops/s [Average]
[info]   (min, avg, max) = (161200,606, 161387,033, 161498,580), stdev = 129,615
[info]   CI (99.9%): [160887,931, 161886,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   685,724 ±(99.9%) 1,991 MB/sec [Average]
[info]   (min, avg, max) = (685,002, 685,724, 686,191), stdev = 0,517
[info]   CI (99.9%): [683,733, 687,714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6688,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (6688,003, 6688,003, 6688,003), stdev = 0,001
[info]   CI (99.9%): [6688,002, 6688,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   675,026 ±(99.9%) 1,701 MB/sec [Average]
[info]   (min, avg, max) = (674,284, 675,026, 675,408), stdev = 0,442
[info]   CI (99.9%): [673,325, 676,727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6583,673 ±(99.9%) 32,510 B/op [Average]
[info]   (min, avg, max) = (6573,239, 6583,673, 6594,327), stdev = 8,443
[info]   CI (99.9%): [6551,163, 6616,183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,004 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,004, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,041 ±(99.9%) 0,349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,041, 0,203), stdev = 0,091
[info]   CI (99.9%): [≈ 0, 0,390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83,73% complete, ETA 00:21:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 223126,196 ops/s
[info] # Warmup Iteration   2: 235601,036 ops/s
[info] # Warmup Iteration   3: 234340,448 ops/s
[info] # Warmup Iteration   4: 236581,479 ops/s
[info] # Warmup Iteration   5: 236711,905 ops/s
[info] Iteration   1: 236188,857 ops/s
[info]                  ·gc.alloc.rate:                   841,559 MB/sec
[info]                  ·gc.alloc.rate.norm:              5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,543 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8979,792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,694 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 237697,424 ops/s
[info]                  ·gc.alloc.rate:               846,936 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,717 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4454,406 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 237496,487 ops/s
[info]                  ·gc.alloc.rate:               846,113 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,994 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4453,948 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 236438,970 ops/s
[info]                  ·gc.alloc.rate:               842,468 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4473,704 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 236556,497 ops/s
[info]                  ·gc.alloc.rate:               842,908 MB/sec
[info]                  ·gc.alloc.rate.norm:          5608,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,148 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 8942,833 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   236875,647 ±(99.9%) 2600,955 ops/s [Average]
[info]   (min, avg, max) = (236188,857, 236875,647, 237697,424), stdev = 675,460
[info]   CI (99.9%): [234274,692, 239476,602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   843,997 ±(99.9%) 9,149 MB/sec [Average]
[info]   (min, avg, max) = (841,559, 843,997, 846,936), stdev = 2,376
[info]   CI (99.9%): [834,847, 853,146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (5608,002, 5608,002, 5608,002), stdev = 0,001
[info]   CI (99.9%): [5608,001, 5608,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,693 ±(99.9%) 1420,658 MB/sec [Average]
[info]   (min, avg, max) = (671,994, 941,693, 1347,543), stdev = 368,940
[info]   CI (99.9%): [≈ 0, 2362,352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6260,937 ±(99.9%) 9492,384 B/op [Average]
[info]   (min, avg, max) = (4453,948, 6260,937, 8979,792), stdev = 2465,142
[info]   CI (99.9%): [≈ 0, 15753,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,104), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,139 ±(99.9%) 1,194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,139, 0,694), stdev = 0,310
[info]   CI (99.9%): [≈ 0, 1,333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83,94% complete, ETA 00:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32169,825 ops/s
[info] # Warmup Iteration   2: 48098,439 ops/s
[info] # Warmup Iteration   3: 47849,652 ops/s
[info] # Warmup Iteration   4: 48247,234 ops/s
[info] # Warmup Iteration   5: 47988,671 ops/s
[info] Iteration   1: 48038,362 ops/s
[info]                  ·gc.alloc.rate:                   1990,840 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,924 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66406,176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,364 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 48111,030 ops/s
[info]                  ·gc.alloc.rate:                   1993,808 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,530 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66392,600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,681 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 48189,484 ops/s
[info]                  ·gc.alloc.rate:               1997,042 MB/sec
[info]                  ·gc.alloc.rate.norm:          65224,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2032,905 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 66395,310 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 48381,851 ops/s
[info]                  ·gc.alloc.rate:                   2005,141 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,617 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44128,557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,677 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 48318,547 ops/s
[info]                  ·gc.alloc.rate:                   2002,154 MB/sec
[info]                  ·gc.alloc.rate.norm:              65224,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,666 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66315,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,678 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   48207,855 ±(99.9%) 547,847 ops/s [Average]
[info]   (min, avg, max) = (48038,362, 48207,855, 48381,851), stdev = 142,274
[info]   CI (99.9%): [47660,008, 48755,702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1997,797 ±(99.9%) 22,601 MB/sec [Average]
[info]   (min, avg, max) = (1990,840, 1997,797, 2005,141), stdev = 5,869
[info]   CI (99.9%): [1975,196, 2020,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65224,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (65224,008, 65224,009, 65224,010), stdev = 0,001
[info]   CI (99.9%): [65224,007, 65224,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1896,328 ±(99.9%) 1161,840 MB/sec [Average]
[info]   (min, avg, max) = (1356,617, 1896,328, 2035,666), stdev = 301,726
[info]   CI (99.9%): [734,488, 3058,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   61927,673 ±(99.9%) 38314,189 B/op [Average]
[info]   (min, avg, max) = (44128,557, 61927,673, 66406,176), stdev = 9950,073
[info]   CI (99.9%): [23613,484, 100241,862] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,680 ±(99.9%) 1,857 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,680, 1,364), stdev = 0,482
[info]   CI (99.9%): [≈ 0, 2,537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 84,14% complete, ETA 00:21:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125253,662 ops/s
[info] # Warmup Iteration   2: 138101,621 ops/s
[info] # Warmup Iteration   3: 138213,480 ops/s
[info] # Warmup Iteration   4: 140546,959 ops/s
[info] # Warmup Iteration   5: 139975,783 ops/s
[info] Iteration   1: 139718,884 ops/s
[info]                  ·gc.alloc.rate:                   1294,654 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,212 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15142,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,234 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 140612,067 ops/s
[info]                  ·gc.alloc.rate:                   1303,135 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,475 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15046,657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,466 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 140538,674 ops/s
[info]                  ·gc.alloc.rate:                   1302,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15053,400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,466 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 140123,661 ops/s
[info]                  ·gc.alloc.rate:                   1298,526 MB/sec
[info]                  ·gc.alloc.rate.norm:              14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,669 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15113,477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,468 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 140218,004 ops/s
[info]                  ·gc.alloc.rate:               1299,149 MB/sec
[info]                  ·gc.alloc.rate.norm:          14584,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,715 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15117,977 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle":
[info]   140242,258 ±(99.9%) 1379,255 ops/s [Average]
[info]   (min, avg, max) = (139718,884, 140242,258, 140612,067), stdev = 358,188
[info]   CI (99.9%): [138863,003, 141621,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1299,542 ±(99.9%) 12,958 MB/sec [Average]
[info]   (min, avg, max) = (1294,654, 1299,542, 1303,135), stdev = 3,365
[info]   CI (99.9%): [1286,584, 1312,500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   14584,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14584,003, 14584,003, 14584,003), stdev = 0,001
[info]   CI (99.9%): [14584,002, 14584,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1345,046 ±(99.9%) 4,298 MB/sec [Average]
[info]   (min, avg, max) = (1344,159, 1345,046, 1346,715), stdev = 1,116
[info]   CI (99.9%): [1340,748, 1349,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   15094,756 ±(99.9%) 163,042 B/op [Average]
[info]   (min, avg, max) = (15046,657, 15094,756, 15142,271), stdev = 42,341
[info]   CI (99.9%): [14931,714, 15257,798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,327 ±(99.9%) 0,803 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,327, 0,468), stdev = 0,209
[info]   CI (99.9%): [≈ 0, 1,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84,34% complete, ETA 00:20:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237990,577 ops/s
[info] # Warmup Iteration   2: 286904,522 ops/s
[info] # Warmup Iteration   3: 289849,456 ops/s
[info] # Warmup Iteration   4: 292511,069 ops/s
[info] # Warmup Iteration   5: 291592,322 ops/s
[info] Iteration   1: 291091,435 ops/s
[info]                  ·gc.alloc.rate:                   1374,552 MB/sec
[info]                  ·gc.alloc.rate.norm:              7432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7260,419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,338 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 291489,546 ops/s
[info]                  ·gc.alloc.rate:                   1376,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              7432,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7250,981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,112 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 290225,673 ops/s
[info]                  ·gc.alloc.rate:               1370,404 MB/sec
[info]                  ·gc.alloc.rate.norm:          7432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1343,448 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7285,816 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 292918,678 ops/s
[info]                  ·gc.alloc.rate:                   1383,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              7432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,887 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7225,906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,336 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 292415,736 ops/s
[info]                  ·gc.alloc.rate:               1380,924 MB/sec
[info]                  ·gc.alloc.rate.norm:          7432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1346,271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7245,503 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   291628,214 ±(99.9%) 4111,349 ops/s [Average]
[info]   (min, avg, max) = (290225,673, 291628,214, 292918,678), stdev = 1067,704
[info]   CI (99.9%): [287516,864, 295739,563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1377,143 ±(99.9%) 19,632 MB/sec [Average]
[info]   (min, avg, max) = (1370,404, 1377,143, 1383,245), stdev = 5,098
[info]   CI (99.9%): [1357,511, 1396,775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7432,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7432,001, 7432,001, 7432,002), stdev = 0,001
[info]   CI (99.9%): [7432,001, 7432,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1344,097 ±(99.9%) 5,609 MB/sec [Average]
[info]   (min, avg, max) = (1342,818, 1344,097, 1346,271), stdev = 1,457
[info]   CI (99.9%): [1338,488, 1349,705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7253,725 ±(99.9%) 84,444 B/op [Average]
[info]   (min, avg, max) = (7225,906, 7253,725, 7285,816), stdev = 21,930
[info]   CI (99.9%): [7169,281, 7338,169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,032
[info]   CI (99.9%): [≈ 0, 0,151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,157 ±(99.9%) 0,655 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,157, 0,338), stdev = 0,170
[info]   CI (99.9%): [≈ 0, 0,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,54% complete, ETA 00:20:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 383497,262 ops/s
[info] # Warmup Iteration   2: 574043,646 ops/s
[info] # Warmup Iteration   3: 571984,530 ops/s
[info] # Warmup Iteration   4: 572512,759 ops/s
[info] # Warmup Iteration   5: 573940,688 ops/s
[info] Iteration   1: 572477,266 ops/s
[info]                  ·gc.alloc.rate:                   459,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,586 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1406,430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,057 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 574301,404 ops/s
[info]                  ·gc.alloc.rate:      461,279 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 572650,587 ops/s
[info]                  ·gc.alloc.rate:                   459,886 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,426 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1853,665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,801 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 573870,350 ops/s
[info]                  ·gc.alloc.rate:                   460,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1849,725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,171 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 574148,032 ops/s
[info]                  ·gc.alloc.rate:      461,078 MB/sec
[info]                  ·gc.alloc.rate.norm: 1264,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   573489,528 ±(99.9%) 3315,968 ops/s [Average]
[info]   (min, avg, max) = (572477,266, 573489,528, 574301,404), stdev = 861,146
[info]   CI (99.9%): [570173,560, 576805,496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   460,590 ±(99.9%) 2,713 MB/sec [Average]
[info]   (min, avg, max) = (459,778, 460,590, 461,279), stdev = 0,704
[info]   CI (99.9%): [457,878, 463,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1264,001, 1264,001, 1264,001), stdev = 0,001
[info]   CI (99.9%): [1264,001, 1264,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   372,107 ±(99.9%) 1332,837 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 372,107, 674,523), stdev = 346,134
[info]   CI (99.9%): [≈ 0, 1704,944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1021,964 ±(99.9%) 3659,911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1021,964, 1853,665), stdev = 950,467
[info]   CI (99.9%): [≈ 0, 4681,875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,075, 0,291), stdev = 0,124
[info]   CI (99.9%): [≈ 0, 0,551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,206 ±(99.9%) 1,309 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,206, 0,801), stdev = 0,340
[info]   CI (99.9%): [≈ 0, 1,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84,74% complete, ETA 00:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 639285,135 ops/s
[info] # Warmup Iteration   2: 672714,898 ops/s
[info] # Warmup Iteration   3: 675307,243 ops/s
[info] # Warmup Iteration   4: 680191,477 ops/s
[info] # Warmup Iteration   5: 673766,622 ops/s
[info] Iteration   1: 675368,005 ops/s
[info]                  ·gc.alloc.rate:                   357,017 MB/sec
[info]                  ·gc.alloc.rate.norm:              832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,587 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1192,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 677593,734 ops/s
[info]                  ·gc.alloc.rate:               358,247 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,691 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1188,362 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 651814,313 ops/s
[info]                  ·gc.alloc.rate:      344,581 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 664496,573 ops/s
[info]                  ·gc.alloc.rate:               351,275 MB/sec
[info]                  ·gc.alloc.rate.norm:          832,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1211,705 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 678903,180 ops/s
[info]                  ·gc.alloc.rate:      358,870 MB/sec
[info]                  ·gc.alloc.rate.norm: 832,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   669635,161 ±(99.9%) 44160,367 ops/s [Average]
[info]   (min, avg, max) = (651814,313, 669635,161, 678903,180), stdev = 11468,307
[info]   CI (99.9%): [625474,794, 713795,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   353,998 ±(99.9%) 23,343 MB/sec [Average]
[info]   (min, avg, max) = (344,581, 353,998, 358,870), stdev = 6,062
[info]   CI (99.9%): [330,655, 377,342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   832,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (832,001, 832,001, 832,001), stdev = 0,001
[info]   CI (99.9%): [832,001, 832,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,973 ±(99.9%) 1079,054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,973, 511,691), stdev = 280,227
[info]   CI (99.9%): [≈ 0, 1386,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   718,456 ±(99.9%) 2525,704 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 718,456, 1211,705), stdev = 655,917
[info]   CI (99.9%): [≈ 0, 3244,159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,024), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,094 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,011, 0,055), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 84,94% complete, ETA 00:20:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 774764,833 ops/s
[info] # Warmup Iteration   2: 827548,774 ops/s
[info] # Warmup Iteration   3: 865647,458 ops/s
[info] # Warmup Iteration   4: 837690,545 ops/s
[info] # Warmup Iteration   5: 836514,507 ops/s
[info] Iteration   1: 870696,696 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 872345,390 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 869577,921 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 868553,607 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 868473,904 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   869929,504 ±(99.9%) 6256,723 ops/s [Average]
[info]   (min, avg, max) = (868473,904, 869929,504, 872345,390), stdev = 1624,851
[info]   CI (99.9%): [863672,781, 876186,226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85,14% complete, ETA 00:19:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28451,734 ops/s
[info] # Warmup Iteration   2: 36810,875 ops/s
[info] # Warmup Iteration   3: 37089,092 ops/s
[info] # Warmup Iteration   4: 37551,216 ops/s
[info] # Warmup Iteration   5: 37189,023 ops/s
[info] Iteration   1: 37477,132 ops/s
[info]                  ·gc.alloc.rate:                   1867,259 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2010,915 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84448,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,874 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 37578,306 ops/s
[info]                  ·gc.alloc.rate:                   1872,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,411 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84365,939 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,744 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 37309,606 ops/s
[info]                  ·gc.alloc.rate:                   1858,716 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85138,145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,512 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 37551,271 ops/s
[info]                  ·gc.alloc.rate:               1871,014 MB/sec
[info]                  ·gc.alloc.rate.norm:          78416,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1347,875 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 56490,776 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 37213,945 ops/s
[info]                  ·gc.alloc.rate:                   1854,096 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     85623,049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,641 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   37426,052 ±(99.9%) 608,899 ops/s [Average]
[info]   (min, avg, max) = (37213,945, 37426,052, 37578,306), stdev = 158,129
[info]   CI (99.9%): [36817,153, 38034,951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1864,686 ±(99.9%) 30,630 MB/sec [Average]
[info]   (min, avg, max) = (1854,096, 1864,686, 1872,344), stdev = 7,954
[info]   CI (99.9%): [1834,056, 1895,315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78416,011 ±(99.9%) 0,003 B/op [Average]
[info]   (min, avg, max) = (78416,011, 78416,011, 78416,013), stdev = 0,001
[info]   CI (99.9%): [78416,008, 78416,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1883,151 ±(99.9%) 1152,384 MB/sec [Average]
[info]   (min, avg, max) = (1347,875, 1883,151, 2024,502), stdev = 299,271
[info]   CI (99.9%): [730,767, 3035,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   79213,359 ±(99.9%) 48952,530 B/op [Average]
[info]   (min, avg, max) = (56490,776, 79213,359, 85623,049), stdev = 12712,817
[info]   CI (99.9%): [30260,829, 128165,889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,083), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,754 ±(99.9%) 5,353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,754, 3,512), stdev = 1,390
[info]   CI (99.9%): [≈ 0, 7,107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 85,34% complete, ETA 00:19:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 141602,772 ops/s
[info] # Warmup Iteration   2: 153859,542 ops/s
[info] # Warmup Iteration   3: 153459,283 ops/s
[info] # Warmup Iteration   4: 154041,071 ops/s
[info] # Warmup Iteration   5: 154513,804 ops/s
[info] Iteration   1: 154317,385 ops/s
[info]                  ·gc.alloc.rate:                   1147,512 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,749 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13715,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,212 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 154801,808 ops/s
[info]                  ·gc.alloc.rate:                   1151,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13667,037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,423 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 154695,648 ops/s
[info]                  ·gc.alloc.rate:                   1150,343 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13675,428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,424 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 154416,956 ops/s
[info]                  ·gc.alloc.rate:               1148,333 MB/sec
[info]                  ·gc.alloc.rate.norm:          11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 6850,066 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 154435,990 ops/s
[info]                  ·gc.alloc.rate:                   1148,300 MB/sec
[info]                  ·gc.alloc.rate.norm:              11704,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13711,934 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,424 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle":
[info]   154533,557 ±(99.9%) 789,329 ops/s [Average]
[info]   (min, avg, max) = (154317,385, 154533,557, 154801,808), stdev = 204,986
[info]   CI (99.9%): [153744,228, 155322,886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1149,151 ±(99.9%) 6,084 MB/sec [Average]
[info]   (min, avg, max) = (1147,512, 1149,151, 1151,268), stdev = 1,580
[info]   CI (99.9%): [1143,068, 1155,235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11704,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11704,003, 11704,003, 11704,003), stdev = 0,001
[info]   CI (99.9%): [11704,002, 11704,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1210,122 ±(99.9%) 1158,154 MB/sec [Average]
[info]   (min, avg, max) = (672,091, 1210,122, 1345,301), stdev = 300,769
[info]   CI (99.9%): [51,968, 2368,276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   12324,035 ±(99.9%) 11783,424 B/op [Average]
[info]   (min, avg, max) = (6850,066, 12324,035, 13715,712), stdev = 3060,118
[info]   CI (99.9%): [540,611, 24107,460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,297 ±(99.9%) 0,729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,297, 0,424), stdev = 0,189
[info]   CI (99.9%): [≈ 0, 1,026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 85,54% complete, ETA 00:19:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60376,034 ops/s
[info] # Warmup Iteration   2: 73508,385 ops/s
[info] # Warmup Iteration   3: 73333,608 ops/s
[info] # Warmup Iteration   4: 73556,724 ops/s
[info] # Warmup Iteration   5: 73749,773 ops/s
[info] Iteration   1: 73670,357 ops/s
[info]                  ·gc.alloc.rate:                   3336,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3380,964 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72230,208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,557 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 73957,483 ops/s
[info]                  ·gc.alloc.rate:                   3350,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3389,329 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72118,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,772 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 74192,524 ops/s
[info]                  ·gc.alloc.rate:                   3360,419 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3393,872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71997,669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,883 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 74601,029 ops/s
[info]                  ·gc.alloc.rate:                   3379,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3399,247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71710,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,878 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 74672,167 ops/s
[info]                  ·gc.alloc.rate:                   3381,251 MB/sec
[info]                  ·gc.alloc.rate.norm:              71288,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,531 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     71694,505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,194 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce":
[info]   74218,712 ±(99.9%) 1635,286 ops/s [Average]
[info]   (min, avg, max) = (73670,357, 74218,712, 74672,167), stdev = 424,678
[info]   CI (99.9%): [72583,427, 75853,998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate":
[info]   3361,608 ±(99.9%) 73,018 MB/sec [Average]
[info]   (min, avg, max) = (3336,862, 3361,608, 3381,251), stdev = 18,963
[info]   CI (99.9%): [3288,590, 3434,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   71288,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (71288,005, 71288,006, 71288,006), stdev = 0,001
[info]   CI (99.9%): [71288,005, 71288,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   3392,789 ±(99.9%) 30,722 MB/sec [Average]
[info]   (min, avg, max) = (3380,964, 3392,789, 3400,531), stdev = 7,978
[info]   CI (99.9%): [3362,067, 3423,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   71950,315 ±(99.9%) 927,361 B/op [Average]
[info]   (min, avg, max) = (71694,505, 71950,315, 72230,208), stdev = 240,833
[info]   CI (99.9%): [71022,954, 72877,676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,200 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,087, 0,167), stdev = 0,052
[info]   CI (99.9%): [≈ 0, 0,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1,857 ±(99.9%) 4,270 B/op [Average]
[info]   (min, avg, max) = (0,878, 1,857, 3,557), stdev = 1,109
[info]   CI (99.9%): [≈ 0, 6,127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.count":
[info]   25,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (5,000, 5,000, 5,000), stdev = 0,001
[info]   CI (99.9%): [25,000, 25,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,74% complete, ETA 00:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98260,029 ops/s
[info] # Warmup Iteration   2: 151326,371 ops/s
[info] # Warmup Iteration   3: 151492,295 ops/s
[info] # Warmup Iteration   4: 152229,844 ops/s
[info] # Warmup Iteration   5: 153727,518 ops/s
[info] Iteration   1: 153856,626 ops/s
[info]                  ·gc.alloc.rate:                   1375,608 MB/sec
[info]                  ·gc.alloc.rate.norm:              14072,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,877 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13829,240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 153522,735 ops/s
[info]                  ·gc.alloc.rate:                   1372,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              14072,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13870,197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,213 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 153624,670 ops/s
[info]                  ·gc.alloc.rate:                   1373,472 MB/sec
[info]                  ·gc.alloc.rate.norm:              14072,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13873,104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 153695,264 ops/s
[info]                  ·gc.alloc.rate:               1374,232 MB/sec
[info]                  ·gc.alloc.rate.norm:          14072,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,191 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 13877,018 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 153238,658 ops/s
[info]                  ·gc.alloc.rate:                   1369,879 MB/sec
[info]                  ·gc.alloc.rate.norm:              14072,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1355,601 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13925,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,214 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala":
[info]   153587,590 ±(99.9%) 885,038 ops/s [Average]
[info]   (min, avg, max) = (153238,658, 153587,590, 153856,626), stdev = 229,841
[info]   CI (99.9%): [152702,553, 154472,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1373,197 ±(99.9%) 8,199 MB/sec [Average]
[info]   (min, avg, max) = (1369,879, 1373,197, 1375,608), stdev = 2,129
[info]   CI (99.9%): [1364,998, 1381,395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   14072,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14072,003, 14072,003, 14072,003), stdev = 0,001
[info]   CI (99.9%): [14072,002, 14072,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1353,966 ±(99.9%) 5,868 MB/sec [Average]
[info]   (min, avg, max) = (1351,877, 1353,966, 1355,601), stdev = 1,524
[info]   CI (99.9%): [1348,099, 1359,834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   13874,977 ±(99.9%) 131,393 B/op [Average]
[info]   (min, avg, max) = (13829,240, 13874,977, 13925,326), stdev = 34,122
[info]   CI (99.9%): [13743,584, 14006,370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,256 ±(99.9%) 0,686 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,256, 0,426), stdev = 0,178
[info]   CI (99.9%): [≈ 0, 0,942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85,94% complete, ETA 00:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512782,797 ops/s
[info] # Warmup Iteration   2: 530235,400 ops/s
[info] # Warmup Iteration   3: 528174,243 ops/s
[info] # Warmup Iteration   4: 531622,773 ops/s
[info] # Warmup Iteration   5: 533574,865 ops/s
[info] Iteration   1: 535364,350 ops/s
[info]                  ·gc.alloc.rate:                   1398,739 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3951,718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,184 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 536145,396 ops/s
[info]                  ·gc.alloc.rate:                   1400,891 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,367 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3946,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 535014,030 ops/s
[info]                  ·gc.alloc.rate:                   1397,670 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,360 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5935,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 535647,225 ops/s
[info]                  ·gc.alloc.rate:                   1399,554 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,910 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3957,326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,122 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 535019,302 ops/s
[info]                  ·gc.alloc.rate:                   1397,923 MB/sec
[info]                  ·gc.alloc.rate.norm:              4112,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,238 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3965,852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,061 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala":
[info]   535438,061 ±(99.9%) 1831,250 ops/s [Average]
[info]   (min, avg, max) = (535014,030, 535438,061, 536145,396), stdev = 475,570
[info]   CI (99.9%): [533606,811, 537269,310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1398,955 ±(99.9%) 5,046 MB/sec [Average]
[info]   (min, avg, max) = (1397,670, 1398,955, 1400,891), stdev = 1,310
[info]   CI (99.9%): [1393,910, 1404,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4112,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4112,001, 4112,001, 4112,001), stdev = 0,001
[info]   CI (99.9%): [4112,001, 4112,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   1480,218 ±(99.9%) 1156,257 MB/sec [Average]
[info]   (min, avg, max) = (1344,217, 1480,218, 2017,360), stdev = 300,276
[info]   CI (99.9%): [323,961, 2636,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4351,227 ±(99.9%) 3409,632 B/op [Average]
[info]   (min, avg, max) = (3946,088, 4351,227, 5935,151), stdev = 885,471
[info]   CI (99.9%): [941,595, 7760,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,122 ±(99.9%) 0,167 B/op [Average]
[info]   (min, avg, max) = (0,061, 0,122, 0,184), stdev = 0,043
[info]   CI (99.9%): [≈ 0, 0,289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 86,14% complete, ETA 00:18:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9151,867 ops/s
[info] # Warmup Iteration   2: 17898,871 ops/s
[info] # Warmup Iteration   3: 18071,581 ops/s
[info] # Warmup Iteration   4: 18044,349 ops/s
[info] # Warmup Iteration   5: 18023,679 ops/s
[info] Iteration   1: 18001,023 ops/s
[info]                  ·gc.alloc.rate:                   2292,920 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2710,342 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236986,562 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10,919 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 17982,651 ops/s
[info]                  ·gc.alloc.rate:               2290,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          200488,028 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2035,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 178153,570 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 17989,721 ops/s
[info]                  ·gc.alloc.rate:                   2291,597 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,739 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178190,909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,284 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 17927,035 ops/s
[info]                  ·gc.alloc.rate:                   2283,756 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,311 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     238636,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,446 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 18017,438 ops/s
[info]                  ·gc.alloc.rate:                   2294,796 MB/sec
[info]                  ·gc.alloc.rate.norm:              200488,023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,857 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     178214,864 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,273 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson":
[info]   17983,574 ±(99.9%) 131,804 ops/s [Average]
[info]   (min, avg, max) = (17927,035, 17983,574, 18017,438), stdev = 34,229
[info]   CI (99.9%): [17851,769, 18115,378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2290,735 ±(99.9%) 16,192 MB/sec [Average]
[info]   (min, avg, max) = (2283,756, 2290,735, 2294,796), stdev = 4,205
[info]   CI (99.9%): [2274,543, 2306,928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   200488,024 ±(99.9%) 0,010 B/op [Average]
[info]   (min, avg, max) = (200488,023, 200488,024, 200488,028), stdev = 0,003
[info]   CI (99.9%): [200488,014, 200488,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   2308,136 ±(99.9%) 1427,870 MB/sec [Average]
[info]   (min, avg, max) = (2035,433, 2308,136, 2718,311), stdev = 370,813
[info]   CI (99.9%): [880,266, 3736,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   202036,581 ±(99.9%) 125774,967 B/op [Average]
[info]   (min, avg, max) = (178153,570, 202036,581, 238636,998), stdev = 32663,359
[info]   CI (99.9%): [76261,614, 327811,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,096 ±(99.9%) 0,263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,096, 0,187), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8,384 ±(99.9%) 23,117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8,384, 16,446), stdev = 6,003
[info]   CI (99.9%): [≈ 0, 31,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.readPlayJson:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 86,35% complete, ETA 00:18:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34908,564 ops/s
[info] # Warmup Iteration   2: 44838,505 ops/s
[info] # Warmup Iteration   3: 45245,707 ops/s
[info] # Warmup Iteration   4: 45063,599 ops/s
[info] # Warmup Iteration   5: 45396,959 ops/s
[info] Iteration   1: 45333,148 ops/s
[info]                  ·gc.alloc.rate:                   2528,395 MB/sec
[info]                  ·gc.alloc.rate.norm:              87792,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2693,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     93521,268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,613 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 45186,270 ops/s
[info]                  ·gc.alloc.rate:               2520,481 MB/sec
[info]                  ·gc.alloc.rate.norm:          87792,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2024,406 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 70512,977 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 45180,926 ops/s
[info]                  ·gc.alloc.rate:                   2520,857 MB/sec
[info]                  ·gc.alloc.rate.norm:              87792,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2703,624 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94157,088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,798 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 45291,369 ops/s
[info]                  ·gc.alloc.rate:                   2526,543 MB/sec
[info]                  ·gc.alloc.rate.norm:              87792,009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,787 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94159,356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,340 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 45152,728 ops/s
[info]                  ·gc.alloc.rate:                   2518,486 MB/sec
[info]                  ·gc.alloc.rate.norm:              87792,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2713,516 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94590,555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,353 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce":
[info]   45228,888 ±(99.9%) 302,532 ops/s [Average]
[info]   (min, avg, max) = (45152,728, 45228,888, 45333,148), stdev = 78,567
[info]   CI (99.9%): [44926,356, 45531,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate":
[info]   2522,953 ±(99.9%) 16,445 MB/sec [Average]
[info]   (min, avg, max) = (2518,486, 2522,953, 2528,395), stdev = 4,271
[info]   CI (99.9%): [2506,508, 2539,398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87792,009 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (87792,009, 87792,009, 87792,010), stdev = 0,001
[info]   CI (99.9%): [87792,007, 87792,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   2568,946 ±(99.9%) 1172,531 MB/sec [Average]
[info]   (min, avg, max) = (2024,406, 2568,946, 2713,516), stdev = 304,502
[info]   CI (99.9%): [1396,415, 3741,477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   89388,249 ±(99.9%) 40656,993 B/op [Average]
[info]   (min, avg, max) = (70512,977, 89388,249, 94590,555), stdev = 10558,492
[info]   CI (99.9%): [48731,256, 130045,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,104 ±(99.9%) 0,240 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,104, 0,166), stdev = 0,062
[info]   CI (99.9%): [≈ 0, 0,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3,621 ±(99.9%) 8,371 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3,621, 5,798), stdev = 2,174
[info]   CI (99.9%): [≈ 0, 11,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeCirce:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,55% complete, ETA 00:17:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1d4655e3/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 174831,980 ops/s
[info] # Warmup Iteration   2: 258583,842 ops/s
[info] # Warmup Iteration   3: 242381,835 ops/s
[info] # Warmup Iteration   4: 260698,675 ops/s
[info] # Warmup Iteration   5: 258791,930 ops/s
[info] Iteration   1: 258551,535 ops/s
[info]                  ·gc.alloc.rate:                   1202,501 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8222,790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,253 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 260676,175 ops/s
[info]                  ·gc.alloc.rate:                   1212,356 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,563 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8160,516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,251 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 244287,824 ops/s
[info]                  ·gc.alloc.rate:               1136,132 MB/sec
[info]                  ·gc.alloc.rate.norm:          7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4357,980 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 248842,378 ops/s
[info]                  ·gc.alloc.rate:                   1157,413 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8558,214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,395 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 249164,875 ops/s
[info]                  ·gc.alloc.rate:                   1158,742 MB/sec
[info]                  ·gc.alloc.rate.norm:              7320,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8553,605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,263 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala":
[info]   252304,557 ±(99.9%) 26900,890 ops/s [Average]
[info]   (min, avg, max) = (244287,824, 252304,557, 260676,175), stdev = 6986,076
[info]   CI (99.9%): [225403,667, 279205,447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1173,429 ±(99.9%) 125,127 MB/sec [Average]
[info]   (min, avg, max) = (1136,132, 1173,429, 1212,356), stdev = 32,495
[info]   CI (99.9%): [1048,302, 1298,556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   7320,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7320,002, 7320,002, 7320,002), stdev = 0,001
[info]   CI (99.9%): [7320,001, 7320,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,197 ±(99.9%) 1164,119 MB/sec [Average]
[info]   (min, avg, max) = (676,399, 1217,197, 1354,019), stdev = 302,318
[info]   CI (99.9%): [53,078, 2381,316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7570,621 ±(99.9%) 6951,440 B/op [Average]
[info]   (min, avg, max) = (4357,980, 7570,621, 8558,214), stdev = 1805,267
[info]   CI (99.9%): [619,180, 14522,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,233 ±(99.9%) 0,552 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,233, 0,395), stdev = 0,143
[info]   CI (99.9%): [≈ 0, 0,784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 86,75% complete, ETA 00:17:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1224516,905 ops/s
[info] # Warmup Iteration   2: 1250618,544 ops/s
[info] # Warmup Iteration   3: 1253455,639 ops/s
[info] # Warmup Iteration   4: 1254074,099 ops/s
[info] # Warmup Iteration   5: 1248970,504 ops/s
[info] Iteration   1: 1245628,709 ops/s
[info]                  ·gc.alloc.rate:                   626,791 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,718 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     852,560 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,915 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1269174,433 ops/s
[info]                  ·gc.alloc.rate:                   638,691 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,842 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     836,828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1268482,780 ops/s
[info]                  ·gc.alloc.rate:                   638,274 MB/sec
[info]                  ·gc.alloc.rate.norm:              792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,700 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     834,717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1269573,892 ops/s
[info]                  ·gc.alloc.rate:               638,888 MB/sec
[info]                  ·gc.alloc.rate.norm:          792,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 834,003 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 1268305,119 ops/s
[info]                  ·gc.alloc.rate:      638,148 MB/sec
[info]                  ·gc.alloc.rate.norm: 792,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala":
[info]   1264232,986 ±(99.9%) 40095,972 ops/s [Average]
[info]   (min, avg, max) = (1245628,709, 1264232,986, 1269573,892), stdev = 10412,797
[info]   CI (99.9%): [1224137,015, 1304328,958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   636,159 ±(99.9%) 20,198 MB/sec [Average]
[info]   (min, avg, max) = (626,791, 636,159, 638,888), stdev = 5,245
[info]   CI (99.9%): [615,961, 656,356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   792,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (792,000, 792,000, 792,000), stdev = 0,001
[info]   CI (99.9%): [792,000, 792,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   539,006 ±(99.9%) 1160,258 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,006, 674,842), stdev = 301,315
[info]   CI (99.9%): [≈ 0, 1699,264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   671,622 ±(99.9%) 1446,012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 671,622, 852,560), stdev = 375,525
[info]   CI (99.9%): [≈ 0, 2117,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,632 ±(99.9%) 5,309 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,632, 3,098), stdev = 1,379
[info]   CI (99.9%): [≈ 0, 5,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,798 ±(99.9%) 6,709 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,798, 3,915), stdev = 1,742
[info]   CI (99.9%): [≈ 0, 7,507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 86,95% complete, ETA 00:17:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1274418,818 ops/s
[info] # Warmup Iteration   2: 1294057,700 ops/s
[info] # Warmup Iteration   3: 1296475,350 ops/s
[info] # Warmup Iteration   4: 1294904,606 ops/s
[info] # Warmup Iteration   5: 1292138,046 ops/s
[info] Iteration   1: 1293338,831 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1291295,812 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1291519,494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1292035,159 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1291219,680 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc":
[info]   1291881,795 ±(99.9%) 3367,667 ops/s [Average]
[info]   (min, avg, max) = (1291219,680, 1291881,795, 1293338,831), stdev = 874,573
[info]   CI (99.9%): [1288514,128, 1295249,463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 87,15% complete, ETA 00:17:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22661,568 ops/s
[info] # Warmup Iteration   2: 36571,507 ops/s
[info] # Warmup Iteration   3: 36639,094 ops/s
[info] # Warmup Iteration   4: 36580,376 ops/s
[info] # Warmup Iteration   5: 36659,671 ops/s
[info] Iteration   1: 36815,710 ops/s
[info]                  ·gc.alloc.rate:                   1971,366 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,421 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86804,723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,890 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 37072,876 ops/s
[info]                  ·gc.alloc.rate:                   1985,213 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,843 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86302,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,767 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 36946,169 ops/s
[info]                  ·gc.alloc.rate:                   1978,283 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,707 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86683,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,320 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 36965,725 ops/s
[info]                  ·gc.alloc.rate:                   1979,569 MB/sec
[info]                  ·gc.alloc.rate.norm:              84280,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     86710,151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,431 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 37037,871 ops/s
[info]                  ·gc.alloc.rate:               1982,623 MB/sec
[info]                  ·gc.alloc.rate.norm:          84280,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2037,103 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 86595,899 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson":
[info]   36967,670 ±(99.9%) 382,914 ops/s [Average]
[info]   (min, avg, max) = (36815,710, 36967,670, 37072,876), stdev = 99,442
[info]   CI (99.9%): [36584,756, 37350,585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1979,411 ±(99.9%) 20,193 MB/sec [Average]
[info]   (min, avg, max) = (1971,366, 1979,411, 1985,213), stdev = 5,244
[info]   CI (99.9%): [1959,218, 1999,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   84280,012 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (84280,011, 84280,012, 84280,012), stdev = 0,001
[info]   CI (99.9%): [84280,010, 84280,013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2034,344 ±(99.9%) 10,667 MB/sec [Average]
[info]   (min, avg, max) = (2030,421, 2034,344, 2037,103), stdev = 2,770
[info]   CI (99.9%): [2023,677, 2045,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   86619,331 ±(99.9%) 740,605 B/op [Average]
[info]   (min, avg, max) = (86302,086, 86619,331, 86804,723), stdev = 192,333
[info]   CI (99.9%): [85878,726, 87359,937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,207 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,125), stdev = 0,054
[info]   CI (99.9%): [≈ 0, 0,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,482 ±(99.9%) 8,836 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,482, 5,320), stdev = 2,295
[info]   CI (99.9%): [≈ 0, 11,317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.NestedStructsBenchmark.writePlayJson:·gc.time":
[info]   8,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 87,35% complete, ETA 00:16:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 285517,250 ops/s
[info] # Warmup Iteration   2: 765892,066 ops/s
[info] # Warmup Iteration   3: 795855,942 ops/s
[info] # Warmup Iteration   4: 798904,129 ops/s
[info] # Warmup Iteration   5: 792957,335 ops/s
[info] Iteration   1: 797233,173 ops/s
[info]                  ·gc.alloc.rate:                   2475,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              4888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2692,310 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5315,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,123 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 800098,855 ops/s
[info]                  ·gc.alloc.rate:                   2484,824 MB/sec
[info]                  ·gc.alloc.rate.norm:              4888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3978,589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,164 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 798115,663 ops/s
[info]                  ·gc.alloc.rate:                   2478,528 MB/sec
[info]                  ·gc.alloc.rate.norm:              4888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2702,790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5330,275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 796521,577 ops/s
[info]                  ·gc.alloc.rate:                   2473,916 MB/sec
[info]                  ·gc.alloc.rate.norm:              4888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2708,432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5351,362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,041 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 799402,449 ops/s
[info]                  ·gc.alloc.rate:                   2482,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              4888,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,347 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4005,767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,082 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   798274,344 ±(99.9%) 5705,865 ops/s [Average]
[info]   (min, avg, max) = (796521,577, 798274,344, 800098,855), stdev = 1481,795
[info]   CI (99.9%): [792568,478, 803980,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2479,125 ±(99.9%) 17,291 MB/sec [Average]
[info]   (min, avg, max) = (2473,916, 2479,125, 2484,824), stdev = 4,490
[info]   CI (99.9%): [2461,834, 2496,415] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4888,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4888,001, 4888,001, 4888,001), stdev = 0,001
[info]   CI (99.9%): [4888,000, 4888,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2432,081 ±(99.9%) 1419,137 MB/sec [Average]
[info]   (min, avg, max) = (2022,523, 2432,081, 2708,432), stdev = 368,545
[info]   CI (99.9%): [1012,943, 3851,218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4796,221 ±(99.9%) 2827,000 B/op [Average]
[info]   (min, avg, max) = (3978,589, 4796,221, 5351,362), stdev = 734,163
[info]   CI (99.9%): [1969,220, 7623,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,098 ±(99.9%) 0,180 B/op [Average]
[info]   (min, avg, max) = (0,041, 0,098, 0,164), stdev = 0,047
[info]   CI (99.9%): [≈ 0, 0,278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 87,55% complete, ETA 00:16:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 731840,607 ops/s
[info] # Warmup Iteration   2: 1688996,667 ops/s
[info] # Warmup Iteration   3: 1698070,134 ops/s
[info] # Warmup Iteration   4: 1701938,911 ops/s
[info] # Warmup Iteration   5: 1683562,430 ops/s
[info] Iteration   1: 1700996,161 ops/s
[info]                  ·gc.alloc.rate:                   1210,499 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,523 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1250,481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1700550,005 ops/s
[info]                  ·gc.alloc.rate:               1210,123 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      676,081 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 625,731 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 1694458,228 ops/s
[info]                  ·gc.alloc.rate:                   1205,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,723 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1256,575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 1697927,073 ops/s
[info]                  ·gc.alloc.rate:                   1208,322 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1255,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1699012,232 ops/s
[info]                  ·gc.alloc.rate:               1208,953 MB/sec
[info]                  ·gc.alloc.rate.norm:          1120,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1355,018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1255,318 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1698588,739 ±(99.9%) 10063,471 ops/s [Average]
[info]   (min, avg, max) = (1694458,228, 1698588,739, 1700996,161), stdev = 2613,452
[info]   CI (99.9%): [1688525,268, 1708652,211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1208,719 ±(99.9%) 7,326 MB/sec [Average]
[info]   (min, avg, max) = (1205,698, 1208,719, 1210,499), stdev = 1,902
[info]   CI (99.9%): [1201,393, 1216,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1120,000, 1120,000, 1120,000), stdev = 0,001
[info]   CI (99.9%): [1120,000, 1120,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1217,909 ±(99.9%) 1166,336 MB/sec [Average]
[info]   (min, avg, max) = (676,081, 1217,909, 1355,018), stdev = 302,894
[info]   CI (99.9%): [51,573, 2384,245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1128,664 ±(99.9%) 1082,639 B/op [Average]
[info]   (min, avg, max) = (625,731, 1128,664, 1256,575), stdev = 281,158
[info]   CI (99.9%): [46,025, 2211,302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,023 ±(99.9%) 0,097 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,023, 0,058), stdev = 0,025
[info]   CI (99.9%): [≈ 0, 0,120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 87,75% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7811262,449 ops/s
[info] # Warmup Iteration   2: 8480632,671 ops/s
[info] # Warmup Iteration   3: 8596169,738 ops/s
[info] # Warmup Iteration   4: 8540545,652 ops/s
[info] # Warmup Iteration   5: 8577267,700 ops/s
[info] Iteration   1: 8546918,192 ops/s
[info]                  ·gc.alloc.rate:                   260,643 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,512 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94,200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,001 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 8617590,692 ops/s
[info]                  ·gc.alloc.rate:      262,854 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8587423,499 ops/s
[info]                  ·gc.alloc.rate:               261,883 MB/sec
[info]                  ·gc.alloc.rate.norm:          48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,521 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 93,756 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 8563902,774 ops/s
[info]                  ·gc.alloc.rate:      261,208 MB/sec
[info]                  ·gc.alloc.rate.norm: 48,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8565000,127 ops/s
[info]                  ·gc.alloc.rate:                   261,131 MB/sec
[info]                  ·gc.alloc.rate.norm:              48,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,388 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     94,001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   8576167,057 ±(99.9%) 104982,744 ops/s [Average]
[info]   (min, avg, max) = (8546918,192, 8576167,057, 8617590,692), stdev = 27263,685
[info]   CI (99.9%): [8471184,313, 8681149,801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   261,544 ±(99.9%) 3,294 MB/sec [Average]
[info]   (min, avg, max) = (260,643, 261,544, 262,854), stdev = 0,855
[info]   CI (99.9%): [258,250, 264,838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (48,000, 48,000, 48,000), stdev = 0,001
[info]   CI (99.9%): [48,000, 48,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,884 ±(99.9%) 1078,741 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,884, 511,521), stdev = 280,146
[info]   CI (99.9%): [≈ 0, 1385,625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   56,391 ±(99.9%) 198,225 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 56,391, 94,200), stdev = 51,478
[info]   CI (99.9%): [≈ 0, 254,616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,005 ±(99.9%) 0,035 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,021), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,001 ±(99.9%) 0,006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,001, 0,004), stdev = 0,002
[info]   CI (99.9%): [≈ 0, 0,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 87,95% complete, ETA 00:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92117,510 ops/s
[info] # Warmup Iteration   2: 262053,819 ops/s
[info] # Warmup Iteration   3: 263826,928 ops/s
[info] # Warmup Iteration   4: 264588,505 ops/s
[info] # Warmup Iteration   5: 263858,374 ops/s
[info] Iteration   1: 262953,626 ops/s
[info]                  ·gc.alloc.rate:                   1877,910 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,567 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12153,711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,249 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 264430,874 ops/s
[info]                  ·gc.alloc.rate:                   1888,516 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,783 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12098,649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,248 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 264119,157 ops/s
[info]                  ·gc.alloc.rate:                   1886,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1356,135 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8081,235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 263272,158 ops/s
[info]                  ·gc.alloc.rate:                   1880,330 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,390 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12172,881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,124 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 263354,636 ops/s
[info]                  ·gc.alloc.rate:                   1880,539 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12176,960 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,249 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   263626,090 ±(99.9%) 2390,777 ops/s [Average]
[info]   (min, avg, max) = (262953,626, 263626,090, 264430,874), stdev = 620,877
[info]   CI (99.9%): [261235,313, 266016,867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1882,702 ±(99.9%) 17,157 MB/sec [Average]
[info]   (min, avg, max) = (1877,910, 1882,702, 1888,516), stdev = 4,456
[info]   CI (99.9%): [1865,545, 1899,860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11240,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11240,002, 11240,002, 11240,002), stdev = 0,001
[info]   CI (99.9%): [11240,001, 11240,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1898,635 ±(99.9%) 1167,820 MB/sec [Average]
[info]   (min, avg, max) = (1356,135, 1898,635, 2037,299), stdev = 303,279
[info]   CI (99.9%): [730,815, 3066,454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   11336,687 ±(99.9%) 7008,637 B/op [Average]
[info]   (min, avg, max) = (8081,235, 11336,687, 12176,960), stdev = 1820,121
[info]   CI (99.9%): [4328,050, 18345,324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,199 ±(99.9%) 0,262 B/op [Average]
[info]   (min, avg, max) = (0,124, 0,199, 0,249), stdev = 0,068
[info]   CI (99.9%): [≈ 0, 0,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 88,15% complete, ETA 00:15:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 577163,069 ops/s
[info] # Warmup Iteration   2: 979050,382 ops/s
[info] # Warmup Iteration   3: 1040763,898 ops/s
[info] # Warmup Iteration   4: 1045833,693 ops/s
[info] # Warmup Iteration   5: 1045081,587 ops/s
[info] Iteration   1: 1045196,943 ops/s
[info]                  ·gc.alloc.rate:               1561,853 MB/sec
[info]                  ·gc.alloc.rate.norm:          2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1342,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2022,059 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 1041699,543 ops/s
[info]                  ·gc.alloc.rate:                   1556,687 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,774 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2028,799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,094 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 1044250,107 ops/s
[info]                  ·gc.alloc.rate:                   1560,505 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,894 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3039,872 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,063 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1046210,008 ops/s
[info]                  ·gc.alloc.rate:                   1563,531 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,222 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2025,106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1045846,433 ops/s
[info]                  ·gc.alloc.rate:                   1562,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,678 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2028,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,031 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   1044640,607 ±(99.9%) 6949,557 ops/s [Average]
[info]   (min, avg, max) = (1041699,543, 1044640,607, 1046210,008), stdev = 1804,778
[info]   CI (99.9%): [1037691,050, 1051590,164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1561,061 ±(99.9%) 10,359 MB/sec [Average]
[info]   (min, avg, max) = (1556,687, 1561,061, 1563,531), stdev = 2,690
[info]   CI (99.9%): [1550,702, 1571,420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2352,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2352,000, 2352,000, 2352,000), stdev = 0,001
[info]   CI (99.9%): [2352,000, 2352,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1479,265 ±(99.9%) 1157,317 MB/sec [Average]
[info]   (min, avg, max) = (1342,754, 1479,265, 2016,894), stdev = 300,552
[info]   CI (99.9%): [321,948, 2636,582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2228,834 ±(99.9%) 1745,850 B/op [Average]
[info]   (min, avg, max) = (2022,059, 2228,834, 3039,872), stdev = 453,392
[info]   CI (99.9%): [482,984, 3974,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,044 ±(99.9%) 0,138 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,044, 0,094), stdev = 0,036
[info]   CI (99.9%): [≈ 0, 0,182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 88,35% complete, ETA 00:15:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1d4655e3/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1285626,996 ops/s
[info] # Warmup Iteration   2: 2802761,544 ops/s
[info] # Warmup Iteration   3: 2756621,470 ops/s
[info] # Warmup Iteration   4: 2756138,416 ops/s
[info] # Warmup Iteration   5: 2753551,320 ops/s
[info] Iteration   1: 2761147,220 ops/s
[info]                  ·gc.alloc.rate:                   1136,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,122 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     769,601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2737737,310 ops/s
[info]                  ·gc.alloc.rate:                   1127,138 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,098 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     776,757 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,036 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2740463,540 ops/s
[info]                  ·gc.alloc.rate:               1128,267 MB/sec
[info]                  ·gc.alloc.rate.norm:          648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      675,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 388,096 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2760892,470 ops/s
[info]                  ·gc.alloc.rate:                   1136,768 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,917 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     771,213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2752464,609 ops/s
[info]                  ·gc.alloc.rate:                   1133,127 MB/sec
[info]                  ·gc.alloc.rate.norm:              648,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,345 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     773,936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2750541,030 ±(99.9%) 42568,116 ops/s [Average]
[info]   (min, avg, max) = (2737737,310, 2750541,030, 2761147,220), stdev = 11054,804
[info]   CI (99.9%): [2707972,914, 2793109,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1132,419 ±(99.9%) 17,616 MB/sec [Average]
[info]   (min, avg, max) = (1127,138, 1132,419, 1136,797), stdev = 4,575
[info]   CI (99.9%): [1114,803, 1150,035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (648,000, 648,000, 648,000), stdev = 0,001
[info]   CI (99.9%): [648,000, 648,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1216,643 ±(99.9%) 1164,359 MB/sec [Average]
[info]   (min, avg, max) = (675,734, 1216,643, 1353,345), stdev = 302,380
[info]   CI (99.9%): [52,285, 2381,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   695,920 ±(99.9%) 662,698 B/op [Average]
[info]   (min, avg, max) = (388,096, 695,920, 776,757), stdev = 172,101
[info]   CI (99.9%): [33,222, 1358,619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,019 ±(99.9%) 0,052 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,019, 0,036), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 88,55% complete, ETA 00:15:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4917352,033 ops/s
[info] # Warmup Iteration   2: 6503646,074 ops/s
[info] # Warmup Iteration   3: 6528418,933 ops/s
[info] # Warmup Iteration   4: 6545653,332 ops/s
[info] # Warmup Iteration   5: 6558193,973 ops/s
[info] Iteration   1: 6573838,782 ops/s
[info]                  ·gc.alloc.rate:                   735,050 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,746 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,766 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6587285,204 ops/s
[info]                  ·gc.alloc.rate:                   736,576 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,227 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 6570427,525 ops/s
[info]                  ·gc.alloc.rate:                   734,780 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,705 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     322,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 6556570,749 ops/s
[info]                  ·gc.alloc.rate:                   733,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,089 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 6556984,448 ops/s
[info]                  ·gc.alloc.rate:               733,176 MB/sec
[info]                  ·gc.alloc.rate.norm:          176,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,031 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 161,322 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6569021,342 ±(99.9%) 49412,099 ops/s [Average]
[info]   (min, avg, max) = (6556570,749, 6569021,342, 6587285,204), stdev = 12832,165
[info]   CI (99.9%): [6519609,243, 6618433,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   734,557 ±(99.9%) 5,482 MB/sec [Average]
[info]   (min, avg, max) = (733,176, 734,557, 736,576), stdev = 1,424
[info]   CI (99.9%): [729,075, 740,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (176,000, 176,000, 176,000), stdev = 0,001
[info]   CI (99.9%): [176,000, 176,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,864 ±(99.9%) 1157,753 MB/sec [Average]
[info]   (min, avg, max) = (672,031, 807,864, 1345,705), stdev = 300,665
[info]   CI (99.9%): [≈ 0, 1965,617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   193,555 ±(99.9%) 277,206 B/op [Average]
[info]   (min, avg, max) = (161,227, 193,555, 322,333), stdev = 71,989
[info]   CI (99.9%): [≈ 0, 470,761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,656 ±(99.9%) 5,474 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,656, 3,199), stdev = 1,421
[info]   CI (99.9%): [≈ 0, 6,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,157 ±(99.9%) 1,311 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,157, 0,766), stdev = 0,340
[info]   CI (99.9%): [≈ 0, 1,468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 88,76% complete, ETA 00:14:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5100560,345 ops/s
[info] # Warmup Iteration   2: 6606085,760 ops/s
[info] # Warmup Iteration   3: 6636436,690 ops/s
[info] # Warmup Iteration   4: 6626238,789 ops/s
[info] # Warmup Iteration   5: 6635794,721 ops/s
[info] Iteration   1: 6594916,894 ops/s
[info]                  ·gc.alloc.rate:                   402,249 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,549 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     122,085 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6603877,462 ops/s
[info]                  ·gc.alloc.rate:               402,804 MB/sec
[info]                  ·gc.alloc.rate.norm:          96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121,926 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 6606276,713 ops/s
[info]                  ·gc.alloc.rate:                   402,929 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,576 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     121,886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,013 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6612217,551 ops/s
[info]                  ·gc.alloc.rate:      403,311 MB/sec
[info]                  ·gc.alloc.rate.norm: 96,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6593824,697 ops/s
[info]                  ·gc.alloc.rate:                   402,205 MB/sec
[info]                  ·gc.alloc.rate.norm:              96,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161,062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,190 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,761 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6602222,663 ±(99.9%) 30011,043 ops/s [Average]
[info]   (min, avg, max) = (6593824,697, 6602222,663, 6612217,551), stdev = 7793,773
[info]   CI (99.9%): [6572211,620, 6632233,706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   402,700 ±(99.9%) 1,811 MB/sec [Average]
[info]   (min, avg, max) = (402,205, 402,700, 403,311), stdev = 0,470
[info]   CI (99.9%): [400,888, 404,511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (96,000, 96,000, 96,000), stdev = 0,001
[info]   CI (99.9%): [96,000, 96,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   441,900 ±(99.9%) 989,388 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 441,900, 674,789), stdev = 256,941
[info]   CI (99.9%): [≈ 0, 1431,288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   105,392 ±(99.9%) 236,044 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 105,392, 161,062), stdev = 61,300
[info]   CI (99.9%): [≈ 0, 341,435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   0,646 ±(99.9%) 5,476 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,646, 3,190), stdev = 1,422
[info]   CI (99.9%): [≈ 0, 6,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   0,154 ±(99.9%) 1,307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,154, 0,761), stdev = 0,339
[info]   CI (99.9%): [≈ 0, 1,461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 2,000), stdev = 0,894
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88,96% complete, ETA 00:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 108554,159 ops/s
[info] # Warmup Iteration   2: 381300,351 ops/s
[info] # Warmup Iteration   3: 382846,437 ops/s
[info] # Warmup Iteration   4: 384178,794 ops/s
[info] # Warmup Iteration   5: 384357,401 ops/s
[info] Iteration   1: 383089,194 ops/s
[info]                  ·gc.alloc.rate:                   2174,797 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,312 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8350,548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,257 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 384720,059 ops/s
[info]                  ·gc.alloc.rate:                   2184,299 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2034,079 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8321,448 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,341 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 384343,129 ops/s
[info]                  ·gc.alloc.rate:                   2182,344 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2036,921 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8340,542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,085 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 384692,588 ops/s
[info]                  ·gc.alloc.rate:                   2184,328 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2717,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11118,998 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 384571,766 ops/s
[info]                  ·gc.alloc.rate:                   2182,995 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2039,476 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8348,513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,170 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   384283,347 ±(99.9%) 2633,512 ops/s [Average]
[info]   (min, avg, max) = (383089,194, 384283,347, 384720,059), stdev = 683,915
[info]   CI (99.9%): [381649,835, 386916,859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2181,752 ±(99.9%) 15,330 MB/sec [Average]
[info]   (min, avg, max) = (2174,797, 2181,752, 2184,328), stdev = 3,981
[info]   CI (99.9%): [2166,423, 2197,082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8936,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8936,001, 8936,001, 8936,001), stdev = 0,001
[info]   CI (99.9%): [8936,001, 8936,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   2172,146 ±(99.9%) 1174,915 MB/sec [Average]
[info]   (min, avg, max) = (2032,312, 2172,146, 2717,943), stdev = 305,122
[info]   CI (99.9%): [997,231, 3347,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8896,010 ±(99.9%) 4785,354 B/op [Average]
[info]   (min, avg, max) = (8321,448, 8896,010, 11118,998), stdev = 1242,741
[info]   CI (99.9%): [4110,656, 13681,363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,205 ±(99.9%) 0,374 B/op [Average]
[info]   (min, avg, max) = (0,085, 0,205, 0,341), stdev = 0,097
[info]   CI (99.9%): [≈ 0, 0,579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89,16% complete, ETA 00:14:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64517,856 ops/s
[info] # Warmup Iteration   2: 76726,687 ops/s
[info] # Warmup Iteration   3: 77802,924 ops/s
[info] # Warmup Iteration   4: 77554,369 ops/s
[info] # Warmup Iteration   5: 77207,485 ops/s
[info] Iteration   1: 77390,662 ops/s
[info]                  ·gc.alloc.rate:                   2212,334 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41051,436 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,270 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 76889,363 ops/s
[info]                  ·gc.alloc.rate:                   2198,336 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55209,740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 77190,052 ops/s
[info]                  ·gc.alloc.rate:                   2206,481 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,770 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41327,541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,273 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 78000,408 ops/s
[info]                  ·gc.alloc.rate:                   2229,962 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,711 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     40951,705 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,840 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 76942,971 ops/s
[info]                  ·gc.alloc.rate:                   2199,224 MB/sec
[info]                  ·gc.alloc.rate.norm:              44992,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2032,581 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41582,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,426 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   77282,691 ±(99.9%) 1727,943 ops/s [Average]
[info]   (min, avg, max) = (76889,363, 77282,691, 78000,408), stdev = 448,741
[info]   CI (99.9%): [75554,748, 79010,634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2209,267 ±(99.9%) 49,680 MB/sec [Average]
[info]   (min, avg, max) = (2198,336, 2209,267, 2229,962), stdev = 12,902
[info]   CI (99.9%): [2159,588, 2258,947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   44992,006 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (44992,005, 44992,006, 44992,006), stdev = 0,001
[info]   CI (99.9%): [44992,004, 44992,007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2161,042 ±(99.9%) 1155,114 MB/sec [Average]
[info]   (min, avg, max) = (2018,570, 2161,042, 2697,580), stdev = 299,979
[info]   CI (99.9%): [1005,929, 3316,156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   44024,645 ±(99.9%) 24095,484 B/op [Average]
[info]   (min, avg, max) = (40951,705, 44024,645, 55209,740), stdev = 6257,521
[info]   CI (99.9%): [19929,161, 68120,128] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,847 ±(99.9%) 1,628 B/op [Average]
[info]   (min, avg, max) = (0,426, 0,847, 1,273), stdev = 0,423
[info]   CI (99.9%): [≈ 0, 2,475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   16,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,200, 4,000), stdev = 0,447
[info]   CI (99.9%): [16,000, 16,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,36% complete, ETA 00:14:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80228,966 ops/s
[info] # Warmup Iteration   2: 123991,863 ops/s
[info] # Warmup Iteration   3: 123740,843 ops/s
[info] # Warmup Iteration   4: 123836,210 ops/s
[info] # Warmup Iteration   5: 123695,242 ops/s
[info] Iteration   1: 124338,477 ops/s
[info]                  ·gc.alloc.rate:                   1911,894 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,606 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25715,271 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,790 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 123976,542 ops/s
[info]                  ·gc.alloc.rate:                   1906,268 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2033,556 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25815,915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,057 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 124840,274 ops/s
[info]                  ·gc.alloc.rate:                   1919,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1357,066 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17107,165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,525 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 123711,216 ops/s
[info]                  ·gc.alloc.rate:                   1902,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2037,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25913,572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,265 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 123369,718 ops/s
[info]                  ·gc.alloc.rate:                   1896,642 MB/sec
[info]                  ·gc.alloc.rate.norm:              24200,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2038,268 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26007,057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,797 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   124047,245 ±(99.9%) 2187,312 ops/s [Average]
[info]   (min, avg, max) = (123369,718, 124047,245, 124840,274), stdev = 568,038
[info]   CI (99.9%): [121859,934, 126234,557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1907,381 ±(99.9%) 34,128 MB/sec [Average]
[info]   (min, avg, max) = (1896,642, 1907,381, 1919,722), stdev = 8,863
[info]   CI (99.9%): [1873,253, 1941,510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24200,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (24200,003, 24200,003, 24200,004), stdev = 0,001
[info]   CI (99.9%): [24200,003, 24200,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1899,516 ±(99.9%) 1167,711 MB/sec [Average]
[info]   (min, avg, max) = (1357,066, 1899,516, 2038,268), stdev = 303,251
[info]   CI (99.9%): [731,805, 3067,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   24111,796 ±(99.9%) 15083,816 B/op [Average]
[info]   (min, avg, max) = (17107,165, 24111,796, 26007,057), stdev = 3917,219
[info]   CI (99.9%): [9027,980, 39195,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,054, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,687 ±(99.9%) 1,162 B/op [Average]
[info]   (min, avg, max) = (0,265, 0,687, 1,057), stdev = 0,302
[info]   CI (99.9%): [≈ 0, 1,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89,56% complete, ETA 00:13:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156339,965 ops/s
[info] # Warmup Iteration   2: 174179,789 ops/s
[info] # Warmup Iteration   3: 174239,702 ops/s
[info] # Warmup Iteration   4: 173936,276 ops/s
[info] # Warmup Iteration   5: 174982,733 ops/s
[info] Iteration   1: 175091,662 ops/s
[info]                  ·gc.alloc.rate:                   2572,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2697,719 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24248,893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,936 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 175063,870 ops/s
[info]                  ·gc.alloc.rate:                   2571,325 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2026,632 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18222,409 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,561 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 175136,755 ops/s
[info]                  ·gc.alloc.rate:                   2572,966 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707,492 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24328,826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,561 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 175120,435 ops/s
[info]                  ·gc.alloc.rate:                   2572,714 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2712,208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24373,585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,935 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 175374,506 ops/s
[info]                  ·gc.alloc.rate:                   2575,744 MB/sec
[info]                  ·gc.alloc.rate.norm:              23120,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2714,801 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24368,181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,560 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   175157,446 ±(99.9%) 479,389 ops/s [Average]
[info]   (min, avg, max) = (175063,870, 175157,446, 175374,506), stdev = 124,496
[info]   CI (99.9%): [174678,056, 175636,835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2572,976 ±(99.9%) 6,436 MB/sec [Average]
[info]   (min, avg, max) = (2571,325, 2572,976, 2575,744), stdev = 1,671
[info]   CI (99.9%): [2566,540, 2579,412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23120,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (23120,002, 23120,002, 23120,003), stdev = 0,001
[info]   CI (99.9%): [23120,002, 23120,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   2571,771 ±(99.9%) 1173,720 MB/sec [Average]
[info]   (min, avg, max) = (2026,632, 2571,771, 2714,801), stdev = 304,811
[info]   CI (99.9%): [1398,051, 3745,490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   23108,379 ±(99.9%) 10519,169 B/op [Average]
[info]   (min, avg, max) = (18222,409, 23108,379, 24373,585), stdev = 2731,795
[info]   CI (99.9%): [12589,210, 33627,547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,079, 0,104), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,711 ±(99.9%) 0,790 B/op [Average]
[info]   (min, avg, max) = (0,560, 0,711, 0,936), stdev = 0,205
[info]   CI (99.9%): [≈ 0, 1,501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89,76% complete, ETA 00:13:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39598,324 ops/s
[info] # Warmup Iteration   2: 58166,691 ops/s
[info] # Warmup Iteration   3: 58519,280 ops/s
[info] # Warmup Iteration   4: 58637,369 ops/s
[info] # Warmup Iteration   5: 58496,253 ops/s
[info] Iteration   1: 58784,612 ops/s
[info]                  ·gc.alloc.rate:                   3089,631 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3397,569 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     90964,570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,229 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 58883,975 ops/s
[info]                  ·gc.alloc.rate:                   3094,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2720,404 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     72713,424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,338 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 58846,698 ops/s
[info]                  ·gc.alloc.rate:                   3092,818 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3402,980 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91015,542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,670 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 58241,082 ops/s
[info]                  ·gc.alloc.rate:                   3061,123 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2723,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     73585,544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,250 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 58325,039 ops/s
[info]                  ·gc.alloc.rate:                   3065,186 MB/sec
[info]                  ·gc.alloc.rate.norm:              82720,007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3404,694 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     91882,283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,247 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   58616,281 ±(99.9%) 1184,791 ops/s [Average]
[info]   (min, avg, max) = (58241,082, 58616,281, 58883,975), stdev = 307,686
[info]   CI (99.9%): [57431,491, 59801,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3080,707 ±(99.9%) 62,350 MB/sec [Average]
[info]   (min, avg, max) = (3061,123, 3080,707, 3094,778), stdev = 16,192
[info]   CI (99.9%): [3018,357, 3143,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82720,007 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (82720,007, 82720,007, 82720,008), stdev = 0,001
[info]   CI (99.9%): [82720,006, 82720,008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3129,749 ±(99.9%) 1434,215 MB/sec [Average]
[info]   (min, avg, max) = (2720,404, 3129,749, 3404,694), stdev = 372,461
[info]   CI (99.9%): [1695,534, 4563,963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   84032,272 ±(99.9%) 38298,711 B/op [Average]
[info]   (min, avg, max) = (72713,424, 84032,272, 91882,283), stdev = 9946,054
[info]   CI (99.9%): [45733,561, 122330,984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,087 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (0,062, 0,087, 0,125), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,347 ±(99.9%) 2,338 B/op [Average]
[info]   (min, avg, max) = (1,670, 2,347, 3,338), stdev = 0,607
[info]   CI (99.9%): [0,009, 4,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   23,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,600, 5,000), stdev = 0,548
[info]   CI (99.9%): [23,000, 23,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 89,96% complete, ETA 00:13:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77910,449 ops/s
[info] # Warmup Iteration   2: 88683,404 ops/s
[info] # Warmup Iteration   3: 89240,795 ops/s
[info] # Warmup Iteration   4: 89212,796 ops/s
[info] # Warmup Iteration   5: 88894,042 ops/s
[info] Iteration   1: 89054,459 ops/s
[info]                  ·gc.alloc.rate:                   1815,898 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2016,696 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35645,109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,104 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 88930,851 ops/s
[info]                  ·gc.alloc.rate:                   1813,517 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,903 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35730,968 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,737 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 88955,075 ops/s
[info]                  ·gc.alloc.rate:               1814,092 MB/sec
[info]                  ·gc.alloc.rate.norm:          32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,234 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 23853,772 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 88981,229 ops/s
[info]                  ·gc.alloc.rate:                   1814,786 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2025,199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35817,333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,736 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 89025,510 ops/s
[info]                  ·gc.alloc.rate:                   1815,166 MB/sec
[info]                  ·gc.alloc.rate.norm:              32096,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,195 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     35845,129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,368 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle":
[info]   88989,425 ±(99.9%) 194,539 ops/s [Average]
[info]   (min, avg, max) = (88930,851, 88989,425, 89054,459), stdev = 50,521
[info]   CI (99.9%): [88794,886, 89183,964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1814,692 ±(99.9%) 3,565 MB/sec [Average]
[info]   (min, avg, max) = (1813,517, 1814,692, 1815,898), stdev = 0,926
[info]   CI (99.9%): [1811,127, 1818,257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   32096,005 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (32096,005, 32096,005, 32096,005), stdev = 0,001
[info]   CI (99.9%): [32096,004, 32096,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1887,246 ±(99.9%) 1160,383 MB/sec [Average]
[info]   (min, avg, max) = (1348,234, 1887,246, 2027,195), stdev = 301,348
[info]   CI (99.9%): [726,863, 3047,628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   33378,462 ±(99.9%) 20504,835 B/op [Average]
[info]   (min, avg, max) = (23853,772, 33378,462, 35845,129), stdev = 5325,041
[info]   CI (99.9%): [12873,627, 53883,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,033, 0,062), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,589 ±(99.9%) 1,616 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,589, 1,104), stdev = 0,420
[info]   CI (99.9%): [≈ 0, 2,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 90,16% complete, ETA 00:13:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 222663,355 ops/s
[info] # Warmup Iteration   2: 280632,171 ops/s
[info] # Warmup Iteration   3: 279627,406 ops/s
[info] # Warmup Iteration   4: 281877,902 ops/s
[info] # Warmup Iteration   5: 280996,456 ops/s
[info] Iteration   1: 281419,901 ops/s
[info]                  ·gc.alloc.rate:                   1338,912 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,850 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7510,025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 281928,142 ops/s
[info]                  ·gc.alloc.rate:                   1341,503 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,110 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7496,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,232 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 281961,146 ops/s
[info]                  ·gc.alloc.rate:                   1341,379 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,405 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7499,310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,116 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 282249,463 ops/s
[info]                  ·gc.alloc.rate:                   1342,914 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,945 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7499,327 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,232 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 282010,720 ops/s
[info]                  ·gc.alloc.rate:                   1341,588 MB/sec
[info]                  ·gc.alloc.rate.norm:              7488,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7513,063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,116 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   281913,874 ±(99.9%) 1168,667 ops/s [Average]
[info]   (min, avg, max) = (281419,901, 281913,874, 282249,463), stdev = 303,499
[info]   CI (99.9%): [280745,208, 283082,541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1341,259 ±(99.9%) 5,589 MB/sec [Average]
[info]   (min, avg, max) = (1338,912, 1341,259, 1342,914), stdev = 1,452
[info]   CI (99.9%): [1335,670, 1346,849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7488,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (7488,001, 7488,001, 7488,002), stdev = 0,001
[info]   CI (99.9%): [7488,001, 7488,002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1344,078 ±(99.9%) 5,324 MB/sec [Average]
[info]   (min, avg, max) = (1342,850, 1344,078, 1346,078), stdev = 1,383
[info]   CI (99.9%): [1338,753, 1349,402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7503,740 ±(99.9%) 27,987 B/op [Average]
[info]   (min, avg, max) = (7496,974, 7503,740, 7513,063), stdev = 7,268
[info]   CI (99.9%): [7475,753, 7531,726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,186 ±(99.9%) 0,245 B/op [Average]
[info]   (min, avg, max) = (0,116, 0,186, 0,233), stdev = 0,064
[info]   CI (99.9%): [≈ 0, 0,431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   10,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,36% complete, ETA 00:12:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 429719,333 ops/s
[info] # Warmup Iteration   2: 643539,449 ops/s
[info] # Warmup Iteration   3: 643452,770 ops/s
[info] # Warmup Iteration   4: 642246,643 ops/s
[info] # Warmup Iteration   5: 643525,796 ops/s
[info] Iteration   1: 641748,951 ops/s
[info]                  ·gc.alloc.rate:      554,552 MB/sec
[info]                  ·gc.alloc.rate.norm: 1360,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 645150,773 ops/s
[info]                  ·gc.alloc.rate:                   557,491 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,472 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1645,378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,711 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 645772,144 ops/s
[info]                  ·gc.alloc.rate:                   557,977 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1643,656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,101 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 643773,911 ops/s
[info]                  ·gc.alloc.rate:                   556,298 MB/sec
[info]                  ·gc.alloc.rate.norm:              1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1650,402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 641913,090 ops/s
[info]                  ·gc.alloc.rate:               554,601 MB/sec
[info]                  ·gc.alloc.rate.norm:          1360,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,970 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1655,170 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   643671,774 ±(99.9%) 7047,741 ops/s [Average]
[info]   (min, avg, max) = (641748,951, 643671,774, 645772,144), stdev = 1830,276
[info]   CI (99.9%): [636624,032, 650719,515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   556,184 ±(99.9%) 6,119 MB/sec [Average]
[info]   (min, avg, max) = (554,552, 556,184, 557,977), stdev = 1,589
[info]   CI (99.9%): [550,064, 562,303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1360,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1360,001, 1360,001, 1360,001), stdev = 0,001
[info]   CI (99.9%): [1360,001, 1360,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,776 ±(99.9%) 1161,909 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,776, 675,084), stdev = 301,744
[info]   CI (99.9%): [≈ 0, 1701,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1318,921 ±(99.9%) 2839,130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1318,921, 1655,170), stdev = 737,313
[info]   CI (99.9%): [≈ 0, 4158,051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,291), stdev = 0,125
[info]   CI (99.9%): [≈ 0, 0,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,173 ±(99.9%) 1,170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,173, 0,711), stdev = 0,304
[info]   CI (99.9%): [≈ 0, 1,343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 90,56% complete, ETA 00:12:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 811125,167 ops/s
[info] # Warmup Iteration   2: 851536,450 ops/s
[info] # Warmup Iteration   3: 849856,445 ops/s
[info] # Warmup Iteration   4: 850803,388 ops/s
[info] # Warmup Iteration   5: 849433,101 ops/s
[info] Iteration   1: 849802,659 ops/s
[info]                  ·gc.alloc.rate:                   457,844 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     947,432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,002 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 852504,776 ops/s
[info]                  ·gc.alloc.rate:               459,319 MB/sec
[info]                  ·gc.alloc.rate.norm:          848,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,582 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 944,489 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   3: 850549,643 ops/s
[info]                  ·gc.alloc.rate:      458,231 MB/sec
[info]                  ·gc.alloc.rate.norm: 848,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 834013,514 ops/s
[info]                  ·gc.alloc.rate:                   449,408 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,823 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1273,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5,918 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 851461,794 ops/s
[info]                  ·gc.alloc.rate:                   458,738 MB/sec
[info]                  ·gc.alloc.rate.norm:              848,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,751 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1247,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,115 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   847666,477 ±(99.9%) 29645,763 ops/s [Average]
[info]   (min, avg, max) = (834013,514, 847666,477, 852504,776), stdev = 7698,911
[info]   CI (99.9%): [818020,714, 877312,240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   456,708 ±(99.9%) 15,858 MB/sec [Average]
[info]   (min, avg, max) = (449,408, 456,708, 459,319), stdev = 4,118
[info]   CI (99.9%): [440,850, 472,566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (848,000, 848,000, 848,001), stdev = 0,001
[info]   CI (99.9%): [848,000, 848,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   474,537 ±(99.9%) 1068,729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 474,537, 674,823), stdev = 277,546
[info]   CI (99.9%): [≈ 0, 1543,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   882,515 ±(99.9%) 1994,089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 882,515, 1273,343), stdev = 517,859
[info]   CI (99.9%): [≈ 0, 2876,604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,640 ±(99.9%) 5,374 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,640, 3,136), stdev = 1,396
[info]   CI (99.9%): [≈ 0, 6,014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1,207 ±(99.9%) 10,142 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,207, 5,918), stdev = 2,634
[info]   CI (99.9%): [≈ 0, 11,349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,200, 2,000), stdev = 1,095
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90,76% complete, ETA 00:12:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 676470,930 ops/s
[info] # Warmup Iteration   2: 697438,886 ops/s
[info] # Warmup Iteration   3: 697281,930 ops/s
[info] # Warmup Iteration   4: 696281,018 ops/s
[info] # Warmup Iteration   5: 698796,887 ops/s
[info] Iteration   1: 699305,921 ops/s
[info]                  ·gc.alloc.rate:      7,109 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 700045,447 ops/s
[info]                  ·gc.alloc.rate:      7,117 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 696038,603 ops/s
[info]                  ·gc.alloc.rate:      7,076 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 696817,599 ops/s
[info]                  ·gc.alloc.rate:      7,085 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 697661,685 ops/s
[info]                  ·gc.alloc.rate:      7,092 MB/sec
[info]                  ·gc.alloc.rate.norm: 16,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   697973,851 ±(99.9%) 6456,426 ops/s [Average]
[info]   (min, avg, max) = (696038,603, 697973,851, 700045,447), stdev = 1676,713
[info]   CI (99.9%): [691517,425, 704430,277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7,096 ±(99.9%) 0,065 MB/sec [Average]
[info]   (min, avg, max) = (7,076, 7,096, 7,117), stdev = 0,017
[info]   CI (99.9%): [7,030, 7,161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (16,001, 16,001, 16,001), stdev = 0,001
[info]   CI (99.9%): [16,001, 16,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90,96% complete, ETA 00:12:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28473,434 ops/s
[info] # Warmup Iteration   2: 37912,270 ops/s
[info] # Warmup Iteration   3: 38218,670 ops/s
[info] # Warmup Iteration   4: 38355,207 ops/s
[info] # Warmup Iteration   5: 38256,117 ops/s
[info] Iteration   1: 38225,101 ops/s
[info]                  ·gc.alloc.rate:                   1904,367 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,059 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55220,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,714 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 38404,127 ops/s
[info]                  ·gc.alloc.rate:                   1913,656 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,636 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82553,862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,266 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 38374,405 ops/s
[info]                  ·gc.alloc.rate:                   1911,925 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2018,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82775,846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,854 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 38316,549 ops/s
[info]                  ·gc.alloc.rate:                   1909,260 MB/sec
[info]                  ·gc.alloc.rate.norm:              78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,407 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     83063,110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,565 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 38385,223 ops/s
[info]                  ·gc.alloc.rate:               1912,273 MB/sec
[info]                  ·gc.alloc.rate.norm:          78416,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2025,621 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 83064,042 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   38341,081 ±(99.9%) 279,583 ops/s [Average]
[info]   (min, avg, max) = (38225,101, 38341,081, 38404,127), stdev = 72,607
[info]   CI (99.9%): [38061,498, 38620,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1910,296 ±(99.9%) 14,158 MB/sec [Average]
[info]   (min, avg, max) = (1904,367, 1910,296, 1913,656), stdev = 3,677
[info]   CI (99.9%): [1896,138, 1924,455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78416,011 ±(99.9%) 0,002 B/op [Average]
[info]   (min, avg, max) = (78416,011, 78416,011, 78416,012), stdev = 0,001
[info]   CI (99.9%): [78416,009, 78416,012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1884,390 ±(99.9%) 1169,671 MB/sec [Average]
[info]   (min, avg, max) = (1341,059, 1884,390, 2025,621), stdev = 303,760
[info]   CI (99.9%): [714,719, 3054,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   77335,509 ±(99.9%) 47610,969 B/op [Average]
[info]   (min, avg, max) = (55220,688, 77335,509, 83064,042), stdev = 12364,418
[info]   CI (99.9%): [29724,540, 124946,479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,046, 0,104), stdev = 0,040
[info]   CI (99.9%): [≈ 0, 0,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1,880 ±(99.9%) 6,320 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1,880, 4,266), stdev = 1,641
[info]   CI (99.9%): [≈ 0, 8,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 91,16% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130361,796 ops/s
[info] # Warmup Iteration   2: 141531,781 ops/s
[info] # Warmup Iteration   3: 142452,451 ops/s
[info] # Warmup Iteration   4: 142751,433 ops/s
[info] # Warmup Iteration   5: 142566,662 ops/s
[info] Iteration   1: 143091,898 ops/s
[info]                  ·gc.alloc.rate:                   1071,320 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,782 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7400,282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,229 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 141993,778 ops/s
[info]                  ·gc.alloc.rate:                   1063,270 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,447 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14900,230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,231 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 142434,926 ops/s
[info]                  ·gc.alloc.rate:                   1066,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14852,539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,460 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 141150,164 ops/s
[info]                  ·gc.alloc.rate:               1057,175 MB/sec
[info]                  ·gc.alloc.rate.norm:          11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,285 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 7493,754 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 140573,352 ops/s
[info]                  ·gc.alloc.rate:               1052,442 MB/sec
[info]                  ·gc.alloc.rate.norm:          11784,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1344,872 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15058,289 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle":
[info]   141848,824 ±(99.9%) 3862,521 ops/s [Average]
[info]   (min, avg, max) = (140573,352, 141848,824, 143091,898), stdev = 1003,084
[info]   CI (99.9%): [137986,302, 145711,345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   1062,137 ±(99.9%) 28,757 MB/sec [Average]
[info]   (min, avg, max) = (1052,442, 1062,137, 1071,320), stdev = 7,468
[info]   CI (99.9%): [1033,381, 1090,894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   11784,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (11784,003, 11784,003, 11784,003), stdev = 0,001
[info]   CI (99.9%): [11784,003, 11784,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   1075,715 ±(99.9%) 1417,240 MB/sec [Average]
[info]   (min, avg, max) = (672,285, 1075,715, 1344,872), stdev = 368,053
[info]   CI (99.9%): [≈ 0, 2492,955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   11941,019 ±(99.9%) 15800,279 B/op [Average]
[info]   (min, avg, max) = (7400,282, 11941,019, 15058,289), stdev = 4103,282
[info]   CI (99.9%): [≈ 0, 27741,298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,184 ±(99.9%) 0,741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,184, 0,460), stdev = 0,192
[info]   CI (99.9%): [≈ 0, 0,925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.count":
[info]   8,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,600, 2,000), stdev = 0,548
[info]   CI (99.9%): [8,000, 8,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 91,37% complete, ETA 00:11:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4865688,847 ops/s
[info] # Warmup Iteration   2: 5698597,894 ops/s
[info] # Warmup Iteration   3: 5709418,825 ops/s
[info] # Warmup Iteration   4: 5691274,401 ops/s
[info] # Warmup Iteration   5: 5706039,153 ops/s
[info] Iteration   1: 5726268,289 ops/s
[info]                  ·gc.alloc.rate:                   4307,615 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4070,282 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1118,766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 5708551,668 ops/s
[info]                  ·gc.alloc.rate:                   4294,353 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4757,740 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1311,761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 5698691,407 ops/s
[info]                  ·gc.alloc.rate:                   4286,598 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4082,797 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1127,708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5685829,635 ops/s
[info]                  ·gc.alloc.rate:                   4277,591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4085,304 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1130,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 5667072,633 ops/s
[info]                  ·gc.alloc.rate:                   4262,904 MB/sec
[info]                  ·gc.alloc.rate.norm:              1184,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,467 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1324,695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   5697282,727 ±(99.9%) 86381,524 ops/s [Average]
[info]   (min, avg, max) = (5667072,633, 5697282,727, 5726268,289), stdev = 22433,007
[info]   CI (99.9%): [5610901,203, 5783664,250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   4285,812 ±(99.9%) 65,043 MB/sec [Average]
[info]   (min, avg, max) = (4262,904, 4285,812, 4307,615), stdev = 16,891
[info]   CI (99.9%): [4220,770, 4350,855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1184,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1184,000, 1184,000, 1184,000), stdev = 0,001
[info]   CI (99.9%): [1184,000, 1184,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   4353,118 ±(99.9%) 1443,170 MB/sec [Average]
[info]   (min, avg, max) = (4070,282, 4353,118, 4769,467), stdev = 374,787
[info]   CI (99.9%): [2909,948, 5796,287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1202,741 ±(99.9%) 406,689 B/op [Average]
[info]   (min, avg, max) = (1118,766, 1202,741, 1324,695), stdev = 105,616
[info]   CI (99.9%): [796,053, 1609,430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,075 ±(99.9%) 0,146 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,075, 0,125), stdev = 0,038
[info]   CI (99.9%): [≈ 0, 0,221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,021 ±(99.9%) 0,040 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,021, 0,034), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   12,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 91,57% complete, ETA 00:11:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2074386,483 ops/s
[info] # Warmup Iteration   2: 8427541,086 ops/s
[info] # Warmup Iteration   3: 8637243,642 ops/s
[info] # Warmup Iteration   4: 8637899,691 ops/s
[info] # Warmup Iteration   5: 8646365,749 ops/s
[info] Iteration   1: 8688057,810 ops/s
[info]                  ·gc.alloc.rate:               927,408 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121,884 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   2: 8680457,415 ops/s
[info]                  ·gc.alloc.rate:               926,569 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 121,990 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 8658824,312 ops/s
[info]                  ·gc.alloc.rate:                   924,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,361 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244,347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 8654871,471 ops/s
[info]                  ·gc.alloc.rate:               923,872 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 122,222 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 8642662,833 ops/s
[info]                  ·gc.alloc.rate:                   922,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,147 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     244,722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   8664974,768 ±(99.9%) 72302,603 ops/s [Average]
[info]   (min, avg, max) = (8642662,833, 8664974,768, 8688057,810), stdev = 18776,757
[info]   CI (99.9%): [8592672,165, 8737277,372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   924,981 ±(99.9%) 7,476 MB/sec [Average]
[info]   (min, avg, max) = (922,747, 924,981, 927,408), stdev = 1,941
[info]   CI (99.9%): [917,506, 932,457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   941,255 ±(99.9%) 1416,597 MB/sec [Average]
[info]   (min, avg, max) = (672,126, 941,255, 1344,361), stdev = 367,886
[info]   CI (99.9%): [≈ 0, 2357,852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   171,033 ±(99.9%) 258,370 B/op [Average]
[info]   (min, avg, max) = (121,884, 171,033, 244,722), stdev = 67,098
[info]   CI (99.9%): [≈ 0, 429,403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,028 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,77% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3755450,135 ops/s
[info] # Warmup Iteration   2: 5366071,645 ops/s
[info] # Warmup Iteration   3: 5323391,314 ops/s
[info] # Warmup Iteration   4: 5356099,991 ops/s
[info] # Warmup Iteration   5: 5386567,165 ops/s
[info] Iteration   1: 5398673,731 ops/s
[info]                  ·gc.alloc.rate:                   2551,603 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2030,602 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     592,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,024 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5364715,261 ops/s
[info]                  ·gc.alloc.rate:                   2535,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     795,517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,018 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 5382976,514 ops/s
[info]                  ·gc.alloc.rate:                   2544,778 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,737 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     793,982 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5378999,300 ops/s
[info]                  ·gc.alloc.rate:                   2542,862 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,528 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     795,397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,012 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5378336,776 ops/s
[info]                  ·gc.alloc.rate:                   2542,218 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2040,054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     597,038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,006 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   5380740,316 ±(99.9%) 46853,749 ops/s [Average]
[info]   (min, avg, max) = (5364715,261, 5380740,316, 5398673,731), stdev = 12167,770
[info]   CI (99.9%): [5333886,567, 5427594,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2543,488 ±(99.9%) 21,605 MB/sec [Average]
[info]   (min, avg, max) = (2535,978, 2543,488, 2551,603), stdev = 5,611
[info]   CI (99.9%): [2521,882, 2565,093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   2443,300 ±(99.9%) 1434,167 MB/sec [Average]
[info]   (min, avg, max) = (2030,602, 2443,300, 2718,528), stdev = 372,449
[info]   CI (99.9%): [1009,133, 3877,467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   714,804 ±(99.9%) 422,728 B/op [Average]
[info]   (min, avg, max) = (592,086, 714,804, 795,517), stdev = 109,781
[info]   CI (99.9%): [292,076, 1137,533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,050 ±(99.9%) 0,091 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,050, 0,083), stdev = 0,024
[info]   CI (99.9%): [≈ 0, 0,141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,027 B/op [Average]
[info]   (min, avg, max) = (0,006, 0,015, 0,024), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   18,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,600, 4,000), stdev = 0,548
[info]   CI (99.9%): [18,000, 18,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 91,97% complete, ETA 00:10:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8652817,411 ops/s
[info] # Warmup Iteration   2: 9045504,431 ops/s
[info] # Warmup Iteration   3: 9081051,078 ops/s
[info] # Warmup Iteration   4: 9077869,482 ops/s
[info] # Warmup Iteration   5: 9151806,462 ops/s
[info] Iteration   1: 9141246,954 ops/s
[info]                  ·gc.alloc.rate:                   975,737 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,518 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231,668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 9170829,182 ops/s
[info]                  ·gc.alloc.rate:               978,905 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,117 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115,349 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 9152953,667 ops/s
[info]                  ·gc.alloc.rate:                   976,927 MB/sec
[info]                  ·gc.alloc.rate.norm:              168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     231,132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 9042663,533 ops/s
[info]                  ·gc.alloc.rate:               965,257 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,086 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 116,974 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 9145893,469 ops/s
[info]                  ·gc.alloc.rate:               976,198 MB/sec
[info]                  ·gc.alloc.rate.norm:          168,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 115,655 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   9130717,361 ±(99.9%) 194429,635 ops/s [Average]
[info]   (min, avg, max) = (9042663,533, 9130717,361, 9170829,182), stdev = 50492,759
[info]   CI (99.9%): [8936287,726, 9325146,997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   974,605 ±(99.9%) 20,655 MB/sec [Average]
[info]   (min, avg, max) = (965,257, 974,605, 978,905), stdev = 5,364
[info]   CI (99.9%): [953,950, 995,259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (168,000, 168,000, 168,000), stdev = 0,001
[info]   CI (99.9%): [168,000, 168,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,160 ±(99.9%) 1418,781 MB/sec [Average]
[info]   (min, avg, max) = (672,038, 941,160, 1345,518), stdev = 368,453
[info]   CI (99.9%): [≈ 0, 2359,941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   162,156 ±(99.9%) 243,416 B/op [Average]
[info]   (min, avg, max) = (115,349, 162,156, 231,668), stdev = 63,214
[info]   CI (99.9%): [≈ 0, 405,571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,003 ±(99.9%) 0,018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,011), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 92,17% complete, ETA 00:10:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5250744,940 ops/s
[info] # Warmup Iteration   2: 6584809,925 ops/s
[info] # Warmup Iteration   3: 6634255,361 ops/s
[info] # Warmup Iteration   4: 6624526,775 ops/s
[info] # Warmup Iteration   5: 6580769,872 ops/s
[info] Iteration   1: 6607118,704 ops/s
[info]                  ·gc.alloc.rate:                   3291,098 MB/sec
[info]                  ·gc.alloc.rate.norm:              784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,885 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     643,162 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6608442,151 ops/s
[info]                  ·gc.alloc.rate:                   3292,060 MB/sec
[info]                  ·gc.alloc.rate.norm:              784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3383,908 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     805,873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 6603832,532 ops/s
[info]                  ·gc.alloc.rate:                   3289,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3390,919 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     808,183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 6588410,875 ops/s
[info]                  ·gc.alloc.rate:                   3281,880 MB/sec
[info]                  ·gc.alloc.rate.norm:              784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3396,338 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     811,343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 6604118,439 ops/s
[info]                  ·gc.alloc.rate:                   3289,128 MB/sec
[info]                  ·gc.alloc.rate.norm:              784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3400,115 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     810,455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   6602384,540 ±(99.9%) 31013,427 ops/s [Average]
[info]   (min, avg, max) = (6588410,875, 6602384,540, 6608442,151), stdev = 8054,088
[info]   CI (99.9%): [6571371,113, 6633397,967] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3288,724 ±(99.9%) 15,439 MB/sec [Average]
[info]   (min, avg, max) = (3281,880, 3288,724, 3292,060), stdev = 4,009
[info]   CI (99.9%): [3273,285, 3304,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   784,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (784,000, 784,000, 784,000), stdev = 0,001
[info]   CI (99.9%): [784,000, 784,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   3254,233 ±(99.9%) 1193,506 MB/sec [Average]
[info]   (min, avg, max) = (2699,885, 3254,233, 3400,115), stdev = 309,950
[info]   CI (99.9%): [2060,727, 4447,739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   775,803 ±(99.9%) 285,637 B/op [Average]
[info]   (min, avg, max) = (643,162, 775,803, 811,343), stdev = 74,179
[info]   CI (99.9%): [490,167, 1061,440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,046 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,046, 0,062), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,011 ±(99.9%) 0,016 B/op [Average]
[info]   (min, avg, max) = (0,005, 0,011, 0,015), stdev = 0,004
[info]   CI (99.9%): [≈ 0, 0,027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   24,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,800, 5,000), stdev = 0,447
[info]   CI (99.9%): [24,000, 24,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,000, 2,000), stdev = 0,001
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 92,37% complete, ETA 00:10:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4867888,113 ops/s
[info] # Warmup Iteration   2: 5065915,357 ops/s
[info] # Warmup Iteration   3: 5092346,996 ops/s
[info] # Warmup Iteration   4: 5082675,969 ops/s
[info] # Warmup Iteration   5: 5101892,613 ops/s
[info] Iteration   1: 5094810,991 ops/s
[info]                  ·gc.alloc.rate:                   2667,272 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,119 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     833,839 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 5108967,352 ops/s
[info]                  ·gc.alloc.rate:                   2674,692 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2705,024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     833,345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,026 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 5097503,247 ops/s
[info]                  ·gc.alloc.rate:                   2668,671 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2709,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     836,620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,019 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 5090398,189 ops/s
[info]                  ·gc.alloc.rate:                   2665,152 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2035,625 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     629,365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 5069263,074 ops/s
[info]                  ·gc.alloc.rate:                   2653,557 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2715,833 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     843,338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,013 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle":
[info]   5092188,571 ±(99.9%) 55981,339 ops/s [Average]
[info]   (min, avg, max) = (5069263,074, 5092188,571, 5108967,352), stdev = 14538,176
[info]   CI (99.9%): [5036207,232, 5148169,910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   2665,869 ±(99.9%) 29,812 MB/sec [Average]
[info]   (min, avg, max) = (2653,557, 2665,869, 2674,692), stdev = 7,742
[info]   CI (99.9%): [2636,057, 2695,681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   2573,029 ±(99.9%) 1157,043 MB/sec [Average]
[info]   (min, avg, max) = (2035,625, 2573,029, 2715,833), stdev = 300,480
[info]   CI (99.9%): [1415,986, 3730,072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   795,301 ±(99.9%) 357,519 B/op [Average]
[info]   (min, avg, max) = (629,365, 795,301, 843,338), stdev = 92,847
[info]   CI (99.9%): [437,782, 1152,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,058, 0,083), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,018 ±(99.9%) 0,021 B/op [Average]
[info]   (min, avg, max) = (0,013, 0,018, 0,026), stdev = 0,005
[info]   CI (99.9%): [≈ 0, 0,039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   19,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,800, 4,000), stdev = 0,447
[info]   CI (99.9%): [19,000, 19,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 92,57% complete, ETA 00:09:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2749430,456 ops/s
[info] # Warmup Iteration   2: 3369375,301 ops/s
[info] # Warmup Iteration   3: 3395482,380 ops/s
[info] # Warmup Iteration   4: 3390605,014 ops/s
[info] # Warmup Iteration   5: 3382765,971 ops/s
[info] Iteration   1: 3404684,461 ops/s
[info]                  ·gc.alloc.rate:                   813,369 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     311,930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,038 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 3395523,853 ops/s
[info]                  ·gc.alloc.rate:               811,204 MB/sec
[info]                  ·gc.alloc.rate.norm:          376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,091 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311,520 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 3392976,754 ops/s
[info]                  ·gc.alloc.rate:                   810,579 MB/sec
[info]                  ·gc.alloc.rate.norm:              376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,499 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     623,204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 3397638,492 ops/s
[info]                  ·gc.alloc.rate:               811,754 MB/sec
[info]                  ·gc.alloc.rate.norm:          376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 311,016 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 3399667,678 ops/s
[info]                  ·gc.alloc.rate:               812,067 MB/sec
[info]                  ·gc.alloc.rate.norm:          376,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,320 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 310,832 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   3398098,248 ±(99.9%) 17102,874 ops/s [Average]
[info]   (min, avg, max) = (3392976,754, 3398098,248, 3404684,461), stdev = 4441,562
[info]   CI (99.9%): [3380995,373, 3415201,122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   811,795 ±(99.9%) 4,030 MB/sec [Average]
[info]   (min, avg, max) = (810,579, 811,795, 813,369), stdev = 1,047
[info]   CI (99.9%): [807,764, 815,825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   376,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (376,000, 376,000, 376,000), stdev = 0,001
[info]   CI (99.9%): [376,000, 376,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   806,628 ±(99.9%) 1155,668 MB/sec [Average]
[info]   (min, avg, max) = (671,320, 806,628, 1343,499), stdev = 300,123
[info]   CI (99.9%): [≈ 0, 1962,296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   373,700 ±(99.9%) 537,078 B/op [Average]
[info]   (min, avg, max) = (310,832, 373,700, 623,204), stdev = 139,477
[info]   CI (99.9%): [≈ 0, 910,778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,041
[info]   CI (99.9%): [≈ 0, 0,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,013 ±(99.9%) 0,072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,038), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 92,77% complete, ETA 00:09:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1534293,405 ops/s
[info] # Warmup Iteration   2: 6736967,327 ops/s
[info] # Warmup Iteration   3: 6852605,015 ops/s
[info] # Warmup Iteration   4: 6829187,738 ops/s
[info] # Warmup Iteration   5: 6749338,425 ops/s
[info] Iteration   1: 6626170,901 ops/s
[info]                  ·gc.alloc.rate:                   639,937 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     160,113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,631 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 6645686,403 ops/s
[info]                  ·gc.alloc.rate:               641,825 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 159,653 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 6575764,940 ops/s
[info]                  ·gc.alloc.rate:               635,047 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,073 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 160,862 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 6618163,865 ops/s
[info]                  ·gc.alloc.rate:                   639,205 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,139 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159,832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,005 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 6640487,060 ops/s
[info]                  ·gc.alloc.rate:                   641,235 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     159,297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,010 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   6621254,634 ±(99.9%) 106674,519 ops/s [Average]
[info]   (min, avg, max) = (6575764,940, 6621254,634, 6645686,403), stdev = 27703,034
[info]   CI (99.9%): [6514580,115, 6727929,152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   639,450 ±(99.9%) 10,279 MB/sec [Average]
[info]   (min, avg, max) = (635,047, 639,450, 641,825), stdev = 2,669
[info]   CI (99.9%): [629,170, 649,729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   672,892 ±(99.9%) 4,308 MB/sec [Average]
[info]   (min, avg, max) = (672,016, 672,892, 674,139), stdev = 1,119
[info]   CI (99.9%): [668,585, 677,200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   159,951 ±(99.9%) 2,268 B/op [Average]
[info]   (min, avg, max) = (159,297, 159,951, 160,862), stdev = 0,589
[info]   CI (99.9%): [157,683, 162,220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,544 ±(99.9%) 4,547 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,544, 2,656), stdev = 1,181
[info]   CI (99.9%): [≈ 0, 5,090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,129 ±(99.9%) 1,080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,129, 0,631), stdev = 0,280
[info]   CI (99.9%): [≈ 0, 1,209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 92,97% complete, ETA 00:09:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1804801,301 ops/s
[info] # Warmup Iteration   2: 2340215,118 ops/s
[info] # Warmup Iteration   3: 2336449,518 ops/s
[info] # Warmup Iteration   4: 2339389,466 ops/s
[info] # Warmup Iteration   5: 2333183,583 ops/s
[info] Iteration   1: 2333087,431 ops/s
[info]                  ·gc.alloc.rate:                   723,417 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,433 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452,933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2333343,927 ops/s
[info]                  ·gc.alloc.rate:                   723,391 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,995 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     453,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2342915,761 ops/s
[info]                  ·gc.alloc.rate:                   726,484 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,184 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     451,525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 2337244,113 ops/s
[info]                  ·gc.alloc.rate:               724,753 MB/sec
[info]                  ·gc.alloc.rate.norm:          488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 453,254 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 2339713,085 ops/s
[info]                  ·gc.alloc.rate:                   725,540 MB/sec
[info]                  ·gc.alloc.rate.norm:              488,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,193 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     452,791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,014 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   2337260,863 ±(99.9%) 16194,632 ops/s [Average]
[info]   (min, avg, max) = (2333087,431, 2337260,863, 2342915,761), stdev = 4205,694
[info]   CI (99.9%): [2321066,232, 2353455,495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   724,717 ±(99.9%) 5,184 MB/sec [Average]
[info]   (min, avg, max) = (723,391, 724,717, 726,484), stdev = 1,346
[info]   CI (99.9%): [719,533, 729,901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (488,000, 488,000, 488,000), stdev = 0,001
[info]   CI (99.9%): [488,000, 488,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   672,391 ±(99.9%) 2,944 MB/sec [Average]
[info]   (min, avg, max) = (671,433, 672,391, 673,193), stdev = 0,764
[info]   CI (99.9%): [669,447, 675,335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   452,766 ±(99.9%) 2,805 B/op [Average]
[info]   (min, avg, max) = (451,525, 452,766, 453,329), stdev = 0,729
[info]   CI (99.9%): [449,961, 455,572] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,059 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 93,17% complete, ETA 00:09:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8533116,752 ops/s
[info] # Warmup Iteration   2: 9029014,230 ops/s
[info] # Warmup Iteration   3: 9028911,454 ops/s
[info] # Warmup Iteration   4: 9049627,067 ops/s
[info] # Warmup Iteration   5: 8985052,566 ops/s
[info] Iteration   1: 8939471,439 ops/s
[info]                  ·gc.alloc.rate:                   863,289 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1347,551 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     237,265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,015 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 8955489,415 ops/s
[info]                  ·gc.alloc.rate:                   864,974 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,888 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     118,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,004 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 8945757,725 ops/s
[info]                  ·gc.alloc.rate:               863,922 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,064 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118,244 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 8930138,028 ops/s
[info]                  ·gc.alloc.rate:                   862,461 MB/sec
[info]                  ·gc.alloc.rate.norm:              152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,197 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     236,901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,007 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 8940424,459 ops/s
[info]                  ·gc.alloc.rate:               863,358 MB/sec
[info]                  ·gc.alloc.rate.norm:          152,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 118,312 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8942256,213 ±(99.9%) 35778,830 ops/s [Average]
[info]   (min, avg, max) = (8930138,028, 8942256,213, 8955489,415), stdev = 9291,648
[info]   CI (99.9%): [8906477,384, 8978035,043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   863,601 ±(99.9%) 3,572 MB/sec [Average]
[info]   (min, avg, max) = (862,461, 863,601, 864,974), stdev = 0,928
[info]   CI (99.9%): [860,029, 867,173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (152,000, 152,000, 152,000), stdev = 0,001
[info]   CI (99.9%): [152,000, 152,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,741 ±(99.9%) 1420,590 MB/sec [Average]
[info]   (min, avg, max) = (672,007, 941,741, 1347,551), stdev = 368,923
[info]   CI (99.9%): [≈ 0, 2362,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   165,793 ±(99.9%) 250,593 B/op [Average]
[info]   (min, avg, max) = (118,244, 165,793, 237,265), stdev = 65,078
[info]   CI (99.9%): [≈ 0, 416,386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,005 ±(99.9%) 0,024 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,005, 0,015), stdev = 0,006
[info]   CI (99.9%): [≈ 0, 0,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 93,37% complete, ETA 00:08:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8898102,608 ops/s
[info] # Warmup Iteration   2: 9249858,973 ops/s
[info] # Warmup Iteration   3: 9098455,608 ops/s
[info] # Warmup Iteration   4: 9094221,735 ops/s
[info] # Warmup Iteration   5: 9073021,550 ops/s
[info] Iteration   1: 9097425,397 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 9080663,118 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 9106445,540 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 9085517,281 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 9076525,568 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   9089315,381 ±(99.9%) 47632,997 ops/s [Average]
[info]   (min, avg, max) = (9076525,568, 9089315,381, 9106445,540), stdev = 12370,138
[info]   CI (99.9%): [9041682,384, 9136948,377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 93,57% complete, ETA 00:08:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3094781,988 ops/s
[info] # Warmup Iteration   2: 3845665,563 ops/s
[info] # Warmup Iteration   3: 3862492,815 ops/s
[info] # Warmup Iteration   4: 3865219,940 ops/s
[info] # Warmup Iteration   5: 3877003,128 ops/s
[info] Iteration   1: 3860614,544 ops/s
[info]                  ·gc.alloc.rate:                   1236,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     546,368 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 3882783,203 ops/s
[info]                  ·gc.alloc.rate:                   1243,360 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,263 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     543,280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 3851322,298 ops/s
[info]                  ·gc.alloc.rate:                   1233,459 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1341,007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     547,945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,009 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3766731,532 ops/s
[info]                  ·gc.alloc.rate:               1206,260 MB/sec
[info]                  ·gc.alloc.rate.norm:          504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 280,413 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 3884660,691 ops/s
[info]                  ·gc.alloc.rate:                   1243,770 MB/sec
[info]                  ·gc.alloc.rate.norm:              504,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,611 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3849222,453 ±(99.9%) 185882,171 ops/s [Average]
[info]   (min, avg, max) = (3766731,532, 3849222,453, 3884660,691), stdev = 48273,010
[info]   CI (99.9%): [3663340,282, 4035104,624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1232,608 ±(99.9%) 59,278 MB/sec [Average]
[info]   (min, avg, max) = (1206,260, 1232,608, 1243,770), stdev = 15,394
[info]   CI (99.9%): [1173,330, 1291,887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (504,000, 504,000, 504,000), stdev = 0,001
[info]   CI (99.9%): [504,000, 504,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1207,025 ±(99.9%) 1153,556 MB/sec [Average]
[info]   (min, avg, max) = (671,132, 1207,025, 1342,611), stdev = 299,575
[info]   CI (99.9%): [53,469, 2360,581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   492,412 ±(99.9%) 456,400 B/op [Average]
[info]   (min, avg, max) = (280,413, 492,412, 547,945), stdev = 118,526
[info]   CI (99.9%): [36,012, 948,812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,012 ±(99.9%) 0,029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,017), stdev = 0,008
[info]   CI (99.9%): [≈ 0, 0,041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   9,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 93,78% complete, ETA 00:08:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441938,504 ops/s
[info] # Warmup Iteration   2: 459334,302 ops/s
[info] # Warmup Iteration   3: 456908,660 ops/s
[info] # Warmup Iteration   4: 459873,450 ops/s
[info] # Warmup Iteration   5: 459304,108 ops/s
[info] Iteration   1: 458323,302 ops/s
[info]                  ·gc.alloc.rate:      221,317 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 456622,088 ops/s
[info]                  ·gc.alloc.rate:               220,488 MB/sec
[info]                  ·gc.alloc.rate.norm:          760,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,580 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1763,362 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 453080,465 ops/s
[info]                  ·gc.alloc.rate:      218,774 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 452299,872 ops/s
[info]                  ·gc.alloc.rate:                   218,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,588 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1780,060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,052 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 451456,480 ops/s
[info]                  ·gc.alloc.rate:      217,967 MB/sec
[info]                  ·gc.alloc.rate.norm: 760,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle":
[info]   454356,441 ±(99.9%) 11412,550 ops/s [Average]
[info]   (min, avg, max) = (451456,480, 454356,441, 458323,302), stdev = 2963,803
[info]   CI (99.9%): [442943,891, 465768,992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate":
[info]   219,394 ±(99.9%) 5,533 MB/sec [Average]
[info]   (min, avg, max) = (217,967, 219,394, 221,317), stdev = 1,437
[info]   CI (99.9%): [213,861, 224,927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   760,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,001, 760,001, 760,001), stdev = 0,001
[info]   CI (99.9%): [760,001, 760,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   204,634 ±(99.9%) 1078,974 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,634, 511,588), stdev = 280,206
[info]   CI (99.9%): [≈ 0, 1283,608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   708,684 ±(99.9%) 3736,758 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 708,684, 1780,060), stdev = 970,424
[info]   CI (99.9%): [≈ 0, 4445,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,003 ±(99.9%) 0,026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,003, 0,015), stdev = 0,007
[info]   CI (99.9%): [≈ 0, 0,029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,010 ±(99.9%) 0,089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,010, 0,052), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeUPickle:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 93,98% complete, ETA 00:08:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1255073,777 ops/s
[info] # Warmup Iteration   2: 1665094,463 ops/s
[info] # Warmup Iteration   3: 1690268,585 ops/s
[info] # Warmup Iteration   4: 1688326,863 ops/s
[info] # Warmup Iteration   5: 1696629,030 ops/s
[info] Iteration   1: 1697123,997 ops/s
[info]                  ·gc.alloc.rate:                   3002,091 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3376,622 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3131,322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,058 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1702411,172 ops/s
[info]                  ·gc.alloc.rate:                   3011,451 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2707,260 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2502,784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 1678282,210 ops/s
[info]                  ·gc.alloc.rate:                   2968,409 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,706 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2543,245 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1686148,517 ops/s
[info]                  ·gc.alloc.rate:                   2982,548 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3394,726 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3168,740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        5,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1700042,952 ops/s
[info]                  ·gc.alloc.rate:                   3006,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2718,126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2517,215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,039 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1692801,770 ±(99.9%) 39388,735 ops/s [Average]
[info]   (min, avg, max) = (1678282,210, 1692801,770, 1702411,172), stdev = 10229,129
[info]   CI (99.9%): [1653413,034, 1732190,505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2994,141 ±(99.9%) 69,550 MB/sec [Average]
[info]   (min, avg, max) = (2968,409, 2994,141, 3011,451), stdev = 18,062
[info]   CI (99.9%): [2924,591, 3063,691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2784,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2784,000, 2784,000, 2784,000), stdev = 0,001
[info]   CI (99.9%): [2784,000, 2784,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2981,688 ±(99.9%) 1420,360 MB/sec [Average]
[info]   (min, avg, max) = (2707,260, 2981,688, 3394,726), stdev = 368,863
[info]   CI (99.9%): [1561,328, 4402,048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2772,661 ±(99.9%) 1328,660 B/op [Average]
[info]   (min, avg, max) = (2502,784, 2772,661, 3168,740), stdev = 345,049
[info]   CI (99.9%): [1444,002, 4101,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,054 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,054, 0,083), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,050 ±(99.9%) 0,066 B/op [Average]
[info]   (min, avg, max) = (0,039, 0,050, 0,077), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   22,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (4,000, 4,400, 5,000), stdev = 0,548
[info]   CI (99.9%): [22,000, 22,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   9,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,800, 2,000), stdev = 0,447
[info]   CI (99.9%): [9,000, 9,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 94,18% complete, ETA 00:07:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194538,706 ops/s
[info] # Warmup Iteration   2: 2013148,371 ops/s
[info] # Warmup Iteration   3: 2015460,852 ops/s
[info] # Warmup Iteration   4: 2019767,365 ops/s
[info] # Warmup Iteration   5: 2016388,786 ops/s
[info] Iteration   1: 2019661,595 ops/s
[info]                  ·gc.alloc.rate:                   564,638 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,570 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     398,646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,003 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,003 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 2008136,711 ops/s
[info]                  ·gc.alloc.rate:                   561,392 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,075 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     528,317 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2,648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,076 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 2020266,276 ops/s
[info]                  ·gc.alloc.rate:               564,745 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 525,148 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2015215,231 ops/s
[info]                  ·gc.alloc.rate:                   563,431 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,818 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     525,423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,016 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 2022385,845 ops/s
[info]                  ·gc.alloc.rate:      565,436 MB/sec
[info]                  ·gc.alloc.rate.norm: 440,000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2017133,131 ±(99.9%) 21817,785 ops/s [Average]
[info]   (min, avg, max) = (2008136,711, 2017133,131, 2022385,845), stdev = 5666,009
[info]   CI (99.9%): [1995315,347, 2038950,916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   563,928 ±(99.9%) 6,125 MB/sec [Average]
[info]   (min, avg, max) = (561,392, 563,928, 565,436), stdev = 1,591
[info]   CI (99.9%): [557,803, 570,054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   506,499 ±(99.9%) 1123,270 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,499, 674,075), stdev = 291,710
[info]   CI (99.9%): [≈ 0, 1629,770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   395,507 ±(99.9%) 877,574 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 395,507, 528,317), stdev = 227,903
[info]   CI (99.9%): [≈ 0, 1273,081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,534 ±(99.9%) 4,550 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,534, 2,648), stdev = 1,182
[info]   CI (99.9%): [≈ 0, 5,085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,419 ±(99.9%) 3,566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,419, 2,076), stdev = 0,926
[info]   CI (99.9%): [≈ 0, 3,985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,38% complete, ETA 00:07:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 846088,470 ops/s
[info] # Warmup Iteration   2: 1588440,471 ops/s
[info] # Warmup Iteration   3: 1585604,013 ops/s
[info] # Warmup Iteration   4: 1580301,399 ops/s
[info] # Warmup Iteration   5: 1580602,384 ops/s
[info] Iteration   1: 1589616,955 ops/s
[info]                  ·gc.alloc.rate:                   1026,208 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,490 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     665,801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,021 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 1568185,881 ops/s
[info]                  ·gc.alloc.rate:                   1012,191 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1351,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,042 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1567244,080 ops/s
[info]                  ·gc.alloc.rate:               1011,670 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 676,662 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1586201,771 ops/s
[info]                  ·gc.alloc.rate:                   1023,958 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,202 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1337,725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,062 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1590621,190 ops/s
[info]                  ·gc.alloc.rate:               1026,718 MB/sec
[info]                  ·gc.alloc.rate.norm:          1016,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,353 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 667,314 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1580373,976 ±(99.9%) 44961,322 ops/s [Average]
[info]   (min, avg, max) = (1567244,080, 1580373,976, 1590621,190), stdev = 11676,312
[info]   CI (99.9%): [1535412,654, 1625335,297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1020,149 ±(99.9%) 29,173 MB/sec [Average]
[info]   (min, avg, max) = (1011,670, 1020,149, 1026,718), stdev = 7,576
[info]   CI (99.9%): [990,976, 1049,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1016,000, 1016,000, 1016,000), stdev = 0,001
[info]   CI (99.9%): [1016,000, 1016,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   942,974 ±(99.9%) 1420,649 MB/sec [Average]
[info]   (min, avg, max) = (672,490, 942,974, 1348,202), stdev = 368,938
[info]   CI (99.9%): [≈ 0, 2363,623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   939,723 ±(99.9%) 1422,768 B/op [Average]
[info]   (min, avg, max) = (665,801, 939,723, 1351,111), stdev = 369,488
[info]   CI (99.9%): [≈ 0, 2362,491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,025 ±(99.9%) 0,104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 94,58% complete, ETA 00:07:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2683683,169 ops/s
[info] # Warmup Iteration   2: 2835357,961 ops/s
[info] # Warmup Iteration   3: 2842253,870 ops/s
[info] # Warmup Iteration   4: 2846606,034 ops/s
[info] # Warmup Iteration   5: 2850198,088 ops/s
[info] Iteration   1: 2861009,092 ops/s
[info]                  ·gc.alloc.rate:                   799,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,412 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     371,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,034 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2859393,861 ops/s
[info]                  ·gc.alloc.rate:                   799,302 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,397 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     370,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 2865618,675 ops/s
[info]                  ·gc.alloc.rate:               801,061 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      673,428 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369,895 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2862086,174 ops/s
[info]                  ·gc.alloc.rate:                   800,055 MB/sec
[info]                  ·gc.alloc.rate.norm:              440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1345,403 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     739,921 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,023 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2864499,716 ops/s
[info]                  ·gc.alloc.rate:               800,552 MB/sec
[info]                  ·gc.alloc.rate.norm:          440,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,876 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 369,277 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2862521,504 ±(99.9%) 9772,757 ops/s [Average]
[info]   (min, avg, max) = (2859393,861, 2862521,504, 2865618,675), stdev = 2537,954
[info]   CI (99.9%): [2852748,747, 2872294,261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   800,146 ±(99.9%) 2,634 MB/sec [Average]
[info]   (min, avg, max) = (799,302, 800,146, 801,061), stdev = 0,684
[info]   CI (99.9%): [797,512, 802,780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (440,000, 440,000, 440,000), stdev = 0,001
[info]   CI (99.9%): [440,000, 440,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   807,903 ±(99.9%) 1157,020 MB/sec [Average]
[info]   (min, avg, max) = (671,876, 807,903, 1345,403), stdev = 300,474
[info]   CI (99.9%): [≈ 0, 1964,923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   444,275 ±(99.9%) 636,410 B/op [Average]
[info]   (min, avg, max) = (369,277, 444,275, 739,921), stdev = 165,274
[info]   CI (99.9%): [≈ 0, 1080,685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,014 ±(99.9%) 0,057 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,014, 0,034), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 94,78% complete, ETA 00:06:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 893304,321 ops/s
[info] # Warmup Iteration   2: 1281062,085 ops/s
[info] # Warmup Iteration   3: 1286591,535 ops/s
[info] # Warmup Iteration   4: 1281581,926 ops/s
[info] # Warmup Iteration   5: 1279710,665 ops/s
[info] Iteration   1: 1289574,151 ops/s
[info]                  ·gc.alloc.rate:                   865,222 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     821,881 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,076 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1289494,341 ops/s
[info]                  ·gc.alloc.rate:               865,273 MB/sec
[info]                  ·gc.alloc.rate.norm:          1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1341,731 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1637,480 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   3: 1288761,988 ops/s
[info]                  ·gc.alloc.rate:               864,680 MB/sec
[info]                  ·gc.alloc.rate.norm:          1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,069 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 818,330 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 1286024,112 ops/s
[info]                  ·gc.alloc.rate:                   862,899 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          670,108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     820,065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,051 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1288350,297 ops/s
[info]                  ·gc.alloc.rate:                   864,339 MB/sec
[info]                  ·gc.alloc.rate.norm:              1056,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,044 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1637,188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1288440,978 ±(99.9%) 5562,203 ops/s [Average]
[info]   (min, avg, max) = (1286024,112, 1288440,978, 1289574,151), stdev = 1444,487
[info]   CI (99.9%): [1282878,775, 1294003,181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   864,483 ±(99.9%) 3,722 MB/sec [Average]
[info]   (min, avg, max) = (862,899, 864,483, 865,273), stdev = 0,967
[info]   CI (99.9%): [860,760, 868,205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1056,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1056,000, 1056,000, 1056,000), stdev = 0,001
[info]   CI (99.9%): [1056,000, 1056,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   939,070 ±(99.9%) 1412,456 MB/sec [Average]
[info]   (min, avg, max) = (670,069, 939,070, 1341,731), stdev = 366,810
[info]   CI (99.9%): [≈ 0, 2351,526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1146,989 ±(99.9%) 1723,640 B/op [Average]
[info]   (min, avg, max) = (818,330, 1146,989, 1637,480), stdev = 447,624
[info]   CI (99.9%): [≈ 0, 2870,629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,105 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,062), stdev = 0,027
[info]   CI (99.9%): [≈ 0, 0,129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,031 ±(99.9%) 0,128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,031, 0,076), stdev = 0,033
[info]   CI (99.9%): [≈ 0, 0,158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 94,98% complete, ETA 00:06:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1006908,312 ops/s
[info] # Warmup Iteration   2: 1214692,774 ops/s
[info] # Warmup Iteration   3: 1223398,042 ops/s
[info] # Warmup Iteration   4: 1227023,551 ops/s
[info] # Warmup Iteration   5: 1225328,934 ops/s
[info] Iteration   1: 1220004,208 ops/s
[info]                  ·gc.alloc.rate:                   1655,747 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,163 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1734,041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1217961,237 ops/s
[info]                  ·gc.alloc.rate:                   1653,037 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,660 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2607,154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1225501,208 ops/s
[info]                  ·gc.alloc.rate:                   1663,093 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,741 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1729,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,053 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 1222009,876 ops/s
[info]                  ·gc.alloc.rate:                   1658,550 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2022,965 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2605,321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,027 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 1223710,666 ops/s
[info]                  ·gc.alloc.rate:                   1660,465 MB/sec
[info]                  ·gc.alloc.rate.norm:              2136,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1349,914 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1736,511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,054 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle":
[info]   1221837,439 ±(99.9%) 11446,780 ops/s [Average]
[info]   (min, avg, max) = (1217961,237, 1221837,439, 1225501,208), stdev = 2972,692
[info]   CI (99.9%): [1210390,659, 1233284,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate":
[info]   1658,178 ±(99.9%) 15,143 MB/sec [Average]
[info]   (min, avg, max) = (1653,037, 1658,178, 1663,093), stdev = 3,933
[info]   CI (99.9%): [1643,035, 1673,321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   2136,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2136,000, 2136,000, 2136,000), stdev = 0,001
[info]   CI (99.9%): [2136,000, 2136,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1616,289 ±(99.9%) 1420,241 MB/sec [Average]
[info]   (min, avg, max) = (1344,163, 1616,289, 2022,965), stdev = 368,832
[info]   CI (99.9%): [196,047, 3036,530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   2082,544 ±(99.9%) 1840,882 B/op [Average]
[info]   (min, avg, max) = (1729,692, 2082,544, 2607,154), stdev = 478,071
[info]   CI (99.9%): [241,662, 3923,426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,036 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,037, 0,042), stdev = 0,009
[info]   CI (99.9%): [0,002, 0,073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,048 ±(99.9%) 0,046 B/op [Average]
[info]   (min, avg, max) = (0,027, 0,048, 0,054), stdev = 0,012
[info]   CI (99.9%): [0,002, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 95,18% complete, ETA 00:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1316831,262 ops/s
[info] # Warmup Iteration   2: 1948392,123 ops/s
[info] # Warmup Iteration   3: 1955501,308 ops/s
[info] # Warmup Iteration   4: 1963315,216 ops/s
[info] # Warmup Iteration   5: 1960777,021 ops/s
[info] Iteration   1: 1971770,043 ops/s
[info]                  ·gc.alloc.rate:                   1654,216 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,369 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1071,956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 1944368,161 ops/s
[info]                  ·gc.alloc.rate:                   1630,617 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,502 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1087,578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         5,000 ms
[info] Iteration   3: 1967693,934 ops/s
[info]                  ·gc.alloc.rate:                   1650,397 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,911 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1613,941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 1966777,896 ops/s
[info]                  ·gc.alloc.rate:                   1649,393 MB/sec
[info]                  ·gc.alloc.rate.norm:              1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1346,769 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1077,812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,017 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 1965865,184 ops/s
[info]                  ·gc.alloc.rate:               1648,197 MB/sec
[info]                  ·gc.alloc.rate.norm:          1320,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      2023,305 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 1620,415 B/op
[info]                  ·gc.count:                    3,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1963295,044 ±(99.9%) 41657,251 ops/s [Average]
[info]   (min, avg, max) = (1944368,161, 1963295,044, 1971770,043), stdev = 10818,256
[info]   CI (99.9%): [1921637,793, 2004952,294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1646,564 ±(99.9%) 35,408 MB/sec [Average]
[info]   (min, avg, max) = (1630,617, 1646,564, 1654,216), stdev = 9,195
[info]   CI (99.9%): [1611,157, 1681,972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1320,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1320,000, 1320,000, 1320,000), stdev = 0,001
[info]   CI (99.9%): [1320,000, 1320,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   1614,971 ±(99.9%) 1425,899 MB/sec [Average]
[info]   (min, avg, max) = (1343,369, 1614,971, 2023,305), stdev = 370,301
[info]   CI (99.9%): [189,073, 3040,870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1294,340 ±(99.9%) 1135,056 B/op [Average]
[info]   (min, avg, max) = (1071,956, 1294,340, 1620,415), stdev = 294,771
[info]   CI (99.9%): [159,284, 2429,397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,042), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,017 ±(99.9%) 0,045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,033), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   12,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,400, 3,000), stdev = 0,548
[info]   CI (99.9%): [12,000, 12,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   10,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2,000, 5,000), stdev = 1,871
[info]   CI (99.9%): [10,000, 10,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 95,38% complete, ETA 00:06:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 338263,195 ops/s
[info] # Warmup Iteration   2: 2946591,449 ops/s
[info] # Warmup Iteration   3: 2955830,367 ops/s
[info] # Warmup Iteration   4: 2959715,442 ops/s
[info] # Warmup Iteration   5: 2956447,116 ops/s
[info] Iteration   1: 2960149,386 ops/s
[info]                  ·gc.alloc.rate:                   767,373 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,094 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358,406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 2961283,605 ops/s
[info]                  ·gc.alloc.rate:               767,632 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,771 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 357,581 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 2958703,791 ops/s
[info]                  ·gc.alloc.rate:               766,993 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,759 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 357,873 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2953143,033 ops/s
[info]                  ·gc.alloc.rate:                   765,602 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,137 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     358,191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2951730,813 ops/s
[info]                  ·gc.alloc.rate:               765,107 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 358,361 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2957002,126 ±(99.9%) 16541,116 ops/s [Average]
[info]   (min, avg, max) = (2951730,813, 2957002,126, 2961283,605), stdev = 4295,675
[info]   CI (99.9%): [2940461,009, 2973543,242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   766,541 ±(99.9%) 4,315 MB/sec [Average]
[info]   (min, avg, max) = (765,107, 766,541, 767,632), stdev = 1,121
[info]   CI (99.9%): [762,226, 770,857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space":
[info]   672,756 ±(99.9%) 3,173 MB/sec [Average]
[info]   (min, avg, max) = (672,021, 672,756, 674,094), stdev = 0,824
[info]   CI (99.9%): [669,584, 675,929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm":
[info]   358,082 ±(99.9%) 1,346 B/op [Average]
[info]   (min, avg, max) = (357,581, 358,082, 358,406), stdev = 0,350
[info]   CI (99.9%): [356,736, 359,429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space":
[info]   0,012 ±(99.9%) 0,072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,012, 0,042), stdev = 0,019
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm":
[info]   0,007 ±(99.9%) 0,038 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,007, 0,022), stdev = 0,010
[info]   CI (99.9%): [≈ 0, 0,045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,58% complete, ETA 00:05:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1739345,973 ops/s
[info] # Warmup Iteration   2: 2959529,365 ops/s
[info] # Warmup Iteration   3: 2997908,599 ops/s
[info] # Warmup Iteration   4: 3007998,993 ops/s
[info] # Warmup Iteration   5: 3002240,468 ops/s
[info] Iteration   1: 2981083,207 ops/s
[info]                  ·gc.alloc.rate:                   1409,227 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,605 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1066,777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,055 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2949201,568 ops/s
[info]                  ·gc.alloc.rate:               1393,979 MB/sec
[info]                  ·gc.alloc.rate.norm:          744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1348,672 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 719,819 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 3008959,681 ops/s
[info]                  ·gc.alloc.rate:                   1422,142 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1350,677 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     706,613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 3003095,964 ops/s
[info]                  ·gc.alloc.rate:                   1419,733 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1352,273 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     708,648 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2976875,300 ops/s
[info]                  ·gc.alloc.rate:                   1407,362 MB/sec
[info]                  ·gc.alloc.rate.norm:              744,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1353,646 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715,603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2983843,144 ±(99.9%) 91482,548 ops/s [Average]
[info]   (min, avg, max) = (2949201,568, 2983843,144, 3008959,681), stdev = 23757,727
[info]   CI (99.9%): [2892360,596, 3075325,692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1410,489 ±(99.9%) 43,274 MB/sec [Average]
[info]   (min, avg, max) = (1393,979, 1410,489, 1422,142), stdev = 11,238
[info]   CI (99.9%): [1367,215, 1453,762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   744,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (744,000, 744,000, 744,000), stdev = 0,001
[info]   CI (99.9%): [744,000, 744,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   1485,174 ±(99.9%) 1152,577 MB/sec [Average]
[info]   (min, avg, max) = (1348,672, 1485,174, 2020,605), stdev = 299,320
[info]   CI (99.9%): [332,598, 2637,751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   783,492 ±(99.9%) 610,134 B/op [Average]
[info]   (min, avg, max) = (706,613, 783,492, 1066,777), stdev = 158,450
[info]   CI (99.9%): [173,358, 1393,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,160 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,042, 0,104), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,022 ±(99.9%) 0,085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,022, 0,055), stdev = 0,022
[info]   CI (99.9%): [≈ 0, 0,106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 95,78% complete, ETA 00:05:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2407872,128 ops/s
[info] # Warmup Iteration   2: 2987338,086 ops/s
[info] # Warmup Iteration   3: 2991598,592 ops/s
[info] # Warmup Iteration   4: 3003809,858 ops/s
[info] # Warmup Iteration   5: 2978397,968 ops/s
[info] Iteration   1: 3009550,059 ops/s
[info]                  ·gc.alloc.rate:                   780,078 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,733 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352,902 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 3010949,224 ops/s
[info]                  ·gc.alloc.rate:                   780,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,852 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     351,698 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 3004725,525 ops/s
[info]                  ·gc.alloc.rate:               778,889 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 352,390 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 2970974,649 ops/s
[info]                  ·gc.alloc.rate:               770,169 MB/sec
[info]                  ·gc.alloc.rate.norm:          408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,078 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 356,036 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 3000823,576 ops/s
[info]                  ·gc.alloc.rate:                   777,803 MB/sec
[info]                  ·gc.alloc.rate.norm:              408,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,991 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     352,496 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,011 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2999404,607 ±(99.9%) 63119,928 ops/s [Average]
[info]   (min, avg, max) = (2970974,649, 2999404,607, 3010949,224), stdev = 16392,045
[info]   CI (99.9%): [2936284,678, 3062524,535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   777,501 ±(99.9%) 16,317 MB/sec [Average]
[info]   (min, avg, max) = (770,169, 777,501, 780,567), stdev = 4,237
[info]   CI (99.9%): [761,184, 793,818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   408,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (408,000, 408,000, 408,000), stdev = 0,001
[info]   CI (99.9%): [408,000, 408,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   672,876 ±(99.9%) 4,258 MB/sec [Average]
[info]   (min, avg, max) = (671,991, 672,876, 674,733), stdev = 1,106
[info]   CI (99.9%): [668,618, 677,135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   353,104 ±(99.9%) 6,527 B/op [Average]
[info]   (min, avg, max) = (351,698, 353,104, 356,036), stdev = 1,695
[info]   CI (99.9%): [346,577, 359,632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,017 ±(99.9%) 0,067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,017, 0,042), stdev = 0,017
[info]   CI (99.9%): [≈ 0, 0,084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,009 ±(99.9%) 0,035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,009, 0,022), stdev = 0,009
[info]   CI (99.9%): [≈ 0, 0,044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 95,98% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2459010,798 ops/s
[info] # Warmup Iteration   2: 3046338,052 ops/s
[info] # Warmup Iteration   3: 3043741,808 ops/s
[info] # Warmup Iteration   4: 3044135,429 ops/s
[info] # Warmup Iteration   5: 3033719,118 ops/s
[info] Iteration   1: 3049379,427 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2914580,251 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3051982,497 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3043080,462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3048687,623 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3021542,052 ±(99.9%) 230582,141 ops/s [Average]
[info]   (min, avg, max) = (2914580,251, 3021542,052, 3051982,497), stdev = 59881,450
[info]   CI (99.9%): [2790959,911, 3252124,193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 96,18% complete, ETA 00:05:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2355025,983 ops/s
[info] # Warmup Iteration   2: 2934603,174 ops/s
[info] # Warmup Iteration   3: 2960348,656 ops/s
[info] # Warmup Iteration   4: 2979798,801 ops/s
[info] # Warmup Iteration   5: 2964720,606 ops/s
[info] Iteration   1: 2975221,647 ops/s
[info]                  ·gc.alloc.rate:                   1436,698 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1340,922 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     709,336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 2970041,320 ops/s
[info]                  ·gc.alloc.rate:                   1434,247 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2011,882 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1066,086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2968149,388 ops/s
[info]                  ·gc.alloc.rate:                   1433,245 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1342,180 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     711,712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,033 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 2953900,194 ops/s
[info]                  ·gc.alloc.rate:                   1426,382 MB/sec
[info]                  ·gc.alloc.rate.norm:              760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1343,496 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     715,837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,022 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2973220,628 ops/s
[info]                  ·gc.alloc.rate:               1435,549 MB/sec
[info]                  ·gc.alloc.rate.norm:          760,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1345,336 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 712,241 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2968106,635 ±(99.9%) 32351,375 ops/s [Average]
[info]   (min, avg, max) = (2953900,194, 2968106,635, 2975221,647), stdev = 8401,549
[info]   CI (99.9%): [2935755,261, 3000458,010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1433,224 ±(99.9%) 15,561 MB/sec [Average]
[info]   (min, avg, max) = (1426,382, 1433,224, 1436,698), stdev = 4,041
[info]   CI (99.9%): [1417,663, 1448,785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   760,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (760,000, 760,000, 760,000), stdev = 0,001
[info]   CI (99.9%): [760,000, 760,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   1476,763 ±(99.9%) 1151,901 MB/sec [Average]
[info]   (min, avg, max) = (1340,922, 1476,763, 2011,882), stdev = 299,145
[info]   CI (99.9%): [324,862, 2628,664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   783,042 ±(99.9%) 609,340 B/op [Average]
[info]   (min, avg, max) = (709,336, 783,042, 1066,086), stdev = 158,244
[info]   CI (99.9%): [173,703, 1392,382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,037 ±(99.9%) 0,088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,037, 0,062), stdev = 0,023
[info]   CI (99.9%): [≈ 0, 0,125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,020 ±(99.9%) 0,047 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,020, 0,033), stdev = 0,012
[info]   CI (99.9%): [≈ 0, 0,066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96,39% complete, ETA 00:04:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7954,312 ops/s
[info] # Warmup Iteration   2: 12214,722 ops/s
[info] # Warmup Iteration   3: 12790,263 ops/s
[info] # Warmup Iteration   4: 13199,381 ops/s
[info] # Warmup Iteration   5: 13563,097 ops/s
[info] Iteration   1: 13578,752 ops/s
[info]                  ·gc.alloc.rate:                   1974,129 MB/sec
[info]                  ·gc.alloc.rate.norm:              228827,188 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2014,788 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233540,156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,413 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 13576,367 ops/s
[info]                  ·gc.alloc.rate:                   1973,879 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832,030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,451 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233883,410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4,826 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 13602,686 ops/s
[info]                  ·gc.alloc.rate:                   1977,713 MB/sec
[info]                  ·gc.alloc.rate.norm:              228832,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,838 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     233821,813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16,858 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 13518,775 ops/s
[info]                  ·gc.alloc.rate:                   1965,581 MB/sec
[info]                  ·gc.alloc.rate.norm:              228822,814 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2024,330 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     235662,067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,286 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 13636,631 ops/s
[info]                  ·gc.alloc.rate:                   1982,043 MB/sec
[info]                  ·gc.alloc.rate.norm:              228808,032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,418 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     234046,161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9,609 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   13582,642 ±(99.9%) 166,181 ops/s [Average]
[info]   (min, avg, max) = (13518,775, 13582,642, 13636,631), stdev = 43,157
[info]   CI (99.9%): [13416,461, 13748,824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1974,669 ±(99.9%) 23,355 MB/sec [Average]
[info]   (min, avg, max) = (1965,581, 1974,669, 1982,043), stdev = 6,065
[info]   CI (99.9%): [1951,314, 1998,024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   228824,419 ±(99.9%) 38,249 B/op [Average]
[info]   (min, avg, max) = (228808,032, 228824,419, 228832,032), stdev = 9,933
[info]   CI (99.9%): [228786,171, 228862,668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2020,965 ±(99.9%) 19,585 MB/sec [Average]
[info]   (min, avg, max) = (2014,788, 2020,965, 2027,418), stdev = 5,086
[info]   CI (99.9%): [2001,380, 2040,550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   234190,721 ±(99.9%) 3244,338 B/op [Average]
[info]   (min, avg, max) = (233540,156, 234190,721, 235662,067), stdev = 842,544
[info]   CI (99.9%): [230946,383, 237435,059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,079 ±(99.9%) 0,192 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,079, 0,146), stdev = 0,050
[info]   CI (99.9%): [≈ 0, 0,271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   9,198 ±(99.9%) 22,249 B/op [Average]
[info]   (min, avg, max) = (2,413, 9,198, 16,858), stdev = 5,778
[info]   CI (99.9%): [≈ 0, 31,448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   15,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,000, 3,000), stdev = 0,001
[info]   CI (99.9%): [15,000, 15,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96,59% complete, ETA 00:04:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7463,980 ops/s
[info] # Warmup Iteration   2: 16858,634 ops/s
[info] # Warmup Iteration   3: 16930,261 ops/s
[info] # Warmup Iteration   4: 17212,010 ops/s
[info] # Warmup Iteration   5: 17067,925 ops/s
[info] Iteration   1: 17109,987 ops/s
[info]                  ·gc.alloc.rate:      241,939 MB/sec
[info]                  ·gc.alloc.rate.norm: 22256,026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 16950,674 ops/s
[info]                  ·gc.alloc.rate:                   239,681 MB/sec
[info]                  ·gc.alloc.rate.norm:              22255,987 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,506 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     47496,689 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2,898 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 17248,073 ops/s
[info]                  ·gc.alloc.rate:      243,709 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240,024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 17096,358 ops/s
[info]                  ·gc.alloc.rate:               241,607 MB/sec
[info]                  ·gc.alloc.rate.norm:          22240,026 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,579 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 47091,186 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   5: 17048,099 ops/s
[info]                  ·gc.alloc.rate:      240,884 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240,026 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   17090,638 ±(99.9%) 415,586 ops/s [Average]
[info]   (min, avg, max) = (16950,674, 17090,638, 17248,073), stdev = 107,926
[info]   CI (99.9%): [16675,052, 17506,225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   241,564 ±(99.9%) 5,696 MB/sec [Average]
[info]   (min, avg, max) = (239,681, 241,564, 243,709), stdev = 1,479
[info]   CI (99.9%): [235,868, 247,260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22246,418 ±(99.9%) 33,706 B/op [Average]
[info]   (min, avg, max) = (22240,024, 22246,418, 22256,026), stdev = 8,753
[info]   CI (99.9%): [22212,712, 22280,123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   204,617 ±(99.9%) 1078,886 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204,617, 511,579), stdev = 280,183
[info]   CI (99.9%): [≈ 0, 1283,503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18917,575 ±(99.9%) 99748,440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18917,575, 47496,689), stdev = 25904,353
[info]   CI (99.9%): [≈ 0, 118666,015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,006 ±(99.9%) 0,054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,006, 0,031), stdev = 0,014
[info]   CI (99.9%): [≈ 0, 0,060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,580 ±(99.9%) 4,991 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,580, 2,898), stdev = 1,296
[info]   CI (99.9%): [≈ 0, 5,570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   2,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96,79% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22304,955 ops/s
[info] # Warmup Iteration   2: 27293,933 ops/s
[info] # Warmup Iteration   3: 41484,143 ops/s
[info] # Warmup Iteration   4: 41807,406 ops/s
[info] # Warmup Iteration   5: 41885,731 ops/s
[info] Iteration   1: 41364,558 ops/s
[info]                  ·gc.alloc.rate:               383,045 MB/sec
[info]                  ·gc.alloc.rate.norm:          14576,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,536 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 19465,480 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 41883,556 ops/s
[info]                  ·gc.alloc.rate:      387,862 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 41785,016 ops/s
[info]                  ·gc.alloc.rate:                   386,953 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,524 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19268,468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,346 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 41774,670 ops/s
[info]                  ·gc.alloc.rate:                   386,913 MB/sec
[info]                  ·gc.alloc.rate.norm:              14576,011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          511,594 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19273,080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,143 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   5: 41823,978 ops/s
[info]                  ·gc.alloc.rate:      387,305 MB/sec
[info]                  ·gc.alloc.rate.norm: 14576,010 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   41726,356 ±(99.9%) 795,964 ops/s [Average]
[info]   (min, avg, max) = (41364,558, 41726,356, 41883,556), stdev = 206,709
[info]   CI (99.9%): [40930,392, 42522,320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   386,416 ±(99.9%) 7,402 MB/sec [Average]
[info]   (min, avg, max) = (383,045, 386,416, 387,862), stdev = 1,922
[info]   CI (99.9%): [379,014, 393,817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576,010 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (14576,010, 14576,010, 14576,011), stdev = 0,001
[info]   CI (99.9%): [14576,009, 14576,011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   306,931 ±(99.9%) 1078,906 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 306,931, 511,594), stdev = 280,188
[info]   CI (99.9%): [≈ 0, 1385,837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11601,406 ±(99.9%) 40781,725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11601,406, 19465,480), stdev = 10590,884
[info]   CI (99.9%): [≈ 0, 52383,130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,013 ±(99.9%) 0,070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,013, 0,036), stdev = 0,018
[info]   CI (99.9%): [≈ 0, 0,083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,498 ±(99.9%) 2,640 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,498, 1,346), stdev = 0,686
[info]   CI (99.9%): [≈ 0, 3,138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   3,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   7,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,400, 3,000), stdev = 1,342
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96,99% complete, ETA 00:04:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1489,225 ops/s
[info] # Warmup Iteration   2: 3871,547 ops/s
[info] # Warmup Iteration   3: 3710,220 ops/s
[info] # Warmup Iteration   4: 4242,209 ops/s
[info] # Warmup Iteration   5: 4295,578 ops/s
[info] Iteration   1: 4303,743 ops/s
[info]                  ·gc.alloc.rate:                   1403,637 MB/sec
[info]                  ·gc.alloc.rate.norm:              513104,102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,276 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     493963,328 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7,612 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 4300,194 ops/s
[info]                  ·gc.alloc.rate:                   1402,439 MB/sec
[info]                  ·gc.alloc.rate.norm:              513104,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2029,399 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     742487,377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30,475 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   3: 4302,199 ops/s
[info]                  ·gc.alloc.rate:               1403,088 MB/sec
[info]                  ·gc.alloc.rate.norm:          513104,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1353,708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 495045,815 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Iteration   4: 4247,254 ops/s
[info]                  ·gc.alloc.rate:                   1385,214 MB/sec
[info]                  ·gc.alloc.rate.norm:              513104,096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1354,765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     501825,567 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15,427 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 4305,310 ops/s
[info]                  ·gc.alloc.rate:               1404,061 MB/sec
[info]                  ·gc.alloc.rate.norm:          513104,095 B/op
[info]                  ·gc.churn.PS_Eden_Space:      1356,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 495553,219 B/op
[info]                  ·gc.count:                    2,000 counts
[info]                  ·gc.time:                     3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   4291,740 ±(99.9%) 96,037 ops/s [Average]
[info]   (min, avg, max) = (4247,254, 4291,740, 4305,310), stdev = 24,941
[info]   CI (99.9%): [4195,703, 4387,777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1399,688 ±(99.9%) 31,244 MB/sec [Average]
[info]   (min, avg, max) = (1385,214, 1399,688, 1404,061), stdev = 8,114
[info]   CI (99.9%): [1368,444, 1430,932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   513104,097 ±(99.9%) 0,012 B/op [Average]
[info]   (min, avg, max) = (513104,095, 513104,097, 513104,102), stdev = 0,003
[info]   CI (99.9%): [513104,084, 513104,109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   1489,037 ±(99.9%) 1163,191 MB/sec [Average]
[info]   (min, avg, max) = (1351,276, 1489,037, 2029,399), stdev = 302,077
[info]   CI (99.9%): [325,846, 2652,228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   545775,061 ±(99.9%) 423603,381 B/op [Average]
[info]   (min, avg, max) = (493963,328, 545775,061, 742487,377), stdev = 110008,453
[info]   CI (99.9%): [122171,681, 969378,442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,029 ±(99.9%) 0,134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,029, 0,083), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10,703 ±(99.9%) 49,158 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,703, 30,475), stdev = 12,766
[info]   CI (99.9%): [≈ 0, 59,861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   11,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,200, 3,000), stdev = 0,447
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   11,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 2,200, 3,000), stdev = 1,095
[info]   CI (99.9%): [11,000, 11,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97,19% complete, ETA 00:03:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_1d4655e3/target/ced04832/jackson-module-afterburner-2.9.6.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 36274,019 ops/s
[info] # Warmup Iteration   2: 69815,252 ops/s
[info] # Warmup Iteration   3: 68957,786 ops/s
[info] # Warmup Iteration   4: 69439,870 ops/s
[info] # Warmup Iteration   5: 69806,738 ops/s
[info] Iteration   1: 69963,818 ops/s
[info]                  ·gc.alloc.rate:                   893,547 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100,068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,084 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15163,312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,873 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 69795,203 ops/s
[info]                  ·gc.alloc.rate:               891,350 MB/sec
[info]                  ·gc.alloc.rate.norm:          20099,966 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,067 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15200,237 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   3: 69867,345 ops/s
[info]                  ·gc.alloc.rate:                   892,232 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099,998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1348,742 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30384,157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,938 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 70068,273 ops/s
[info]                  ·gc.alloc.rate:               894,898 MB/sec
[info]                  ·gc.alloc.rate.norm:          20100,037 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15155,989 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 69566,176 ops/s
[info]                  ·gc.alloc.rate:               888,315 MB/sec
[info]                  ·gc.alloc.rate.norm:          20099,995 B/op
[info]                  ·gc.churn.PS_Eden_Space:      674,648 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 15265,330 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   69852,163 ±(99.9%) 731,709 ops/s [Average]
[info]   (min, avg, max) = (69566,176, 69852,163, 70068,273), stdev = 190,022
[info]   CI (99.9%): [69120,455, 70583,872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   892,068 ±(99.9%) 9,593 MB/sec [Average]
[info]   (min, avg, max) = (888,315, 892,068, 894,898), stdev = 2,491
[info]   CI (99.9%): [882,475, 901,662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100,013 ±(99.9%) 0,154 B/op [Average]
[info]   (min, avg, max) = (20099,966, 20100,013, 20100,068), stdev = 0,040
[info]   CI (99.9%): [20099,859, 20100,166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   809,264 ±(99.9%) 1161,268 MB/sec [Average]
[info]   (min, avg, max) = (674,067, 809,264, 1348,742), stdev = 301,578
[info]   CI (99.9%): [≈ 0, 1970,532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   18233,805 ±(99.9%) 26155,079 B/op [Average]
[info]   (min, avg, max) = (15155,989, 18233,805, 30384,157), stdev = 6792,391
[info]   CI (99.9%): [≈ 0, 44388,884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,025 ±(99.9%) 0,143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,025, 0,083), stdev = 0,037
[info]   CI (99.9%): [≈ 0, 0,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,562 ±(99.9%) 3,226 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,562, 1,873), stdev = 0,838
[info]   CI (99.9%): [≈ 0, 3,788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   6,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97,39% complete, ETA 00:03:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 83541,290 ops/s
[info] # Warmup Iteration   2: 95631,132 ops/s
[info] # Warmup Iteration   3: 96668,198 ops/s
[info] # Warmup Iteration   4: 95232,034 ops/s
[info] # Warmup Iteration   5: 95986,393 ops/s
[info] Iteration   1: 96462,822 ops/s
[info]                  ·gc.alloc.rate:                   630,496 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,684 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11009,043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52,953 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 96617,724 ops/s
[info]                  ·gc.alloc.rate:                   631,567 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,754 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10991,499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,017 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 96874,229 ops/s
[info]                  ·gc.alloc.rate:      633,193 MB/sec
[info]                  ·gc.alloc.rate.norm: 10288,005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 96757,876 ops/s
[info]                  ·gc.alloc.rate:               632,540 MB/sec
[info]                  ·gc.alloc.rate.norm:          10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,810 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 10942,982 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 96804,494 ops/s
[info]                  ·gc.alloc.rate:                   632,699 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,618 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10937,105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,338 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   96703,429 ±(99.9%) 631,517 ops/s [Average]
[info]   (min, avg, max) = (96462,822, 96703,429, 96874,229), stdev = 164,003
[info]   CI (99.9%): [96071,912, 97334,946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   632,099 ±(99.9%) 4,132 MB/sec [Average]
[info]   (min, avg, max) = (630,496, 632,099, 633,193), stdev = 1,073
[info]   CI (99.9%): [627,967, 636,231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (10288,004, 10288,004, 10288,005), stdev = 0,001
[info]   CI (99.9%): [10288,003, 10288,006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   538,973 ±(99.9%) 1160,187 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 538,973, 674,754), stdev = 301,297
[info]   CI (99.9%): [≈ 0, 1699,160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8776,126 ±(99.9%) 18891,645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8776,126, 11009,043), stdev = 4906,100
[info]   CI (99.9%): [≈ 0, 27667,771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,666 ±(99.9%) 5,553 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,666, 3,245), stdev = 1,442
[info]   CI (99.9%): [≈ 0, 6,219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10,862 ±(99.9%) 90,618 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10,862, 52,953), stdev = 23,533
[info]   CI (99.9%): [≈ 0, 101,480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 2,000), stdev = 0,894
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97,59% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93726,187 ops/s
[info] # Warmup Iteration   2: 105107,915 ops/s
[info] # Warmup Iteration   3: 103537,721 ops/s
[info] # Warmup Iteration   4: 104260,076 ops/s
[info] # Warmup Iteration   5: 104663,880 ops/s
[info] Iteration   1: 105034,591 ops/s
[info]                  ·gc.alloc.rate:      12,812 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 104869,211 ops/s
[info]                  ·gc.alloc.rate:      12,794 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 104686,481 ops/s
[info]                  ·gc.alloc.rate:      12,771 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 104644,003 ops/s
[info]                  ·gc.alloc.rate:      12,767 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 104626,771 ops/s
[info]                  ·gc.alloc.rate:      12,763 MB/sec
[info]                  ·gc.alloc.rate.norm: 192,004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   104772,211 ±(99.9%) 675,763 ops/s [Average]
[info]   (min, avg, max) = (104626,771, 104772,211, 105034,591), stdev = 175,493
[info]   CI (99.9%): [104096,449, 105447,974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   12,781 ±(99.9%) 0,081 MB/sec [Average]
[info]   (min, avg, max) = (12,763, 12,781, 12,812), stdev = 0,021
[info]   CI (99.9%): [12,700, 12,863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   192,004 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (192,004, 192,004, 192,004), stdev = 0,001
[info]   CI (99.9%): [192,004, 192,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97,79% complete, ETA 00:02:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 375408,607 ops/s
[info] # Warmup Iteration   2: 424491,323 ops/s
[info] # Warmup Iteration   3: 429434,752 ops/s
[info] # Warmup Iteration   4: 428844,587 ops/s
[info] # Warmup Iteration   5: 428113,506 ops/s
[info] Iteration   1: 427486,825 ops/s
[info]                  ·gc.alloc.rate:                   2290,001 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7440,675 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 427982,907 ops/s
[info]                  ·gc.alloc.rate:                   2293,122 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2699,533 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9926,407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,153 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 428147,034 ops/s
[info]                  ·gc.alloc.rate:                   2293,580 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2027,434 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7453,554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,153 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 428112,186 ops/s
[info]                  ·gc.alloc.rate:                   2293,720 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2031,106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7466,599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,153 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 426873,764 ops/s
[info]                  ·gc.alloc.rate:                   2286,389 MB/sec
[info]                  ·gc.alloc.rate.norm:              8432,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2711,286 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9998,986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,077 B/op
[info]                  ·gc.count:                        4,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   427720,543 ±(99.9%) 2087,686 ops/s [Average]
[info]   (min, avg, max) = (426873,764, 427720,543, 428147,034), stdev = 542,165
[info]   CI (99.9%): [425632,858, 429808,229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2291,362 ±(99.9%) 12,202 MB/sec [Average]
[info]   (min, avg, max) = (2286,389, 2291,362, 2293,720), stdev = 3,169
[info]   CI (99.9%): [2279,160, 2303,565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (8432,001, 8432,001, 8432,001), stdev = 0,001
[info]   CI (99.9%): [8432,001, 8432,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   2298,026 ±(99.9%) 1432,170 MB/sec [Average]
[info]   (min, avg, max) = (2020,772, 2298,026, 2711,286), stdev = 371,930
[info]   CI (99.9%): [865,856, 3730,197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8457,244 ±(99.9%) 5292,918 B/op [Average]
[info]   (min, avg, max) = (7440,675, 8457,244, 9998,986), stdev = 1374,554
[info]   CI (99.9%): [3164,327, 13750,162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   0,033 ±(99.9%) 0,044 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,033, 0,042), stdev = 0,011
[info]   CI (99.9%): [≈ 0, 0,077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   0,123 ±(99.9%) 0,161 B/op [Average]
[info]   (min, avg, max) = (0,077, 0,123, 0,153), stdev = 0,042
[info]   CI (99.9%): [≈ 0, 0,284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   17,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (3,000, 3,400, 4,000), stdev = 0,548
[info]   CI (99.9%): [17,000, 17,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 97,99% complete, ETA 00:02:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294465,038 ops/s
[info] # Warmup Iteration   2: 474888,394 ops/s
[info] # Warmup Iteration   3: 475222,216 ops/s
[info] # Warmup Iteration   4: 475353,458 ops/s
[info] # Warmup Iteration   5: 475217,961 ops/s
[info] Iteration   1: 473859,081 ops/s
[info]                  ·gc.alloc.rate:                   566,036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,430 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2230,053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   2: 476094,726 ops/s
[info]                  ·gc.alloc.rate:                   568,741 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,544 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2219,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,619 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   3: 475312,891 ops/s
[info]                  ·gc.alloc.rate:                   567,722 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2225,438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,138 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 474251,355 ops/s
[info]                  ·gc.alloc.rate:               566,500 MB/sec
[info]                  ·gc.alloc.rate.norm:          1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,087 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2230,406 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   5: 473978,520 ops/s
[info]                  ·gc.alloc.rate:                   566,204 MB/sec
[info]                  ·gc.alloc.rate.norm:              1880,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2233,907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,069 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   474699,315 ±(99.9%) 3728,297 ops/s [Average]
[info]   (min, avg, max) = (473859,081, 474699,315, 476094,726), stdev = 968,227
[info]   CI (99.9%): [470971,018, 478427,611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   567,040 ±(99.9%) 4,457 MB/sec [Average]
[info]   (min, avg, max) = (566,036, 567,040, 568,741), stdev = 1,157
[info]   CI (99.9%): [562,583, 571,498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1880,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1880,001, 1880,001, 1880,001), stdev = 0,001
[info]   CI (99.9%): [1880,001, 1880,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   671,978 ±(99.9%) 2,077 MB/sec [Average]
[info]   (min, avg, max) = (671,430, 671,978, 672,791), stdev = 0,539
[info]   CI (99.9%): [669,900, 674,055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2227,924 ±(99.9%) 20,946 B/op [Average]
[info]   (min, avg, max) = (2219,819, 2227,924, 2233,907), stdev = 5,440
[info]   CI (99.9%): [2206,978, 2248,871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,058 ±(99.9%) 0,286 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,058, 0,187), stdev = 0,074
[info]   CI (99.9%): [≈ 0, 0,344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,193 ±(99.9%) 0,944 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,193, 0,619), stdev = 0,245
[info]   CI (99.9%): [≈ 0, 1,137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98,19% complete, ETA 00:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1250605,172 ops/s
[info] # Warmup Iteration   2: 1314864,320 ops/s
[info] # Warmup Iteration   3: 1327039,932 ops/s
[info] # Warmup Iteration   4: 1335088,607 ops/s
[info] # Warmup Iteration   5: 1330877,801 ops/s
[info] Iteration   1: 1333292,447 ops/s
[info]                  ·gc.alloc.rate:                   697,978 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,675 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     796,490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3,740 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 1332112,847 ops/s
[info]                  ·gc.alloc.rate:                   697,424 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     797,207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,098 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 1335421,938 ops/s
[info]                  ·gc.alloc.rate:               699,106 MB/sec
[info]                  ·gc.alloc.rate.norm:          824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 792,881 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 1334037,934 ops/s
[info]                  ·gc.alloc.rate:                   698,470 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,789 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     793,703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,025 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 1336113,402 ops/s
[info]                  ·gc.alloc.rate:                   699,452 MB/sec
[info]                  ·gc.alloc.rate.norm:              824,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     791,680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,049 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1334195,713 ±(99.9%) 6197,107 ops/s [Average]
[info]   (min, avg, max) = (1332112,847, 1334195,713, 1336113,402), stdev = 1609,369
[info]   CI (99.9%): [1327998,606, 1340392,820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   698,486 ±(99.9%) 3,166 MB/sec [Average]
[info]   (min, avg, max) = (697,424, 698,486, 699,452), stdev = 0,822
[info]   CI (99.9%): [695,320, 701,652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (824,000, 824,000, 824,000), stdev = 0,001
[info]   CI (99.9%): [824,000, 824,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   673,386 ±(99.9%) 4,798 MB/sec [Average]
[info]   (min, avg, max) = (672,017, 673,386, 674,747), stdev = 1,246
[info]   CI (99.9%): [668,588, 678,184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   794,392 ±(99.9%) 9,121 B/op [Average]
[info]   (min, avg, max) = (791,680, 794,392, 797,207), stdev = 2,369
[info]   CI (99.9%): [785,272, 803,513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,663 ±(99.9%) 5,394 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,663, 3,168), stdev = 1,401
[info]   CI (99.9%): [≈ 0, 6,057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,782 ±(99.9%) 6,368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,782, 3,740), stdev = 1,654
[info]   CI (99.9%): [≈ 0, 7,150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98,39% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84742,226 ops/s
[info] # Warmup Iteration   2: 121497,373 ops/s
[info] # Warmup Iteration   3: 123562,550 ops/s
[info] # Warmup Iteration   4: 125256,274 ops/s
[info] # Warmup Iteration   5: 125249,951 ops/s
[info] Iteration   1: 124485,700 ops/s
[info]                  ·gc.alloc.rate:                   4323,635 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4079,101 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51572,349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,526 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   2: 124886,544 ops/s
[info]                  ·gc.alloc.rate:                   4338,032 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4084,504 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51469,261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,049 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 125739,177 ops/s
[info]                  ·gc.alloc.rate:                   4367,076 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4767,017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59670,177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,782 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Iteration   4: 125868,694 ops/s
[info]                  ·gc.alloc.rate:                   4371,932 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4088,747 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     51123,234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1,041 B/op
[info]                  ·gc.count:                        6,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   5: 125103,826 ops/s
[info]                  ·gc.alloc.rate:                   4344,911 MB/sec
[info]                  ·gc.alloc.rate.norm:              54664,004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4769,592 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     60006,974 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,524 B/op
[info]                  ·gc.count:                        7,000 counts
[info]                  ·gc.time:                         3,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   125216,788 ±(99.9%) 2240,485 ops/s [Average]
[info]   (min, avg, max) = (124485,700, 125216,788, 125868,694), stdev = 581,847
[info]   CI (99.9%): [122976,303, 127457,273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   4349,117 ±(99.9%) 77,802 MB/sec [Average]
[info]   (min, avg, max) = (4323,635, 4349,117, 4371,932), stdev = 20,205
[info]   CI (99.9%): [4271,316, 4426,919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54664,003 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (54664,003, 54664,003, 54664,004), stdev = 0,001
[info]   CI (99.9%): [54664,003, 54664,004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   4357,792 ±(99.9%) 1443,073 MB/sec [Average]
[info]   (min, avg, max) = (4079,101, 4357,792, 4769,592), stdev = 374,761
[info]   CI (99.9%): [2914,720, 5800,865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   54768,399 ±(99.9%) 17839,786 B/op [Average]
[info]   (min, avg, max) = (51123,234, 54768,399, 60006,974), stdev = 4632,936
[info]   CI (99.9%): [36928,612, 72608,185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,062 ±(99.9%) 0,080 MB/sec [Average]
[info]   (min, avg, max) = (0,042, 0,062, 0,083), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   0,784 ±(99.9%) 1,002 B/op [Average]
[info]   (min, avg, max) = (0,524, 0,784, 1,049), stdev = 0,260
[info]   CI (99.9%): [≈ 0, 1,786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   32,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (6,000, 6,400, 7,000), stdev = 0,548
[info]   CI (99.9%): [32,000, 32,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   13,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (2,000, 2,600, 3,000), stdev = 0,548
[info]   CI (99.9%): [13,000, 13,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 98,59% complete, ETA 00:01:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 604296,519 ops/s
[info] # Warmup Iteration   2: 652888,526 ops/s
[info] # Warmup Iteration   3: 659409,025 ops/s
[info] # Warmup Iteration   4: 657477,091 ops/s
[info] # Warmup Iteration   5: 651816,605 ops/s
[info] Iteration   1: 654222,965 ops/s
[info]                  ·gc.alloc.rate:                   1908,777 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2017,550 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4853,680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,150 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 652295,352 ops/s
[info]                  ·gc.alloc.rate:                   1903,192 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2020,943 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4876,111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,100 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 658543,310 ops/s
[info]                  ·gc.alloc.rate:                   1921,326 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2023,555 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4836,329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   4: 659963,757 ops/s
[info]                  ·gc.alloc.rate:                   1925,717 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1351,037 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3221,637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,099 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 654561,481 ops/s
[info]                  ·gc.alloc.rate:                   1909,487 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2028,702 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4878,692 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,050 B/op
[info]                  ·gc.count:                        3,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle":
[info]   655917,373 ±(99.9%) 12342,691 ops/s [Average]
[info]   (min, avg, max) = (652295,352, 655917,373, 659963,757), stdev = 3205,358
[info]   CI (99.9%): [643574,682, 668260,064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate":
[info]   1913,700 ±(99.9%) 36,276 MB/sec [Average]
[info]   (min, avg, max) = (1903,192, 1913,700, 1925,717), stdev = 9,421
[info]   CI (99.9%): [1877,424, 1949,975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm":
[info]   4592,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4592,001, 4592,001, 4592,001), stdev = 0,001
[info]   CI (99.9%): [4592,001, 4592,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space":
[info]   1888,357 ±(99.9%) 1156,730 MB/sec [Average]
[info]   (min, avg, max) = (1351,037, 1888,357, 2028,702), stdev = 300,399
[info]   CI (99.9%): [731,628, 3045,087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   4533,290 ±(99.9%) 2824,222 B/op [Average]
[info]   (min, avg, max) = (3221,637, 4533,290, 4878,692), stdev = 733,442
[info]   CI (99.9%): [1709,068, 7357,512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,042 ±(99.9%) 0,057 MB/sec [Average]
[info]   (min, avg, max) = (0,021, 0,042, 0,062), stdev = 0,015
[info]   CI (99.9%): [≈ 0, 0,098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   0,100 ±(99.9%) 0,136 B/op [Average]
[info]   (min, avg, max) = (0,050, 0,100, 0,150), stdev = 0,035
[info]   CI (99.9%): [≈ 0, 0,236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.count":
[info]   14,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (2,000, 2,800, 3,000), stdev = 0,447
[info]   CI (99.9%): [14,000, 14,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readUPickle:·gc.time":
[info]   6,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (1,000, 1,200, 2,000), stdev = 0,447
[info]   CI (99.9%): [6,000, 6,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98,80% complete, ETA 00:01:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 361469,032 ops/s
[info] # Warmup Iteration   2: 443828,614 ops/s
[info] # Warmup Iteration   3: 445724,268 ops/s
[info] # Warmup Iteration   4: 442295,335 ops/s
[info] # Warmup Iteration   5: 442050,544 ops/s
[info] Iteration   1: 441420,145 ops/s
[info]                  ·gc.alloc.rate:                   702,190 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,657 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2405,819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,386 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   2: 442394,298 ops/s
[info]                  ·gc.alloc.rate:                   703,918 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,895 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2400,756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,148 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 442505,960 ops/s
[info]                  ·gc.alloc.rate:               703,964 MB/sec
[info]                  ·gc.alloc.rate.norm:          2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2390,428 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   4: 441035,285 ops/s
[info]                  ·gc.alloc.rate:                   701,729 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,133 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2398,394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 443549,035 ops/s
[info]                  ·gc.alloc.rate:                   705,593 MB/sec
[info]                  ·gc.alloc.rate.norm:              2504,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          671,363 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2382,526 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,074 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   442180,944 ±(99.9%) 3809,111 ops/s [Average]
[info]   (min, avg, max) = (441035,285, 442180,944, 443549,035), stdev = 989,214
[info]   CI (99.9%): [438371,833, 445990,056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   703,479 ±(99.9%) 5,973 MB/sec [Average]
[info]   (min, avg, max) = (701,729, 703,479, 705,593), stdev = 1,551
[info]   CI (99.9%): [697,506, 709,452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2504,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2504,001, 2504,001, 2504,001), stdev = 0,001
[info]   CI (99.9%): [2504,001, 2504,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   673,016 ±(99.9%) 6,296 MB/sec [Average]
[info]   (min, avg, max) = (671,363, 673,016, 674,895), stdev = 1,635
[info]   CI (99.9%): [666,720, 679,313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2395,585 ±(99.9%) 35,318 B/op [Average]
[info]   (min, avg, max) = (2382,526, 2395,585, 2405,819), stdev = 9,172
[info]   CI (99.9%): [2360,267, 2430,903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   0,694 ±(99.9%) 5,795 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,694, 3,386), stdev = 1,505
[info]   CI (99.9%): [≈ 0, 6,489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2,474 ±(99.9%) 20,666 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,474, 12,074), stdev = 5,367
[info]   CI (99.9%): [≈ 0, 23,140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   5,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,000, 1,000), stdev = 0,001
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 0,707
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,00% complete, ETA 00:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 484257,119 ops/s
[info] # Warmup Iteration   2: 718978,427 ops/s
[info] # Warmup Iteration   3: 707844,419 ops/s
[info] # Warmup Iteration   4: 716811,131 ops/s
[info] # Warmup Iteration   5: 714360,907 ops/s
[info] Iteration   1: 717971,851 ops/s
[info]                  ·gc.alloc.rate:      547,409 MB/sec
[info]                  ·gc.alloc.rate.norm: 1200,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 721426,540 ops/s
[info]                  ·gc.alloc.rate:                   550,026 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,382 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1471,311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,545 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 721118,245 ops/s
[info]                  ·gc.alloc.rate:                   549,760 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,340 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1471,929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,136 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 719453,570 ops/s
[info]                  ·gc.alloc.rate:                   548,573 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1476,796 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 715681,973 ops/s
[info]                  ·gc.alloc.rate:                   545,696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          675,099 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1484,561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,046 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   719130,436 ±(99.9%) 9145,199 ops/s [Average]
[info]   (min, avg, max) = (715681,973, 719130,436, 721426,540), stdev = 2374,979
[info]   CI (99.9%): [709985,236, 728275,635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   548,293 ±(99.9%) 6,878 MB/sec [Average]
[info]   (min, avg, max) = (545,696, 548,293, 550,026), stdev = 1,786
[info]   CI (99.9%): [541,415, 555,170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (1200,001, 1200,001, 1200,001), stdev = 0,001
[info]   CI (99.9%): [1200,000, 1200,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   539,786 ±(99.9%) 1161,931 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 539,786, 675,109), stdev = 301,750
[info]   CI (99.9%): [≈ 0, 1701,716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1180,919 ±(99.9%) 2542,100 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1180,919, 1484,561), stdev = 660,175
[info]   CI (99.9%): [≈ 0, 3723,019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   0,071 ±(99.9%) 0,395 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,071, 0,250), stdev = 0,103
[info]   CI (99.9%): [≈ 0, 0,466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,155 ±(99.9%) 0,862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,155, 0,545), stdev = 0,224
[info]   CI (99.9%): [≈ 0, 1,016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   2,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,400, 1,000), stdev = 0,548
[info]   CI (99.9%): [2,000, 2,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99,20% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2075791,241 ops/s
[info] # Warmup Iteration   2: 2183217,077 ops/s
[info] # Warmup Iteration   3: 2184985,668 ops/s
[info] # Warmup Iteration   4: 2236043,829 ops/s
[info] # Warmup Iteration   5: 2234410,116 ops/s
[info] Iteration   1: 2246324,956 ops/s
[info]                  ·gc.alloc.rate:               1039,008 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,734 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 471,363 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   2: 2240871,433 ops/s
[info]                  ·gc.alloc.rate:                   1036,480 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,219 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     944,150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,029 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   3: 2241884,036 ops/s
[info]                  ·gc.alloc.rate:               1036,981 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      672,082 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 471,827 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Iteration   4: 2236933,628 ops/s
[info]                  ·gc.alloc.rate:                   1034,749 MB/sec
[info]                  ·gc.alloc.rate.norm:              728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          1344,225 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     945,733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,044 B/op
[info]                  ·gc.count:                        2,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 2240927,931 ops/s
[info]                  ·gc.alloc.rate:               1036,413 MB/sec
[info]                  ·gc.alloc.rate.norm:          728,000 B/op
[info]                  ·gc.churn.PS_Eden_Space:      671,998 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 472,027 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   2241388,397 ±(99.9%) 12906,771 ops/s [Average]
[info]   (min, avg, max) = (2236933,628, 2241388,397, 2246324,956), stdev = 3351,847
[info]   CI (99.9%): [2228481,626, 2254295,168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1036,726 ±(99.9%) 5,884 MB/sec [Average]
[info]   (min, avg, max) = (1034,749, 1036,726, 1039,008), stdev = 1,528
[info]   CI (99.9%): [1030,842, 1042,610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728,000 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (728,000, 728,000, 728,000), stdev = 0,001
[info]   CI (99.9%): [728,000, 728,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   941,052 ±(99.9%) 1417,202 MB/sec [Average]
[info]   (min, avg, max) = (671,998, 941,052, 1344,225), stdev = 368,043
[info]   CI (99.9%): [≈ 0, 2358,254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   661,020 ±(99.9%) 998,026 B/op [Average]
[info]   (min, avg, max) = (471,363, 661,020, 945,733), stdev = 259,184
[info]   CI (99.9%): [≈ 0, 1659,046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   0,021 ±(99.9%) 0,113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,021, 0,062), stdev = 0,029
[info]   CI (99.9%): [≈ 0, 0,134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   0,015 ±(99.9%) 0,080 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0,015, 0,044), stdev = 0,021
[info]   CI (99.9%): [≈ 0, 0,094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   7,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (1,000, 1,400, 2,000), stdev = 0,548
[info]   CI (99.9%): [7,000, 7,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   3,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,600, 1,000), stdev = 0,548
[info]   CI (99.9%): [3,000, 3,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99,40% complete, ETA 00:00:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2269094,633 ops/s
[info] # Warmup Iteration   2: 2392870,041 ops/s
[info] # Warmup Iteration   3: 2396050,150 ops/s
[info] # Warmup Iteration   4: 2393669,895 ops/s
[info] # Warmup Iteration   5: 2395852,430 ops/s
[info] Iteration   1: 2392361,463 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2392131,027 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2396472,809 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2397481,562 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2394966,132 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2394682,599 ±(99.9%) 9237,058 ops/s [Average]
[info]   (min, avg, max) = (2392131,027, 2394682,599, 2397481,562), stdev = 2398,835
[info]   CI (99.9%): [2385445,541, 2403919,657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99,60% complete, ETA 00:00:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343365,480 ops/s
[info] # Warmup Iteration   2: 415981,138 ops/s
[info] # Warmup Iteration   3: 419450,114 ops/s
[info] # Warmup Iteration   4: 418583,582 ops/s
[info] # Warmup Iteration   5: 417652,263 ops/s
[info] Iteration   1: 418119,795 ops/s
[info]                  ·gc.alloc.rate:      618,417 MB/sec
[info]                  ·gc.alloc.rate.norm: 2328,001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 417698,071 ops/s
[info]                  ·gc.alloc.rate:                   617,815 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,436 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2537,588 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14,400 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   3: 420969,215 ops/s
[info]                  ·gc.alloc.rate:                   622,640 MB/sec
[info]                  ·gc.alloc.rate.norm:              2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          673,373 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2517,688 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,233 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 420984,766 ops/s
[info]                  ·gc.alloc.rate:               622,731 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2507,620 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Iteration   5: 420811,480 ops/s
[info]                  ·gc.alloc.rate:               622,377 MB/sec
[info]                  ·gc.alloc.rate.norm:          2328,001 B/op
[info]                  ·gc.churn.PS_Eden_Space:      670,681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 2508,680 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     1,000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   419716,665 ±(99.9%) 6385,657 ops/s [Average]
[info]   (min, avg, max) = (417698,071, 419716,665, 420984,766), stdev = 1658,335
[info]   CI (99.9%): [413331,009, 426102,322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   620,796 ±(99.9%) 9,470 MB/sec [Average]
[info]   (min, avg, max) = (617,815, 620,796, 622,731), stdev = 2,459
[info]   CI (99.9%): [611,326, 630,266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2328,001 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (2328,001, 2328,001, 2328,001), stdev = 0,001
[info]   CI (99.9%): [2328,001, 2328,001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   537,654 ±(99.9%) 1157,352 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 537,654, 673,436), stdev = 300,561
[info]   CI (99.9%): [≈ 0, 1695,005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2014,315 ±(99.9%) 4336,213 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2014,315, 2537,588), stdev = 1126,101
[info]   CI (99.9%): [≈ 0, 6350,528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   0,777 ±(99.9%) 6,555 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,777, 3,821), stdev = 1,702
[info]   CI (99.9%): [≈ 0, 7,331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2,927 ±(99.9%) 24,700 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2,927, 14,400), stdev = 6,414
[info]   CI (99.9%): [≈ 0, 27,626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   4,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 2,000), stdev = 0,837
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] # JMH version: 1.21
[info] # VM version: JDK 11-ea, OpenJDK 64-Bit Server VM, 11-ea+20
[info] # VM invoker: /usr/lib/jvm/openjdk-11/bin/java
[info] # VM options: -server -Xms2g -Xmx2g -XX:NewSize=1g -XX:MaxNewSize=1g -XX:InitialCodeCacheSize=512m -XX:ReservedCodeCacheSize=512m -XX:+UseParallelGC -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 5 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle
[info] # Parameters: (size = 128)
[info] # Run progress: 99,80% complete, ETA 00:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191161,439 ops/s
[info] # Warmup Iteration   2: 199110,927 ops/s
[info] # Warmup Iteration   3: 199013,662 ops/s
[info] # Warmup Iteration   4: 199678,206 ops/s
[info] # Warmup Iteration   5: 199437,942 ops/s
[info] Iteration   1: 198919,303 ops/s
[info]                  ·gc.alloc.rate:               515,611 MB/sec
[info]                  ·gc.alloc.rate.norm:          4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:      511,501 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm: 4047,478 B/op
[info]                  ·gc.count:                    1,000 counts
[info]                  ·gc.time:                     2,000 ms
[info] Iteration   2: 200028,169 ops/s
[info]                  ·gc.alloc.rate:      518,556 MB/sec
[info]                  ·gc.alloc.rate.norm: 4080,002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 202293,938 ops/s
[info]                  ·gc.alloc.rate:                   524,311 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,585 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5249,383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3,155 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24,548 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         2,000 ms
[info] Iteration   4: 203037,265 ops/s
[info]                  ·gc.alloc.rate:                   526,365 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          674,777 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5230,385 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,323 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         1,000 ms
[info] Iteration   5: 202856,003 ops/s
[info]                  ·gc.alloc.rate:                   525,879 MB/sec
[info]                  ·gc.alloc.rate.norm:              4080,002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          672,761 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5219,573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      0,021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 0,161 B/op
[info]                  ·gc.count:                        1,000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle":
[info]   201426,935 ±(99.9%) 7108,548 ops/s [Average]
[info]   (min, avg, max) = (198919,303, 201426,935, 203037,265), stdev = 1846,067
[info]   CI (99.9%): [194318,388, 208535,483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate":
[info]   522,145 ±(99.9%) 18,468 MB/sec [Average]
[info]   (min, avg, max) = (515,611, 522,145, 526,365), stdev = 4,796
[info]   CI (99.9%): [503,677, 540,612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm":
[info]   4080,002 ±(99.9%) 0,001 B/op [Average]
[info]   (min, avg, max) = (4080,002, 4080,002, 4080,002), stdev = 0,001
[info]   CI (99.9%): [4080,002, 4080,003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space":
[info]   506,725 ±(99.9%) 1123,932 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 506,725, 674,777), stdev = 291,882
[info]   CI (99.9%): [≈ 0, 1630,656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm":
[info]   3949,364 ±(99.9%) 8728,230 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3949,364, 5249,383), stdev = 2266,694
[info]   CI (99.9%): [≈ 0, 12677,593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space":
[info]   0,643 ±(99.9%) 5,406 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0,643, 3,155), stdev = 1,404
[info]   CI (99.9%): [≈ 0, 6,049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm":
[info]   5,007 ±(99.9%) 42,068 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5,007, 24,548), stdev = 10,925
[info]   CI (99.9%): [≈ 0, 47,075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.count":
[info]   4,000 ±(99.9%) 0,001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0,800, 1,000), stdev = 0,447
[info]   CI (99.9%): [4,000, 4,000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeUPickle:·gc.time":
[info]   5,000 ±(99.9%) 0,001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1,000, 2,000), stdev = 1,000
[info]   CI (99.9%): [5,000, 5,000] (assumes normal distribution)
[info] # Run complete. Total time: 02:12:52
[info] REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
[info] why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
[info] experiments, perform baseline and negative tests that provide experimental control, make sure
[info] the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
[info] Do not assume the numbers tell you what you want them to tell.
[info] Benchmark                                                                                      (size)   Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                            N/A  thrpt    5    781607,193 ±    20798,995   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      2034,059 ±       54,469  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      4096,001 ±        0,001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      2156,568 ±     1151,441  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5      4341,767 ±     2275,771    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,037 ±        0,067  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,075 ±        0,134    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        16,000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5         7,000                     ms
[info] AdtBenchmark.readJacksonScala                                                                     N/A  thrpt    5   1927359,822 ±    18689,958   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1283,292 ±       12,496  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      1048,000 ±        0,001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1353,489 ±        6,487  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      1105,333 ±       13,939    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,046 ±        0,105  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,037 ±        0,085    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        10,000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5         4,000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   4140000,983 ±    42452,726   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       273,554 ±        2,851  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       104,000 ±        0,001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       306,907 ±     1078,822  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       116,835 ±      410,695    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,007 ±        0,059  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,003 ±        0,023    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5         3,000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5         4,000                     ms
[info] AdtBenchmark.readPlayJson                                                                         N/A  thrpt    5    189734,871 ±     3311,079   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      1514,146 ±       26,306  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5     12560,002 ±        0,001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      1490,106 ±     1169,949  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5     12361,596 ±     9731,426    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,017 ±        0,067  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,138 ±        0,555    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        11,000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5         4,000                     ms
[info] AdtBenchmark.writeCirce                                                                           N/A  thrpt    5    647534,246 ±     4431,899   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1909,100 ±       13,302  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5      4640,001 ±        0,001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2020,381 ±       19,497  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5      4910,486 ±       66,540    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,037 ±        0,067  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,091 ±        0,162    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        15,000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         6,000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   2383143,818 ±    61294,260   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       775,234 ±       19,890  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       512,000 ±        0,001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5       810,095 ±     1164,105  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       535,916 ±      785,786    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,021 ±        0,057  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,014 ±        0,037    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         6,000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         2,000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  18247152,440 ±   807588,691   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       927,526 ±       40,642  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        80,000 ±        0,001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5       941,771 ±     1420,487  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        81,148 ±      121,306    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,033 ±        0,209  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,003 ±        0,018    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         7,000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         3,000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5   8900687,645 ±    54441,001   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                        N/A  thrpt    5    350347,131 ±     4423,359   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1143,264 ±       14,397  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      5136,001 ±        0,001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      1217,143 ±     1164,720  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      5469,956 ±     5258,669    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,017 ±        0,105  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,075 ±        0,471    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5         9,000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         4,000                     ms
[info] AnyRefsBenchmark.readCirce                                                                        N/A  thrpt    5   2001879,975 ±    47915,658   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      3093,243 ±       73,848  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2432,000 ±        0,001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      3117,668 ±     1411,870  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      2451,964 ±     1138,505    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,058 ±        0,036  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,046 ±        0,028    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        23,000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         9,000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                  N/A  thrpt    5  10358626,878 ±   116228,870   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5      1263,662 ±       14,246  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       192,000 ±        0,001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1210,650 ±     1159,243  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5       183,993 ±      176,740    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,058 ±        0,154  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,009 ±        0,023    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                        N/A  thrpt    5         9,000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                         N/A  thrpt    5         3,000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                 N/A  thrpt    5   2888504,516 ±    59580,245   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      1893,973 ±       39,101  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5      1032,000 ±        0,001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1898,876 ±     1164,262  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      1034,994 ±      641,794    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,042 ±        0,057  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,023 ±        0,031    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        14,000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         5,000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                N/A  thrpt    5  12342199,919 ±   235315,997   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5      1568,240 ±       29,706  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       200,000 ±        0,001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1615,829 ±     1417,198  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       206,189 ±      183,427    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,042 ±        0,098  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,005 ±        0,013    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5        12,000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         5,000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                     N/A  thrpt    5    725745,855 ±    10857,998   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1899,720 ±       28,644  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4120,001 ±        0,001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1898,628 ±     1164,710  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4118,402 ±     2543,949    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,050 ±        0,122  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,108 ±        0,263    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                           N/A  thrpt    5        14,000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                            N/A  thrpt    5         6,000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                       N/A  thrpt    5   2462184,592 ±    31035,315   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5      2102,529 ±       26,311  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5      1344,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      2157,695 ±     1152,027  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5      1379,071 ±      728,207    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,050 ±        0,091  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,032 ±        0,059    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5        16,000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         6,000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                 N/A  thrpt    5  21190886,340 ±    77753,400   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                  N/A  thrpt    5       646,295 ±        2,272  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                             N/A  thrpt    5        48,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5       538,759 ±     1159,722  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5        40,005 ±       86,114    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,532 ±        4,491  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,039 ±        0,333    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                       N/A  thrpt    5         4,000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                        N/A  thrpt    5         3,000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                N/A  thrpt    5   7198285,615 ±    62106,752   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5      1975,777 ±       17,089  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       432,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1898,588 ±     1163,081  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5       415,150 ±      254,949    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,071 ±        0,091  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,015 ±        0,020    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5        14,000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         6,000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                               N/A  thrpt    5  23589232,818 ±   144115,014   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       719,425 ±        4,347  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5        48,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       807,687 ±     1153,289  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5        53,906 ±       77,276    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,652 ±        5,305  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,044 ±        0,354    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         6,000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         4,000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5  25170430,805 ±   489514,401   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                    N/A  thrpt    5   1308312,116 ±     8730,398   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                     N/A  thrpt    5      1975,038 ±       13,600  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                N/A  thrpt    5      2376,000 ±        0,001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1899,123 ±     1165,787  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2284,845 ±     1406,514    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,046 ±        0,105  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,055 ±        0,126    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                          N/A  thrpt    5        14,000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                           N/A  thrpt    5         6,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                          128  thrpt    5    390732,327 ±     2071,164   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2150,860 ±       11,704  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      8664,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2025,563 ±       18,470  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      8159,294 ±       78,544    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,046 ±        0,105  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,184 ±        0,421    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                128  thrpt    5        15,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                 128  thrpt    5         7,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                   128  thrpt    5    545587,995 ±    10030,869   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5       729,302 ±       13,291  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      2104,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       674,791 ±        2,550  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1946,778 ±       39,419    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,084 ±        0,263    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         5,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         2,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                  128  thrpt    5   1220714,457 ±     4963,900   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       812,800 ±        3,232  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5      1048,000 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       807,249 ±     1156,758  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1040,775 ±     1490,144    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,025 ±        0,104  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,032 ±        0,135    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         3,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                       128  thrpt    5    125400,271 ±      858,802   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      4334,967 ±       28,823  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5     54408,003 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      4357,526 ±     1432,241  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     54695,798 ±    18241,367    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,050 ±        0,072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,627 ±        0,902    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        32,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                              128  thrpt    5        13,000                     ms
[info] ArrayBufferOfBooleansBenchmark.readUPickle                                                        128  thrpt    5    679861,859 ±    14843,398   ops/s
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      2080,285 ±       45,079  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      4816,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      2160,246 ±     1154,927  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      4999,726 ±     2612,980    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,042 ±        0,080  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,096 ±        0,185    B/op
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.count                                              128  thrpt    5        16,000                 counts
[info] ArrayBufferOfBooleansBenchmark.readUPickle:·gc.time                                               128  thrpt    5         7,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                         128  thrpt    5    417089,519 ±     2444,948   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       646,618 ±        3,770  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      2440,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5       673,037 ±        6,344  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2539,700 ±       30,778    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,684 ±        5,759  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,589 ±       21,785    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                               128  thrpt    5         5,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                128  thrpt    5         4,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                  128  thrpt    5    712313,856 ±     9457,613   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       525,004 ±        6,990  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5      1160,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       506,812 ±     1124,145  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      1119,935 ±     2480,503    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,062 ±        0,405  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,138 ±        0,893    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         4,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         3,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                 128  thrpt    5   3129629,937 ±    31897,457   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1447,587 ±       14,933  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       728,000 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1345,775 ±        6,500  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       676,802 ±        7,314    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,050 ±        0,072  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,025 ±        0,036    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         4,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3337540,743 ±    38127,073   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                      128  thrpt    5    451027,472 ±    13096,838   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       648,768 ±       18,989  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5      2264,001 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       671,673 ±        6,346  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2344,018 ±       56,501    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,780 ±        6,586  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2,717 ±       22,924    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         5,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeUPickle                                                       128  thrpt    5    195562,138 ±     3165,542   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       498,983 ±        8,073  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5      4016,002 ±        0,001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       372,212 ±     1333,279  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      2987,721 ±    10702,840    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,640 ±        5,331  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         5,130 ±       42,749    B/op
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         3,000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         5,000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                             128  thrpt    5     26529,181 ±      347,846   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1659,940 ±       21,753  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     98480,016 ±        0,003    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1615,771 ±     1419,037  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     95845,708 ±    83858,851    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,976 ±        5,429    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        12,000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         6,000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                      128  thrpt    5     39031,472 ±      483,546   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5       976,693 ±       12,160  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     39384,011 ±        0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       946,670 ±     1428,545  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     38205,052 ±    58046,619    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,009 ±        3,547    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         7,000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                     128  thrpt    5     49212,019 ±     1688,287   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       733,124 ±       25,243  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5     23448,009 ±        0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       807,838 ±     1161,912  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     25804,013 ±    36487,023    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,652 ±        5,305  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5        21,079 ±      171,533    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6,000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                          128  thrpt    5     31512,694 ±      224,924   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1669,035 ±       11,897  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     83360,014 ±        0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1627,310 ±     1425,060  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     81288,297 ±    71451,605    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±        0,108  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,664 ±        5,377    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        12,000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         6,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                            128  thrpt    5     34346,762 ±      266,468   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1917,493 ±       15,943  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     87872,012 ±        0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1885,946 ±     1151,305  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     86405,874 ±    52263,572    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±        0,080  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,907 ±        3,663    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5        14,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                     128  thrpt    5     32159,106 ±      555,347   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1729,915 ±       30,035  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     84672,013 ±        0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1762,543 ±     1428,114  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     86267,775 ±    69863,796    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,058 ±        0,132  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         2,851 ±        6,434    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        13,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         5,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                    128  thrpt    5     37062,021 ±     1663,238   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1876,654 ±       83,637  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     79688,011 ±        0,001    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1887,578 ±     1153,053  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     80196,598 ±    49974,784    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,703 ±        3,705    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5        14,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         7,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5     37722,719 ±      331,076   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5      1836,703 ±       15,920  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5     76632,011 ±        0,002    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    128  thrpt    5      1887,447 ±     1161,061  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               128  thrpt    5     78768,290 ±    48889,876    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1,043 ±        2,796    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5        14,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   128  thrpt    5         6,000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                         128  thrpt    5     10076,334 ±       66,621   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1297,794 ±        8,561  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    202712,645 ±        5,196    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1341,027 ±        5,405  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    209465,924 ±     1444,996    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         3,252 ±       12,516    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        10,000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         5,000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                 128  thrpt    5     25794,554 ±      262,041   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2004,148 ±       20,187  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5    122288,016 ±        0,002    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2023,204 ±       19,405  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5    123451,593 ±     1854,654    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,777 ±        5,571    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        15,000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         7,000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                          128  thrpt    5     50490,048 ±      967,625   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1243,166 ±       23,770  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     38752,009 ±        0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1218,736 ±     1168,849  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     37996,694 ±    36515,077    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,391 ±        2,241    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         9,000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                         128  thrpt    5     73383,733 ±     1302,648   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       948,184 ±       17,030  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     20336,006 ±        0,001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941,222 ±     1418,105  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     20175,931 ±    30260,123    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,268 ±        1,537    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                              128  thrpt    5     38632,643 ±      359,678   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2579,885 ±       23,708  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5    105104,011 ±        0,003    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2581,653 ±     1169,768  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    105158,134 ±    47028,903    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,062 ±        0,080  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,544 ±        3,269    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19,000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         8,000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                         128  thrpt    5     37626,293 ±      406,261   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      2057,582 ±       22,342  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     86072,011 ±        0,002    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2036,220 ±        9,521  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     85179,071 ±     1188,264    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,046 ±        0,036  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,915 ±        1,490    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5        15,000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         8,000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                        128  thrpt    5     52334,303 ±      850,348   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      2181,216 ±       35,205  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     65600,008 ±        0,001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      2161,242 ±     1163,392  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     65017,117 ±    35690,058    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,054 ±        0,091  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,626 ±        2,734    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5        16,000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         7,000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     53470,789 ±      485,446   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5      1961,530 ±       17,943  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     57736,008 ±        0,001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5      2023,727 ±       18,089  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5     59567,049 ±      840,356    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,067 ±        0,132  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         1,959 ±        3,864    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5        15,000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         6,000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                128  thrpt    5    425974,101 ±     3543,306   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      2154,318 ±       18,393  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5      7960,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2161,221 ±     1179,031  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      7985,935 ±     4372,997    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±        0,044  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,123 ±        0,163    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                      128  thrpt    5        16,000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                       128  thrpt    5         7,000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                          128  thrpt    5   1718912,172 ±     8246,140   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                           128  thrpt    5       541,703 ±        2,563  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      128  thrpt    5       496,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  128  thrpt    5       506,487 ±     1123,231  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       463,703 ±     1027,967    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,531 ±        4,528  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,486 ±        4,142    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                         128  thrpt    5    715809,433 ±    13072,501   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5       574,906 ±       10,539  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1264,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       539,844 ±     1162,056  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1188,454 ±     2558,307    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,037 ±        0,200  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,083 ±        0,440    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         2,000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                        128  thrpt    5   1914160,267 ±    18677,539   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       369,715 ±        3,669  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       304,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       441,866 ±      989,268  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       363,640 ±      814,090    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,636 ±        5,411  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,524 ±        4,453    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         7,000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                             128  thrpt    5    115130,516 ±     1799,593   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      4179,587 ±       64,838  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     57136,004 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      4084,550 ±       15,637  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     55837,639 ±     1000,968    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,050 ±        0,108  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,682 ±        1,464    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        30,000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5        12,000                     ms
[info] ArrayOfBooleansBenchmark.readUPickle                                                              128  thrpt    5    699675,914 ±     4527,935   ops/s
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1827,967 ±       11,365  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4112,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1887,402 ±     1156,454  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      4245,384 ±     2593,741    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,037 ±        0,036  MB/sec
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,084 ±        0,080    B/op
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        14,000                 counts
[info] ArrayOfBooleansBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                               128  thrpt    5    359405,587 ±    18133,075   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5       553,527 ±       27,835  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5      2424,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5       506,628 ±     1123,604  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      2219,722 ±     4896,245    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,686 ±        5,777  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,994 ±       25,195    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                     128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         5,000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                         128  thrpt    5   1300711,303 ±    40221,948   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                          128  thrpt    5       601,636 ±       18,425  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                     128  thrpt    5       728,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                 128  thrpt    5       538,739 ±     1159,679  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       652,649 ±     1405,057    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,541 ±        4,475  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,654 ±        5,414    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                128  thrpt    5         4,000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                        128  thrpt    5   1139505,291 ±    80880,672   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5       805,090 ±       57,194  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1112,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       811,141 ±     1165,901  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1119,608 ±     1591,683    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,035 ±        0,094    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5         6,000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                       128  thrpt    5   1743357,616 ±    53815,978   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       806,382 ±       24,943  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       728,000 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,294 ±     1157,004  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       730,587 ±     1078,052    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,026 ±        0,123    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         6,000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         2,000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5   2868846,368 ±    27271,291   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                            128  thrpt    5    593682,362 ±     2087,572   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5       700,068 ±        2,402  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5      1856,001 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5       671,642 ±        6,242  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1780,640 ±       20,566    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,778 ±        6,475  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,064 ±       17,183    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5         5,000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfBooleansBenchmark.writeUPickle                                                             128  thrpt    5    219708,158 ±      936,611   ops/s
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       560,609 ±        2,406  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4016,002 ±        0,001    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       506,774 ±     1124,063  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3630,321 ±     8048,556    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,643 ±        5,371  MB/sec
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4,609 ±       38,477    B/op
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         4,000                 counts
[info] ArrayOfBooleansBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                   128  thrpt    5    164557,236 ±     2954,072   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1978,105 ±       35,640  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     18920,003 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2023,584 ±       18,789  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     19355,402 ±      447,305    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,046 ±        0,088  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,438 ±        0,835    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                         128  thrpt    5        15,000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                          128  thrpt    5         5,000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                            128  thrpt    5    491752,845 ±     4020,690   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       394,912 ±        3,159  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1264,001 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       339,528 ±     1220,638  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1087,744 ±     3913,549    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±        0,215  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,080 ±        0,691    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         3,000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         2,000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                           128  thrpt    5    911429,273 ±     9286,271   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       176,045 ±        1,800  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       304,000 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204,621 ±     1078,908  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       354,347 ±     1868,368    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         2,000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                128  thrpt    5     97883,792 ±      607,522   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      4165,463 ±       26,686  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66976,004 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      4084,247 ±       14,647  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     65670,296 ±      520,341    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,092 ±        0,122  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,473 ±        1,955    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        30,000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        13,000                     ms
[info] ArrayOfBytesBenchmark.readUPickle                                                                 128  thrpt    5    272864,092 ±      556,599   ops/s
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1245,450 ±        2,804  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5      7184,001 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1210,282 ±     1155,693  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      6980,917 ±     6663,275    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,037 ±        0,105  MB/sec
[info] ArrayOfBytesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,216 ±        0,603    B/op
[info] ArrayOfBytesBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         9,000                 counts
[info] ArrayOfBytesBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         4,000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                  128  thrpt    5    293085,108 ±     4543,684   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1297,497 ±       20,167  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      6968,001 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1343,650 ±        4,887  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      7215,953 ±      115,330    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,042 ±        0,098  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,223 ±        0,525    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        10,000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         4,000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                           128  thrpt    5   1613132,001 ±    14184,501   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       828,128 ±        7,350  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       808,000 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       811,026 ±     1165,683  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       791,632 ±     1143,464    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,024 ±        0,129    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         6,000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                          128  thrpt    5   2301425,660 ±    89264,451   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       619,995 ±       24,070  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       424,000 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       538,984 ±     1160,208  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       369,249 ±      795,049    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,645 ±        5,379  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,449 ±        3,745    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2183665,824 ±    13180,770   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                               128  thrpt    5     51284,134 ±      623,602   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2161,535 ±       26,704  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     66336,008 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2156,223 ±     1149,754  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     66169,936 ±    35143,281    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,054 ±        0,122  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,660 ±        3,716    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        16,000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6,000                     ms
[info] ArrayOfBytesBenchmark.writeUPickle                                                                128  thrpt    5    154344,662 ±     2149,784   ops/s
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5      1123,408 ±       15,567  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     11456,003 ±        0,001    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1210,118 ±     1158,301  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     12346,197 ±    11888,113    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±        0,072  MB/sec
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,340 ±        0,732    B/op
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         9,000                 counts
[info] ArrayOfBytesBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         4,000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                   128  thrpt    5    241909,520 ±     1913,422   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      2489,861 ±       19,503  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     16200,002 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      2570,533 ±     1164,929  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     16725,169 ±     7589,570    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,058 ±        0,036  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,379 ±        0,232    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        19,000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         8,000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                            128  thrpt    5    368493,685 ±     3170,844   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1766,255 ±       14,866  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      7544,001 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1763,820 ±     1429,003  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      7532,647 ±     6083,024    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,050 ±        0,072  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,213 ±        0,305    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        13,000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                           128  thrpt    5   1406008,608 ±     8666,565   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       485,958 ±        2,947  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       544,000 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,783 ±     1069,590  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       531,590 ±     1197,095    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,645 ±        5,375  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,721 ±        6,011    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         5,000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                128  thrpt    5     92921,888 ±      772,020   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3902,856 ±       31,940  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     66104,004 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3948,698 ±     1172,790  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     66885,543 ±    20141,859    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,054 ±        0,044  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,917 ±        0,746    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        29,000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        10,000                     ms
[info] ArrayOfCharsBenchmark.readUPickle                                                                 128  thrpt    5    263628,684 ±      984,730   ops/s
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      2792,527 ±       10,491  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     16672,002 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2844,761 ±     1155,605  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     16983,315 ±     6870,570    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,050 ±        0,072  MB/sec
[info] ArrayOfCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,298 ±        0,428    B/op
[info] ArrayOfCharsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        21,000                 counts
[info] ArrayOfCharsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         8,000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                  128  thrpt    5    252328,443 ±     7953,128   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      2137,889 ±       66,555  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     13336,002 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2158,785 ±     1153,809  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     13470,662 ±     7357,559    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,050 ±        0,091  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,312 ±        0,578    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        16,000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         6,000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                           128  thrpt    5   1176347,659 ±     5140,288   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       687,607 ±        2,936  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5       920,000 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       675,456 ±        2,569  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       903,744 ±        4,945    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±        0,105  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,022 ±        0,140    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         5,000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                          128  thrpt    5   2872165,720 ±    10981,224   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       978,103 ±        3,778  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       536,000 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       941,153 ±     1418,780  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       515,682 ±      776,511    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,104  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,014 ±        0,057    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         7,000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   2888992,026 ±    18705,629   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                               128  thrpt    5    347507,969 ±     3906,327   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      2843,641 ±       32,127  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     12880,001 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2855,364 ±     1158,648  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     12935,371 ±     5362,733    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,075 ±        0,108  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,340 ±        0,491    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        21,000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5        10,000                     ms
[info] ArrayOfCharsBenchmark.writeUPickle                                                                128  thrpt    5    102038,689 ±      777,910   ops/s
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       757,267 ±        5,806  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     11680,004 ±        0,001    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       672,916 ±        4,134  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10379,008 ±       68,155    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,386 ±        1,612    B/op
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         5,000                 counts
[info] ArrayOfCharsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         2,000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                 128  thrpt    5     30861,114 ±      298,270   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1807,714 ±       17,211  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     92192,014 ±        0,004    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1751,897 ±     1417,897  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     89331,134 ±    72005,974    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,033 ±        0,122  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,698 ±        6,187    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                       128  thrpt    5        13,000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                        128  thrpt    5         6,000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                           128  thrpt    5    104176,439 ±      276,768   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       938,306 ±        2,539  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5     14176,004 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       940,961 ±     1417,723  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     14217,583 ±    21439,616    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±        0,176  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,441 ±        2,655    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                 128  thrpt    5         7,000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                          128  thrpt    5     68532,204 ±     1101,751   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1129,416 ±       18,405  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     25936,006 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1082,745 ±     1428,271  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     24854,129 ±    32672,869    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,286 ±        1,642    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                         128  thrpt    5    146312,377 ±      624,999   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       943,013 ±        3,938  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     10144,003 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       941,201 ±     1417,861  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     10126,125 ±    15274,619    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,021 ±        0,113  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,224 ±        1,220    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         7,000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                              128  thrpt    5     40610,042 ±      533,926   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2120,645 ±       28,513  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     82192,010 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2167,743 ±     1151,276  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     84007,146 ±    44172,086    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,054 ±        0,044  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,097 ±        1,687    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        16,000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         7,000                     ms
[info] ArrayOfDoublesBenchmark.readUPickle                                                               128  thrpt    5     75186,798 ±     2271,887   ops/s
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1352,458 ±       41,167  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     28312,006 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1345,393 ±        5,468  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     28165,440 ±      813,327    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,042 ±        0,098  MB/sec
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,873 ±        2,067    B/op
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        10,000                 counts
[info] ArrayOfDoublesBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         3,000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                128  thrpt    5     41937,343 ±     2192,483   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       551,024 ±       28,933  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     20680,010 ±        0,002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       506,594 ±     1123,565  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     19064,465 ±    42281,165    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,690 ±        5,763  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5        25,702 ±      214,694    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                         128  thrpt    5     45435,393 ±      320,426   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       410,382 ±        2,843  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     14216,009 ±        0,002    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       474,362 ±     1068,131  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16442,517 ±    37040,725    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±        0,156  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,011 ±        5,422    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                        128  thrpt    5     49251,662 ±      586,574   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       432,835 ±        5,187  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5     13832,009 ±        0,003    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       339,556 ±     1220,885  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     10872,762 ±    39101,852    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,632 ±        5,444  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5        20,263 ±      174,468    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         3,000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         5,000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5     48455,810 ±      451,623   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5       370,420 ±        3,440  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5     12032,009 ±        0,001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                        128  thrpt    5       306,916 ±     1078,854  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      9985,613 ±    35100,837    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,008 ±        0,051  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0,275 ±        1,657    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5         3,000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                       128  thrpt    5         5,000                     ms
[info] ArrayOfDoublesBenchmark.writeUPickle                                                              128  thrpt    5     39151,735 ±      673,359   ops/s
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       653,721 ±       11,265  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     26280,011 ±        0,002    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,393 ±        4,922  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     27071,245 ±      478,072    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,661 ±        5,377  MB/sec
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        26,641 ±      216,891    B/op
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         5,000                 counts
[info] ArrayOfDoublesBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         4,000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                               128  thrpt    5     23953,990 ±      249,471   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5       898,182 ±        9,524  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     59016,018 ±        0,005    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5       806,772 ±     1157,234  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     53001,977 ±    75880,673    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,188 ±        6,004    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                     128  thrpt    5         6,000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         3,000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                        128  thrpt    5     23076,660 ±      352,008   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       654,038 ±        9,919  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     44608,658 ±        5,503    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       675,113 ±        2,612  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     46046,675 ±      693,405    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,033 ±        0,166  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2,277 ±       11,396    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                       128  thrpt    5     97553,435 ±      802,504   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       253,874 ±        2,142  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,004 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       306,913 ±     1078,844  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4958,434 ±    17429,622    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,017 ±        0,096  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,278 ±        1,553    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         3,000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         5,000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                            128  thrpt    5     19631,852 ±      240,633   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1272,444 ±       16,017  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    102008,023 ±        0,008    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1214,665 ±     1164,465  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     97380,339 ±    93405,935    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±        0,108  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,668 ±        8,604    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5         9,000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfDurationsBenchmark.readUPickle                                                             128  thrpt    5     19149,387 ±      596,403   ops/s
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5       660,150 ±       20,142  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     54260,203 ±       36,007    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       674,049 ±        4,952  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     55405,841 ±     1976,539    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,579 ±        4,807  MB/sec
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        48,264 ±      400,948    B/op
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5         5,000                 counts
[info] ArrayOfDurationsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         3,000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                              128  thrpt    5     65676,232 ±      444,058   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       995,130 ±        7,072  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5     23848,007 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1074,542 ±     1417,180  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     25743,931 ±    33873,703    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,598 ±        2,501    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         8,000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         2,000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                       128  thrpt    5    101859,997 ±      809,563   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1207,837 ±        9,636  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     18664,004 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1218,347 ±     1164,381  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     18825,475 ±    17980,354    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,450 ±        1,410    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         9,000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         4,000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                      128  thrpt    5    225581,701 ±    29682,014   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       357,759 ±       46,901  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      2496,002 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       306,945 ±     1078,954  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      2108,807 ±     7412,782    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,001 ±        0,007  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,006 ±        0,050    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    279505,893 ±     1941,518   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                           128  thrpt    5     69488,294 ±      229,276   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1083,540 ±        3,542  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     24544,006 ±        0,002    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1072,625 ±     1412,106  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     24296,824 ±    31987,124    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±        0,036  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,377 ±        0,812    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         8,000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfDurationsBenchmark.writeUPickle                                                            128  thrpt    5     20807,362 ±      223,294   ops/s
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       359,903 ±        3,877  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     27224,020 ±        0,001    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       306,931 ±     1078,907  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     23251,325 ±    81732,100    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,005 ±        0,033  MB/sec
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,405 ±        2,503    B/op
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         3,000                 counts
[info] ArrayOfDurationsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                   128  thrpt    5     29291,126 ±      238,579   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5       704,521 ±        5,740  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     37856,015 ±        0,002    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5       672,999 ±        6,259  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     36162,514 ±      627,844    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,688 ±        5,833  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5        37,016 ±      313,916    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                         128  thrpt    5         5,000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         4,000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                            128  thrpt    5     31907,308 ±      368,540   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       417,952 ±        4,841  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     20616,013 ±        0,002    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       474,374 ±     1068,186  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     23401,011 ±    52603,957    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,037 ±        0,243  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,844 ±       11,967    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                           128  thrpt    5    136556,598 ±     2655,498   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       533,032 ±       10,323  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      6144,003 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       506,764 ±     1124,000  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5848,908 ±    12985,431    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,649 ±        5,309  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         7,504 ±       61,365    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         5,000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                128  thrpt    5     24568,535 ±      410,938   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1356,220 ±       22,723  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     86880,017 ±        0,003    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1353,754 ±        6,364  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     86723,670 ±     1789,602    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,135 ±        5,851    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        10,000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ArrayOfEnumsBenchmark.readUPickle                                                                 128  thrpt    5     29531,299 ±      246,620   ops/s
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       563,654 ±        4,676  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     30040,014 ±        0,002    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       506,749 ±     1123,973  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     27014,578 ±    59911,401    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,659 ±        5,449  MB/sec
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        35,213 ±      291,374    B/op
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         4,000                 counts
[info] ArrayOfEnumsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         5,000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                  128  thrpt    5    206829,638 ±     2513,094   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       719,103 ±        8,757  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5      5472,002 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       807,324 ±     1152,681  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5      6147,717 ±     8856,226    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,694 ±        5,751  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         5,270 ±       43,669    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         6,000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         4,000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                           128  thrpt    5    309358,438 ±     2456,526   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       312,881 ±        2,491  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1592,001 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       204,626 ±     1078,936  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1041,745 ±     5492,840    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         2,000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                          128  thrpt    5    574880,072 ±     9521,028   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       441,230 ±        7,299  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1208,001 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       474,526 ±     1068,663  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1299,294 ±     2922,068    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,641 ±        5,382  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,754 ±       14,735    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    607324,143 ±     7110,877   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                               128  thrpt    5    332786,729 ±     2512,176   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5       920,206 ±        7,000  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5      4352,001 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5       946,121 ±     1423,889  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      4476,599 ±     6762,578    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±        0,156  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,138 ±        0,740    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         7,000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         3,000                     ms
[info] ArrayOfEnumsBenchmark.writeUPickle                                                                128  thrpt    5     47718,805 ±      486,739   ops/s
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       221,202 ±        2,234  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      7296,009 ±        0,001    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       204,613 ±     1078,863  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      6747,310 ±    35576,693    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,001 ±        0,008  MB/sec
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,029 ±        0,252    B/op
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         2,000                 counts
[info] ArrayOfEnumsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         4,000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                  128  thrpt    5     44724,204 ±      389,398   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1994,752 ±       17,057  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     70200,009 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2023,190 ±       19,325  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     71200,940 ±      642,829    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,037 ±        0,067  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,319 ±        2,366    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        15,000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         6,000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                            128  thrpt    5    331900,203 ±     3059,562   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       344,155 ±        3,164  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1632,001 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       339,420 ±     1220,144  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1607,699 ±     5779,629    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,543 ±        4,640  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,570 ±       21,982    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3,000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                           128  thrpt    5    112850,577 ±      924,671   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1241,884 ±       10,179  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     17320,004 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1218,727 ±     1168,848  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     16992,843 ±    16246,950    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,232 ±        1,226    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         9,000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                          128  thrpt    5    458116,012 ±     4076,994   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       298,053 ±        2,650  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1024,001 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       204,623 ±     1078,919  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       704,252 ±     3713,319    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,004 ±        0,036  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,014 ±        0,122    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         2,000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                               128  thrpt    5     45845,572 ±      331,168   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2445,739 ±       16,452  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     83976,009 ±        0,002    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2445,886 ±     1426,535  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     83994,845 ±    49390,899    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,067 ±        0,104  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,287 ±        3,589    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        18,000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5         8,000                     ms
[info] ArrayOfFloatsBenchmark.readUPickle                                                                128  thrpt    5     88295,371 ±      790,787   ops/s
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1614,765 ±       14,520  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     28784,005 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1616,275 ±     1423,287  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     28817,342 ±    25515,272    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,050 ±        0,044  MB/sec
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,891 ±        0,783    B/op
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                 counts
[info] ArrayOfFloatsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                 128  thrpt    5     97490,459 ±     1482,920   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5       470,757 ±        7,165  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      7600,004 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       474,509 ±     1068,602  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      7660,712 ±    17285,851    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,694 ±        5,751  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5        11,255 ±       93,240    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5         4,000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         7,000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                           128  thrpt    5    124874,502 ±     2733,747   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       382,118 ±        8,388  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5      4816,003 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       339,442 ±     1220,269  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4287,930 ±    15399,135    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,526 ±        4,489  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         6,617 ±       56,490    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         3,000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                          128  thrpt    5    107868,478 ±     1129,149   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       356,369 ±        3,746  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      5200,004 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       339,465 ±     1220,404  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4957,005 ±    17826,818    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,012 ±        0,108  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,183 ±        1,572    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         3,000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2,000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                         128  thrpt    5    126422,547 ±      916,494   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       386,831 ±        2,844  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      4816,003 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       441,853 ±      989,248  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      5502,867 ±    12317,727    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,648 ±        5,432  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         8,068 ±       67,611    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         8,000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5    123889,819 ±     1637,119   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5       281,481 ±        3,729  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5      3576,003 ±        0,001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                         128  thrpt    5       306,927 ±     1078,891  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      3905,144 ±    13727,214    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,006 ±        0,033  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,080 ±        0,423    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5         3,000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                        128  thrpt    5         5,000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                128  thrpt    5     12208,876 ±       63,700   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                 128  thrpt    5      1992,030 ±       10,668  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                            128  thrpt    5    256808,036 ±        0,014    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2022,997 ±       19,695  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    260800,360 ±     2412,304    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,037 ±        0,036  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         4,829 ±        4,614    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                      128  thrpt    5        15,000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                       128  thrpt    5         7,000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                         128  thrpt    5     12167,880 ±      185,621   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1882,302 ±       28,723  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5    243465,857 ±       32,904    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1899,916 ±     1174,060  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    245727,545 ±   151448,728    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,037 ±        0,105  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4,842 ±       13,482    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                               128  thrpt    5        14,000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                128  thrpt    5         6,000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                        128  thrpt    5    208846,938 ±     1202,121   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       543,536 ±        3,038  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      4096,002 ±        0,001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       507,334 ±     1125,591  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      3824,751 ±     8483,559    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,575 ±        4,773  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         4,329 ±       35,933    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                              128  thrpt    5         4,000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                               128  thrpt    5         5,000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                             128  thrpt    5      6845,211 ±      113,985   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                              128  thrpt    5      1817,896 ±       30,424  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         128  thrpt    5    417984,983 ±        7,945    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1763,610 ±     1428,860  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    405559,898 ±   329704,259    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,021 ±        0,139  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         4,774 ±       31,853    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                   128  thrpt    5        13,000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfInstantsBenchmark.readUPickle                                                              128  thrpt    5     11319,540 ±      289,936   ops/s
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate                                               128  thrpt    5      1820,893 ±       46,646  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.alloc.rate.norm                                          128  thrpt    5    253172,434 ±       26,763    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1754,033 ±     1419,773  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    243704,386 ±   193624,688    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,037 ±        0,119  MB/sec
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,191 ±       16,427    B/op
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.count                                                    128  thrpt    5        13,000                 counts
[info] ArrayOfInstantsBenchmark.readUPickle:·gc.time                                                     128  thrpt    5         6,000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                               128  thrpt    5     29392,001 ±      303,480   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                128  thrpt    5      1523,230 ±       16,402  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                           128  thrpt    5     81568,014 ±        0,004    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1479,297 ±     1155,945  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     79244,831 ±    62773,979    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,339 ±        4,722    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                     128  thrpt    5        11,000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                      128  thrpt    5         4,000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                        128  thrpt    5     34386,471 ±      502,230   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1681,044 ±       24,923  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5     76944,013 ±        0,003    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1763,101 ±     1429,448  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     80726,371 ±    65980,005    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,037 ±        0,088  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,715 ±        4,013    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                              128  thrpt    5        13,000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                               128  thrpt    5         5,000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                       128  thrpt    5    384070,359 ±     4121,146   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       849,201 ±        9,182  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      3480,001 ±        0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       943,449 ±     1422,208  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      3868,444 ±     5859,207    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,037 ±        0,200  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,154 ±        0,821    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                             128  thrpt    5         7,000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                              128  thrpt    5         2,000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                               128  thrpt    5    454210,312 ±     2473,415   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                            128  thrpt    5     30415,252 ±      330,163   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                             128  thrpt    5      1600,406 ±       17,526  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     82824,014 ±        0,002    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1611,209 ±     1408,900  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     83380,510 ±    72844,719    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±        0,176  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,723 ±        9,085    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                  128  thrpt    5        12,000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfInstantsBenchmark.writeUPickle                                                             128  thrpt    5     11649,352 ±      113,333   ops/s
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate                                              128  thrpt    5       651,444 ±        6,312  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     88016,612 ±        4,941    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5       674,005 ±        4,815  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     91065,397 ±     1392,263    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,592 ±        4,831  MB/sec
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5        80,327 ±      655,451    B/op
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.count                                                   128  thrpt    5         5,000                 counts
[info] ArrayOfInstantsBenchmark.writeUPickle:·gc.time                                                    128  thrpt    5         3,000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                    128  thrpt    5    113369,478 ±      743,404   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1846,872 ±       12,684  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     25640,004 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1887,318 ±     1155,986  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     26205,682 ±    16147,205    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,037 ±        0,105  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,520 ±        1,452    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                          128  thrpt    5        14,000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                           128  thrpt    5         6,000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                              128  thrpt    5    522801,757 ±     2412,120   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                               128  thrpt    5       542,094 ±        2,623  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                          128  thrpt    5      1632,001 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                      128  thrpt    5       506,472 ±     1123,209  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1525,038 ±     3383,179    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,526 ±        4,482  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,581 ±       13,479    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                    128  thrpt    5         4,000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                             128  thrpt    5    330287,036 ±     3000,801   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       458,321 ±        4,211  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5      2184,001 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       372,062 ±     1332,661  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1773,614 ±     6349,956    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,139 ±        0,639    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5         3,000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5         2,000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                            128  thrpt    5    673676,591 ±     2703,700   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       438,298 ±        1,796  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      1024,001 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       474,797 ±     1069,596  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1109,659 ±     2500,523    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,636 ±        5,296  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,485 ±       12,371    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                 128  thrpt    5     85393,182 ±      794,645   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      3737,115 ±       34,200  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     68880,005 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         128  thrpt    5      3673,930 ±     1435,487  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     67719,333 ±    26642,178    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,054 ±        0,166  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,998 ±        3,067    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        27,000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        12,000                     ms
[info] ArrayOfIntsBenchmark.readUPickle                                                                  128  thrpt    5    222350,857 ±     1426,911   ops/s
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                   128  thrpt    5      1688,449 ±       10,967  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                              128  thrpt    5     11952,002 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1751,343 ±     1420,510  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     12399,061 ±    10093,914    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,042 ±        0,057  MB/sec
[info] ArrayOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,295 ±        0,401    B/op
[info] ArrayOfIntsBenchmark.readUPickle:·gc.count                                                        128  thrpt    5        13,000                 counts
[info] ArrayOfIntsBenchmark.readUPickle:·gc.time                                                         128  thrpt    5         5,000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                   128  thrpt    5    262886,105 ±     7142,186   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                    128  thrpt    5      1566,180 ±       42,572  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                               128  thrpt    5      9376,002 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1614,288 ±     1415,599  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5      9672,517 ±     8665,101    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,033 ±        0,122  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,200 ±        0,726    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                         128  thrpt    5        12,000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                          128  thrpt    5         5,000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                             128  thrpt    5   1289876,795 ±     9835,726   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       701,552 ±        5,417  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5       856,000 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       672,804 ±        3,578  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       820,927 ±        8,500    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,542 ±        4,581  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,664 ±        5,607    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                   128  thrpt    5         5,000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                            128  thrpt    5    908781,400 ±    13015,296   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5       715,970 ±       10,219  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      1240,000 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       675,316 ±        2,724  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1169,603 ±       17,718    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,036 ±        0,139    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5         5,000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5         2,000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                           128  thrpt    5   1250101,244 ±    11441,934   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       679,885 ±        6,254  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5       856,000 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       673,395 ±        4,788  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       847,833 ±       10,112    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,657 ±        5,390  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,829 ±        6,802    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5   1181787,376 ±    21262,861   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                128  thrpt    5     37929,831 ±      480,067   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1987,804 ±       25,484  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     82488,012 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2019,389 ±       22,336  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     83799,310 ±     1259,669    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,037 ±        0,105  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,556 ±        4,347    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        15,000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5         7,000                     ms
[info] ArrayOfIntsBenchmark.writeUPickle                                                                 128  thrpt    5    139922,262 ±     3041,178   ops/s
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                  128  thrpt    5      1491,354 ±       32,191  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     16776,003 ±        0,001    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1480,634 ±     1158,236  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     16661,321 ±    13197,900    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,033 ±        0,044  MB/sec
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,374 ±        0,489    B/op
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.count                                                       128  thrpt    5        11,000                 counts
[info] ArrayOfIntsBenchmark.writeUPickle:·gc.time                                                        128  thrpt    5         5,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                               128  thrpt    5    144015,254 ±     2187,870   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1964,749 ±       29,719  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     21472,003 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2022,240 ±       20,165  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     22100,733 ±      543,020    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±        0,036  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,500 ±        0,392    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        15,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         7,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                        128  thrpt    5    207767,673 ±     2556,481   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5      1099,358 ±       13,804  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      8328,002 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5      1082,540 ±     1428,684  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      8202,969 ±    10851,892    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,008 ±        0,072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,063 ±        0,546    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         8,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                       128  thrpt    5    303631,170 ±      933,798   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       790,172 ±        2,506  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      4096,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       807,315 ±     1155,782  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      4184,737 ±     5988,666    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±        0,122  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,151 ±        0,630    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         6,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         2,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                            128  thrpt    5     79215,659 ±      628,767   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      3342,353 ±       26,248  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     66408,005 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      3401,622 ±       14,150  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     67585,815 ±      570,168    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,062 ±        0,057  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,241 ±        1,133    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        25,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        10,000                     ms
[info] ArrayOfJavaEnumsBenchmark.readUPickle                                                             128  thrpt    5    163235,381 ±      947,383   ops/s
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1841,120 ±       10,951  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     17752,003 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1887,228 ±     1156,128  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     18198,087 ±    11182,740    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,046 ±        0,105  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,441 ±        1,007    B/op
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        14,000                 counts
[info] ArrayOfJavaEnumsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         6,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                              128  thrpt    5    189803,710 ±    11438,280   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       659,945 ±       39,689  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      5472,002 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,066 ±        6,016  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      5581,857 ±      330,072    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,688 ±        5,749  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,669 ±       47,318    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         3,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                       128  thrpt    5    620420,019 ±     3631,051   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       627,553 ±        3,770  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1592,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       674,967 ±        2,039  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1712,287 ±       13,966    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,050 ±        0,263  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,127 ±        0,669    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         5,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         2,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                      128  thrpt    5    588912,128 ±    17665,442   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       451,966 ±       13,674  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      1208,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       474,493 ±     1068,622  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      1269,170 ±     2846,905    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,639 ±        5,366  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,703 ±       14,307    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         4,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    622236,846 ±     2658,804   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                           128  thrpt    5    338896,160 ±     6965,546   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       933,668 ±       19,246  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      4336,001 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       946,199 ±     1424,005  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4391,891 ±     6579,773    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±        0,143  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,116 ±        0,664    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         7,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeUPickle                                                            128  thrpt    5     48013,446 ±      328,506   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       222,571 ±        1,482  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      7296,009 ±        0,001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       204,635 ±     1078,984  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      6718,731 ±    35425,954    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,005 ±        0,044  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,166 ±        1,432    B/op
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         2,000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                          128  thrpt    5     12297,661 ±      295,118   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1556,695 ±       37,485  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    199232,041 ±        0,041    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1614,785 ±     1422,569  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    206746,355 ±   183822,804    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         4,263 ±       11,660    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5        12,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5     12561,697 ±       57,682   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1488,786 ±        6,487  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    186529,293 ±       43,257    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1490,697 ±     1167,122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    186775,514 ±   146426,324    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,017 ±        0,105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         2,087 ±       13,098    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5        11,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         5,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5    221862,482 ±     4523,067   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5      1443,422 ±       29,336  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     10240,002 ±        0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1347,827 ±        4,530  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5      9562,018 ±      179,818    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,042 ±        0,196  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,295 ±        1,389    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5        10,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         5,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      9303,176 ±       62,051   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1671,708 ±       11,327  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    282816,362 ±        2,411    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1763,207 ±     1429,531  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    298364,003 ±   243267,417    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         5,638 ±       15,481    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5        13,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         6,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readUPickle                                                        128  thrpt    5     11743,894 ±      106,776   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1463,980 ±       13,475  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    196203,694 ±       22,905    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1481,650 ±     1154,743  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    198637,476 ±   156715,750    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         3,347 ±       13,995    B/op
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5        11,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                         128  thrpt    5     26596,500 ±      200,890   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1116,670 ±        8,449  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     66080,016 ±        0,003    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1074,499 ±     1415,806  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     63564,735 ±    83537,275    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,042 ±        0,150  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,461 ±        8,862    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         8,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     30844,506 ±      484,559   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1186,629 ±       18,551  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     60552,013 ±        0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1218,185 ±     1164,880  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     62190,452 ±    59803,515    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1,275 ±        3,416    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         9,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    803143,564 ±     6761,534   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1449,200 ±       12,452  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      2840,001 ±        0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1347,783 ±        4,342  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      2641,267 ±       29,555    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,054 ±        0,044  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,106 ±        0,086    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5        10,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    790896,923 ±     9936,743   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     28561,027 ±      183,597   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1204,743 ±        7,692  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     66392,015 ±        0,002    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1206,649 ±     1155,101  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     66509,724 ±    63819,073    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±        0,098  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,148 ±        5,415    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         9,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle                                                       128  thrpt    5     15962,796 ±      294,132   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       610,958 ±       11,158  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5     60240,027 ±        0,011    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       539,474 ±     1161,264  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     53152,647 ±   114423,173    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,588 ±        4,841  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5        58,349 ±      480,577    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                              128  thrpt    5     33308,068 ±      425,368   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1656,420 ±       21,184  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     78272,013 ±        0,003    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1615,833 ±     1419,259  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     76360,376 ±    67201,408    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,033 ±        0,134  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,576 ±        6,353    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        12,000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         6,000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                       128  thrpt    5     35715,343 ±      409,231   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1630,447 ±       19,374  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     71848,012 ±        0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1627,110 ±     1427,715  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     71672,095 ±    62244,183    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±        0,044  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         1,285 ±        1,947    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        12,000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         5,000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                      128  thrpt    5    393655,787 ±     2854,439   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1024,463 ±        7,602  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       942,956 ±     1420,208  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3769,415 ±     5668,281    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,083 ±        0,320    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         7,000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         2,000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                           128  thrpt    5     20085,577 ±      410,976   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      2067,480 ±       42,816  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    162015,858 ±        1,405    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2036,786 ±        9,927  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    159613,678 ±     2846,316    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,037 ±        0,036  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,937 ±        2,817    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        15,000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfLocalDatesBenchmark.readUPickle                                                            128  thrpt    5     33594,958 ±      363,961   ops/s
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1627,583 ±       17,428  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     76248,013 ±        0,002    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1618,087 ±     1425,093  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     75835,530 ±    67492,568    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,170 ±        3,138    B/op
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        12,000                 counts
[info] ArrayOfLocalDatesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                             128  thrpt    5     61237,287 ±      688,100   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1485,238 ±       16,897  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     38176,007 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479,240 ±     1165,401  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     38020,234 ±    29902,064    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,748 ±        2,340    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11,000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                      128  thrpt    5    113259,032 ±     1356,260   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1180,727 ±       14,156  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     16408,004 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1218,399 ±     1165,332  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     16922,024 ±    16070,272    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,042 ±        0,098  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,578 ±        1,363    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5         9,000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1190817,157 ±    10631,674   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1277,119 ±       11,261  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1688,000 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1347,371 ±        3,129  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1780,862 ±       15,733    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,050 ±        0,091  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,066 ±        0,121    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5        10,000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1261417,528 ±     7025,734   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                          128  thrpt    5     71121,780 ±      880,422   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1653,110 ±       20,393  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     36584,006 ±        0,001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1612,180 ±     1415,745  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     35666,128 ±    31050,765    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,553 ±        2,311    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        12,000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         6,000                     ms
[info] ArrayOfLocalDatesBenchmark.writeUPickle                                                           128  thrpt    5     30982,838 ±      247,915   ops/s
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       384,231 ±        3,165  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     19520,014 ±        0,002    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       441,981 ±      989,795  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22442,838 ±    50295,517    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,575 ±        4,925  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        29,270 ±      250,522    B/op
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfLocalDatesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                              128  thrpt    5     18533,494 ±      392,273   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1654,278 ±       35,111  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5    140479,847 ±        1,520    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1615,991 ±     1419,581  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    137187,473 ±   119563,682    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,046 ±        0,104  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         3,897 ±        8,969    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                    128  thrpt    5        12,000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                     128  thrpt    5         6,000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                       128  thrpt    5     18755,924 ±      141,971   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1514,848 ±       11,408  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5    127119,996 ±       53,366    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1490,692 ±     1164,832  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    125121,508 ±    98598,859    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         2,096 ±        5,622    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        11,000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         5,000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                      128  thrpt    5    462581,043 ±     1808,814   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1203,838 ±        4,320  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±        0,001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1212,507 ±     1160,099  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      4125,945 ±     3952,987    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,071 ±        0,273    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5         9,000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         4,000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                           128  thrpt    5     13537,410 ±      159,599   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1869,054 ±       21,888  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    217320,032 ±        0,013    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1764,265 ±     1433,234  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    205185,835 ±   167683,568    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         3,387 ±       10,610    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        13,000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] ArrayOfLocalTimesBenchmark.readUPickle                                                            128  thrpt    5     18963,688 ±      192,146   ops/s
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1584,192 ±       15,954  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5    131484,683 ±       40,138    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1617,276 ±     1419,121  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    134232,433 ±   117814,623    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±        0,057  MB/sec
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         3,456 ±        4,717    B/op
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        12,000                 counts
[info] ArrayOfLocalTimesBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                             128  thrpt    5     45395,037 ±      371,463   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1411,231 ±       11,540  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     48928,009 ±        0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1478,730 ±     1163,985  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     51277,005 ±    40614,958    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,867 ±        3,626    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        11,000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                      128  thrpt    5     53562,855 ±     1004,265   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1420,841 ±       26,795  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     41752,008 ±        0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1354,875 ±        5,944  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     39814,431 ±      846,018    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,025 ±        0,036  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,734 ±        1,056    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         4,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                     128  thrpt    5   1361694,179 ±    10886,031   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1238,938 ±        9,883  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1432,000 ±        0,001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1212,339 ±     1158,008  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1401,472 ±     1341,230    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,050 ±        0,108  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,058 ±        0,124    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         9,000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1470718,646 ±     5400,087   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                          128  thrpt    5     42257,033 ±      139,105   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1278,710 ±        4,377  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     47632,010 ±        0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1341,240 ±        5,674  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     49961,254 ±      139,985    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,033 ±        0,108  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,241 ±        4,009    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        10,000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfLocalTimesBenchmark.writeUPickle                                                           128  thrpt    5     33879,114 ±      350,789   ops/s
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       475,253 ±        4,971  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     22080,012 ±        0,002    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,721 ±     1069,442  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22065,798 ±    49670,895    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,581 ±        4,840  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        26,997 ±      224,884    B/op
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfLocalTimesBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                   128  thrpt    5     89019,334 ±      435,417   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1527,127 ±        7,501  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     27000,005 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1615,379 ±     1422,039  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     28566,514 ±    25282,351    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,029 ±        0,122  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,515 ±        2,148    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        12,000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         4,000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                             128  thrpt    5    392422,015 ±     2933,075   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                              128  thrpt    5       785,868 ±        5,822  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                         128  thrpt    5      3152,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                     128  thrpt    5       807,176 ±     1155,725  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      3238,551 ±     4656,389    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,100 ±        0,420    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                   128  thrpt    5         6,000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                            128  thrpt    5    255288,465 ±     3295,996   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       554,075 ±        7,160  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5      3416,002 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       539,917 ±     1162,215  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3332,106 ±     7172,766    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,042 ±        0,272  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,257 ±        1,679    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         2,000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                           128  thrpt    5    521478,957 ±     2487,066   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       657,338 ±        3,219  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1984,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       673,392 ±        4,923  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2032,458 ±       15,555    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,644 ±        5,367  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,946 ±       16,219    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         5,000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                128  thrpt    5     80651,668 ±      689,374   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      3598,346 ±       32,174  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     70224,005 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      3536,874 ±     1174,150  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     69022,809 ±    22808,057    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,087 ±        0,105  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,705 ±        2,030    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        26,000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5        11,000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                  128  thrpt    5    237095,201 ±     1858,260   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5      1676,336 ±       13,407  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     11128,002 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1614,994 ±     1419,010  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     10718,251 ±     9361,426    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,046 ±        0,067  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,304 ±        0,444    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5        12,000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         5,000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                            128  thrpt    5    752664,963 ±    13935,075   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       589,155 ±       11,049  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5      1232,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       538,711 ±     1159,618  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      1128,164 ±     2428,542    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,543 ±        4,541  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,139 ±        9,531    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                           128  thrpt    5    535586,209 ±     8589,486   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5       549,902 ±        8,651  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1616,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       539,749 ±     1161,852  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1584,546 ±     3410,974    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±        0,166  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,098 ±        0,487    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         2,000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                          128  thrpt    5    658253,881 ±    11999,056   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       515,286 ±        9,532  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      1232,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       506,776 ±     1124,068  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      1212,092 ±     2683,230    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,639 ±        5,330  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,527 ±       12,728    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         4,000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    777178,351 ±     5594,255   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                               128  thrpt    5     31143,509 ±      271,877   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1881,573 ±       16,355  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     95088,014 ±        0,004    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1883,370 ±     1148,065  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     95165,768 ±    57704,793    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,042 ±        0,080  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         2,104 ±        4,052    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        14,000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                         128  thrpt    5      8851,827 ±       64,902   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                          128  thrpt    5      1362,795 ±        9,716  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                     128  thrpt    5    242296,055 ±        0,067    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1479,206 ±     1153,611  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    263035,227 ±   206361,625    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         4,442 ±       11,942    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                               128  thrpt    5        11,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                  128  thrpt    5      9266,111 ±      159,066   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1335,502 ±       22,407  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5    226824,045 ±        0,008    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1354,425 ±        6,994  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5    230041,931 ±     4588,606    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,025 ±        0,067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         4,248 ±       11,433    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                        128  thrpt    5        10,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                         128  thrpt    5         6,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                 128  thrpt    5    172093,363 ±     1205,835   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1667,257 ±       11,764  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5     15248,002 ±        0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5      1753,779 ±     1423,103  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     16040,000 ±    13029,387    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,046 ±        0,119  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,419 ±        1,088    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                       128  thrpt    5        13,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                        128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                      128  thrpt    5      8437,348 ±      218,806   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                       128  thrpt    5      1534,488 ±       40,051  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  128  thrpt    5    286240,704 ±        5,649    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1626,757 ±     1428,678  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    303667,907 ±   271305,542    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         5,432 ±       17,017    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                            128  thrpt    5        12,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle                                                       128  thrpt    5      8926,850 ±      142,698   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate                                        128  thrpt    5      1341,492 ±       21,505  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    236517,888 ±       48,855    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5      1346,768 ±        5,116  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    237451,115 ±     3695,664    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         5,860 ±       16,066    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.count                                             128  thrpt    5        10,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readUPickle:·gc.time                                              128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                        128  thrpt    5     21026,092 ±      644,138   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                         128  thrpt    5       953,995 ±       29,111  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                    128  thrpt    5     71409,705 ±       14,514    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                128  thrpt    5       940,246 ±     1416,441  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     70460,187 ±   107134,946    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         1,558 ±        5,978    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                              128  thrpt    5         7,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                               128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                 128  thrpt    5     23979,640 ±      122,450   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                  128  thrpt    5      1016,142 ±        5,281  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             128  thrpt    5     66696,018 ±        0,003    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       946,863 ±     1426,929  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     62149,956 ±    93675,393    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         1,640 ±        8,645    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                       128  thrpt    5         7,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                        128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                128  thrpt    5    474837,959 ±     4760,644   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 128  thrpt    5      1076,436 ±       10,894  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            128  thrpt    5      3568,001 ±        0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        128  thrpt    5      1077,631 ±     1420,355  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   128  thrpt    5      3571,730 ±     4705,027    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    128  thrpt    5         0,042 ±        0,160  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               128  thrpt    5         0,138 ±        0,532    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                      128  thrpt    5         8,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                       128  thrpt    5         3,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                        128  thrpt    5    542880,950 ±     3696,932   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                     128  thrpt    5     22017,621 ±      481,502   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                      128  thrpt    5      1015,341 ±       22,494  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                 128  thrpt    5     72575,872 ±        1,271    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             128  thrpt    5      1072,403 ±     1413,913  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     76694,277 ±   101545,967    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         1,790 ±        6,336    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                           128  thrpt    5         8,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle                                                      128  thrpt    5     12239,176 ±       20,567   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                       128  thrpt    5       662,416 ±        1,289  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                  128  thrpt    5     85192,037 ±        0,014    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                              128  thrpt    5       674,000 ±        4,883  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     86681,873 ±      714,347    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,588 ±        4,880  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5        75,595 ±      627,971    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.count                                            128  thrpt    5         5,000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeUPickle:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                             128  thrpt    5     15055,517 ±      381,691   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1512,443 ±       38,342  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5    158112,036 ±        0,058    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1479,893 ±     1157,833  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5    154825,384 ±   124418,103    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,037 ±        0,143  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         3,918 ±       15,033    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                   128  thrpt    5        11,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                      128  thrpt    5     15815,575 ±      213,068   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1447,278 ±       19,960  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5    144031,081 ±       62,161    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1354,910 ±        6,154  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5    134839,920 ±     1775,840    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         1,660 ±        6,703    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        10,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                     128  thrpt    5    275125,893 ±     4451,883   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1591,406 ±       25,883  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      9104,002 ±        0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1616,317 ±     1423,551  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      9242,806 ±     8057,302    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,050 ±        0,072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,286 ±        0,406    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5        12,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                          128  thrpt    5     13200,148 ±      134,669   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      1677,405 ±       17,265  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5    199992,033 ±        0,013    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1626,382 ±     1427,090  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    193935,046 ±   170731,849    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2,978 ±       10,489    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        12,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5         6,000                     ms
[info] ArrayOfOffsetTimesBenchmark.readUPickle                                                           128  thrpt    5     15424,780 ±      272,260   ops/s
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1455,529 ±       25,246  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5    148523,642 ±       46,339    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1479,738 ±     1155,113  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    151106,829 ±   121203,589    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±        0,057  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,129 ±        5,830    B/op
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        11,000                 counts
[info] ArrayOfOffsetTimesBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                            128  thrpt    5     32793,196 ±      248,906   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5      1131,685 ±        8,690  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5     54312,013 ±        0,002    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1208,999 ±     1157,098  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     58033,353 ±    55671,332    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,799 ±        4,213    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         9,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                     128  thrpt    5     81679,297 ±     1090,413   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1300,282 ±       17,025  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     25056,005 ±        0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1354,432 ±        5,752  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     26099,668 ±      295,973    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,643 ±        1,765    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5        10,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         4,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                    128  thrpt    5    761837,726 ±     4926,297   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1045,537 ±        6,830  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      2160,001 ±        0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1075,615 ±     1417,422  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      2222,723 ±     2935,464    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,021 ±        0,113  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,043 ±        0,234    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         8,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5    853748,705 ±     5963,783   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                         128  thrpt    5     82646,529 ±     1503,103   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1459,761 ±       26,609  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5     27800,005 ±        0,001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1490,153 ±     1170,057  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     28372,334 ±    22078,898    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,317 ±        1,274    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                               128  thrpt    5        11,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         5,000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeUPickle                                                          128  thrpt    5     19479,593 ±      249,399   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       430,697 ±        5,480  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5     34800,023 ±        0,008    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       339,560 ±     1220,869  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     27477,411 ±    98722,009    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,648 ±        5,470  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5        52,318 ±      441,470    B/op
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         3,000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                 128  thrpt    5     21394,459 ±      178,907   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5       801,565 ±        6,868  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     58967,872 ±        1,271    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5       672,873 ±        4,098  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     49500,801 ±      669,917    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,226 ±        6,463    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                       128  thrpt    5         5,000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         3,000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                          128  thrpt    5     21587,624 ±      145,460   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       604,151 ±        4,047  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     44048,274 ±        2,188    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       539,879 ±     1162,131  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     39357,643 ±    84720,662    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         2,126 ±        9,787    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         4,000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         2,000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                         128  thrpt    5    115801,874 ±     1595,908   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       290,767 ±        4,024  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3952,004 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       306,921 ±     1078,869  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      4179,138 ±    14690,407    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,002 ±        0,018  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,028 ±        0,245    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         3,000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         5,000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                              128  thrpt    5     17762,863 ±      415,058   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      1121,527 ±       26,053  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     99368,117 ±        0,810    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1213,340 ±     1161,784  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5    107552,629 ±   103564,276    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,220 ±       11,754    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5         9,000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         4,000                     ms
[info] ArrayOfPeriodsBenchmark.readUPickle                                                               128  thrpt    5     18711,709 ±      147,083   ops/s
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5       602,299 ±        4,465  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     50662,144 ±       40,039    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5       641,814 ±      280,564  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     53978,089 ±    23311,272    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,582 ±        4,831  MB/sec
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5        48,953 ±      406,315    B/op
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5         5,000                 counts
[info] ArrayOfPeriodsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         5,000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                128  thrpt    5     64940,735 ±      842,340   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5      1158,371 ±       15,019  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5     28072,007 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1209,085 ±     1157,435  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     29303,638 ±    28082,903    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,046 ±        0,164  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         1,111 ±        3,986    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         9,000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         3,000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                         128  thrpt    5     75332,521 ±      533,043   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5      1077,462 ±        7,491  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5     22512,005 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1082,128 ±     1424,758  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     22614,495 ±    29829,483    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,348 ±        1,837    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         8,000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                        128  thrpt    5    327644,071 ±    18691,456   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       627,874 ±       35,842  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      3016,001 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       539,841 ±     1162,051  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2599,083 ±     5597,830    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,578 ±        4,752  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         2,847 ±       23,452    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         4,000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    394030,121 ±     3150,709   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                             128  thrpt    5     78873,154 ±     1776,597   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5      1415,580 ±       31,871  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5     28248,005 ±        0,001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1476,197 ±     1153,235  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     29476,718 ±    23569,024    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±        0,108  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,582 ±        2,153    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5        11,000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         5,000                     ms
[info] ArrayOfPeriodsBenchmark.writeUPickle                                                              128  thrpt    5     17192,761 ±      579,128   ops/s
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       377,075 ±       12,737  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5     34520,025 ±        0,010    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       441,977 ±      989,791  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     40375,641 ±    90268,863    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,573 ±        4,887  MB/sec
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5        52,089 ±      444,495    B/op
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         4,000                 counts
[info] ArrayOfPeriodsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         7,000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                  128  thrpt    5    137641,841 ±      989,562   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      1993,961 ±       14,069  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     22800,003 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      2023,726 ±       18,045  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     23140,465 ±      331,594    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,054 ±        0,044  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,619 ±        0,500    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        15,000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                         128  thrpt    5         6,000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                            128  thrpt    5    747177,750 ±     6729,566   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                             128  thrpt    5       413,977 ±        3,712  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        128  thrpt    5       872,001 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    128  thrpt    5       339,459 ±     1220,316  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       715,812 ±     2573,172    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,530 ±        4,489  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,118 ±        9,464    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                  128  thrpt    5         3,000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                           128  thrpt    5    418758,306 ±     1843,611   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5       417,195 ±        1,765  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      1568,001 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,378 ±     1068,180  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      1783,173 ±     4015,255    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±        0,201  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,125 ±        0,755    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                          128  thrpt    5    866965,401 ±     8196,057   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       299,649 ±        2,770  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       544,000 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       204,626 ±     1078,931  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       372,097 ±     1961,967    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,001 ±        0,010  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,002 ±        0,018    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         2,000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                               128  thrpt    5     91024,173 ±     1024,897   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3899,856 ±       43,512  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     67432,005 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3810,814 ±     1438,363  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     65898,694 ±    25157,596    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,071 ±        0,156  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,224 ±        2,708    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        28,000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        11,000                     ms
[info] ArrayOfShortsBenchmark.readUPickle                                                                128  thrpt    5    244583,439 ±      934,062   ops/s
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate                                                 128  thrpt    5      1545,315 ±        5,982  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.alloc.rate.norm                                            128  thrpt    5      9944,002 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1615,791 ±     1417,803  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     10398,690 ±     9150,280    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfShortsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,161 ±        0,672    B/op
[info] ArrayOfShortsBenchmark.readUPickle:·gc.count                                                      128  thrpt    5        12,000                 counts
[info] ArrayOfShortsBenchmark.readUPickle:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                 128  thrpt    5    323711,138 ±     3684,409   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      1686,512 ±       18,855  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5      8200,001 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1749,879 ±     1419,642  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5      8506,533 ±     6868,654    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,042 ±        0,057  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,202 ±        0,275    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        13,000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         5,000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                           128  thrpt    5   1640497,523 ±    10038,542   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                            128  thrpt    5       558,643 ±        3,472  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       128  thrpt    5       536,000 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   128  thrpt    5       506,521 ±     1123,320  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       485,817 ±     1076,693    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,542 ±        4,552  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,520 ±        4,366    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                  128  thrpt    5         5,000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                          128  thrpt    5   1450031,500 ±    10370,228   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       847,561 ±        6,119  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       811,252 ±     1163,996  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       880,560 ±     1262,889    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,027 ±        0,143    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         6,000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2,000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1506167,202 ±    11921,097   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       512,940 ±        4,175  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       536,000 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       506,739 ±     1123,960  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       529,988 ±     1175,393    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,644 ±        5,412  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,673 ±        5,658    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         5,000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1673704,827 ±     9170,471   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                              128  thrpt    5     43750,142 ±      820,243   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2029,001 ±       37,800  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     72992,010 ±        0,002    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2020,665 ±       22,549  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     72693,508 ±     1601,660    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,050 ±        0,044  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,797 ±        1,586    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15,000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         7,000                     ms
[info] ArrayOfShortsBenchmark.writeUPickle                                                               128  thrpt    5    151567,235 ±     3083,227   ops/s
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate                                                128  thrpt    5      1318,976 ±       26,916  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     13696,003 ±        0,001    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1210,637 ±     1156,412  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     12569,919 ±    11993,447    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±        0,132  MB/sec
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,259 ±        1,364    B/op
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.count                                                     128  thrpt    5         9,000                 counts
[info] ArrayOfShortsBenchmark.writeUPickle:·gc.time                                                      128  thrpt    5         4,000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                   128  thrpt    5     63455,150 ±      257,159   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                    128  thrpt    5      1266,948 ±        5,144  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                               128  thrpt    5     31424,007 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1344,740 ±        2,937  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     33353,516 ±      189,568    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,050 ±        0,091  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         1,239 ±        2,262    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                         128  thrpt    5        10,000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                          128  thrpt    5         4,000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                            128  thrpt    5     88153,840 ±      796,456   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5       925,301 ±        8,391  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     16520,005 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5       946,343 ±     1424,385  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     16898,090 ±    25463,991    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,520 ±        2,392    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5         7,000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         3,000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                           128  thrpt    5    292958,124 ±     6441,846   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       953,050 ±       20,688  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      5120,001 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5       941,130 ±     1418,615  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      5063,151 ±     7721,193    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,067 ±        0,385    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5         7,000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         2,000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                128  thrpt    5     38992,114 ±      352,522   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      1933,823 ±       17,918  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     78056,011 ±        0,002    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      1895,576 ±     1159,141  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     76494,746 ±    46363,270    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,062 ±        0,139  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,519 ±        5,603    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        14,000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         6,000                     ms
[info] ArrayOfUUIDsBenchmark.readUPickle                                                                 128  thrpt    5     52962,115 ±      466,750   ops/s
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5       883,814 ±        7,933  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     26264,008 ±        0,002    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5       941,735 ±     1420,614  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     27987,997 ±    42253,852    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,866 ±        3,982    B/op
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5         7,000                 counts
[info] ArrayOfUUIDsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         2,000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                  128  thrpt    5     62356,606 ±     1099,387   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                   128  thrpt    5       925,195 ±       16,258  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                              128  thrpt    5     23352,007 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5       940,226 ±     1414,944  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     23719,367 ±    35540,392    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         0,419 ±        1,688    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                        128  thrpt    5         7,000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                         128  thrpt    5         3,000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                           128  thrpt    5    104974,123 ±      726,083   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1437,954 ±        9,679  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     21560,008 ±        0,061    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1354,754 ±        6,430  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     20312,582 ±      167,797    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±        0,072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,499 ±        1,076    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5        10,000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         5,000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                          128  thrpt    5    305790,825 ±     3295,084   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5       974,566 ±       10,676  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      5016,001 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1075,598 ±     1418,139  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      5539,869 ±     7346,208    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,012 ±        0,072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,064 ±        0,369    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5    359760,498 ±     3281,823   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                               128  thrpt    5     81336,317 ±      617,409   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1206,374 ±        9,150  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     23344,010 ±        0,079    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1206,850 ±     1155,238  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     23359,267 ±    22432,083    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,323 ±        1,301    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5         9,000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         4,000                     ms
[info] ArrayOfUUIDsBenchmark.writeUPickle                                                                128  thrpt    5     11513,962 ±      109,793   ops/s
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       285,388 ±        2,732  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     39008,618 ±        4,996    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       306,922 ±     1078,874  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5     41993,060 ±   147612,408    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,001 ±        0,008  MB/sec
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,125 ±        1,077    B/op
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                 counts
[info] ArrayOfUUIDsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.readCirce                                                              128  thrpt    5     29273,181 ±      124,012   ops/s
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate                                               128  thrpt    5      1524,789 ±        6,266  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.alloc.rate.norm                                          128  thrpt    5     81984,014 ±        0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1480,172 ±     1157,334  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     79580,485 ±    62086,573    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,017 ±        0,105  MB/sec
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,895 ±        5,615    B/op
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.count                                                    128  thrpt    5        11,000                 counts
[info] ArrayOfYearMonthsBenchmark.readCirce:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.readJacksonScala                                                       128  thrpt    5     33677,158 ±      218,500   ops/s
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1318,232 ±        8,538  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     61608,012 ±        0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1354,405 ±        6,499  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     63298,640 ±      281,832    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,778 ±        3,130    B/op
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.count                                             128  thrpt    5        10,000                 counts
[info] ArrayOfYearMonthsBenchmark.readJacksonScala:·gc.time                                              128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala                                                      128  thrpt    5    553132,585 ±     5531,647   ops/s
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1439,525 ±       14,320  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      4096,001 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1345,787 ±        6,425  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3829,298 ±       35,724    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,037 ±        0,067  MB/sec
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,107 ±        0,190    B/op
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.count                                            128  thrpt    5        10,000                 counts
[info] ArrayOfYearMonthsBenchmark.readJsoniterScala:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfYearMonthsBenchmark.readPlayJson                                                           128  thrpt    5     25434,704 ±      628,825   ops/s
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate                                            128  thrpt    5      1933,738 ±       47,776  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.alloc.rate.norm                                       128  thrpt    5    119656,016 ±        0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1899,200 ±     1167,870  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5    117588,417 ±    73864,250    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,046 ±        0,154  MB/sec
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,835 ±        9,511    B/op
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.count                                                 128  thrpt    5        14,000                 counts
[info] ArrayOfYearMonthsBenchmark.readPlayJson:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] ArrayOfYearMonthsBenchmark.readUPickle                                                            128  thrpt    5     30700,562 ±      203,743   ops/s
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate                                             128  thrpt    5      1385,537 ±        9,491  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     71032,014 ±        0,002    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1345,041 ±        4,194  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     68956,140 ±      534,111    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,033 ±        0,108  MB/sec
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,708 ±        5,509    B/op
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.count                                                  128  thrpt    5        10,000                 counts
[info] ArrayOfYearMonthsBenchmark.readUPickle:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeCirce                                                             128  thrpt    5     75426,448 ±      883,726   ops/s
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate                                              128  thrpt    5      1597,523 ±       18,460  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.alloc.rate.norm                                         128  thrpt    5     33336,006 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1614,021 ±     1412,509  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     33681,081 ±    29489,762    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,033 ±        0,122  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,696 ±        2,538    B/op
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.count                                                   128  thrpt    5        12,000                 counts
[info] ArrayOfYearMonthsBenchmark.writeCirce:·gc.time                                                    128  thrpt    5         6,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala                                                      128  thrpt    5    183625,690 ±     1777,581   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1391,641 ±       13,445  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5     11928,002 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1355,066 ±        6,844  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     11614,546 ±       79,974    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,249 ±        0,781    B/op
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.count                                            128  thrpt    5        10,000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJacksonScala:·gc.time                                             128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala                                                     128  thrpt    5   1325724,492 ±    20711,902   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate                                      128  thrpt    5      1098,361 ±       17,078  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      1304,000 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1075,575 ±     1417,262  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1277,205 ±     1685,728    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,033 ±        0,146  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,039 ±        0,172    B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.count                                           128  thrpt    5         8,000                 counts
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScala:·gc.time                                            128  thrpt    5         3,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc                                             128  thrpt    5   1531908,395 ±    12346,234   ops/s
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                         128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfYearMonthsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson                                                          128  thrpt    5    139239,339 ±     2544,296   ops/s
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate                                           128  thrpt    5      1569,772 ±       28,893  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     17744,003 ±        0,001    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1490,699 ±     1166,958  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     16862,691 ±    13558,343    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,042 ±        0,098  MB/sec
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,471 ±        1,114    B/op
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.count                                                128  thrpt    5        11,000                 counts
[info] ArrayOfYearMonthsBenchmark.writePlayJson:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] ArrayOfYearMonthsBenchmark.writeUPickle                                                           128  thrpt    5     33629,400 ±      260,632   ops/s
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate                                            128  thrpt    5       444,412 ±        3,406  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     20800,012 ±        0,002    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5       474,490 ±     1068,572  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     22219,335 ±    50069,330    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,662 ±        5,531  MB/sec
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5        31,087 ±      259,766    B/op
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] ArrayOfYearMonthsBenchmark.writeUPickle:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] ArrayOfYearsBenchmark.readJacksonScala                                                            128  thrpt    5     43741,038 ±      787,278   ops/s
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1569,101 ±       28,128  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     56456,010 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1491,283 ±     1168,403  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     53640,599 ±    41549,968    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,749 ±        2,877    B/op
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.count                                                  128  thrpt    5        11,000                 counts
[info] ArrayOfYearsBenchmark.readJacksonScala:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] ArrayOfYearsBenchmark.readJsoniterScala                                                           128  thrpt    5    774419,062 ±     2974,474   ops/s
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate                                            128  thrpt    5      1511,518 ±        6,020  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      3072,001 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1480,659 ±     1154,105  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      3009,499 ±     2352,086    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,046 ±        0,105  MB/sec
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,093 ±        0,212    B/op
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.count                                                 128  thrpt    5        11,000                 counts
[info] ArrayOfYearsBenchmark.readJsoniterScala:·gc.time                                                  128  thrpt    5         5,000                     ms
[info] ArrayOfYearsBenchmark.readPlayJson                                                                128  thrpt    5     30835,067 ±      369,972   ops/s
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate                                                 128  thrpt    5      2243,875 ±       26,546  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            128  thrpt    5    114536,014 ±        0,004    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        128  thrpt    5      2172,331 ±     1170,748  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5    110852,867 ±    58452,581    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,042 ±        0,057  MB/sec
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,125 ±        2,901    B/op
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.count                                                      128  thrpt    5        16,000                 counts
[info] ArrayOfYearsBenchmark.readPlayJson:·gc.time                                                       128  thrpt    5         7,000                     ms
[info] ArrayOfYearsBenchmark.readUPickle                                                                 128  thrpt    5     42289,188 ±      344,397   ops/s
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate                                                  128  thrpt    5      1765,717 ±       15,256  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.alloc.rate.norm                                             128  thrpt    5     65720,010 ±        0,002    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1751,729 ±     1423,853  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     65193,766 ±    52877,776    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,042 ±        0,150  MB/sec
[info] ArrayOfYearsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         1,548 ±        5,571    B/op
[info] ArrayOfYearsBenchmark.readUPickle:·gc.count                                                       128  thrpt    5        13,000                 counts
[info] ArrayOfYearsBenchmark.readUPickle:·gc.time                                                        128  thrpt    5         5,000                     ms
[info] ArrayOfYearsBenchmark.writeJacksonScala                                                           128  thrpt    5    391043,790 ±    47889,297   ops/s
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1087,240 ±      133,301  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5      4376,001 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1082,799 ±     1429,207  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      4336,860 ±     5457,417    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,021 ±        0,113  MB/sec
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,082 ±        0,449    B/op
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.count                                                 128  thrpt    5         8,000                 counts
[info] ArrayOfYearsBenchmark.writeJacksonScala:·gc.time                                                  128  thrpt    5         3,000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScala                                                          128  thrpt    5   1844400,143 ±    14338,977   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1078,093 ±        8,391  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5       920,000 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1075,581 ±     1418,257  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       918,205 ±     1214,550    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,029 ±        0,122  MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,025 ±        0,104    B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfYearsBenchmark.writeJsoniterScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc                                                  128  thrpt    5   1781694,811 ±    11129,932   ops/s
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfYearsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfYearsBenchmark.writePlayJson                                                               128  thrpt    5    258260,303 ±     5498,754   ops/s
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate                                                128  thrpt    5      1672,413 ±       35,421  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     10192,002 ±        0,001    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1762,327 ±     1428,801  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     10745,651 ±     8825,413    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,025 ±        0,104  MB/sec
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,152 ±        0,635    B/op
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.count                                                     128  thrpt    5        13,000                 counts
[info] ArrayOfYearsBenchmark.writePlayJson:·gc.time                                                      128  thrpt    5         6,000                     ms
[info] ArrayOfYearsBenchmark.writeUPickle                                                                128  thrpt    5     51348,610 ±      401,897   ops/s
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate                                                 128  thrpt    5       343,990 ±        2,610  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.alloc.rate.norm                                            128  thrpt    5     10544,008 ±        0,002    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                        128  thrpt    5       306,925 ±     1078,885  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      9412,936 ±    33087,880    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,001 ±        0,012  MB/sec
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,041 ±        0,357    B/op
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.count                                                      128  thrpt    5         3,000                 counts
[info] ArrayOfYearsBenchmark.writeUPickle:·gc.time                                                       128  thrpt    5         6,000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                 128  thrpt    5     80402,337 ±      802,463   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      1615,480 ±       16,108  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     31624,005 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      1611,136 ±     1423,634  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     31533,288 ±    27738,933    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,021 ±        0,057  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,407 ±        1,110    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                       128  thrpt    5        12,000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                        128  thrpt    5         7,000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                          128  thrpt    5     96674,460 ±     1153,979   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1120,406 ±       13,669  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5     18240,004 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1081,620 ±     1426,634  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     17612,870 ±    23278,273    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,339 ±        1,307    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         4,000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                         128  thrpt    5    118315,413 ±      866,508   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      1246,112 ±        9,386  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5     16576,004 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1206,718 ±     1153,648  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     16050,065 ±    15321,422    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,017 ±        0,067  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,221 ±        0,890    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5         9,000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         4,000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                              128  thrpt    5     53318,320 ±     2967,864   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      2545,782 ±      141,742  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     75152,008 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2581,666 ±     1169,533  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     76263,231 ±    36113,949    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,062 ±        0,098  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,839 ±        2,842    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        19,000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5         9,000                     ms
[info] ArrayOfZoneIdsBenchmark.readUPickle                                                               128  thrpt    5     87762,861 ±     1008,869   ops/s
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      1523,412 ±       17,393  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5     27320,005 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1476,086 ±     1150,332  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     26471,554 ±    20634,100    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,523 ±        2,406    B/op
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        11,000                 counts
[info] ArrayOfZoneIdsBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         5,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                128  thrpt    5    147112,259 ±      253,954   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       652,833 ±        1,181  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      6984,003 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       671,088 ±        6,153  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      7179,290 ±       55,865    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,852 ±        7,069  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         9,112 ±       75,587    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         5,000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         4,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                         128  thrpt    5    180852,585 ±     1422,861   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       268,411 ±        2,152  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      2336,002 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       306,889 ±     1078,760  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      2673,637 ±     9398,244    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         3,000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                        128  thrpt    5    790249,785 ±    16434,122   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5       980,086 ±       20,062  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5      1952,001 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       938,404 ±     1414,861  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      1868,054 ±     2804,524    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,033 ±        0,175    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5    785195,977 ±    11061,668   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                             128  thrpt    5    235818,705 ±     1113,787   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       770,620 ±        3,550  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      5144,002 ±        0,001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       669,341 ±        6,300  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4467,947 ±       37,172    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,017 ±        0,104  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,111 ±        0,697    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         5,000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         2,000                     ms
[info] ArrayOfZoneIdsBenchmark.writeUPickle                                                              128  thrpt    5     30152,170 ±      243,586   ops/s
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       168,279 ±        1,359  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      8784,014 ±        0,002    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       204,607 ±     1078,832  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     10698,766 ±    56411,690    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,004 ±        0,031  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,192 ±        1,649    B/op
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         2,000                 counts
[info] ArrayOfZoneIdsBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         4,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                             128  thrpt    5    148676,118 ±     1338,191   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      1831,087 ±       16,229  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5     19384,003 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1885,963 ±     1165,013  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     19964,518 ±    12323,391    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,046 ±        0,143  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,485 ±        1,521    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        14,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                    128  thrpt    5         6,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                      128  thrpt    5    201418,560 ±      949,498   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      1065,741 ±        4,969  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5      8328,002 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1082,056 ±     1425,179  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      8456,418 ±    11148,066    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±        0,080  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,163 ±        0,626    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5         8,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         3,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                     128  thrpt    5    399646,766 ±     3153,259   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       775,947 ±        5,897  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5      3056,001 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       806,732 ±     1156,675  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      3176,965 ±     4549,898    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,029 ±        0,134  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,115 ±        0,527    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         6,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         2,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                          128  thrpt    5     78180,168 ±     1327,619   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3298,688 ±       55,708  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5     66408,005 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3265,441 ±     1167,503  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5     65733,948 ±    23267,272    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,079 ±        0,132  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         1,592 ±        2,644    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        24,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        10,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readUPickle                                                           128  thrpt    5    147335,362 ±     1796,108   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      1658,824 ±       20,414  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5     17720,003 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1616,235 ±     1418,326  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     17267,070 ±    15194,619    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,033 ±        0,072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,356 ±        0,768    B/op
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        12,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                            128  thrpt    5    211169,521 ±     1129,648   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       723,454 ±        3,645  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5      5392,002 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5       807,326 ±     1154,442  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      6018,265 ±     8626,505    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,708 ±        5,736  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5,280 ±       42,804    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                     128  thrpt    5    321931,874 ±    11491,280   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       317,438 ±       11,259  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5      1552,001 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       204,623 ±     1078,917  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5      1008,060 ±     5315,548    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         2,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         2,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                    128  thrpt    5   1311133,298 ±    13357,801   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       972,945 ±        9,973  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5      1168,000 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       941,156 ±     1418,673  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5      1130,718 ±     1715,386    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,025 ±        0,088  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,030 ±        0,106    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         2,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   1375456,740 ±     9961,893   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                         128  thrpt    5    322375,914 ±      918,072   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5       879,938 ±        2,448  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5      4296,001 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5       810,751 ±     1162,549  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3958,960 ±     5690,064    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,025 ±        0,105  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,122 ±        0,510    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         6,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         2,000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle                                                          128  thrpt    5     49704,100 ±      698,713   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       154,604 ±        2,163  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5      4896,009 ±        0,001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       204,611 ±     1078,853  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      6498,740 ±    34266,316    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         2,000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                          128  thrpt    5      6076,377 ±       63,646   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      1125,749 ±       11,812  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5    291576,070 ±        0,011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1064,605 ±     1402,247  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5    275655,587 ±   362151,889    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,017 ±        0,143  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         4,310 ±       37,112    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                128  thrpt    5         8,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                 128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                   128  thrpt    5      5859,048 ±       98,176   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1088,583 ±       18,107  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5    292416,071 ±        0,009    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5      1077,769 ±     1419,156  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5    289808,206 ±   384829,308    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,033 ±        0,091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         8,963 ±       24,604    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         8,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                  128  thrpt    5     40871,995 ±      717,143   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       670,944 ±       11,994  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5     25840,011 ±        0,003    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       668,001 ±        9,736  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     25726,838 ±      301,857    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         1,092 ±        9,310  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5        41,708 ±      355,670    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         5,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                       128  thrpt    5      5325,354 ±       81,657   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5      1294,325 ±       19,893  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5    382552,081 ±        0,010    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5      1214,250 ±     1163,828  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5    358848,568 ±   343502,152    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±        0,091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         8,598 ±       26,898    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         9,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readUPickle                                                        128  thrpt    5      5672,286 ±       43,322   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1088,988 ±        8,240  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5    302160,074 ±        0,019    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1064,627 ±     1402,206  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5    295280,464 ±   387579,827    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,029 ±        0,122  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         8,074 ±       33,659    B/op
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.count                                              128  thrpt    5         8,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readUPickle:·gc.time                                               128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                         128  thrpt    5     16457,293 ±      140,777   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5       922,202 ±        7,493  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5     88192,992 ±       47,477    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5       931,635 ±     1402,035  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5     89115,379 ±   134362,565    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,021 ±        0,139  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         1,992 ±       13,289    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                               128  thrpt    5         7,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                128  thrpt    5         4,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                  128  thrpt    5     18943,262 ±      214,126   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5       986,238 ±       11,095  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5     81944,006 ±        0,281    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       942,648 ±     1420,691  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     78381,299 ±   118864,477    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,017 ±        0,088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         1,387 ±        7,314    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5         7,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         3,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                 128  thrpt    5    281855,726 ±     1909,002   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5      1021,473 ±        6,770  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5      5704,001 ±        0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       932,004 ±     1402,989  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5      5206,003 ±     7856,865    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,037 ±        0,164  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,209 ±        0,918    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         7,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         3,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5    331079,165 ±     3138,626   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5         0,001 ±        0,001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                      128  thrpt    5     17051,035 ±      193,461   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5       973,211 ±       10,879  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5     89837,516 ±       29,829    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5       929,326 ±     1399,434  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5     85851,849 ±   130095,254    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,029 ±        0,176  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         2,698 ±       16,258    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                            128  thrpt    5         7,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         2,000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle                                                       128  thrpt    5      8310,689 ±      147,766   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate                                        128  thrpt    5       546,017 ±        9,700  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.alloc.rate.norm                                   128  thrpt    5    103408,050 ±        0,007    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                               128  thrpt    5       503,641 ±     1115,442  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     95414,461 ±   211196,564    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                           128  thrpt    5         1,101 ±        9,366  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5       209,767 ±     1784,935    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.count                                             128  thrpt    5         4,000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeUPickle:·gc.time                                              128  thrpt    5         6,000                     ms
[info] BitSetBenchmark.readJsoniterScala                                                                 128  thrpt    5    985365,741 ±     6041,835   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5        40,068 ±        0,238  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5        64,000 ±        0,001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.readPlayJson                                                                      128  thrpt    5     81983,100 ±      565,086   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3696,987 ±       26,493  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     70968,005 ±        0,001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                              128  thrpt    5      3676,051 ±     1438,107  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     70570,615 ±    27821,578    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,058 ±        0,088  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         1,119 ±        1,686    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        27,000                 counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        11,000                     ms
[info] BitSetBenchmark.writeJacksonScala                                                                 128  thrpt    5   1200332,221 ±     5543,820   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       689,443 ±        3,094  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5       904,000 ±        0,001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                         128  thrpt    5       675,214 ±        2,219  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5       885,344 ±        6,138    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,021 ±        0,113  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,027 ±        0,149    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         5,000                 counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5         2,000                     ms
[info] BitSetBenchmark.writeJsoniterScala                                                                128  thrpt    5    759072,228 ±     7610,308   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       204,485 ±        2,067  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       424,001 ±        0,001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                        128  thrpt    5       204,602 ±     1078,808  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5       424,964 ±     2240,721    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,003 ±        0,028  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         0,007 ±        0,058    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5         2,000                 counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5         3,000                     ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   1630485,964 ±    34500,781   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        16,575 ±        0,353  MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        16,000 ±        0,001    B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.writePlayJson                                                                     128  thrpt    5     50525,880 ±     1138,551   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      2129,345 ±       47,634  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     66328,008 ±        0,001    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                             128  thrpt    5      2171,746 ±     1164,534  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5     67649,819 ±    36266,924    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,042 ±        0,080  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         1,295 ±        2,482    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        16,000                 counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5         7,000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                  N/A  thrpt    5    915923,550 ±    15892,221   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2909,580 ±       51,411  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5      5000,000 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2844,338 ±     1171,130  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5      4887,610 ±     1995,684    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,042 ±        0,057  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,071 ±        0,097    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        21,000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5         8,000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                            N/A  thrpt    5   6106813,651 ±    32264,792   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       372,488 ±        1,917  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5        96,000 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       339,370 ±     1219,856  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5        87,492 ±      314,554    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,535 ±        4,603  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,138 ±        1,188    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3,000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         5,000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                           N/A  thrpt    5   1090754,731 ±     7851,267   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5      1302,912 ±        9,441  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5      1880,000 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5      1353,503 ±        6,360  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5      1953,005 ±       15,489    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,037 ±        0,132  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5         0,054 ±        0,190    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5        10,000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         4,000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                          N/A  thrpt    5   8955419,853 ±   635701,592   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       409,687 ±       29,092  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5        72,000 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       339,739 ±     1221,738  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5        59,204 ±      212,991    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,616 ±        5,306  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,108 ±        0,926    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         3,000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         5,000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                               N/A  thrpt    5    339426,393 ±     3931,213   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1783,925 ±       20,621  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5      8272,001 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1762,031 ±     1428,282  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5      8172,007 ±     6654,542    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,033 ±        0,072  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         0,154 ±        0,330    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        13,000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         6,000                     ms
[info] ExtractFieldsBenchmark.readUPickle                                                                N/A  thrpt    5    821972,294 ±     8175,320   ops/s
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1140,597 ±       11,665  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5      2184,001 ±        0,001    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1210,152 ±     1158,044  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2317,702 ±     2224,080    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,037 ±        0,088  MB/sec
[info] ExtractFieldsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,072 ±        0,168    B/op
[info] ExtractFieldsBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         9,000                 counts
[info] ExtractFieldsBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         4,000                     ms
[info] GeoJSONBenchmark.readCirce                                                                        N/A  thrpt    5      4546,935 ±       61,921   ops/s
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate                                                         N/A  thrpt    5      2071,875 ±       27,708  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5    717152,093 ±        0,016    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2167,426 ±     1172,721  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5    750387,170 ±   412262,891    B/op
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,162 ±        0,365  MB/sec
[info] GeoJSONBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5        56,261 ±      126,838    B/op
[info] GeoJSONBenchmark.readCirce:·gc.count                                                              N/A  thrpt    5        16,000                 counts
[info] GeoJSONBenchmark.readCirce:·gc.time                                                               N/A  thrpt    5         9,000                     ms
[info] GeoJSONBenchmark.readJacksonScala                                                                 N/A  thrpt    5      5838,530 ±      146,738   ops/s
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5      2412,454 ±       60,772  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5    650352,072 ±        0,012    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2443,446 ±     1430,522  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    658773,155 ±   387307,891    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,062 ±        0,160  MB/sec
[info] GeoJSONBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5        16,784 ±       42,715    B/op
[info] GeoJSONBenchmark.readJacksonScala:·gc.count                                                       N/A  thrpt    5        18,000                 counts
[info] GeoJSONBenchmark.readJacksonScala:·gc.time                                                        N/A  thrpt    5         9,000                     ms
[info] GeoJSONBenchmark.readJsoniterScala                                                                N/A  thrpt    5     48168,083 ±      705,937   ops/s
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       801,321 ±       11,749  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5     26184,009 ±        0,001    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       808,071 ±     1158,231  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5     26393,431 ±    37625,262    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,017 ±        0,067  MB/sec
[info] GeoJSONBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,545 ±        2,202    B/op
[info] GeoJSONBenchmark.readJsoniterScala:·gc.count                                                      N/A  thrpt    5         6,000                 counts
[info] GeoJSONBenchmark.readJsoniterScala:·gc.time                                                       N/A  thrpt    5         4,000                     ms
[info] GeoJSONBenchmark.writeCirce                                                                       N/A  thrpt    5      4546,278 ±       67,393   ops/s
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate                                                        N/A  thrpt    5       836,003 ±       12,327  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.alloc.rate.norm                                                   N/A  thrpt    5    289416,094 ±        0,015    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5       808,447 ±     1161,651  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5    279812,195 ±   400866,939    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,037 ±        0,200  MB/sec
[info] GeoJSONBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5        12,936 ±       68,921    B/op
[info] GeoJSONBenchmark.writeCirce:·gc.count                                                             N/A  thrpt    5         6,000                 counts
[info] GeoJSONBenchmark.writeCirce:·gc.time                                                              N/A  thrpt    5         3,000                     ms
[info] GeoJSONBenchmark.writeJacksonScala                                                                N/A  thrpt    5      5328,050 ±       12,574   ops/s
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate                                                 N/A  thrpt    5       563,892 ±        1,311  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            N/A  thrpt    5    166581,392 ±        2,094    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5       539,367 ±     1161,028  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    159350,151 ±   343013,574    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,194 ±        1,495  MB/sec
[info] GeoJSONBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5        57,416 ±      441,752    B/op
[info] GeoJSONBenchmark.writeJacksonScala:·gc.count                                                      N/A  thrpt    5         4,000                 counts
[info] GeoJSONBenchmark.writeJacksonScala:·gc.time                                                       N/A  thrpt    5         2,000                     ms
[info] GeoJSONBenchmark.writeJsoniterScala                                                               N/A  thrpt    5      6971,905 ±      585,148   ops/s
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate                                                N/A  thrpt    5       186,298 ±       15,647  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           N/A  thrpt    5     42056,060 ±        0,014    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       204,602 ±     1078,806  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     47055,013 ±   248193,272    B/op
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.count                                                     N/A  thrpt    5         2,000                 counts
[info] GeoJSONBenchmark.writeJsoniterScala:·gc.time                                                      N/A  thrpt    5         3,000                     ms
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc                                                       N/A  thrpt    5      7302,796 ±       46,275   ops/s
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        N/A  thrpt    5       141,765 ±        0,884  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   N/A  thrpt    5     30552,063 ±        0,053    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                               N/A  thrpt    5       102,327 ±      881,063  MB/sec
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                          N/A  thrpt    5     22072,259 ±   190048,806    B/op
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             N/A  thrpt    5         1,000                 counts
[info] GeoJSONBenchmark.writeJsoniterScalaPrealloc:·gc.time                                              N/A  thrpt    5         2,000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                  N/A  thrpt    5      8781,946 ±      143,653   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                   N/A  thrpt    5      2045,224 ±       34,353  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                              N/A  thrpt    5    366559,164 ±       53,434    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      2022,490 ±       21,293  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    362492,713 ±     9344,026    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,063 ±        0,165  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        11,331 ±       29,455    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                        N/A  thrpt    5        15,000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                         N/A  thrpt    5         7,000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                            N/A  thrpt    5     15282,744 ±      143,229   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                             N/A  thrpt    5       352,289 ±        3,400  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                        N/A  thrpt    5     36280,029 ±        0,011    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       339,421 ±     1220,167  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5     34977,223 ±   125668,468    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,597 ±        5,125  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        61,403 ±      527,091    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                  N/A  thrpt    5         3,000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                   N/A  thrpt    5         6,000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                           N/A  thrpt    5     16768,804 ±      223,415   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                            N/A  thrpt    5       425,658 ±        5,671  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       N/A  thrpt    5     39952,026 ±        0,014    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       474,222 ±     1067,638  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     44558,834 ±   100298,072    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,112 ±        0,968  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        10,592 ±       91,199    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                 N/A  thrpt    5         4,000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                  N/A  thrpt    5         3,000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                          N/A  thrpt    5     28386,022 ±      445,654   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                           N/A  thrpt    5       531,965 ±        8,320  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     29496,015 ±        0,002    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       506,727 ±     1123,929  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     28122,893 ±    62299,567    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,664 ±        5,582  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5        36,768 ±      309,147    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                N/A  thrpt    5         4,000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                 N/A  thrpt    5         4,000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                               N/A  thrpt    5      2658,345 ±       19,208   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                N/A  thrpt    5      1688,724 ±       12,322  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                           N/A  thrpt    5    999760,158 ±        0,025    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5      1625,251 ±     1423,726  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5    962123,960 ±   841471,497    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,037 ±        0,174  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5        22,197 ±      102,965    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                     N/A  thrpt    5        12,000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                      N/A  thrpt    5         7,000                     ms
[info] GoogleMapsAPIBenchmark.readUPickle                                                                N/A  thrpt    5      9025,644 ±       48,706   ops/s
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate                                                 N/A  thrpt    5      1108,272 ±        6,165  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.alloc.rate.norm                                            N/A  thrpt    5    193262,941 ±       52,504    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      1074,622 ±     1416,199  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5    187353,184 ±   246443,864    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,017 ±        0,104  MB/sec
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         2,899 ±       18,182    B/op
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.count                                                      N/A  thrpt    5         8,000                 counts
[info] GoogleMapsAPIBenchmark.readUPickle:·gc.time                                                       N/A  thrpt    5         3,000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                 N/A  thrpt    5      8807,581 ±       76,663   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                  N/A  thrpt    5      1696,243 ±       14,699  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                             N/A  thrpt    5    303114,800 ±       95,405    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      1755,370 ±     1423,256  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5    313694,357 ±   254621,723    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,054 ±        0,156  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         9,671 ±       27,922    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                       N/A  thrpt    5        13,000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                        N/A  thrpt    5         5,000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                           N/A  thrpt    5     58737,002 ±      621,622   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                            N/A  thrpt    5       549,043 ±        5,758  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                       N/A  thrpt    5     14712,007 ±        0,001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                   N/A  thrpt    5       506,367 ±     1122,909  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                              N/A  thrpt    5     13562,912 ±    30041,986    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                               N/A  thrpt    5         0,616 ±        5,212  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                          N/A  thrpt    5        16,482 ±      139,519    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                 N/A  thrpt    5         4,000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                  N/A  thrpt    5         5,000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                          N/A  thrpt    5     46045,897 ±      537,105   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                           N/A  thrpt    5       685,503 ±        8,072  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      N/A  thrpt    5     23431,820 ±        0,194    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       674,577 ±        1,012  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5     23058,526 ±      303,944    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,025 ±        0,143  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,851 ±        4,879    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                N/A  thrpt    5         5,000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                 N/A  thrpt    5         3,000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                         N/A  thrpt    5     84707,011 ±      210,328   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                          N/A  thrpt    5       636,755 ±        1,843  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     N/A  thrpt    5     11832,005 ±        0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       538,971 ±     1160,182  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5     10015,614 ±    21559,476    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,668 ±        5,661  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5        12,417 ±      105,255    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                               N/A  thrpt    5         4,000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                N/A  thrpt    5         4,000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                 N/A  thrpt    5    112121,966 ±     1267,174   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             N/A  thrpt    5         0,004 ±        0,001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       N/A  thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                              N/A  thrpt    5      6638,691 ±       55,958   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                               N/A  thrpt    5      1941,969 ±       16,325  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                          N/A  thrpt    5    460399,947 ±        0,481    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1897,557 ±     1167,369  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5    449895,436 ±   277326,365    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,062 ±        0,160  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5        14,803 ±       37,999    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                    N/A  thrpt    5        14,000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                     N/A  thrpt    5         6,000                     ms
[info] GoogleMapsAPIBenchmark.writeUPickle                                                               N/A  thrpt    5      4871,173 ±       52,545   ops/s
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate                                                N/A  thrpt    5       270,177 ±        2,937  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.alloc.rate.norm                                           N/A  thrpt    5     87296,086 ±        0,015    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                       N/A  thrpt    5       306,860 ±     1078,655  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                  N/A  thrpt    5     99271,146 ±   348953,816    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                   N/A  thrpt    5         0,007 ±        0,036  MB/sec
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                              N/A  thrpt    5         2,165 ±       11,719    B/op
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.count                                                     N/A  thrpt    5         3,000                 counts
[info] GoogleMapsAPIBenchmark.writeUPickle:·gc.time                                                      N/A  thrpt    5         6,000                     ms
[info] IntBenchmark.readCirce                                                                            N/A  thrpt    5   6156362,406 ±    55032,245   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3817,641 ±       34,113  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5       976,000 ±        0,001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                                    N/A  thrpt    5      3804,741 ±     1429,807  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                               N/A  thrpt    5       972,755 ±      367,966    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                                N/A  thrpt    5         0,050 ±        0,108  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                           N/A  thrpt    5         0,013 ±        0,028    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        28,000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        11,000                     ms
[info] IntBenchmark.readDslJsonJava                                                                      N/A  thrpt    5  44149383,572 ± 12278734,275   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       448,833 ±      124,820  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5        16,000 ±        0,001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5       474,257 ±     1067,735  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        16,762 ±       39,171    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,539 ±        4,493  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,019 ±        0,158    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5         4,000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5         6,000                     ms
[info] IntBenchmark.readJacksonScala                                                                     N/A  thrpt    5  10292230,065 ±   149870,491   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      3609,768 ±       52,960  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       552,000 ±        0,001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      3673,407 ±     1426,312  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5       561,800 ±      221,330    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,071 ±        0,044  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,011 ±        0,007    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        27,000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        11,000                     ms
[info] IntBenchmark.readJsoniterScala                                                                    N/A  thrpt    5  56829460,965 ±   526787,261   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                       N/A  thrpt    5  47422625,369 ±   127022,119   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                        N/A  thrpt    5      1687,301 ±        4,690  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5        56,000 ±        0,001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                               N/A  thrpt    5      1751,802 ±     1423,706  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                          N/A  thrpt    5        58,140 ±       47,237    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                           N/A  thrpt    5         0,037 ±        0,105  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                                      N/A  thrpt    5         0,001 ±        0,003    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                             N/A  thrpt    5        13,000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                              N/A  thrpt    5         5,000                     ms
[info] IntBenchmark.readPlayJson                                                                         N/A  thrpt    5   9184572,921 ±   111869,269   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      4061,458 ±       50,597  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       696,000 ±        0,001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      4075,605 ±       37,589  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       698,432 ±       12,849    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,083 ±        0,057  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,014 ±        0,010    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        30,000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        13,000                     ms
[info] IntBenchmark.readUPickle                                                                          N/A  thrpt    5  11586122,814 ±   186460,729   ops/s
[info] IntBenchmark.readUPickle:·gc.alloc.rate                                                           N/A  thrpt    5      4887,611 ±       76,296  MB/sec
[info] IntBenchmark.readUPickle:·gc.alloc.rate.norm                                                      N/A  thrpt    5       664,000 ±        0,001    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                                  N/A  thrpt    5      4900,701 ±     1182,288  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                             N/A  thrpt    5       665,720 ±      155,332    B/op
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                              N/A  thrpt    5         0,075 ±        0,122  MB/sec
[info] IntBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                         N/A  thrpt    5         0,010 ±        0,017    B/op
[info] IntBenchmark.readUPickle:·gc.count                                                                N/A  thrpt    5        36,000                 counts
[info] IntBenchmark.readUPickle:·gc.time                                                                 N/A  thrpt    5        14,000                     ms
[info] IntBenchmark.writeCirce                                                                           N/A  thrpt    5  24158151,242 ±   342747,928   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      2210,275 ±       30,947  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       144,000 ±        0,001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                                   N/A  thrpt    5      2159,935 ±     1172,753  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                              N/A  thrpt    5       140,775 ±       78,573    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                               N/A  thrpt    5         0,050 ±        0,072  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                          N/A  thrpt    5         0,003 ±        0,005    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        16,000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5         7,000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5  63712613,114 ±   677038,236   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5      1943,100 ±       20,911  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5        48,000 ±        0,001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      1888,396 ±     1165,751  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5        46,657 ±       28,991    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,071 ±        0,146  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,002 ±        0,004    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        14,000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5         6,000                     ms
[info] IntBenchmark.writeJacksonScala                                                                    N/A  thrpt    5  15404723,570 ±   585936,954   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5      3053,653 ±      115,574  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       312,000 ±        0,001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      2992,592 ±     1438,316  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5       306,010 ±      156,247    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,058 ±        0,154  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,006 ±        0,016    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5        22,000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5         8,000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5  49211902,638 ±  1119081,373   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5      1000,564 ±       22,858  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5        32,000 ±        0,001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                           N/A  thrpt    5      1075,588 ±     1418,097  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                      N/A  thrpt    5        34,437 ±       45,814    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                       N/A  thrpt    5         0,029 ±        0,108  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                                  N/A  thrpt    5         0,001 ±        0,003    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5         8,000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5         3,000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5  57975824,395 ±   225407,309   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                      N/A  thrpt    5  45228999,353 ±  1502017,518   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                       N/A  thrpt    5      2298,958 ±       76,257  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5        80,000 ±        0,001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                              N/A  thrpt    5      2299,073 ±     1412,736  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                         N/A  thrpt    5        80,066 ±       51,054    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                          N/A  thrpt    5         0,046 ±        0,036  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                                     N/A  thrpt    5         0,002 ±        0,001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                            N/A  thrpt    5        17,000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                             N/A  thrpt    5         6,000                     ms
[info] IntBenchmark.writePlayJson                                                                        N/A  thrpt    5   2823823,141 ±    25321,450   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      2310,862 ±       20,784  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1288,000 ±        0,001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                                N/A  thrpt    5      2293,405 ±     1405,213  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                           N/A  thrpt    5      1278,577 ±      792,894    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                            N/A  thrpt    5         0,037 ±        0,067  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                       N/A  thrpt    5         0,021 ±        0,038    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        17,000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5         7,000                     ms
[info] IntBenchmark.writeUPickle                                                                         N/A  thrpt    5  13924491,434 ±   243674,185   ops/s
[info] IntBenchmark.writeUPickle:·gc.alloc.rate                                                          N/A  thrpt    5      2689,536 ±       46,625  MB/sec
[info] IntBenchmark.writeUPickle:·gc.alloc.rate.norm                                                     N/A  thrpt    5       304,000 ±        0,001    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                                 N/A  thrpt    5      2707,680 ±       28,480  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                            N/A  thrpt    5       306,057 ±        7,296    B/op
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                             N/A  thrpt    5         0,037 ±        0,105  MB/sec
[info] IntBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                        N/A  thrpt    5         0,004 ±        0,012    B/op
[info] IntBenchmark.writeUPickle:·gc.count                                                               N/A  thrpt    5        20,000                 counts
[info] IntBenchmark.writeUPickle:·gc.time                                                                N/A  thrpt    5         7,000                     ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5    183829,864 ±     4067,565   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5      3372,136 ±       74,393  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5     28872,002 ±        0,001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      3394,358 ±       30,772  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     29063,117 ±      762,537    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,054 ±        0,044  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,463 ±        0,368    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5        25,000                 counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5        11,000                     ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5     20972,176 ±      137,242   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1630,694 ±       10,348  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5    122376,021 ±        0,008    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1626,389 ±     1431,329  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5    122037,127 ±   107048,814    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±        0,166  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         2,186 ±       12,472    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        12,000                 counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    166080,659 ±     2589,705   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5      1543,952 ±       23,691  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5     14632,003 ±        0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5      1625,770 ±     1425,632  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5     15408,149 ±    13525,616    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,033 ±        0,072  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,316 ±        0,684    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5        12,000                 counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         6,000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5    549711,072 ±     8320,807   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1137,238 ±       17,163  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5      3256,001 ±        0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      1210,183 ±     1158,463  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5      3466,478 ±     3337,639    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,050 ±        0,122  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,143 ±        0,349    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         9,000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         4,000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    602010,449 ±    14065,071   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5       587,507 ±       13,808  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5      1536,001 ±        0,001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                      128  thrpt    5       641,298 ±      279,435  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      1675,795 ±      698,656    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,647 ±        5,346  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         1,691 ±       13,980    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5         5,000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                     128  thrpt    5         6,000                     ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5     63715,493 ±      452,462   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1393,490 ±        9,794  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     34424,007 ±        0,002    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1489,105 ±     1162,235  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     36791,432 ±    28873,162    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,029 ±        0,122  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,720 ±        3,002    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        11,000                 counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         5,000                     ms
[info] ListOfBooleansBenchmark.readCirce                                                                 128  thrpt    5    440418,846 ±     4458,942   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                  128  thrpt    5      2988,558 ±       30,810  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                             128  thrpt    5     10680,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2983,027 ±     1447,465  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     10662,319 ±     5254,463    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,046 ±        0,067  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         0,164 ±        0,239    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                       128  thrpt    5        22,000                 counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                        128  thrpt    5         9,000                     ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                          128  thrpt    5    353504,955 ±     2362,786   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                           128  thrpt    5       927,189 ±        6,190  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      4128,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       946,115 ±     1423,861  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4214,247 ±     6367,084    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,025 ±        0,143  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,111 ±        0,640    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                128  thrpt    5         7,000                 counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                         128  thrpt    5   1354469,518 ±     2894,203   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                          128  thrpt    5      2643,633 ±        5,025  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5      3072,000 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5      2707,566 ±       28,361  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      3146,293 ±       31,801    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,054 ±        0,072  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,063 ±        0,083    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                               128  thrpt    5        20,000                 counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                128  thrpt    5         8,000                     ms
[info] ListOfBooleansBenchmark.readPlayJson                                                              128  thrpt    5    125542,610 ±     1964,513   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                               128  thrpt    5      4542,404 ±       71,502  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     56944,003 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      4630,813 ±     1166,454  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     58047,448 ±    14268,388    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,062 ±        0,057  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,782 ±        0,701    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                    128  thrpt    5        34,000                 counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                     128  thrpt    5        14,000                     ms
[info] ListOfBooleansBenchmark.readUPickle                                                               128  thrpt    5    621569,821 ±     5405,592   ops/s
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                                128  thrpt    5      2713,882 ±       22,583  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                           128  thrpt    5      6872,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2708,745 ±       27,388  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      6859,010 ±       77,095    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,050 ±        0,072  MB/sec
[info] ListOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,126 ±        0,182    B/op
[info] ListOfBooleansBenchmark.readUPickle:·gc.count                                                     128  thrpt    5        20,000                 counts
[info] ListOfBooleansBenchmark.readUPickle:·gc.time                                                      128  thrpt    5         8,000                     ms
[info] ListOfBooleansBenchmark.writeCirce                                                                128  thrpt    5    362649,894 ±     2890,776   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                 128  thrpt    5       553,014 ±        4,508  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                            128  thrpt    5      2400,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        128  thrpt    5       506,643 ±     1123,661  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   128  thrpt    5      2199,838 ±     4876,613    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    128  thrpt    5         0,684 ±        5,686  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               128  thrpt    5         2,968 ±       24,690    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                      128  thrpt    5         4,000                 counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                       128  thrpt    5         5,000                     ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                         128  thrpt    5    680716,404 ±    12605,616   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                          128  thrpt    5       505,190 ±        9,386  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     128  thrpt    5      1168,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       506,929 ±     1124,446  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1171,507 ±     2593,039    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,071 ±        0,521  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,163 ±        1,203    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                128  thrpt    5         3,000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                        128  thrpt    5   2204643,604 ±    40878,617   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                         128  thrpt    5      1019,766 ±       18,766  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    128  thrpt    5       728,000 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       941,070 ±     1417,046  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5       672,728 ±     1024,236    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,021 ±        0,113  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,015 ±        0,081    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                              128  thrpt    5         7,000                 counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                128  thrpt    5   2275630,455 ±    48108,370   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                            128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                      128  thrpt    5           ≈ 0                 counts
[info] ListOfBooleansBenchmark.writePlayJson                                                             128  thrpt    5    430807,562 ±     6054,109   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                              128  thrpt    5       619,677 ±        8,689  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                         128  thrpt    5      2264,001 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     128  thrpt    5       537,629 ±     1157,299  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1966,283 ±     4232,763    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,792 ±        6,556  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         2,912 ±       24,094    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                   128  thrpt    5         4,000                 counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] ListOfBooleansBenchmark.writeUPickle                                                              128  thrpt    5    196838,319 ±     2598,748   ops/s
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                               128  thrpt    5       502,235 ±        6,646  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                          128  thrpt    5      4016,002 ±        0,001    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                      128  thrpt    5       372,213 ±     1333,316  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      2975,992 ±    10655,189    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,642 ±        5,438  MB/sec
[info] ListOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         5,128 ±       43,427    B/op
[info] ListOfBooleansBenchmark.writeUPickle:·gc.count                                                    128  thrpt    5         3,000                 counts
[info] ListOfBooleansBenchmark.writeUPickle:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                            128  thrpt    5     55826,780 ±      115,636   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                             128  thrpt    5      1881,215 ±        3,677  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                        128  thrpt    5     53040,008 ±        0,002    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1887,837 ±     1169,712  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     53225,437 ±    32948,867    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,058 ±        0,088  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         1,643 ±        2,476    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                  128  thrpt    5        14,000                 counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                     128  thrpt    5     80917,861 ±     1085,148   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                      128  thrpt    5      1453,174 ±       19,472  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5     28264,005 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5      1490,352 ±     1173,325  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     28980,877 ±    22628,048    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,021 ±        0,080  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,405 ±        1,560    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                           128  thrpt    5        11,000                 counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                            128  thrpt    5         5,000                     ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                    128  thrpt    5    107445,286 ±      541,767   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                     128  thrpt    5      1646,544 ±        8,782  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5     24120,004 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1616,306 ±     1417,162  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     23681,394 ±    20858,347    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,033 ±        0,091  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,488 ±        1,338    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                          128  thrpt    5        12,000                 counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                           128  thrpt    5         4,000                     ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                         128  thrpt    5     20525,535 ±      287,695   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                          128  thrpt    5      1430,220 ±       19,984  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                     128  thrpt    5    109672,022 ±        0,011    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1489,025 ±     1158,863  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5    114239,692 ±    90599,185    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±        0,091  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         2,238 ±        7,016    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                               128  thrpt    5        11,000                 counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                128  thrpt    5         5,000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                    128  thrpt    5    137764,944 ±     2316,021   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                     128  thrpt    5      1268,840 ±       21,116  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                128  thrpt    5     14496,003 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            128  thrpt    5      1218,128 ±     1168,273  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     13925,577 ±    13460,480    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,017 ±        0,067  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,191 ±        0,769    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                          128  thrpt    5         9,000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                           128  thrpt    5         4,000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                   128  thrpt    5    604590,874 ±     8723,378   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                    128  thrpt    5       666,856 ±        9,736  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               128  thrpt    5      1736,001 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       673,410 ±        4,906  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5      1753,086 ±       32,120    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,652 ±        5,437  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         1,708 ±       14,244    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                         128  thrpt    5         5,000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                          128  thrpt    5         3,000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                           128  thrpt    5    589531,315 ±     5917,857   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            128  thrpt    5         5,993 ±        0,060  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       128  thrpt    5        16,001 ±        0,001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 128  thrpt    5           ≈ 0                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                        128  thrpt    5     23932,729 ±      213,261   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                         128  thrpt    5       456,539 ±        3,992  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                    128  thrpt    5     30024,019 ±        0,002    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                128  thrpt    5       372,048 ±     1332,618  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5     24485,597 ±    87709,235    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,092 ±        0,702  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         6,013 ±       46,089    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                              128  thrpt    5         3,000                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                               128  thrpt    5         3,000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                N/A  thrpt    5   2585798,158 ±    35894,315   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                 N/A  thrpt    5      3496,191 ±       49,649  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                            N/A  thrpt    5      2128,000 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        N/A  thrpt    5      3529,720 ±     1185,543  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   N/A  thrpt    5      2148,254 ±      711,208    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    N/A  thrpt    5         0,050 ±        0,122  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               N/A  thrpt    5         0,030 ±        0,074    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                      N/A  thrpt    5        26,000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                       N/A  thrpt    5        16,000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                          N/A  thrpt    5    888389,656 ±     5378,613   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                           N/A  thrpt    5       564,467 ±        3,424  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                      N/A  thrpt    5      1000,000 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                                  N/A  thrpt    5       641,093 ±      278,760  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                             N/A  thrpt    5      1135,746 ±      493,620    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                              N/A  thrpt    5         0,543 ±        4,474  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                         N/A  thrpt    5         0,963 ±        7,933    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                N/A  thrpt    5         5,000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                 N/A  thrpt    5         5,000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                         N/A  thrpt    5    321139,238 ±     5770,466   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                          N/A  thrpt    5       615,372 ±       11,046  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     N/A  thrpt    5      3016,001 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 N/A  thrpt    5       539,770 ±     1161,897  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            N/A  thrpt    5      2643,540 ±     5690,701    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             N/A  thrpt    5         0,058 ±        0,337  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        N/A  thrpt    5         0,284 ±        1,640    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                               N/A  thrpt    5         4,000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                N/A  thrpt    5         2,000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                        N/A  thrpt    5    804322,005 ±     8628,265   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                         N/A  thrpt    5       605,062 ±        6,521  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    N/A  thrpt    5      1184,001 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                N/A  thrpt    5       641,304 ±      279,390  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           N/A  thrpt    5      1254,993 ±      549,207    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            N/A  thrpt    5         0,644 ±        5,161  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       N/A  thrpt    5         1,255 ±       10,057    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                              N/A  thrpt    5         5,000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                               N/A  thrpt    5         5,000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                    N/A  thrpt    5   4849245,583 ±    54732,356   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                     N/A  thrpt    5      1552,734 ±       17,798  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                N/A  thrpt    5       504,000 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                            N/A  thrpt    5      1615,851 ±     1417,445  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       524,355 ±      457,015    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,029 ±        0,108  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,009 ±        0,035    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                          N/A  thrpt    5        12,000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                           N/A  thrpt    5         5,000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                              N/A  thrpt    5   9284576,089 ±    30219,937   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                               N/A  thrpt    5       755,004 ±        2,190  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                          N/A  thrpt    5       128,000 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space                      N/A  thrpt    5       672,957 ±        5,475  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm                 N/A  thrpt    5       114,090 ±        0,905    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space                  N/A  thrpt    5         0,025 ±        0,088  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm             N/A  thrpt    5         0,004 ±        0,015    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                    N/A  thrpt    5         5,000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                     N/A  thrpt    5         2,000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                             N/A  thrpt    5    205697,289 ±     4970,895   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                              N/A  thrpt    5      1390,563 ±       33,832  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                         N/A  thrpt    5     10640,002 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1488,832 ±     1158,611  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     11383,795 ±     8609,920    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,042 ±        0,057  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,318 ±        0,434    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                   N/A  thrpt    5        11,000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                    N/A  thrpt    5         5,000                     ms
[info] MissingReqFieldBenchmark.readUPickle                                                              N/A  thrpt    5    334996,926 ±     2660,032   ops/s
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate                                               N/A  thrpt    5       662,370 ±        5,230  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.alloc.rate.norm                                          N/A  thrpt    5      3112,001 ±        0,001    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       673,412 ±        4,907  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      3163,893 ±       38,372    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,663 ±        5,489  MB/sec
[info] MissingReqFieldBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         3,127 ±       25,876    B/op
[info] MissingReqFieldBenchmark.readUPickle:·gc.count                                                    N/A  thrpt    5         5,000                 counts
[info] MissingReqFieldBenchmark.readUPickle:·gc.time                                                     N/A  thrpt    5         3,000                     ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                          128  thrpt    5   1024075,345 ±    47379,897   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5        57,261 ±        2,643  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5        88,000 ±        0,001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       102,312 ±      880,934  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       158,399 ±     1363,861    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5         1,000                 counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         2,000                     ms
[info] MutableBitSetBenchmark.readPlayJson                                                               128  thrpt    5     72044,523 ±      593,055   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      3345,151 ±       27,973  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5     73080,006 ±        0,001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      3401,404 ±       15,617  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     74309,258 ±      775,150    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,062 ±        0,098  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         1,363 ±        2,132    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        25,000                 counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5        13,000                     ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                          128  thrpt    5   1220308,494 ±     9433,567   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5       700,877 ±        5,257  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5       904,000 ±        0,001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5       675,170 ±        2,122  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       870,845 ±        6,295    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,021 ±        0,098  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,027 ±        0,126    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         5,000                 counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         2,000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                         128  thrpt    5   1574094,093 ±     9568,682   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       440,044 ±        2,586  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       440,000 ±        0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       474,512 ±     1068,661  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       474,733 ±     1068,999    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,643 ±        5,342  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,643 ±        5,346    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         6,000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1569619,198 ±    50886,953   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        15,957 ±        0,514  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        16,000 ±        0,001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.writePlayJson                                                              128  thrpt    5     50176,071 ±      719,476   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      2114,580 ±       30,471  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     66328,008 ±        0,001    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2172,101 ±     1169,429  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     68128,302 ±    36497,713    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,042 ±        0,113  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         1,304 ±        3,552    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        16,000                 counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         7,000                     ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                               128  thrpt    5    299911,684 ±     3357,959   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                128  thrpt    5      1173,777 ±       12,820  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           128  thrpt    5      6160,001 ±        0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1075,568 ±     1417,387  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5      5646,409 ±     7460,675    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,033 ±        0,091  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,175 ±        0,478    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                     128  thrpt    5         8,000                 counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                      128  thrpt    5         3,000                     ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                    128  thrpt    5     31175,987 ±      477,480   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     128  thrpt    5      1701,875 ±       26,079  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                128  thrpt    5     85920,013 ±        0,002    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            128  thrpt    5      1761,941 ±     1428,778  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5     88938,972 ±    71842,130    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,025 ±        0,088  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         1,258 ±        4,414    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                          128  thrpt    5        13,000                 counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                           128  thrpt    5         5,000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                               128  thrpt    5    148064,395 ±     2344,313   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                128  thrpt    5      1809,359 ±       28,874  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           128  thrpt    5     19232,003 ±        0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       128  thrpt    5      1898,992 ±     1168,408  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  128  thrpt    5     20183,753 ±    12394,763    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   128  thrpt    5         0,050 ±        0,072  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              128  thrpt    5         0,531 ±        0,757    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                     128  thrpt    5        14,000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                      128  thrpt    5         6,000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                              128  thrpt    5    389865,049 ±     6671,926   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               128  thrpt    5      1856,767 ±       32,214  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          128  thrpt    5      7496,001 ±        0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      128  thrpt    5      1888,287 ±     1165,669  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7625,795 ±     4764,696    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,054 ±        0,091  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,218 ±        0,367    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    128  thrpt    5        14,000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     128  thrpt    5         5,000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      128  thrpt    5    460635,529 ±     6024,509   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       128  thrpt    5      1578,088 ±       20,488  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  128  thrpt    5      5392,001 ±        0,001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space              128  thrpt    5      1481,286 ±     1158,655  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm         128  thrpt    5      5058,937 ±     3887,967    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space          128  thrpt    5         0,037 ±        0,088  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm     128  thrpt    5         0,128 ±        0,299    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            128  thrpt    5        11,000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                             128  thrpt    5         5,000                     ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                   128  thrpt    5     21946,969 ±      200,655   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    128  thrpt    5       550,731 ±        4,947  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               128  thrpt    5     39496,319 ±        2,584    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           128  thrpt    5       539,754 ±     1161,862  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5     38676,791 ±    83255,184    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,062 ±        0,453  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         4,479 ±       32,518    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                         128  thrpt    5         4,000                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                          128  thrpt    5         2,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                     128  thrpt    5     92400,878 ±     1571,103   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                      128  thrpt    5      1909,151 ±       32,271  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                 128  thrpt    5     32520,005 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                             128  thrpt    5      1888,167 ±     1166,711  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5     32147,060 ±    19499,207    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±        0,067  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,426 ±        1,143    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                           128  thrpt    5        14,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                            128  thrpt    5         7,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                              128  thrpt    5    144198,849 ±     1226,529   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                               128  thrpt    5       713,153 ±        6,105  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                          128  thrpt    5      7784,003 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      128  thrpt    5       675,189 ±        2,061  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 128  thrpt    5      7369,658 ±       78,390    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  128  thrpt    5         0,017 ±        0,105  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             128  thrpt    5         0,182 ±        1,143    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                    128  thrpt    5         5,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                     128  thrpt    5         3,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                             128  thrpt    5    224527,125 ±     6106,331   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                              128  thrpt    5       924,399 ±       24,956  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         128  thrpt    5      6480,002 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     128  thrpt    5       941,169 ±     1417,613  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      6604,824 ±    10038,895    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,029 ±        0,108  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,205 ±        0,759    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                   128  thrpt    5         7,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                    128  thrpt    5         3,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                  128  thrpt    5     20120,502 ±      132,627   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                   128  thrpt    5      1151,893 ±        7,577  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                              128  thrpt    5     90104,022 ±        0,011    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          128  thrpt    5      1082,221 ±     1427,067  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5     84622,692 ±   111240,795    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,029 ±        0,091  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         2,278 ±        7,147    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                        128  thrpt    5         8,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                         128  thrpt    5         3,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                             128  thrpt    5    191888,082 ±     5005,963   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                              128  thrpt    5      1234,782 ±       32,170  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         128  thrpt    5     10128,002 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     128  thrpt    5      1217,451 ±     1162,671  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                128  thrpt    5      9990,231 ±     9592,369    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 128  thrpt    5         0,042 ±        0,170  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            128  thrpt    5         0,342 ±        1,393    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                   128  thrpt    5         9,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                    128  thrpt    5         8,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                            128  thrpt    5    580841,888 ±     9454,989   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                             128  thrpt    5       646,520 ±       10,803  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        128  thrpt    5      1752,001 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    128  thrpt    5       673,405 ±        4,782  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               128  thrpt    5      1824,887 ±       36,306    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                128  thrpt    5         0,642 ±        5,303  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           128  thrpt    5         1,751 ±       14,475    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                  128  thrpt    5         5,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                   128  thrpt    5         4,000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                    128  thrpt    5    604750,133 ±     3235,952   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     128  thrpt    5        12,296 ±        0,065  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                128  thrpt    5        32,001 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                          128  thrpt    5           ≈ 0                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                 128  thrpt    5     63722,742 ±      766,922   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                  128  thrpt    5      1304,656 ±       15,475  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                             128  thrpt    5     32224,007 ±        0,001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         128  thrpt    5      1218,138 ±     1165,495  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5     30092,048 ±    28850,505    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,012 ±        0,072  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,309 ±        1,777    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                       128  thrpt    5         9,000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                        128  thrpt    5         4,000                     ms
[info] MutableSetOfIntsBenchmark.readCirce                                                               128  thrpt    5     90217,873 ±     2132,888   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      1576,536 ±       36,942  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5     27504,005 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1615,532 ±     1417,881  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     28202,445 ±    25139,771    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,046 ±        0,154  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,800 ±        2,689    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                     128  thrpt    5        12,000                 counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                      128  thrpt    5         5,000                     ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                        128  thrpt    5    161387,033 ±      499,102   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       685,724 ±        1,991  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      6688,003 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       675,026 ±        1,701  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      6583,673 ±       32,510    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,004 ±        0,036  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,041 ±        0,349    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                 counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                       128  thrpt    5    236875,647 ±     2600,955   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       843,997 ±        9,149  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5      5608,002 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       941,693 ±     1420,658  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      6260,937 ±     9492,384    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,021 ±        0,179  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,139 ±        1,194    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         7,000                 counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4,000                     ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                            128  thrpt    5     48207,855 ±      547,847   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      1997,797 ±       22,601  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     65224,009 ±        0,002    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1896,328 ±     1161,840  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     61927,673 ±    38314,189    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,021 ±        0,057  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,680 ±        1,857    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        14,000                 counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5         6,000                     ms
[info] MutableSetOfIntsBenchmark.readUPickle                                                             128  thrpt    5    140242,258 ±     1379,255   ops/s
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1299,542 ±       12,958  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5     14584,003 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1345,046 ±        4,298  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5     15094,756 ±      163,042    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,029 ±        0,072  MB/sec
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,327 ±        0,803    B/op
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        10,000                 counts
[info] MutableSetOfIntsBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         4,000                     ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                              128  thrpt    5    291628,214 ±     4111,349   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5      1377,143 ±       19,632  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      7432,001 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5      1344,097 ±        5,609  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      7253,725 ±       84,444    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,029 ±        0,122  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,157 ±        0,655    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                    128  thrpt    5        10,000                 counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                       128  thrpt    5    573489,528 ±     3315,968   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       460,590 ±        2,713  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1264,001 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       372,107 ±     1332,837  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1021,964 ±     3659,911    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,075 ±        0,476  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,206 ±        1,309    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         3,000                 counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         3,000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                      128  thrpt    5    669635,161 ±    44160,367   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5       353,998 ±       23,343  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       832,001 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       306,973 ±     1079,054  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       718,456 ±     2525,704    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,005 ±        0,041  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,011 ±        0,094    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         3,000                 counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         6,000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5    869929,504 ±     6256,723   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻³                   B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                           128  thrpt    5     37426,052 ±      608,899   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5      1864,686 ±       30,630  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5     78416,011 ±        0,003    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1883,151 ±     1152,384  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     79213,359 ±    48952,530    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,042 ±        0,127  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         1,754 ±        5,353    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5        14,000                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         6,000                     ms
[info] MutableSetOfIntsBenchmark.writeUPickle                                                            128  thrpt    5    154533,557 ±      789,329   ops/s
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5      1149,151 ±        6,084  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5     11704,003 ±        0,001    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5      1210,122 ±     1158,154  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     12324,035 ±    11783,424    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±        0,072  MB/sec
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,297 ±        0,729    B/op
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         9,000                 counts
[info] MutableSetOfIntsBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         4,000                     ms
[info] NestedStructsBenchmark.readCirce                                                                  128  thrpt    5     74218,712 ±     1635,286   ops/s
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate                                                   128  thrpt    5      3361,608 ±       73,018  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.alloc.rate.norm                                              128  thrpt    5     71288,006 ±        0,001    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          128  thrpt    5      3392,789 ±       30,722  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     71950,315 ±      927,361    B/op
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,087 ±        0,200  MB/sec
[info] NestedStructsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,857 ±        4,270    B/op
[info] NestedStructsBenchmark.readCirce:·gc.count                                                        128  thrpt    5        25,000                 counts
[info] NestedStructsBenchmark.readCirce:·gc.time                                                         128  thrpt    5        10,000                     ms
[info] NestedStructsBenchmark.readJacksonScala                                                           128  thrpt    5    153587,590 ±      885,038   ops/s
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate                                            128  thrpt    5      1373,197 ±        8,199  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                       128  thrpt    5     14072,003 ±        0,001    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                   128  thrpt    5      1353,966 ±        5,868  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5     13874,977 ±      131,393    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,025 ±        0,067  MB/sec
[info] NestedStructsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,256 ±        0,686    B/op
[info] NestedStructsBenchmark.readJacksonScala:·gc.count                                                 128  thrpt    5        10,000                 counts
[info] NestedStructsBenchmark.readJacksonScala:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] NestedStructsBenchmark.readJsoniterScala                                                          128  thrpt    5    535438,061 ±     1831,250   ops/s
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate                                           128  thrpt    5      1398,955 ±        5,046  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      128  thrpt    5      4112,001 ±        0,001    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1480,218 ±     1156,257  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      4351,227 ±     3409,632    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,042 ±        0,057  MB/sec
[info] NestedStructsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,122 ±        0,167    B/op
[info] NestedStructsBenchmark.readJsoniterScala:·gc.count                                                128  thrpt    5        11,000                 counts
[info] NestedStructsBenchmark.readJsoniterScala:·gc.time                                                 128  thrpt    5         5,000                     ms
[info] NestedStructsBenchmark.readPlayJson                                                               128  thrpt    5     17983,574 ±      131,804   ops/s
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate                                                128  thrpt    5      2290,735 ±       16,192  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           128  thrpt    5    200488,024 ±        0,010    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2308,136 ±     1427,870  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5    202036,581 ±   125774,967    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,096 ±        0,263  MB/sec
[info] NestedStructsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         8,384 ±       23,117    B/op
[info] NestedStructsBenchmark.readPlayJson:·gc.count                                                     128  thrpt    5        17,000                 counts
[info] NestedStructsBenchmark.readPlayJson:·gc.time                                                      128  thrpt    5         9,000                     ms
[info] NestedStructsBenchmark.writeCirce                                                                 128  thrpt    5     45228,888 ±      302,532   ops/s
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate                                                  128  thrpt    5      2522,953 ±       16,445  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.alloc.rate.norm                                             128  thrpt    5     87792,009 ±        0,002    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         128  thrpt    5      2568,946 ±     1172,531  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    128  thrpt    5     89388,249 ±    40656,993    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     128  thrpt    5         0,104 ±        0,240  MB/sec
[info] NestedStructsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                128  thrpt    5         3,621 ±        8,371    B/op
[info] NestedStructsBenchmark.writeCirce:·gc.count                                                       128  thrpt    5        19,000                 counts
[info] NestedStructsBenchmark.writeCirce:·gc.time                                                        128  thrpt    5         8,000                     ms
[info] NestedStructsBenchmark.writeJacksonScala                                                          128  thrpt    5    252304,557 ±    26900,890   ops/s
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate                                           128  thrpt    5      1173,429 ±      125,127  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                      128  thrpt    5      7320,002 ±        0,001    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                  128  thrpt    5      1217,197 ±     1164,119  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      7570,621 ±     6951,440    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,037 ±        0,088  MB/sec
[info] NestedStructsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,233 ±        0,552    B/op
[info] NestedStructsBenchmark.writeJacksonScala:·gc.count                                                128  thrpt    5         9,000                 counts
[info] NestedStructsBenchmark.writeJacksonScala:·gc.time                                                 128  thrpt    5         4,000                     ms
[info] NestedStructsBenchmark.writeJsoniterScala                                                         128  thrpt    5   1264232,986 ±    40095,972   ops/s
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          128  thrpt    5       636,159 ±       20,198  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     128  thrpt    5       792,000 ±        0,001    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 128  thrpt    5       539,006 ±     1160,258  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       671,622 ±     1446,012    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,632 ±        5,309  MB/sec
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,798 ±        6,709    B/op
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.count                                               128  thrpt    5         4,000                 counts
[info] NestedStructsBenchmark.writeJsoniterScala:·gc.time                                                128  thrpt    5         2,000                     ms
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc                                                 128  thrpt    5   1291881,795 ±     3367,667   ops/s
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] NestedStructsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                       128  thrpt    5           ≈ 0                 counts
[info] NestedStructsBenchmark.writePlayJson                                                              128  thrpt    5     36967,670 ±      382,914   ops/s
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate                                               128  thrpt    5      1979,411 ±       20,193  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          128  thrpt    5     84280,012 ±        0,002    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2034,344 ±       10,667  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     86619,331 ±      740,605    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,058 ±        0,207  MB/sec
[info] NestedStructsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,482 ±        8,836    B/op
[info] NestedStructsBenchmark.writePlayJson:·gc.count                                                    128  thrpt    5        15,000                 counts
[info] NestedStructsBenchmark.writePlayJson:·gc.time                                                     128  thrpt    5         8,000                     ms
[info] PrimitivesBenchmark.readCirce                                                                     N/A  thrpt    5    798274,344 ±     5705,865   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      2479,125 ±       17,291  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5      4888,001 ±        0,001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2432,081 ±     1419,137  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5      4796,221 ±     2827,000    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,050 ±        0,091  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         0,098 ±        0,180    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        18,000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         7,000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                              N/A  thrpt    5   1698588,739 ±    10063,471   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5      1208,719 ±        7,326  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5      1120,000 ±        0,001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5      1217,909 ±     1166,336  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5      1128,664 ±     1082,639    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,025 ±        0,105  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,023 ±        0,097    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         9,000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         4,000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                             N/A  thrpt    5   8576167,057 ±   104982,744   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       261,544 ±        3,294  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5        48,000 ±        0,001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       306,884 ±     1078,741  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5        56,391 ±      198,225    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,005 ±        0,035  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,001 ±        0,006    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         3,000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         5,000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                  N/A  thrpt    5    263626,090 ±     2390,777   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1882,702 ±       17,157  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5     11240,002 ±        0,001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1898,635 ±     1167,820  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5     11336,687 ±     7008,637    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,033 ±        0,044  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5         0,199 ±        0,262    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        14,000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5         6,000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                    N/A  thrpt    5   1044640,607 ±     6949,557   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                     N/A  thrpt    5      1561,061 ±       10,359  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                N/A  thrpt    5      2352,000 ±        0,001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                            N/A  thrpt    5      1479,265 ±     1157,317  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                       N/A  thrpt    5      2228,834 ±     1745,850    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                        N/A  thrpt    5         0,029 ±        0,091  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                   N/A  thrpt    5         0,044 ±        0,138    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                          N/A  thrpt    5        11,000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                           N/A  thrpt    5         4,000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                             N/A  thrpt    5   2750541,030 ±    42568,116   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5      1132,419 ±       17,616  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5       648,000 ±        0,001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5      1216,643 ±     1164,359  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5       695,920 ±      662,698    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,033 ±        0,091  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,019 ±        0,052    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         9,000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         4,000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                            N/A  thrpt    5   6569021,342 ±    49412,099   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       734,557 ±        5,482  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5       176,000 ±        0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       807,864 ±     1157,753  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5       193,555 ±      277,206    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,656 ±        5,474  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5         0,157 ±        1,311    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         6,000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         4,000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5   6602222,663 ±    30011,043   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5       402,700 ±        1,811  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5        96,000 ±        0,001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                            N/A  thrpt    5       441,900 ±      989,388  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm                       N/A  thrpt    5       105,392 ±      236,044    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                        N/A  thrpt    5         0,646 ±        5,476  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm                   N/A  thrpt    5         0,154 ±        1,307    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5         4,000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                           N/A  thrpt    5         7,000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                 N/A  thrpt    5    384283,347 ±     2633,512   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                  N/A  thrpt    5      2181,752 ±       15,330  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                             N/A  thrpt    5      8936,001 ±        0,001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                         N/A  thrpt    5      2172,146 ±     1174,915  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                    N/A  thrpt    5      8896,010 ±     4785,354    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                     N/A  thrpt    5         0,050 ±        0,091  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                N/A  thrpt    5         0,205 ±        0,374    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                       N/A  thrpt    5        16,000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                        N/A  thrpt    5         7,000                     ms
[info] SetOfIntsBenchmark.readCirce                                                                      128  thrpt    5     77282,691 ±     1727,943   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                       128  thrpt    5      2209,267 ±       49,680  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                  128  thrpt    5     44992,006 ±        0,001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                              128  thrpt    5      2161,042 ±     1155,114  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                         128  thrpt    5     44024,645 ±    24095,484    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                          128  thrpt    5         0,042 ±        0,080  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                     128  thrpt    5         0,847 ±        1,628    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                            128  thrpt    5        16,000                 counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                             128  thrpt    5         6,000                     ms
[info] SetOfIntsBenchmark.readJacksonScala                                                               128  thrpt    5    124047,245 ±     2187,312   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                128  thrpt    5      1907,381 ±       34,128  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                           128  thrpt    5     24200,003 ±        0,001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                       128  thrpt    5      1899,516 ±     1167,711  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5     24111,796 ±    15083,816    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,054 ±        0,091  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,687 ±        1,162    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                     128  thrpt    5        14,000                 counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                      128  thrpt    5         6,000                     ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                              128  thrpt    5    175157,446 ±      479,389   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5      2572,976 ±        6,436  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5     23120,002 ±        0,001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5      2571,771 ±     1173,720  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5     23108,379 ±    10519,169    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,079 ±        0,088  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,711 ±        0,790    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        19,000                 counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5         7,000                     ms
[info] SetOfIntsBenchmark.readPlayJson                                                                   128  thrpt    5     58616,281 ±     1184,791   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5      3080,707 ±       62,350  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     82720,007 ±        0,001    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                           128  thrpt    5      3129,749 ±     1434,215  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     84032,272 ±    38298,711    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,087 ±        0,088  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         2,347 ±        2,338    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        23,000                 counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        10,000                     ms
[info] SetOfIntsBenchmark.readUPickle                                                                    128  thrpt    5     88989,425 ±      194,539   ops/s
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate                                                     128  thrpt    5      1814,692 ±        3,565  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.alloc.rate.norm                                                128  thrpt    5     32096,005 ±        0,001    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                            128  thrpt    5      1887,246 ±     1160,383  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                       128  thrpt    5     33378,462 ±    20504,835    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                        128  thrpt    5         0,033 ±        0,091  MB/sec
[info] SetOfIntsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                                   128  thrpt    5         0,589 ±        1,616    B/op
[info] SetOfIntsBenchmark.readUPickle:·gc.count                                                          128  thrpt    5        14,000                 counts
[info] SetOfIntsBenchmark.readUPickle:·gc.time                                                           128  thrpt    5         5,000                     ms
[info] SetOfIntsBenchmark.writeCirce                                                                     128  thrpt    5    281913,874 ±     1168,667   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                      128  thrpt    5      1341,259 ±        5,589  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                 128  thrpt    5      7488,001 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                             128  thrpt    5      1344,078 ±        5,324  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                        128  thrpt    5      7503,740 ±       27,987    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                         128  thrpt    5         0,033 ±        0,044  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                    128  thrpt    5         0,186 ±        0,245    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                           128  thrpt    5        10,000                 counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                            128  thrpt    5         3,000                     ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                              128  thrpt    5    643671,774 ±     7047,741   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5       556,184 ±        6,119  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5      1360,001 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                      128  thrpt    5       539,776 ±     1161,909  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      1318,921 ±     2839,130    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,071 ±        0,480  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         0,173 ±        1,170    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5         4,000                 counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5         3,000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                             128  thrpt    5    847666,477 ±    29645,763   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5       456,708 ±       15,858  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5       848,000 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                     128  thrpt    5       474,537 ±     1068,729  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5       882,515 ±     1994,089    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,640 ±        5,374  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         1,207 ±       10,142    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5         4,000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5         6,000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    697973,851 ±     6456,426   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5         7,096 ±        0,065  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5        16,001 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5           ≈ 0                 counts
[info] SetOfIntsBenchmark.writePlayJson                                                                  128  thrpt    5     38341,081 ±      279,583   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1910,296 ±       14,158  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     78416,011 ±        0,002    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                          128  thrpt    5      1884,390 ±     1169,671  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                     128  thrpt    5     77335,509 ±    47610,969    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                      128  thrpt    5         0,046 ±        0,154  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                                 128  thrpt    5         1,880 ±        6,320    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        14,000                 counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5         6,000                     ms
[info] SetOfIntsBenchmark.writeUPickle                                                                   128  thrpt    5    141848,824 ±     3862,521   ops/s
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate                                                    128  thrpt    5      1062,137 ±       28,757  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.alloc.rate.norm                                               128  thrpt    5     11784,003 ±        0,001    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                           128  thrpt    5      1075,715 ±     1417,240  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                                      128  thrpt    5     11941,019 ±    15800,279    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                       128  thrpt    5         0,017 ±        0,067  MB/sec
[info] SetOfIntsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                                  128  thrpt    5         0,184 ±        0,741    B/op
[info] SetOfIntsBenchmark.writeUPickle:·gc.count                                                         128  thrpt    5         8,000                 counts
[info] SetOfIntsBenchmark.writeUPickle:·gc.time                                                          128  thrpt    5         3,000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                             128  thrpt    5   5697282,727 ±    86381,524   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                              128  thrpt    5      4285,812 ±       65,043  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                         128  thrpt    5      1184,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     128  thrpt    5      4353,118 ±     1443,170  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      1202,741 ±      406,689    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,075 ±        0,146  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,021 ±        0,040    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                   128  thrpt    5        32,000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                    128  thrpt    5        12,000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                       128  thrpt    5   8664974,768 ±    72302,603   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                        128  thrpt    5       924,981 ±        7,476  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                   128  thrpt    5       168,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                               128  thrpt    5       941,255 ±     1416,597  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       171,033 ±      258,370    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,029 ±        0,156  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,005 ±        0,028    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                             128  thrpt    5         7,000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                              128  thrpt    5         4,000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                      128  thrpt    5   5380740,316 ±    46853,749   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                       128  thrpt    5      2543,488 ±       21,605  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  128  thrpt    5       744,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              128  thrpt    5      2443,300 ±     1434,167  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       714,804 ±      422,728    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,050 ±        0,091  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,015 ±        0,027    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                            128  thrpt    5        18,000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                             128  thrpt    5         7,000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                     128  thrpt    5   9130717,361 ±   194429,635   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                      128  thrpt    5       974,605 ±       20,655  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 128  thrpt    5       168,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       941,160 ±     1418,781  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       162,156 ±      243,416    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,017 ±        0,104  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,003 ±        0,018    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                           128  thrpt    5         7,000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                            128  thrpt    5         3,000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                          128  thrpt    5   6602384,540 ±    31013,427   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                           128  thrpt    5      3288,724 ±       15,439  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                      128  thrpt    5       784,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  128  thrpt    5      3254,233 ±     1193,506  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       775,803 ±      285,637    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,046 ±        0,067  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,011 ±        0,016    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                128  thrpt    5        24,000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                 128  thrpt    5        10,000                     ms
[info] StringOfAsciiCharsBenchmark.readUPickle                                                           128  thrpt    5   5092188,571 ±    55981,339   ops/s
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                            128  thrpt    5      2665,869 ±       29,812  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                       128  thrpt    5       824,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                   128  thrpt    5      2573,029 ±     1157,043  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5       795,301 ±      357,519    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,058 ±        0,067  MB/sec
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         0,018 ±        0,021    B/op
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.count                                                 128  thrpt    5        19,000                 counts
[info] StringOfAsciiCharsBenchmark.readUPickle:·gc.time                                                  128  thrpt    5         7,000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                            128  thrpt    5   3398098,248 ±    17102,874   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                             128  thrpt    5       811,795 ±        4,030  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                        128  thrpt    5       376,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    128  thrpt    5       806,628 ±     1155,668  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5       373,700 ±      537,078    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,029 ±        0,156  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,013 ±        0,072    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                  128  thrpt    5         6,000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                   128  thrpt    5         3,000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                      128  thrpt    5   6621254,634 ±   106674,519   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                       128  thrpt    5       639,450 ±       10,279  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                  128  thrpt    5       152,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                              128  thrpt    5       672,892 ±        4,308  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       159,951 ±        2,268    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,544 ±        4,547  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,129 ±        1,080    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                            128  thrpt    5         5,000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                             128  thrpt    5         5,000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                     128  thrpt    5   2337260,863 ±    16194,632   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                      128  thrpt    5       724,717 ±        5,184  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 128  thrpt    5       488,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             128  thrpt    5       672,391 ±        2,944  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        128  thrpt    5       452,766 ±        2,805    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         128  thrpt    5         0,025 ±        0,088  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    128  thrpt    5         0,017 ±        0,059    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                           128  thrpt    5         5,000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                            128  thrpt    5         2,000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                    128  thrpt    5   8942256,213 ±    35778,830   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                     128  thrpt    5       863,601 ±        3,572  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                128  thrpt    5       152,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            128  thrpt    5       941,741 ±     1420,590  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       165,793 ±      250,593    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,029 ±        0,134  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,005 ±        0,024    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                          128  thrpt    5         7,000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                           128  thrpt    5         3,000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                            128  thrpt    5   9089315,381 ±    47632,997   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  128  thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                         128  thrpt    5   3849222,453 ±   185882,171   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                          128  thrpt    5      1232,608 ±       59,278  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                     128  thrpt    5       504,000 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1207,025 ±     1153,556  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5       492,412 ±      456,400    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,029 ±        0,072  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,012 ±        0,029    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                               128  thrpt    5         9,000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                128  thrpt    5         4,000                     ms
[info] StringOfAsciiCharsBenchmark.writeUPickle                                                          128  thrpt    5    454356,441 ±    11412,550   ops/s
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate                                           128  thrpt    5       219,394 ±        5,533  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.alloc.rate.norm                                      128  thrpt    5       760,001 ±        0,001    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                  128  thrpt    5       204,634 ±     1078,974  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5       708,684 ±     3736,758    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,003 ±        0,026  MB/sec
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,010 ±        0,089    B/op
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.count                                                128  thrpt    5         2,000                 counts
[info] StringOfAsciiCharsBenchmark.writeUPickle:·gc.time                                                 128  thrpt    5         3,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                          128  thrpt    5   1692801,770 ±    39388,735   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                           128  thrpt    5      2994,141 ±       69,550  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                      128  thrpt    5      2784,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  128  thrpt    5      2981,688 ±     1420,360  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             128  thrpt    5      2772,661 ±     1328,660    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              128  thrpt    5         0,054 ±        0,072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         128  thrpt    5         0,050 ±        0,066    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                128  thrpt    5        22,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                 128  thrpt    5         9,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                    128  thrpt    5   2017133,131 ±    21817,785   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                     128  thrpt    5       563,928 ±        6,125  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                128  thrpt    5       440,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space                            128  thrpt    5       506,499 ±     1123,270  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Eden_Space.norm                       128  thrpt    5       395,507 ±      877,574    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space                        128  thrpt    5         0,534 ±        4,550  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.PS_Survivor_Space.norm                   128  thrpt    5         0,419 ±        3,566    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                          128  thrpt    5         4,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                           128  thrpt    5         5,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                   128  thrpt    5   1580373,976 ±    44961,322   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                    128  thrpt    5      1020,149 ±       29,173  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               128  thrpt    5      1016,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           128  thrpt    5       942,974 ±     1420,649  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       939,723 ±     1422,768    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,025 ±        0,105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,025 ±        0,104    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                         128  thrpt    5         7,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                          128  thrpt    5         3,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                  128  thrpt    5   2862521,504 ±     9772,757   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                   128  thrpt    5       800,146 ±        2,634  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              128  thrpt    5       440,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          128  thrpt    5       807,903 ±     1157,020  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       444,275 ±      636,410    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,025 ±        0,105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,014 ±        0,057    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                        128  thrpt    5         6,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                         128  thrpt    5         2,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                       128  thrpt    5   1288440,978 ±     5562,203   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                        128  thrpt    5       864,483 ±        3,722  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   128  thrpt    5      1056,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               128  thrpt    5       939,070 ±     1412,456  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1146,989 ±     1723,640    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,025 ±        0,105  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,031 ±        0,128    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                             128  thrpt    5         7,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                              128  thrpt    5         3,000                     ms
[info] StringOfNonAsciiCharsBenchmark.readUPickle                                                        128  thrpt    5   1221837,439 ±    11446,780   ops/s
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate                                         128  thrpt    5      1658,178 ±       15,143  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.alloc.rate.norm                                    128  thrpt    5      2136,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                128  thrpt    5      1616,289 ±     1420,241  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2082,544 ±     1840,882    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,037 ±        0,036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,048 ±        0,046    B/op
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.count                                              128  thrpt    5        12,000                 counts
[info] StringOfNonAsciiCharsBenchmark.readUPickle:·gc.time                                               128  thrpt    5         6,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                         128  thrpt    5   1963295,044 ±    41657,251   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                          128  thrpt    5      1646,564 ±       35,408  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                     128  thrpt    5      1320,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 128  thrpt    5      1614,971 ±     1425,899  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            128  thrpt    5      1294,340 ±     1135,056    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             128  thrpt    5         0,021 ±        0,057  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        128  thrpt    5         0,017 ±        0,045    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                               128  thrpt    5        12,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                128  thrpt    5        10,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                   128  thrpt    5   2957002,126 ±    16541,116   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                    128  thrpt    5       766,541 ±        4,315  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                               128  thrpt    5       408,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space                           128  thrpt    5       672,756 ±        3,173  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Eden_Space.norm                      128  thrpt    5       358,082 ±        1,346    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space                       128  thrpt    5         0,012 ±        0,072  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.PS_Survivor_Space.norm                  128  thrpt    5         0,007 ±        0,038    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                         128  thrpt    5         5,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                          128  thrpt    5         2,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                  128  thrpt    5   2983843,144 ±    91482,548   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                   128  thrpt    5      1410,489 ±       43,274  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              128  thrpt    5       744,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          128  thrpt    5      1485,174 ±     1152,577  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     128  thrpt    5       783,492 ±      610,134    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      128  thrpt    5         0,042 ±        0,160  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 128  thrpt    5         0,022 ±        0,085    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                        128  thrpt    5        11,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                         128  thrpt    5         5,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                 128  thrpt    5   2999404,607 ±    63119,928   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  128  thrpt    5       777,501 ±       16,317  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             128  thrpt    5       408,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         128  thrpt    5       672,876 ±        4,258  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    128  thrpt    5       353,104 ±        6,527    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     128  thrpt    5         0,017 ±        0,067  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                128  thrpt    5         0,009 ±        0,035    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                       128  thrpt    5         5,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                        128  thrpt    5         2,000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                         128  thrpt    5   3021542,052 ±   230582,141   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               128  thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                      128  thrpt    5   2968106,635 ±    32351,375   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                       128  thrpt    5      1433,224 ±       15,561  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  128  thrpt    5       760,000 ±        0,001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              128  thrpt    5      1476,763 ±     1151,901  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       783,042 ±      609,340    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,037 ±        0,088  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,020 ±        0,047    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                            128  thrpt    5        11,000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                             128  thrpt    5         5,000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                     N/A  thrpt    5     13582,642 ±      166,181   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                      N/A  thrpt    5      1974,669 ±       23,355  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                 N/A  thrpt    5    228824,419 ±       38,249    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                             N/A  thrpt    5      2020,965 ±       19,585  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                        N/A  thrpt    5    234190,721 ±     3244,338    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                         N/A  thrpt    5         0,079 ±        0,192  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                    N/A  thrpt    5         9,198 ±       22,249    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                           N/A  thrpt    5        15,000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                            N/A  thrpt    5         7,000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                              N/A  thrpt    5     17090,638 ±      415,586   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                               N/A  thrpt    5       241,564 ±        5,696  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                          N/A  thrpt    5     22246,418 ±       33,706    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                      N/A  thrpt    5       204,617 ±     1078,886  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                 N/A  thrpt    5     18917,575 ±    99748,440    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                  N/A  thrpt    5         0,006 ±        0,054  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                             N/A  thrpt    5         0,580 ±        4,991    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                    N/A  thrpt    5         2,000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                     N/A  thrpt    5         3,000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                             N/A  thrpt    5     41726,356 ±      795,964   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                              N/A  thrpt    5       386,416 ±        7,402  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     14576,010 ±        0,001    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       306,931 ±     1078,906  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     11601,406 ±    40781,725    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,013 ±        0,070  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,498 ±        2,640    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                   N/A  thrpt    5         3,000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                    N/A  thrpt    5         7,000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                  N/A  thrpt    5      4291,740 ±       96,037   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                   N/A  thrpt    5      1399,688 ±       31,244  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                              N/A  thrpt    5    513104,097 ±        0,012    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                          N/A  thrpt    5      1489,037 ±     1163,191  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                     N/A  thrpt    5    545775,061 ±   423603,381    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                      N/A  thrpt    5         0,029 ±        0,134  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                 N/A  thrpt    5        10,703 ±       49,158    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                        N/A  thrpt    5        11,000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                         N/A  thrpt    5        11,000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                             N/A  thrpt    5     69852,163 ±      731,709   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                              N/A  thrpt    5       892,068 ±        9,593  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                         N/A  thrpt    5     20100,013 ±        0,154    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                     N/A  thrpt    5       809,264 ±     1161,268  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                                N/A  thrpt    5     18233,805 ±    26155,079    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                 N/A  thrpt    5         0,025 ±        0,143  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                            N/A  thrpt    5         0,562 ±        3,226    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                   N/A  thrpt    5         6,000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                    N/A  thrpt    5         2,000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                            N/A  thrpt    5     96703,429 ±      631,517   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                             N/A  thrpt    5       632,099 ±        4,132  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                        N/A  thrpt    5     10288,004 ±        0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                    N/A  thrpt    5       538,973 ±     1160,187  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                               N/A  thrpt    5      8776,126 ±    18891,645    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                                N/A  thrpt    5         0,666 ±        5,553  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           N/A  thrpt    5        10,862 ±       90,618    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                  N/A  thrpt    5         4,000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                   N/A  thrpt    5         3,000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                    N/A  thrpt    5    104772,211 ±      675,763   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                     N/A  thrpt    5        12,781 ±        0,081  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                N/A  thrpt    5       192,004 ±        0,001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                          N/A  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.readCirce                                                               128  thrpt    5    427720,543 ±     2087,686   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                128  thrpt    5      2291,362 ±       12,202  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                           128  thrpt    5      8432,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       128  thrpt    5      2298,026 ±     1432,170  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  128  thrpt    5      8457,244 ±     5292,918    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   128  thrpt    5         0,033 ±        0,044  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              128  thrpt    5         0,123 ±        0,161    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                     128  thrpt    5        17,000                 counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                      128  thrpt    5         6,000                     ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                        128  thrpt    5    474699,315 ±     3728,297   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                         128  thrpt    5       567,040 ±        4,457  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    128  thrpt    5      1880,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                128  thrpt    5       671,978 ±        2,077  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           128  thrpt    5      2227,924 ±       20,946    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            128  thrpt    5         0,058 ±        0,286  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       128  thrpt    5         0,193 ±        0,944    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                              128  thrpt    5         5,000                 counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                               128  thrpt    5         3,000                     ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                       128  thrpt    5   1334195,713 ±     6197,107   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                        128  thrpt    5       698,486 ±        3,166  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   128  thrpt    5       824,000 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       673,386 ±        4,798  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5       794,392 ±        9,121    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,663 ±        5,394  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,782 ±        6,368    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                             128  thrpt    5         5,000                 counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                              128  thrpt    5         4,000                     ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                            128  thrpt    5    125216,788 ±     2240,485   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                             128  thrpt    5      4349,117 ±       77,802  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                        128  thrpt    5     54664,003 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    128  thrpt    5      4357,792 ±     1443,073  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5     54768,399 ±    17839,786    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,062 ±        0,080  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         0,784 ±        1,002    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                  128  thrpt    5        32,000                 counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                   128  thrpt    5        13,000                     ms
[info] VectorOfBooleansBenchmark.readUPickle                                                             128  thrpt    5    655917,373 ±    12342,691   ops/s
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate                                              128  thrpt    5      1913,700 ±       36,276  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.alloc.rate.norm                                         128  thrpt    5      4592,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space                                     128  thrpt    5      1888,357 ±     1156,730  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Eden_Space.norm                                128  thrpt    5      4533,290 ±     2824,222    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space                                 128  thrpt    5         0,042 ±        0,057  MB/sec
[info] VectorOfBooleansBenchmark.readUPickle:·gc.churn.PS_Survivor_Space.norm                            128  thrpt    5         0,100 ±        0,136    B/op
[info] VectorOfBooleansBenchmark.readUPickle:·gc.count                                                   128  thrpt    5        14,000                 counts
[info] VectorOfBooleansBenchmark.readUPickle:·gc.time                                                    128  thrpt    5         6,000                     ms
[info] VectorOfBooleansBenchmark.writeCirce                                                              128  thrpt    5    442180,944 ±     3809,111   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                               128  thrpt    5       703,479 ±        5,973  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                          128  thrpt    5      2504,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      128  thrpt    5       673,016 ±        6,296  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 128  thrpt    5      2395,585 ±       35,318    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  128  thrpt    5         0,694 ±        5,795  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             128  thrpt    5         2,474 ±       20,666    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                    128  thrpt    5         5,000                 counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                     128  thrpt    5         5,000                     ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                       128  thrpt    5    719130,436 ±     9145,199   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                        128  thrpt    5       548,293 ±        6,878  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   128  thrpt    5      1200,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               128  thrpt    5       539,786 ±     1161,931  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          128  thrpt    5      1180,919 ±     2542,100    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           128  thrpt    5         0,071 ±        0,395  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      128  thrpt    5         0,155 ±        0,862    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                             128  thrpt    5         4,000                 counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                              128  thrpt    5         2,000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                      128  thrpt    5   2241388,397 ±    12906,771   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                       128  thrpt    5      1036,726 ±        5,884  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  128  thrpt    5       728,000 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              128  thrpt    5       941,052 ±     1417,202  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         128  thrpt    5       661,020 ±      998,026    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          128  thrpt    5         0,021 ±        0,113  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     128  thrpt    5         0,015 ±        0,080    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                            128  thrpt    5         7,000                 counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                             128  thrpt    5         3,000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                              128  thrpt    5   2394682,599 ±     9237,058   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    128  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                           128  thrpt    5    419716,665 ±     6385,657   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                            128  thrpt    5       620,796 ±        9,470  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                       128  thrpt    5      2328,001 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   128  thrpt    5       537,654 ±     1157,352  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              128  thrpt    5      2014,315 ±     4336,213    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               128  thrpt    5         0,777 ±        6,555  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          128  thrpt    5         2,927 ±       24,700    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                 128  thrpt    5         4,000                 counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                  128  thrpt    5         4,000                     ms
[info] VectorOfBooleansBenchmark.writeUPickle                                                            128  thrpt    5    201426,935 ±     7108,548   ops/s
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate                                             128  thrpt    5       522,145 ±       18,468  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.alloc.rate.norm                                        128  thrpt    5      4080,002 ±        0,001    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space                                    128  thrpt    5       506,725 ±     1123,932  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Eden_Space.norm                               128  thrpt    5      3949,364 ±     8728,230    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space                                128  thrpt    5         0,643 ±        5,406  MB/sec
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.churn.PS_Survivor_Space.norm                           128  thrpt    5         5,007 ±       42,068    B/op
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.count                                                  128  thrpt    5         4,000                 counts
[info] VectorOfBooleansBenchmark.writeUPickle:·gc.time                                                   128  thrpt    5         5,000                     ms
[info] Benchmark result is saved to openjdk11.json
[success] Total time: 8112 s, completed 6 лип. 2018 15:06:55
